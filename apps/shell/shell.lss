
shell.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00005240  000052d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005240  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000074a  00800132  00800132  00005306  2**0
                  ALLOC
  3 .stab         000011e8  00000000  00000000  00005308  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004e9  00000000  00000000  000064f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  000069d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000074a  00000000  00000000  00006c19  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000052c4  00000000  00000000  00007363  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000199a  00000000  00000000  0000c627  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000042c9  00000000  00000000  0000dfc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006d0  00000000  00000000  0001228c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000148d  00000000  00000000  0001295c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000420d  00000000  00000000  00013de9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000338  00000000  00000000  00017ff6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__ctors_end>
       4:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
       8:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
       c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      10:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      14:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      18:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      1c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      20:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      24:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      28:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      2c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      30:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      34:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      38:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      3c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      40:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      44:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      48:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      4c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      50:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      54:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__vector_21>
      58:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__vector_22>
      5c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      60:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      64:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      68:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      6c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      70:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      74:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      78:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      7c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      80:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      84:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      88:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      8c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      90:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      94:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      98:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      9c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      a0:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      a4:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      a8:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>

000000ac <__c.2098>:
      ac:	75 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 3a     unknown command:
      bc:	20 00                                                .

000000be <__c.2095>:
      be:	61 64 63 00                                         adc.

000000c2 <__c.2093>:
      c2:	70 6c 61 79 20 00                                   play .

000000c8 <__c.2091>:
      c8:	65 72 72 6f 72 20 73 79 6e 63 69 6e 67 20 64 69     error syncing di
      d8:	73 6b 0a 00                                         sk..

000000dc <__c.2089>:
      dc:	73 79 6e 63 00                                      sync.

000000e1 <__c.2087>:
      e1:	65 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20 64     error creating d
      f1:	69 72 65 63 74 6f 72 79 3a 20 00                    irectory: .

000000fc <__c.2084>:
      fc:	6d 6b 64 69 72 20 00                                mkdir .

00000103 <__c.2081>:
     103:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     113:	20 66 69 6c 65 0a 00                                 file..

0000011a <__c.2077>:
     11a:	65 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 6f 6e     error seeking on
     12a:	20 00                                                .

0000012c <__c.2074>:
     12c:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

0000013b <__c.2067>:
     13b:	77 72 69 74 65 20 00                                write .

00000142 <__c.2065>:
     142:	65 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20 66     error creating f
     152:	69 6c 65 3a 20 00                                   ile: .

00000158 <__c.2062>:
     158:	74 6f 75 63 68 20 00                                touch .

0000015f <__c.2060>:
     15f:	65 72 72 6f 72 20 64 65 6c 65 74 69 6e 67 20 66     error deleting f
     16f:	69 6c 65 3a 20 00                                   ile: .

00000175 <__c.2057>:
     175:	72 6d 20 00                                         rm .

00000179 <__c.2055>:
     179:	65 72 72 6f 72 20 72 65 61 64 69 6e 67 20 64 69     error reading di
     189:	73 6b 20 69 6e 66 6f 0a 00                          sk info..

00000192 <__c.2053>:
     192:	64 69 73 6b 00                                      disk.

00000197 <__c.2037>:
     197:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

000001a6 <__c.2034>:
     1a6:	63 61 74 20 00                                      cat .

000001ab <__c.2024>:
     1ab:	6c 73 00                                            ls.

000001ae <__c.2022>:
     1ae:	64 69 72 65 63 74 6f 72 79 20 6e 6f 74 20 66 6f     directory not fo
     1be:	75 6e 64 3a 20 00                                   und: .

000001c4 <__c.2018>:
     1c4:	63 64 20 00                                         cd .

000001c8 <__c.2015>:
     1c8:	69 6e 69 74 00                                      init.

000001cd <__c.2010>:
     1cd:	6f 70 65 6e 69 6e 67 20 72 6f 6f 74 20 64 69 72     opening root dir
     1dd:	65 63 74 6f 72 79 20 66 61 69 6c 65 64 0a 00        ectory failed..

000001ec <__c.2006>:
     1ec:	6f 70 65 6e 69 6e 67 20 66 69 6c 65 73 79 73 74     opening filesyst
     1fc:	65 6d 20 66 61 69 6c 65 64 0a 00                    em failed..

00000207 <__c.2003>:
     207:	6f 70 65 6e 69 6e 67 20 70 61 72 74 69 74 69 6f     opening partitio
     217:	6e 20 66 61 69 6c 65 64 0a 00                       n failed..

00000221 <__c.1999>:
     221:	4d 4d 43 2f 53 44 20 69 6e 69 74 69 61 6c 69 7a     MMC/SD initializ
     231:	61 74 69 6f 6e 20 66 61 69 6c 65 64 0a 00           ation failed..

0000023f <__c.2239>:
     23f:	66 72 65 65 3a 20 20 20 00                          free:   .

00000248 <__c.2237>:
     248:	66 6f 72 6d 61 74 3a 20 00                          format: .

00000251 <__c.2235>:
     251:	77 72 2e 70 72 2e 3a 20 00                          wr.pr.: .

0000025a <__c.2233>:
     25a:	63 6f 70 79 3a 20 20 20 00                          copy:   .

00000263 <__c.2231>:
     263:	4d 42 0a 00                                         MB..

00000267 <__c.2229>:
     267:	73 69 7a 65 3a 20 20 20 00                          size:   .

00000270 <__c.2227>:
     270:	64 61 74 65 3a 20 20 20 00                          date:   .

00000279 <__c.2225>:
     279:	73 65 72 69 61 6c 3a 20 30 78 00                    serial: 0x.

00000284 <__c.2223>:
     284:	72 65 76 3a 20 20 20 20 00                          rev:    .

0000028d <__c.2221>:
     28d:	70 72 6f 64 3a 20 20 20 00                          prod:   .

00000296 <__c.2219>:
     296:	6f 65 6d 3a 20 20 20 20 00                          oem:    .

0000029f <__c.2217>:
     29f:	6d 61 6e 75 66 3a 20 20 30 78 00                    manuf:  0x.

000002aa <__c.1992>:
     2aa:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 25 73     error opening %s
     2ba:	0d 0a 00                                            ...

000002bd <__c.1981>:
     2bd:	45 6e 64 20 6f 66 20 66 69 6c 65 0d 0a 00           End of file...

000002cb <__c.1850>:
     2cb:	42 75 66 66 65 72 69 6e 67 20 65 72 72 6f 72 20     Buffering error 
     2db:	25 69 0d 0a 20 00 00                                %i.. ..

000002e2 <__ctors_end>:
     2e2:	11 24       	eor	r1, r1
     2e4:	1f be       	out	0x3f, r1	; 63
     2e6:	cf ef       	ldi	r28, 0xFF	; 255
     2e8:	da e0       	ldi	r29, 0x0A	; 10
     2ea:	de bf       	out	0x3e, r29	; 62
     2ec:	cd bf       	out	0x3d, r28	; 61

000002ee <__do_copy_data>:
     2ee:	11 e0       	ldi	r17, 0x01	; 1
     2f0:	a0 e0       	ldi	r26, 0x00	; 0
     2f2:	b1 e0       	ldi	r27, 0x01	; 1
     2f4:	e0 e4       	ldi	r30, 0x40	; 64
     2f6:	f2 e5       	ldi	r31, 0x52	; 82
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <.do_copy_data_start>

000002fa <.do_copy_data_loop>:
     2fa:	05 90       	lpm	r0, Z+
     2fc:	0d 92       	st	X+, r0

000002fe <.do_copy_data_start>:
     2fe:	a2 33       	cpi	r26, 0x32	; 50
     300:	b1 07       	cpc	r27, r17
     302:	d9 f7       	brne	.-10     	; 0x2fa <.do_copy_data_loop>

00000304 <__do_clear_bss>:
     304:	18 e0       	ldi	r17, 0x08	; 8
     306:	a2 e3       	ldi	r26, 0x32	; 50
     308:	b1 e0       	ldi	r27, 0x01	; 1
     30a:	01 c0       	rjmp	.+2      	; 0x30e <.do_clear_bss_start>

0000030c <.do_clear_bss_loop>:
     30c:	1d 92       	st	X+, r1

0000030e <.do_clear_bss_start>:
     30e:	ac 37       	cpi	r26, 0x7C	; 124
     310:	b1 07       	cpc	r27, r17
     312:	e1 f7       	brne	.-8      	; 0x30c <.do_clear_bss_loop>
     314:	0e 94 3e 07 	call	0xe7c	; 0xe7c <main>
     318:	0c 94 1e 29 	jmp	0x523c	; 0x523c <_exit>

0000031c <__bad_interrupt>:
     31c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000320 <find_file_in_dir>:

    return l;
}

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
     320:	ef 92       	push	r14
     322:	ff 92       	push	r15
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	eb 01       	movw	r28, r22
     32e:	8a 01       	movw	r16, r20
     330:	79 01       	movw	r14, r18
     332:	0b c0       	rjmp	.+22     	; 0x34a <find_file_in_dir+0x2a>
    while(fat_read_dir(dd, dir_entry))
     334:	c7 01       	movw	r24, r14
     336:	b8 01       	movw	r22, r16
     338:	0e 94 ca 25 	call	0x4b94	; 0x4b94 <strcmp>
    {
        if(strcmp(dir_entry->long_name, name) == 0)
     33c:	00 97       	sbiw	r24, 0x00	; 0
     33e:	29 f4       	brne	.+10     	; 0x34a <find_file_in_dir+0x2a>
        {
            fat_reset_dir(dd);
     340:	ce 01       	movw	r24, r28
     342:	0e 94 49 11 	call	0x2292	; 0x2292 <fat_reset_dir>
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	06 c0       	rjmp	.+12     	; 0x356 <find_file_in_dir+0x36>
    return l;
}

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
    while(fat_read_dir(dd, dir_entry))
     34a:	ce 01       	movw	r24, r28
     34c:	b7 01       	movw	r22, r14
     34e:	0e 94 4b 14 	call	0x2896	; 0x2896 <fat_read_dir>
     352:	88 23       	and	r24, r24
     354:	79 f7       	brne	.-34     	; 0x334 <find_file_in_dir+0x14>
            return 1;
        }
    }

    return 0;
}
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	1f 91       	pop	r17
     35c:	0f 91       	pop	r16
     35e:	ff 90       	pop	r15
     360:	ef 90       	pop	r14
     362:	08 95       	ret

00000364 <open_file_in_dir>:

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
     364:	ef 92       	push	r14
     366:	ff 92       	push	r15
     368:	0f 93       	push	r16
     36a:	1f 93       	push	r17
     36c:	df 93       	push	r29
     36e:	cf 93       	push	r28
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
     374:	ad 97       	sbiw	r28, 0x2d	; 45
     376:	0f b6       	in	r0, 0x3f	; 63
     378:	f8 94       	cli
     37a:	de bf       	out	0x3e, r29	; 62
     37c:	0f be       	out	0x3f, r0	; 63
     37e:	cd bf       	out	0x3d, r28	; 61
     380:	8c 01       	movw	r16, r24
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
     382:	7e 01       	movw	r14, r28
     384:	08 94       	sec
     386:	e1 1c       	adc	r14, r1
     388:	f1 1c       	adc	r15, r1
     38a:	97 01       	movw	r18, r14
     38c:	0e 94 90 01 	call	0x320	; 0x320 <find_file_in_dir>
     390:	88 23       	and	r24, r24
     392:	19 f4       	brne	.+6      	; 0x39a <open_file_in_dir+0x36>
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	05 c0       	rjmp	.+10     	; 0x3a4 <open_file_in_dir+0x40>
        return 0;

    return fat_open_file(fs, &file_entry);
     39a:	c8 01       	movw	r24, r16
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <fat_open_file>
     3a2:	9c 01       	movw	r18, r24
}
     3a4:	c9 01       	movw	r24, r18
     3a6:	ad 96       	adiw	r28, 0x2d	; 45
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	cd bf       	out	0x3d, r28	; 61
     3b2:	cf 91       	pop	r28
     3b4:	df 91       	pop	r29
     3b6:	1f 91       	pop	r17
     3b8:	0f 91       	pop	r16
     3ba:	ff 90       	pop	r15
     3bc:	ef 90       	pop	r14
     3be:	08 95       	ret

000003c0 <read_line>:
    
    return 0;
}

uint8_t read_line(char* buffer, uint8_t buffer_length)
{
     3c0:	cf 92       	push	r12
     3c2:	df 92       	push	r13
     3c4:	ef 92       	push	r14
     3c6:	ff 92       	push	r15
     3c8:	0f 93       	push	r16
     3ca:	1f 93       	push	r17
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	ec 01       	movw	r28, r24
     3d2:	16 2f       	mov	r17, r22
    memset(buffer, 0, buffer_length);
     3d4:	60 e0       	ldi	r22, 0x00	; 0
     3d6:	70 e0       	ldi	r23, 0x00	; 0
     3d8:	41 2f       	mov	r20, r17
     3da:	50 e0       	ldi	r21, 0x00	; 0
     3dc:	0e 94 b8 25 	call	0x4b70	; 0x4b70 <memset>
     3e0:	00 e0       	ldi	r16, 0x00	; 0

    uint8_t read_length = 0;
    while(read_length < buffer_length - 1)
     3e2:	c1 2e       	mov	r12, r17
     3e4:	dd 24       	eor	r13, r13
     3e6:	08 94       	sec
     3e8:	c1 08       	sbc	r12, r1
     3ea:	d1 08       	sbc	r13, r1
     3ec:	23 c0       	rjmp	.+70     	; 0x434 <read_line+0x74>
    {
        uint8_t c = uart_getc();
     3ee:	0e 94 12 06 	call	0xc24	; 0xc24 <uart_getc>
     3f2:	18 2f       	mov	r17, r24

        if(c == 0x08 || c == 0x7f)
     3f4:	88 30       	cpi	r24, 0x08	; 8
     3f6:	11 f0       	breq	.+4      	; 0x3fc <read_line+0x3c>
     3f8:	8f 37       	cpi	r24, 0x7F	; 127
     3fa:	89 f4       	brne	.+34     	; 0x41e <read_line+0x5e>
        {
            if(read_length < 1)
     3fc:	00 23       	and	r16, r16
     3fe:	d1 f0       	breq	.+52     	; 0x434 <read_line+0x74>
                continue;

            --read_length;
     400:	01 50       	subi	r16, 0x01	; 1
            buffer[read_length] = '\0';
     402:	fe 01       	movw	r30, r28
     404:	e0 0f       	add	r30, r16
     406:	f1 1d       	adc	r31, r1
     408:	10 82       	st	Z, r1

            uart_putc(0x08);
     40a:	88 e0       	ldi	r24, 0x08	; 8
     40c:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
            uart_putc(' ');
     410:	80 e2       	ldi	r24, 0x20	; 32
     412:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
            uart_putc(0x08);
     416:	88 e0       	ldi	r24, 0x08	; 8
     418:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
     41c:	0b c0       	rjmp	.+22     	; 0x434 <read_line+0x74>

            continue;
        }

        uart_putc(c);
     41e:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
     422:	fe 01       	movw	r30, r28
     424:	ee 0d       	add	r30, r14
     426:	ff 1d       	adc	r31, r15

        if(c == '\n')
     428:	1a 30       	cpi	r17, 0x0A	; 10
     42a:	11 f4       	brne	.+4      	; 0x430 <read_line+0x70>
        {
            buffer[read_length] = '\0';
     42c:	10 82       	st	Z, r1
     42e:	07 c0       	rjmp	.+14     	; 0x43e <read_line+0x7e>
            break;
        }
        else
        {
            buffer[read_length] = c;
     430:	10 83       	st	Z, r17
            ++read_length;
     432:	0f 5f       	subi	r16, 0xFF	; 255
uint8_t read_line(char* buffer, uint8_t buffer_length)
{
    memset(buffer, 0, buffer_length);

    uint8_t read_length = 0;
    while(read_length < buffer_length - 1)
     434:	e0 2e       	mov	r14, r16
     436:	ff 24       	eor	r15, r15
     438:	ec 14       	cp	r14, r12
     43a:	fd 04       	cpc	r15, r13
     43c:	c4 f2       	brlt	.-80     	; 0x3ee <read_line+0x2e>
            ++read_length;
        }
    }

    return read_length;
}
     43e:	80 2f       	mov	r24, r16
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	ff 90       	pop	r15
     44a:	ef 90       	pop	r14
     44c:	df 90       	pop	r13
     44e:	cf 90       	pop	r12
     450:	08 95       	ret

00000452 <shell_player_eof>:
static uint8_t IsPlaying = 0;
static struct fat_file_struct* player_fd = NULL;

void shell_player_eof(void)
{
  player_stop();
     452:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <player_stop>
  
  if (player_fd)
     456:	80 91 33 01 	lds	r24, 0x0133
     45a:	90 91 34 01 	lds	r25, 0x0134
     45e:	00 97       	sbiw	r24, 0x00	; 0
     460:	11 f0       	breq	.+4      	; 0x466 <shell_player_eof+0x14>
    fat_close_file(player_fd);
     462:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <fat_close_file>
  
  IsPlaying = 0;
     466:	10 92 32 01 	sts	0x0132, r1
  
  printf_P(PSTR("End of file\r\n"));
     46a:	00 d0       	rcall	.+0      	; 0x46c <shell_player_eof+0x1a>
     46c:	8d eb       	ldi	r24, 0xBD	; 189
     46e:	92 e0       	ldi	r25, 0x02	; 2
     470:	ed b7       	in	r30, 0x3d	; 61
     472:	fe b7       	in	r31, 0x3e	; 62
     474:	92 83       	std	Z+2, r25	; 0x02
     476:	81 83       	std	Z+1, r24	; 0x01
     478:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <printf_P>
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
}
     480:	08 95       	ret

00000482 <play_file>:
{
  printf("B");
}

void play_file(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
     482:	ef 92       	push	r14
     484:	ff 92       	push	r15
     486:	0f 93       	push	r16
     488:	1f 93       	push	r17
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	ec 01       	movw	r28, r24
     490:	8b 01       	movw	r16, r22
     492:	7a 01       	movw	r14, r20
  if (IsPlaying)
     494:	80 91 32 01 	lds	r24, 0x0132
     498:	88 23       	and	r24, r24
     49a:	61 f0       	breq	.+24     	; 0x4b4 <play_file+0x32>
  {
    player_stop();
     49c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <player_stop>
    
    if (player_fd)
     4a0:	80 91 33 01 	lds	r24, 0x0133
     4a4:	90 91 34 01 	lds	r25, 0x0134
     4a8:	00 97       	sbiw	r24, 0x00	; 0
     4aa:	11 f0       	breq	.+4      	; 0x4b0 <play_file+0x2e>
      fat_close_file(player_fd);
     4ac:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <fat_close_file>
    
    IsPlaying = 0;
     4b0:	10 92 32 01 	sts	0x0132, r1
  }
    
  /* search file in current directory and open it */
  player_fd = open_file_in_dir(fs, dd, name);
     4b4:	ce 01       	movw	r24, r28
     4b6:	b8 01       	movw	r22, r16
     4b8:	a7 01       	movw	r20, r14
     4ba:	0e 94 b2 01 	call	0x364	; 0x364 <open_file_in_dir>
     4be:	9c 01       	movw	r18, r24
     4c0:	90 93 34 01 	sts	0x0134, r25
     4c4:	80 93 33 01 	sts	0x0133, r24
  if(!player_fd)
     4c8:	00 97       	sbiw	r24, 0x00	; 0
     4ca:	89 f4       	brne	.+34     	; 0x4ee <play_file+0x6c>
  {
      printf_P(PSTR("error opening %s\r\n"), name);
     4cc:	00 d0       	rcall	.+0      	; 0x4ce <play_file+0x4c>
     4ce:	00 d0       	rcall	.+0      	; 0x4d0 <play_file+0x4e>
     4d0:	8a ea       	ldi	r24, 0xAA	; 170
     4d2:	92 e0       	ldi	r25, 0x02	; 2
     4d4:	ed b7       	in	r30, 0x3d	; 61
     4d6:	fe b7       	in	r31, 0x3e	; 62
     4d8:	92 83       	std	Z+2, r25	; 0x02
     4da:	81 83       	std	Z+1, r24	; 0x01
     4dc:	f4 82       	std	Z+4, r15	; 0x04
     4de:	e3 82       	std	Z+3, r14	; 0x03
     4e0:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <printf_P>
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	08 c0       	rjmp	.+16     	; 0x4fe <play_file+0x7c>
      return;
  }

  IsPlaying = 1;
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	80 93 32 01 	sts	0x0132, r24

  /* Start the playback */
  player_start(player_fd, &shell_player_eof);
     4f4:	c9 01       	movw	r24, r18
     4f6:	69 e2       	ldi	r22, 0x29	; 41
     4f8:	72 e0       	ldi	r23, 0x02	; 2
     4fa:	0e 94 88 0a 	call	0x1510	; 0x1510 <player_start>
}
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	ff 90       	pop	r15
     508:	ef 90       	pop	r14
     50a:	08 95       	ret

0000050c <application_main>:

int application_main()
{
     50c:	2f 92       	push	r2
     50e:	3f 92       	push	r3
     510:	4f 92       	push	r4
     512:	5f 92       	push	r5
     514:	6f 92       	push	r6
     516:	7f 92       	push	r7
     518:	8f 92       	push	r8
     51a:	9f 92       	push	r9
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	df 93       	push	r29
     52e:	cf 93       	push	r28
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
     534:	cd 59       	subi	r28, 0x9D	; 157
     536:	d0 40       	sbci	r29, 0x00	; 0
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	f8 94       	cli
     53c:	de bf       	out	0x3e, r29	; 62
     53e:	0f be       	out	0x3f, r0	; 63
     540:	cd bf       	out	0x3d, r28	; 61
    /* we will just use ordinary idle mode */
    set_sleep_mode(SLEEP_MODE_IDLE);
     542:	83 b7       	in	r24, 0x33	; 51
     544:	81 7f       	andi	r24, 0xF1	; 241
     546:	83 bf       	out	0x33, r24	; 51
			 *  \param[in] BaudRate     Serial baud rate, in bits per second
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate
			 */
			static inline void Serial_Init(const uint32_t BaudRate, const bool DoubleSpeed)
			{
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     548:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     54c:	88 e1       	ldi	r24, 0x18	; 24
     54e:	80 93 c9 00 	sts	0x00C9, r24
				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     552:	86 e0       	ldi	r24, 0x06	; 6
     554:	80 93 ca 00 	sts	0x00CA, r24
				
				DDRD  |= (1 << 3);	
     558:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     55a:	5a 9a       	sbi	0x0b, 2	; 11
				
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     55c:	87 e6       	ldi	r24, 0x67	; 103
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	90 93 cd 00 	sts	0x00CD, r25
     564:	80 93 cc 00 	sts	0x00CC, r24
			 */
			static inline void SerialStream_Init(const uint32_t BaudRate, const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);
				
				stdout = &USARTStream;
     568:	86 e1       	ldi	r24, 0x16	; 22
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	90 93 79 08 	sts	0x0879, r25
     570:	80 93 78 08 	sts	0x0878, r24
            uart_putc('>');
            uart_putc(' ');

            /* read command */
            char* command = buffer;
            if(read_line(command, sizeof(buffer)) < 1)
     574:	4d e0       	ldi	r20, 0x0D	; 13
     576:	44 2e       	mov	r4, r20
     578:	51 2c       	mov	r5, r1
     57a:	4c 0e       	add	r4, r28
     57c:	5d 1e       	adc	r5, r29
            }
            else if(strcmp_P(command, PSTR("ls")) == 0)
            {
                /* print directory listing */
                struct fat_dir_entry_struct dir_entry;
                while(fat_read_dir(dd, &dir_entry))
     57e:	ce 01       	movw	r24, r28
     580:	85 59       	subi	r24, 0x95	; 149
     582:	9f 4f       	sbci	r25, 0xFF	; 255
     584:	c6 56       	subi	r28, 0x66	; 102
     586:	df 4f       	sbci	r29, 0xFF	; 255
     588:	99 83       	std	Y+1, r25	; 0x01
     58a:	88 83       	st	Y, r24
     58c:	ca 59       	subi	r28, 0x9A	; 154
     58e:	d0 40       	sbci	r29, 0x00	; 0

                /* print file contents */
                uint8_t buffer[8];
                uint8_t size;
                uint32_t offset = 0;
                while((size = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
     590:	de 01       	movw	r26, r28
     592:	15 96       	adiw	r26, 0x05	; 5
     594:	c4 56       	subi	r28, 0x64	; 100
     596:	df 4f       	sbci	r29, 0xFF	; 255
     598:	b9 83       	std	Y+1, r27	; 0x01
     59a:	a8 83       	st	Y, r26
     59c:	cc 59       	subi	r28, 0x9C	; 156
     59e:	d0 40       	sbci	r29, 0x00	; 0
    SerialStream_Init(9600, false);

    while(1)
    {
        /* setup sd card slot */
        if(!sd_raw_init())
     5a0:	0e 94 3c 24 	call	0x4878	; 0x4878 <sd_raw_init>
     5a4:	88 23       	and	r24, r24
     5a6:	19 f4       	brne	.+6      	; 0x5ae <application_main+0xa2>
        {
#if DEBUG
            uart_puts_p(PSTR("MMC/SD initialization failed\n"));
     5a8:	81 e2       	ldi	r24, 0x21	; 33
     5aa:	92 e0       	ldi	r25, 0x02	; 2
     5ac:	48 c0       	rjmp	.+144    	; 0x63e <application_main+0x132>
#else
                                                            0,
                                                            0,
#endif
                                                            0
                                                           );
     5ae:	8e e0       	ldi	r24, 0x0E	; 14
     5b0:	93 e2       	ldi	r25, 0x23	; 35
     5b2:	6c ec       	ldi	r22, 0xCC	; 204
     5b4:	73 e2       	ldi	r23, 0x23	; 35
     5b6:	4e e1       	ldi	r20, 0x1E	; 30
     5b8:	52 e2       	ldi	r21, 0x22	; 34
     5ba:	25 ed       	ldi	r18, 0xD5	; 213
     5bc:	34 e2       	ldi	r19, 0x24	; 36
     5be:	00 e0       	ldi	r16, 0x00	; 0
     5c0:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <partition_open>
     5c4:	c8 56       	subi	r28, 0x68	; 104
     5c6:	df 4f       	sbci	r29, 0xFF	; 255
     5c8:	99 83       	std	Y+1, r25	; 0x01
     5ca:	88 83       	st	Y, r24
     5cc:	c8 59       	subi	r28, 0x98	; 152
     5ce:	d0 40       	sbci	r29, 0x00	; 0

        if(!partition)
     5d0:	89 2b       	or	r24, r25
     5d2:	b1 f4       	brne	.+44     	; 0x600 <application_main+0xf4>
        {
            /* If the partition did not open, assume the storage device
             * is a "superfloppy", i.e. has no MBR.
             */
            partition = partition_open(sd_raw_read,
     5d4:	8e e0       	ldi	r24, 0x0E	; 14
     5d6:	93 e2       	ldi	r25, 0x23	; 35
     5d8:	6c ec       	ldi	r22, 0xCC	; 204
     5da:	73 e2       	ldi	r23, 0x23	; 35
     5dc:	4e e1       	ldi	r20, 0x1E	; 30
     5de:	52 e2       	ldi	r21, 0x22	; 34
     5e0:	25 ed       	ldi	r18, 0xD5	; 213
     5e2:	34 e2       	ldi	r19, 0x24	; 36
     5e4:	0f ef       	ldi	r16, 0xFF	; 255
     5e6:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <partition_open>
     5ea:	c8 56       	subi	r28, 0x68	; 104
     5ec:	df 4f       	sbci	r29, 0xFF	; 255
     5ee:	99 83       	std	Y+1, r25	; 0x01
     5f0:	88 83       	st	Y, r24
     5f2:	c8 59       	subi	r28, 0x98	; 152
     5f4:	d0 40       	sbci	r29, 0x00	; 0
                                       0,
                                       0,
#endif
                                       -1
                                      );
            if(!partition)
     5f6:	89 2b       	or	r24, r25
     5f8:	19 f4       	brne	.+6      	; 0x600 <application_main+0xf4>
            {
#if DEBUG
                uart_puts_p(PSTR("opening partition failed\n"));
     5fa:	87 e0       	ldi	r24, 0x07	; 7
     5fc:	92 e0       	ldi	r25, 0x02	; 2
     5fe:	1f c0       	rjmp	.+62     	; 0x63e <application_main+0x132>
                continue;
            }
        }

        /* open file system */
        struct fat_fs_struct* fs = fat_open(partition);
     600:	c8 56       	subi	r28, 0x68	; 104
     602:	df 4f       	sbci	r29, 0xFF	; 255
     604:	88 81       	ld	r24, Y
     606:	99 81       	ldd	r25, Y+1	; 0x01
     608:	c8 59       	subi	r28, 0x98	; 152
     60a:	d0 40       	sbci	r29, 0x00	; 0
     60c:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <fat_open>
     610:	4c 01       	movw	r8, r24
        if(!fs)
     612:	00 97       	sbiw	r24, 0x00	; 0
     614:	19 f4       	brne	.+6      	; 0x61c <application_main+0x110>
        {
#if DEBUG
            uart_puts_p(PSTR("opening filesystem failed\n"));
     616:	8c ee       	ldi	r24, 0xEC	; 236
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	11 c0       	rjmp	.+34     	; 0x63e <application_main+0x132>
            continue;
        }

        /* open root directory */
        struct fat_dir_entry_struct directory;
        fat_get_dir_entry_of_path(fs, "/", &directory);
     61c:	8e 01       	movw	r16, r28
     61e:	02 5c       	subi	r16, 0xC2	; 194
     620:	1f 4f       	sbci	r17, 0xFF	; 255
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	71 e0       	ldi	r23, 0x01	; 1
     626:	a8 01       	movw	r20, r16
     628:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <fat_get_dir_entry_of_path>

        struct fat_dir_struct* dd = fat_open_dir(fs, &directory);
     62c:	c4 01       	movw	r24, r8
     62e:	b8 01       	movw	r22, r16
     630:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <fat_open_dir>
     634:	3c 01       	movw	r6, r24
        if(!dd)
     636:	00 97       	sbiw	r24, 0x00	; 0
     638:	29 f4       	brne	.+10     	; 0x644 <application_main+0x138>
        {
#if DEBUG
            uart_puts_p(PSTR("opening root directory failed\n"));
     63a:	8d ec       	ldi	r24, 0xCD	; 205
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <uart_puts_p>
     642:	ae cf       	rjmp	.-164    	; 0x5a0 <application_main+0x94>
            {
                /* print directory listing */
                struct fat_dir_entry_struct dir_entry;
                while(fat_read_dir(dd, &dir_entry))
                {
                    uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;
     644:	34 e2       	ldi	r19, 0x24	; 36
     646:	23 2e       	mov	r2, r19
        /* provide a simple shell */
        char buffer[24];
        while(1)
        {
            /* print prompt */
            uart_putc('>');
     648:	8e e3       	ldi	r24, 0x3E	; 62
     64a:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
            uart_putc(' ');
     64e:	80 e2       	ldi	r24, 0x20	; 32
     650:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>

            /* read command */
            char* command = buffer;
            if(read_line(command, sizeof(buffer)) < 1)
     654:	c2 01       	movw	r24, r4
     656:	68 e1       	ldi	r22, 0x18	; 24
     658:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <read_line>
     65c:	88 23       	and	r24, r24
     65e:	a1 f3       	breq	.-24     	; 0x648 <application_main+0x13c>
                continue;

            /* execute command */
            if(strcmp_P(command, PSTR("init")) == 0)
     660:	c2 01       	movw	r24, r4
     662:	68 ec       	ldi	r22, 0xC8	; 200
     664:	71 e0       	ldi	r23, 0x01	; 1
     666:	0e 94 98 25 	call	0x4b30	; 0x4b30 <strcmp_P>
     66a:	89 2b       	or	r24, r25
     66c:	09 f4       	brne	.+2      	; 0x670 <application_main+0x164>
     66e:	c3 c2       	rjmp	.+1414   	; 0xbf6 <__stack+0xf7>
            {
                break;
            }
            else if(strncmp_P(command, PSTR("cd "), 3) == 0)
     670:	c2 01       	movw	r24, r4
     672:	64 ec       	ldi	r22, 0xC4	; 196
     674:	71 e0       	ldi	r23, 0x01	; 1
     676:	43 e0       	ldi	r20, 0x03	; 3
     678:	50 e0       	ldi	r21, 0x00	; 0
     67a:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <strncmp_P>
     67e:	89 2b       	or	r24, r25
     680:	01 f5       	brne	.+64     	; 0x6c2 <application_main+0x1b6>
            {
                command += 3;
                if(command[0] == '\0')
     682:	88 89       	ldd	r24, Y+16	; 0x10
     684:	88 23       	and	r24, r24
     686:	01 f3       	breq	.-64     	; 0x648 <application_main+0x13c>
                    continue;

                /* change directory */
                struct fat_dir_entry_struct subdir_entry;
                if(find_file_in_dir(fs, dd, command, &subdir_entry))
     688:	c4 01       	movw	r24, r8
     68a:	b3 01       	movw	r22, r6
     68c:	ae 01       	movw	r20, r28
     68e:	40 5f       	subi	r20, 0xF0	; 240
     690:	5f 4f       	sbci	r21, 0xFF	; 255
     692:	9e 01       	movw	r18, r28
     694:	25 59       	subi	r18, 0x95	; 149
     696:	3f 4f       	sbci	r19, 0xFF	; 255
     698:	0e 94 90 01 	call	0x320	; 0x320 <find_file_in_dir>
     69c:	88 23       	and	r24, r24
     69e:	71 f0       	breq	.+28     	; 0x6bc <application_main+0x1b0>
                {
                    struct fat_dir_struct* dd_new = fat_open_dir(fs, &subdir_entry);
     6a0:	c4 01       	movw	r24, r8
     6a2:	be 01       	movw	r22, r28
     6a4:	65 59       	subi	r22, 0x95	; 149
     6a6:	7f 4f       	sbci	r23, 0xFF	; 255
     6a8:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <fat_open_dir>
     6ac:	8c 01       	movw	r16, r24
                    if(dd_new)
     6ae:	00 97       	sbiw	r24, 0x00	; 0
     6b0:	29 f0       	breq	.+10     	; 0x6bc <application_main+0x1b0>
                    {
                        fat_close_dir(dd);
     6b2:	c3 01       	movw	r24, r6
     6b4:	0e 94 43 11 	call	0x2286	; 0x2286 <fat_close_dir>
     6b8:	38 01       	movw	r6, r16
     6ba:	c6 cf       	rjmp	.-116    	; 0x648 <application_main+0x13c>
                        dd = dd_new;
                        continue;
                    }
                }

                uart_puts_p(PSTR("directory not found: "));
     6bc:	8e ea       	ldi	r24, 0xAE	; 174
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	82 c1       	rjmp	.+772    	; 0x9c6 <application_main+0x4ba>
                uart_puts(command);
                uart_putc('\n');
            }
            else if(strcmp_P(command, PSTR("ls")) == 0)
     6c2:	c2 01       	movw	r24, r4
     6c4:	6b ea       	ldi	r22, 0xAB	; 171
     6c6:	71 e0       	ldi	r23, 0x01	; 1
     6c8:	0e 94 98 25 	call	0x4b30	; 0x4b30 <strcmp_P>
     6cc:	89 2b       	or	r24, r25
     6ce:	e1 f1       	breq	.+120    	; 0x748 <application_main+0x23c>
     6d0:	45 c0       	rjmp	.+138    	; 0x75c <application_main+0x250>
            {
                /* print directory listing */
                struct fat_dir_entry_struct dir_entry;
                while(fat_read_dir(dd, &dir_entry))
                {
                    uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;
     6d2:	c6 56       	subi	r28, 0x66	; 102
     6d4:	df 4f       	sbci	r29, 0xFF	; 255
     6d6:	e8 81       	ld	r30, Y
     6d8:	f9 81       	ldd	r31, Y+1	; 0x01
     6da:	ca 59       	subi	r28, 0x9A	; 154
     6dc:	d0 40       	sbci	r29, 0x00	; 0
     6de:	01 90       	ld	r0, Z+
     6e0:	00 20       	and	r0, r0
     6e2:	e9 f7       	brne	.-6      	; 0x6de <application_main+0x1d2>
     6e4:	8f 01       	movw	r16, r30
     6e6:	01 50       	subi	r16, 0x01	; 1
     6e8:	10 40       	sbci	r17, 0x00	; 0
     6ea:	c6 56       	subi	r28, 0x66	; 102
     6ec:	df 4f       	sbci	r29, 0xFF	; 255
     6ee:	88 81       	ld	r24, Y
     6f0:	99 81       	ldd	r25, Y+1	; 0x01
     6f2:	ca 59       	subi	r28, 0x9A	; 154
     6f4:	d0 40       	sbci	r29, 0x00	; 0
     6f6:	08 1b       	sub	r16, r24
     6f8:	19 0b       	sbc	r17, r25

                    uart_puts(dir_entry.long_name);
     6fa:	ce 01       	movw	r24, r28
     6fc:	85 59       	subi	r24, 0x95	; 149
     6fe:	9f 4f       	sbci	r25, 0xFF	; 255
     700:	0e 94 3b 06 	call	0xc76	; 0xc76 <uart_puts>
                    uart_putc(dir_entry.attributes & FAT_ATTRIB_DIR ? '/' : ' ');
     704:	c5 57       	subi	r28, 0x75	; 117
     706:	df 4f       	sbci	r29, 0xFF	; 255
     708:	88 81       	ld	r24, Y
     70a:	cb 58       	subi	r28, 0x8B	; 139
     70c:	d0 40       	sbci	r29, 0x00	; 0
     70e:	84 fd       	sbrc	r24, 4
     710:	02 c0       	rjmp	.+4      	; 0x716 <application_main+0x20a>
     712:	80 e2       	ldi	r24, 0x20	; 32
     714:	01 c0       	rjmp	.+2      	; 0x718 <application_main+0x20c>
     716:	8f e2       	ldi	r24, 0x2F	; 47
            {
                /* print directory listing */
                struct fat_dir_entry_struct dir_entry;
                while(fat_read_dir(dd, &dir_entry))
                {
                    uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;
     718:	12 2d       	mov	r17, r2
     71a:	10 1b       	sub	r17, r16

                    uart_puts(dir_entry.long_name);
                    uart_putc(dir_entry.attributes & FAT_ATTRIB_DIR ? '/' : ' ');
     71c:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
     720:	04 c0       	rjmp	.+8      	; 0x72a <application_main+0x21e>
                    while(spaces--)
                        uart_putc(' ');
     722:	80 e2       	ldi	r24, 0x20	; 32
     724:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
     728:	11 50       	subi	r17, 0x01	; 1
                {
                    uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;

                    uart_puts(dir_entry.long_name);
                    uart_putc(dir_entry.attributes & FAT_ATTRIB_DIR ? '/' : ' ');
                    while(spaces--)
     72a:	11 23       	and	r17, r17
     72c:	d1 f7       	brne	.-12     	; 0x722 <application_main+0x216>
                        uart_putc(' ');
                    uart_putdw_dec(dir_entry.file_size);
     72e:	c0 57       	subi	r28, 0x70	; 112
     730:	df 4f       	sbci	r29, 0xFF	; 255
     732:	68 81       	ld	r22, Y
     734:	79 81       	ldd	r23, Y+1	; 0x01
     736:	8a 81       	ldd	r24, Y+2	; 0x02
     738:	9b 81       	ldd	r25, Y+3	; 0x03
     73a:	c0 59       	subi	r28, 0x90	; 144
     73c:	d0 40       	sbci	r29, 0x00	; 0
     73e:	0e 94 48 06 	call	0xc90	; 0xc90 <uart_putdw_dec>
                    uart_putc('\n');
     742:	8a e0       	ldi	r24, 0x0A	; 10
     744:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
            }
            else if(strcmp_P(command, PSTR("ls")) == 0)
            {
                /* print directory listing */
                struct fat_dir_entry_struct dir_entry;
                while(fat_read_dir(dd, &dir_entry))
     748:	c3 01       	movw	r24, r6
     74a:	be 01       	movw	r22, r28
     74c:	65 59       	subi	r22, 0x95	; 149
     74e:	7f 4f       	sbci	r23, 0xFF	; 255
     750:	0e 94 4b 14 	call	0x2896	; 0x2896 <fat_read_dir>
     754:	88 23       	and	r24, r24
     756:	09 f0       	breq	.+2      	; 0x75a <application_main+0x24e>
     758:	bc cf       	rjmp	.-136    	; 0x6d2 <application_main+0x1c6>
     75a:	76 cf       	rjmp	.-276    	; 0x648 <application_main+0x13c>
                        uart_putc(' ');
                    uart_putdw_dec(dir_entry.file_size);
                    uart_putc('\n');
                }
            }
            else if(strncmp_P(command, PSTR("cat "), 4) == 0)
     75c:	c2 01       	movw	r24, r4
     75e:	66 ea       	ldi	r22, 0xA6	; 166
     760:	71 e0       	ldi	r23, 0x01	; 1
     762:	44 e0       	ldi	r20, 0x04	; 4
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <strncmp_P>
     76a:	89 2b       	or	r24, r25
     76c:	09 f0       	breq	.+2      	; 0x770 <application_main+0x264>
     76e:	60 c0       	rjmp	.+192    	; 0x830 <application_main+0x324>
            {
                command += 4;
                if(command[0] == '\0')
     770:	89 89       	ldd	r24, Y+17	; 0x11
     772:	88 23       	and	r24, r24
     774:	09 f4       	brne	.+2      	; 0x778 <application_main+0x26c>
     776:	68 cf       	rjmp	.-304    	; 0x648 <application_main+0x13c>
                    continue;
                
                /* search file in current directory and open it */
                struct fat_file_struct* fd = open_file_in_dir(fs, dd, command);
     778:	8e 01       	movw	r16, r28
     77a:	0f 5e       	subi	r16, 0xEF	; 239
     77c:	1f 4f       	sbci	r17, 0xFF	; 255
     77e:	c4 01       	movw	r24, r8
     780:	b3 01       	movw	r22, r6
     782:	a8 01       	movw	r20, r16
     784:	0e 94 b2 01 	call	0x364	; 0x364 <open_file_in_dir>
     788:	5c 01       	movw	r10, r24
                if(!fd)
     78a:	00 97       	sbiw	r24, 0x00	; 0
     78c:	21 f0       	breq	.+8      	; 0x796 <application_main+0x28a>
     78e:	cc 24       	eor	r12, r12
     790:	dd 24       	eor	r13, r13
     792:	76 01       	movw	r14, r12
     794:	3f c0       	rjmp	.+126    	; 0x814 <application_main+0x308>
                {
                    uart_puts_p(PSTR("error opening "));
     796:	87 e9       	ldi	r24, 0x97	; 151
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	e2 c1       	rjmp	.+964    	; 0xb60 <__stack+0x61>
                uint8_t buffer[8];
                uint8_t size;
                uint32_t offset = 0;
                while((size = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
                {
                    uart_putdw_hex(offset);
     79c:	c7 01       	movw	r24, r14
     79e:	b6 01       	movw	r22, r12
     7a0:	0e 94 15 07 	call	0xe2a	; 0xe2a <uart_putdw_hex>
                    uart_putc(':');
     7a4:	8a e3       	ldi	r24, 0x3A	; 58
     7a6:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0b 5f       	subi	r16, 0xFB	; 251
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
                    for(uint8_t i = 0; i < 8; ++i)
                    {
                        uart_putc(' ');
     7b0:	80 e2       	ldi	r24, 0x20	; 32
     7b2:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
                        uart_putc_hex(buffer[i]);
     7b6:	d8 01       	movw	r26, r16
     7b8:	8d 91       	ld	r24, X+
     7ba:	8d 01       	movw	r16, r26
     7bc:	0e 94 ef 06 	call	0xdde	; 0xdde <uart_putc_hex>
                uint32_t offset = 0;
                while((size = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
                {
                    uart_putdw_hex(offset);
                    uart_putc(':');
                    for(uint8_t i = 0; i < 8; ++i)
     7c0:	04 15       	cp	r16, r4
     7c2:	15 05       	cpc	r17, r5
     7c4:	a9 f7       	brne	.-22     	; 0x7b0 <application_main+0x2a4>
                    {
                        uart_putc(' ');
                        uart_putc_hex(buffer[i]);
                    }
                    
                    uart_putc(' ');
     7c6:	80 e2       	ldi	r24, 0x20	; 32
     7c8:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
     7cc:	8e 01       	movw	r16, r28
     7ce:	0b 5f       	subi	r16, 0xFB	; 251
     7d0:	1f 4f       	sbci	r17, 0xFF	; 255
                    
                    /* Display printable characters */
                    for(uint8_t i = 0; i < size; ++i)
                    {
                        if ((buffer[i] >= 32) && (buffer[i] <= 126))
     7d2:	f8 01       	movw	r30, r16
     7d4:	90 81       	ld	r25, Z
     7d6:	89 2f       	mov	r24, r25
     7d8:	80 52       	subi	r24, 0x20	; 32
     7da:	8f 35       	cpi	r24, 0x5F	; 95
     7dc:	10 f4       	brcc	.+4      	; 0x7e2 <application_main+0x2d6>
                            uart_putc(buffer[i]);
     7de:	89 2f       	mov	r24, r25
     7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <application_main+0x2d8>
                        else
                            uart_putc('.');
     7e2:	8e e2       	ldi	r24, 0x2E	; 46
     7e4:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
     7e8:	0f 5f       	subi	r16, 0xFF	; 255
     7ea:	1f 4f       	sbci	r17, 0xFF	; 255
                    }
                    
                    uart_putc(' ');
                    
                    /* Display printable characters */
                    for(uint8_t i = 0; i < size; ++i)
     7ec:	80 2f       	mov	r24, r16
     7ee:	c4 56       	subi	r28, 0x64	; 100
     7f0:	df 4f       	sbci	r29, 0xFF	; 255
     7f2:	f8 81       	ld	r31, Y
     7f4:	cc 59       	subi	r28, 0x9C	; 156
     7f6:	d0 40       	sbci	r29, 0x00	; 0
     7f8:	8f 1b       	sub	r24, r31
     7fa:	83 15       	cp	r24, r3
     7fc:	50 f3       	brcs	.-44     	; 0x7d2 <application_main+0x2c6>
                            uart_putc(buffer[i]);
                        else
                            uart_putc('.');
                    }
                    
                    uart_putc('\n');
     7fe:	8a e0       	ldi	r24, 0x0A	; 10
     800:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
                    offset += 8;
     804:	88 e0       	ldi	r24, 0x08	; 8
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	a0 e0       	ldi	r26, 0x00	; 0
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	c8 0e       	add	r12, r24
     80e:	d9 1e       	adc	r13, r25
     810:	ea 1e       	adc	r14, r26
     812:	fb 1e       	adc	r15, r27

                /* print file contents */
                uint8_t buffer[8];
                uint8_t size;
                uint32_t offset = 0;
                while((size = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
     814:	c5 01       	movw	r24, r10
     816:	be 01       	movw	r22, r28
     818:	6b 5f       	subi	r22, 0xFB	; 251
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	48 e0       	ldi	r20, 0x08	; 8
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <fat_read_file>
     824:	38 2e       	mov	r3, r24
     826:	88 23       	and	r24, r24
     828:	09 f0       	breq	.+2      	; 0x82c <application_main+0x320>
     82a:	b8 cf       	rjmp	.-144    	; 0x79c <application_main+0x290>
                    
                    uart_putc('\n');
                    offset += 8;
                }

                fat_close_file(fd);
     82c:	c5 01       	movw	r24, r10
     82e:	5c c1       	rjmp	.+696    	; 0xae8 <application_main+0x5dc>
            }
            else if(strcmp_P(command, PSTR("disk")) == 0)
     830:	c2 01       	movw	r24, r4
     832:	62 e9       	ldi	r22, 0x92	; 146
     834:	71 e0       	ldi	r23, 0x01	; 1
     836:	0e 94 98 25 	call	0x4b30	; 0x4b30 <strcmp_P>
     83a:	89 2b       	or	r24, r25
     83c:	09 f0       	breq	.+2      	; 0x840 <application_main+0x334>
     83e:	9f c0       	rjmp	.+318    	; 0x97e <application_main+0x472>
{
    if(!fs)
        return 0;

    struct sd_raw_info disk_info;
    if(!sd_raw_get_info(&disk_info))
     840:	ce 01       	movw	r24, r28
     842:	85 96       	adiw	r24, 0x25	; 37
     844:	0e 94 01 21 	call	0x4202	; 0x4202 <sd_raw_get_info>
     848:	88 23       	and	r24, r24
     84a:	09 f4       	brne	.+2      	; 0x84e <application_main+0x342>
     84c:	e0 c1       	rjmp	.+960    	; 0xc0e <__stack+0x10f>
        return 0;

    uart_puts_p(PSTR("manuf:  0x")); uart_putc_hex(disk_info.manufacturer); uart_putc('\n');
     84e:	8f e9       	ldi	r24, 0x9F	; 159
     850:	92 e0       	ldi	r25, 0x02	; 2
     852:	0e 94 2d 06 	call	0xc5a	; 0xc5a <uart_puts_p>
     856:	8d a1       	ldd	r24, Y+37	; 0x25
     858:	0e 94 ef 06 	call	0xdde	; 0xdde <uart_putc_hex>
     85c:	8a e0       	ldi	r24, 0x0A	; 10
     85e:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
    uart_puts_p(PSTR("oem:    ")); uart_puts((char*) disk_info.oem); uart_putc('\n');
     862:	86 e9       	ldi	r24, 0x96	; 150
     864:	92 e0       	ldi	r25, 0x02	; 2
     866:	0e 94 2d 06 	call	0xc5a	; 0xc5a <uart_puts_p>
     86a:	ce 01       	movw	r24, r28
     86c:	86 96       	adiw	r24, 0x26	; 38
     86e:	0e 94 3b 06 	call	0xc76	; 0xc76 <uart_puts>
     872:	8a e0       	ldi	r24, 0x0A	; 10
     874:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
    uart_puts_p(PSTR("prod:   ")); uart_puts((char*) disk_info.product); uart_putc('\n');
     878:	8d e8       	ldi	r24, 0x8D	; 141
     87a:	92 e0       	ldi	r25, 0x02	; 2
     87c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <uart_puts_p>
     880:	ce 01       	movw	r24, r28
     882:	89 96       	adiw	r24, 0x29	; 41
     884:	0e 94 3b 06 	call	0xc76	; 0xc76 <uart_puts>
     888:	8a e0       	ldi	r24, 0x0A	; 10
     88a:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
    uart_puts_p(PSTR("rev:    ")); uart_putc_hex(disk_info.revision); uart_putc('\n');
     88e:	84 e8       	ldi	r24, 0x84	; 132
     890:	92 e0       	ldi	r25, 0x02	; 2
     892:	0e 94 2d 06 	call	0xc5a	; 0xc5a <uart_puts_p>
     896:	8f a5       	ldd	r24, Y+47	; 0x2f
     898:	0e 94 ef 06 	call	0xdde	; 0xdde <uart_putc_hex>
     89c:	8a e0       	ldi	r24, 0x0A	; 10
     89e:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
    uart_puts_p(PSTR("serial: 0x")); uart_putdw_hex(disk_info.serial); uart_putc('\n');
     8a2:	89 e7       	ldi	r24, 0x79	; 121
     8a4:	92 e0       	ldi	r25, 0x02	; 2
     8a6:	0e 94 2d 06 	call	0xc5a	; 0xc5a <uart_puts_p>
     8aa:	68 a9       	ldd	r22, Y+48	; 0x30
     8ac:	79 a9       	ldd	r23, Y+49	; 0x31
     8ae:	8a a9       	ldd	r24, Y+50	; 0x32
     8b0:	9b a9       	ldd	r25, Y+51	; 0x33
     8b2:	0e 94 15 07 	call	0xe2a	; 0xe2a <uart_putdw_hex>
     8b6:	8a e0       	ldi	r24, 0x0A	; 10
     8b8:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
    uart_puts_p(PSTR("date:   ")); uart_putw_dec(disk_info.manufacturing_month); uart_putc('/');
     8bc:	80 e7       	ldi	r24, 0x70	; 112
     8be:	92 e0       	ldi	r25, 0x02	; 2
     8c0:	0e 94 2d 06 	call	0xc5a	; 0xc5a <uart_puts_p>
     8c4:	8d a9       	ldd	r24, Y+53	; 0x35
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 b1 06 	call	0xd62	; 0xd62 <uart_putw_dec>
     8cc:	8f e2       	ldi	r24, 0x2F	; 47
     8ce:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
                                   uart_putw_dec(disk_info.manufacturing_year); uart_putc('\n');
     8d2:	8c a9       	ldd	r24, Y+52	; 0x34
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 b1 06 	call	0xd62	; 0xd62 <uart_putw_dec>
     8da:	8a e0       	ldi	r24, 0x0A	; 10
     8dc:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
    uart_puts_p(PSTR("size:   ")); uart_putdw_dec(disk_info.capacity / 1024 / 1024); uart_puts_p(PSTR("MB\n"));
     8e0:	87 e6       	ldi	r24, 0x67	; 103
     8e2:	92 e0       	ldi	r25, 0x02	; 2
     8e4:	0e 94 2d 06 	call	0xc5a	; 0xc5a <uart_puts_p>
     8e8:	6e a9       	ldd	r22, Y+54	; 0x36
     8ea:	7f a9       	ldd	r23, Y+55	; 0x37
     8ec:	88 ad       	ldd	r24, Y+56	; 0x38
     8ee:	99 ad       	ldd	r25, Y+57	; 0x39
     8f0:	24 e1       	ldi	r18, 0x14	; 20
     8f2:	96 95       	lsr	r25
     8f4:	87 95       	ror	r24
     8f6:	77 95       	ror	r23
     8f8:	67 95       	ror	r22
     8fa:	2a 95       	dec	r18
     8fc:	d1 f7       	brne	.-12     	; 0x8f2 <application_main+0x3e6>
     8fe:	0e 94 48 06 	call	0xc90	; 0xc90 <uart_putdw_dec>
     902:	83 e6       	ldi	r24, 0x63	; 99
     904:	92 e0       	ldi	r25, 0x02	; 2
     906:	0e 94 2d 06 	call	0xc5a	; 0xc5a <uart_puts_p>
    uart_puts_p(PSTR("copy:   ")); uart_putw_dec(disk_info.flag_copy); uart_putc('\n');
     90a:	8a e5       	ldi	r24, 0x5A	; 90
     90c:	92 e0       	ldi	r25, 0x02	; 2
     90e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <uart_puts_p>
     912:	8a ad       	ldd	r24, Y+58	; 0x3a
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	0e 94 b1 06 	call	0xd62	; 0xd62 <uart_putw_dec>
     91a:	8a e0       	ldi	r24, 0x0A	; 10
     91c:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
    uart_puts_p(PSTR("wr.pr.: ")); uart_putw_dec(disk_info.flag_write_protect_temp); uart_putc('/');
     920:	81 e5       	ldi	r24, 0x51	; 81
     922:	92 e0       	ldi	r25, 0x02	; 2
     924:	0e 94 2d 06 	call	0xc5a	; 0xc5a <uart_puts_p>
     928:	8c ad       	ldd	r24, Y+60	; 0x3c
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	0e 94 b1 06 	call	0xd62	; 0xd62 <uart_putw_dec>
     930:	8f e2       	ldi	r24, 0x2F	; 47
     932:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
                                   uart_putw_dec(disk_info.flag_write_protect); uart_putc('\n');
     936:	8b ad       	ldd	r24, Y+59	; 0x3b
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 b1 06 	call	0xd62	; 0xd62 <uart_putw_dec>
     93e:	8a e0       	ldi	r24, 0x0A	; 10
     940:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
    uart_puts_p(PSTR("format: ")); uart_putw_dec(disk_info.format); uart_putc('\n');
     944:	88 e4       	ldi	r24, 0x48	; 72
     946:	92 e0       	ldi	r25, 0x02	; 2
     948:	0e 94 2d 06 	call	0xc5a	; 0xc5a <uart_puts_p>
     94c:	8d ad       	ldd	r24, Y+61	; 0x3d
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 b1 06 	call	0xd62	; 0xd62 <uart_putw_dec>
     954:	8a e0       	ldi	r24, 0x0A	; 10
     956:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
    uart_puts_p(PSTR("free:   ")); uart_putdw_dec(fat_get_fs_free(fs)); uart_putc('/');
     95a:	8f e3       	ldi	r24, 0x3F	; 63
     95c:	92 e0       	ldi	r25, 0x02	; 2
     95e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <uart_puts_p>
     962:	c4 01       	movw	r24, r8
     964:	0e 94 02 13 	call	0x2604	; 0x2604 <fat_get_fs_free>
     968:	0e 94 48 06 	call	0xc90	; 0xc90 <uart_putdw_dec>
     96c:	8f e2       	ldi	r24, 0x2F	; 47
     96e:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
                                   uart_putdw_dec(fat_get_fs_size(fs)); uart_putc('\n');
     972:	c4 01       	movw	r24, r8
     974:	0e 94 c3 12 	call	0x2586	; 0x2586 <fat_get_fs_size>
     978:	0e 94 48 06 	call	0xc90	; 0xc90 <uart_putdw_dec>
     97c:	38 c1       	rjmp	.+624    	; 0xbee <__stack+0xef>
            {
                if(!print_disk_info(fs))
                    uart_puts_p(PSTR("error reading disk info\n"));
            }
#if FAT_WRITE_SUPPORT
            else if(strncmp_P(command, PSTR("rm "), 3) == 0)
     97e:	c2 01       	movw	r24, r4
     980:	65 e7       	ldi	r22, 0x75	; 117
     982:	71 e0       	ldi	r23, 0x01	; 1
     984:	43 e0       	ldi	r20, 0x03	; 3
     986:	50 e0       	ldi	r21, 0x00	; 0
     988:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <strncmp_P>
     98c:	89 2b       	or	r24, r25
     98e:	01 f5       	brne	.+64     	; 0x9d0 <application_main+0x4c4>
            {
                command += 3;
                if(command[0] == '\0')
     990:	88 89       	ldd	r24, Y+16	; 0x10
     992:	88 23       	and	r24, r24
     994:	09 f4       	brne	.+2      	; 0x998 <application_main+0x48c>
     996:	58 ce       	rjmp	.-848    	; 0x648 <application_main+0x13c>
                    continue;
                
                struct fat_dir_entry_struct file_entry;
                if(find_file_in_dir(fs, dd, command, &file_entry))
     998:	c4 01       	movw	r24, r8
     99a:	b3 01       	movw	r22, r6
     99c:	ae 01       	movw	r20, r28
     99e:	40 5f       	subi	r20, 0xF0	; 240
     9a0:	5f 4f       	sbci	r21, 0xFF	; 255
     9a2:	9e 01       	movw	r18, r28
     9a4:	25 59       	subi	r18, 0x95	; 149
     9a6:	3f 4f       	sbci	r19, 0xFF	; 255
     9a8:	0e 94 90 01 	call	0x320	; 0x320 <find_file_in_dir>
     9ac:	88 23       	and	r24, r24
     9ae:	49 f0       	breq	.+18     	; 0x9c2 <application_main+0x4b6>
                {
                    if(fat_delete_file(fs, &file_entry))
     9b0:	c4 01       	movw	r24, r8
     9b2:	be 01       	movw	r22, r28
     9b4:	65 59       	subi	r22, 0x95	; 149
     9b6:	7f 4f       	sbci	r23, 0xFF	; 255
     9b8:	0e 94 3d 12 	call	0x247a	; 0x247a <fat_delete_file>
     9bc:	88 23       	and	r24, r24
     9be:	09 f0       	breq	.+2      	; 0x9c2 <application_main+0x4b6>
     9c0:	43 ce       	rjmp	.-890    	; 0x648 <application_main+0x13c>
                        continue;
                }

                uart_puts_p(PSTR("error deleting file: "));
     9c2:	8f e5       	ldi	r24, 0x5F	; 95
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	0e 94 2d 06 	call	0xc5a	; 0xc5a <uart_puts_p>
                uart_puts(command);
     9ca:	ce 01       	movw	r24, r28
     9cc:	40 96       	adiw	r24, 0x10	; 16
     9ce:	0d c1       	rjmp	.+538    	; 0xbea <__stack+0xeb>
                uart_putc('\n');
            }
            else if(strncmp_P(command, PSTR("touch "), 6) == 0)
     9d0:	c2 01       	movw	r24, r4
     9d2:	68 e5       	ldi	r22, 0x58	; 88
     9d4:	71 e0       	ldi	r23, 0x01	; 1
     9d6:	46 e0       	ldi	r20, 0x06	; 6
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <strncmp_P>
     9de:	89 2b       	or	r24, r25
     9e0:	b9 f4       	brne	.+46     	; 0xa10 <application_main+0x504>
            {
                command += 6;
                if(command[0] == '\0')
     9e2:	8b 89       	ldd	r24, Y+19	; 0x13
     9e4:	88 23       	and	r24, r24
     9e6:	09 f4       	brne	.+2      	; 0x9ea <application_main+0x4de>
     9e8:	2f ce       	rjmp	.-930    	; 0x648 <application_main+0x13c>
                    continue;

                struct fat_dir_entry_struct file_entry;
                if(!fat_create_file(dd, command, &file_entry))
     9ea:	c3 01       	movw	r24, r6
     9ec:	be 01       	movw	r22, r28
     9ee:	6d 5e       	subi	r22, 0xED	; 237
     9f0:	7f 4f       	sbci	r23, 0xFF	; 255
     9f2:	ae 01       	movw	r20, r28
     9f4:	45 59       	subi	r20, 0x95	; 149
     9f6:	5f 4f       	sbci	r21, 0xFF	; 255
     9f8:	0e 94 ba 1a 	call	0x3574	; 0x3574 <fat_create_file>
     9fc:	88 23       	and	r24, r24
     9fe:	09 f0       	breq	.+2      	; 0xa02 <application_main+0x4f6>
     a00:	23 ce       	rjmp	.-954    	; 0x648 <application_main+0x13c>
                {
                    uart_puts_p(PSTR("error creating file: "));
     a02:	82 e4       	ldi	r24, 0x42	; 66
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	0e 94 2d 06 	call	0xc5a	; 0xc5a <uart_puts_p>
                    uart_puts(command);
     a0a:	ce 01       	movw	r24, r28
     a0c:	43 96       	adiw	r24, 0x13	; 19
     a0e:	ed c0       	rjmp	.+474    	; 0xbea <__stack+0xeb>
                    uart_putc('\n');
                }
            }
            else if(strncmp_P(command, PSTR("write "), 6) == 0)
     a10:	c2 01       	movw	r24, r4
     a12:	6b e3       	ldi	r22, 0x3B	; 59
     a14:	71 e0       	ldi	r23, 0x01	; 1
     a16:	46 e0       	ldi	r20, 0x06	; 6
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <strncmp_P>
     a1e:	89 2b       	or	r24, r25
     a20:	09 f0       	breq	.+2      	; 0xa24 <application_main+0x518>
     a22:	82 c0       	rjmp	.+260    	; 0xb28 <__stack+0x29>
            {
                command += 6;
                if(command[0] == '\0')
     a24:	8b 89       	ldd	r24, Y+19	; 0x13
     a26:	88 23       	and	r24, r24
     a28:	09 f4       	brne	.+2      	; 0xa2c <application_main+0x520>
     a2a:	0e ce       	rjmp	.-996    	; 0x648 <application_main+0x13c>
                    continue;
     a2c:	8e 01       	movw	r16, r28
     a2e:	0d 5e       	subi	r16, 0xED	; 237
     a30:	1f 4f       	sbci	r17, 0xFF	; 255
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <application_main+0x52c>

                char* offset_value = command;
                while(*offset_value != ' ' && *offset_value != '\0')
                    ++offset_value;
     a34:	0f 5f       	subi	r16, 0xFF	; 255
     a36:	1f 4f       	sbci	r17, 0xFF	; 255
                command += 6;
                if(command[0] == '\0')
                    continue;

                char* offset_value = command;
                while(*offset_value != ' ' && *offset_value != '\0')
     a38:	d8 01       	movw	r26, r16
     a3a:	8c 91       	ld	r24, X
     a3c:	80 32       	cpi	r24, 0x20	; 32
     a3e:	19 f0       	breq	.+6      	; 0xa46 <application_main+0x53a>
     a40:	88 23       	and	r24, r24
     a42:	c1 f7       	brne	.-16     	; 0xa34 <application_main+0x528>
     a44:	01 ce       	rjmp	.-1022   	; 0x648 <application_main+0x13c>
                    ++offset_value;

                if(*offset_value == ' ')
                    *offset_value++ = '\0';
     a46:	f8 01       	movw	r30, r16
     a48:	10 82       	st	Z, r1
                else
                    continue;

                /* search file in current directory and open it */
                struct fat_file_struct* fd = open_file_in_dir(fs, dd, command);
     a4a:	83 e1       	ldi	r24, 0x13	; 19
     a4c:	c8 2e       	mov	r12, r24
     a4e:	d1 2c       	mov	r13, r1
     a50:	cc 0e       	add	r12, r28
     a52:	dd 1e       	adc	r13, r29
     a54:	c4 01       	movw	r24, r8
     a56:	b3 01       	movw	r22, r6
     a58:	a6 01       	movw	r20, r12
     a5a:	0e 94 b2 01 	call	0x364	; 0x364 <open_file_in_dir>
     a5e:	7c 01       	movw	r14, r24
                if(!fd)
     a60:	00 97       	sbiw	r24, 0x00	; 0
     a62:	29 f0       	breq	.+10     	; 0xa6e <application_main+0x562>
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	50 e0       	ldi	r21, 0x00	; 0
     a6c:	1b c0       	rjmp	.+54     	; 0xaa4 <application_main+0x598>
                {
                    uart_puts_p(PSTR("error opening "));
     a6e:	8c e2       	ldi	r24, 0x2C	; 44
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	0e 94 2d 06 	call	0xc5a	; 0xc5a <uart_puts_p>
                    uart_puts(command);
     a76:	c6 01       	movw	r24, r12
     a78:	b8 c0       	rjmp	.+368    	; 0xbea <__stack+0xeb>

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
        l = l * 10 + (*str++ - '0');
     a7a:	ca 01       	movw	r24, r20
     a7c:	b9 01       	movw	r22, r18
     a7e:	2a e0       	ldi	r18, 0x0A	; 10
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	40 e0       	ldi	r20, 0x00	; 0
     a84:	50 e0       	ldi	r21, 0x00	; 0
     a86:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__mulsi3>
     a8a:	9b 01       	movw	r18, r22
     a8c:	ac 01       	movw	r20, r24
     a8e:	8d 2d       	mov	r24, r13
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	c0 97       	sbiw	r24, 0x30	; 48
     a94:	aa 27       	eor	r26, r26
     a96:	97 fd       	sbrc	r25, 7
     a98:	a0 95       	com	r26
     a9a:	ba 2f       	mov	r27, r26
     a9c:	28 0f       	add	r18, r24
     a9e:	39 1f       	adc	r19, r25
     aa0:	4a 1f       	adc	r20, r26
     aa2:	5b 1f       	adc	r21, r27
}

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
     aa4:	d8 01       	movw	r26, r16
     aa6:	11 96       	adiw	r26, 0x01	; 1
     aa8:	dc 90       	ld	r13, X
     aaa:	0f 5f       	subi	r16, 0xFF	; 255
     aac:	1f 4f       	sbci	r17, 0xFF	; 255
     aae:	8d 2d       	mov	r24, r13
     ab0:	80 53       	subi	r24, 0x30	; 48
     ab2:	8a 30       	cpi	r24, 0x0A	; 10
     ab4:	10 f3       	brcs	.-60     	; 0xa7a <application_main+0x56e>
                    uart_puts(command);
                    uart_putc('\n');
                    continue;
                }

                int32_t offset = strtolong(offset_value);
     ab6:	29 83       	std	Y+1, r18	; 0x01
     ab8:	3a 83       	std	Y+2, r19	; 0x02
     aba:	4b 83       	std	Y+3, r20	; 0x03
     abc:	5c 83       	std	Y+4, r21	; 0x04
                if(!fat_seek_file(fd, &offset, FAT_SEEK_SET))
     abe:	c7 01       	movw	r24, r14
     ac0:	be 01       	movw	r22, r28
     ac2:	6f 5f       	subi	r22, 0xFF	; 255
     ac4:	7f 4f       	sbci	r23, 0xFF	; 255
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	0e 94 8e 1c 	call	0x391c	; 0x391c <fat_seek_file>
     acc:	88 23       	and	r24, r24
     ace:	79 f4       	brne	.+30     	; 0xaee <application_main+0x5e2>
                {
                    uart_puts_p(PSTR("error seeking on "));
     ad0:	8a e1       	ldi	r24, 0x1A	; 26
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	0e 94 2d 06 	call	0xc5a	; 0xc5a <uart_puts_p>
                    uart_puts(command);
     ad8:	ce 01       	movw	r24, r28
     ada:	43 96       	adiw	r24, 0x13	; 19
     adc:	0e 94 3b 06 	call	0xc76	; 0xc76 <uart_puts>
                    uart_putc('\n');
     ae0:	8a e0       	ldi	r24, 0x0A	; 10
     ae2:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>

                    fat_close_file(fd);
     ae6:	c7 01       	movw	r24, r14
     ae8:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <fat_close_file>
     aec:	ad cd       	rjmp	.-1190   	; 0x648 <application_main+0x13c>
                /* read text from the shell and write it to the file */
                uint8_t data_len;
                while(1)
                {
                    /* give a different prompt */
                    uart_putc('<');
     aee:	8c e3       	ldi	r24, 0x3C	; 60
     af0:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
                    uart_putc(' ');
     af4:	80 e2       	ldi	r24, 0x20	; 32
     af6:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>

                    /* read one line of text */
                    data_len = read_line(buffer, sizeof(buffer));
     afa:	c2 01       	movw	r24, r4
     afc:	68 e1       	ldi	r22, 0x18	; 24
     afe:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <read_line>
     b02:	18 2f       	mov	r17, r24
                    if(!data_len)
     b04:	88 23       	and	r24, r24
     b06:	79 f3       	breq	.-34     	; 0xae6 <application_main+0x5da>
                        break;

                    /* write text to file */
                    if(fat_write_file(fd, (uint8_t*) buffer, data_len) != data_len)
     b08:	c7 01       	movw	r24, r14
     b0a:	b2 01       	movw	r22, r4
     b0c:	41 2f       	mov	r20, r17
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <fat_write_file>
     b14:	21 2f       	mov	r18, r17
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	82 17       	cp	r24, r18
     b1a:	93 07       	cpc	r25, r19
     b1c:	41 f3       	breq	.-48     	; 0xaee <application_main+0x5e2>
                    {
                        uart_puts_p(PSTR("error writing to file\n"));
     b1e:	83 e0       	ldi	r24, 0x03	; 3
     b20:	91 e0       	ldi	r25, 0x01	; 1
     b22:	0e 94 2d 06 	call	0xc5a	; 0xc5a <uart_puts_p>
     b26:	df cf       	rjmp	.-66     	; 0xae6 <application_main+0x5da>
                    }
                }

                fat_close_file(fd);
            }
            else if(strncmp_P(command, PSTR("mkdir "), 6) == 0)
     b28:	c2 01       	movw	r24, r4
     b2a:	6c ef       	ldi	r22, 0xFC	; 252
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	46 e0       	ldi	r20, 0x06	; 6
     b30:	50 e0       	ldi	r21, 0x00	; 0
     b32:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <strncmp_P>
     b36:	89 2b       	or	r24, r25
     b38:	b9 f4       	brne	.+46     	; 0xb68 <__stack+0x69>
            {
                command += 6;
                if(command[0] == '\0')
     b3a:	8b 89       	ldd	r24, Y+19	; 0x13
     b3c:	88 23       	and	r24, r24
     b3e:	09 f4       	brne	.+2      	; 0xb42 <__stack+0x43>
     b40:	83 cd       	rjmp	.-1274   	; 0x648 <application_main+0x13c>
                    continue;

                struct fat_dir_entry_struct dir_entry;
                if(!fat_create_dir(dd, command, &dir_entry))
     b42:	8e 01       	movw	r16, r28
     b44:	0d 5e       	subi	r16, 0xED	; 237
     b46:	1f 4f       	sbci	r17, 0xFF	; 255
     b48:	c3 01       	movw	r24, r6
     b4a:	b8 01       	movw	r22, r16
     b4c:	ae 01       	movw	r20, r28
     b4e:	45 59       	subi	r20, 0x95	; 149
     b50:	5f 4f       	sbci	r21, 0xFF	; 255
     b52:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <fat_create_dir>
     b56:	88 23       	and	r24, r24
     b58:	09 f0       	breq	.+2      	; 0xb5c <__stack+0x5d>
     b5a:	76 cd       	rjmp	.-1300   	; 0x648 <application_main+0x13c>
                {
                    uart_puts_p(PSTR("error creating directory: "));
     b5c:	81 ee       	ldi	r24, 0xE1	; 225
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 2d 06 	call	0xc5a	; 0xc5a <uart_puts_p>
                    uart_puts(command);
     b64:	c8 01       	movw	r24, r16
     b66:	41 c0       	rjmp	.+130    	; 0xbea <__stack+0xeb>
                    uart_putc('\n');
                }
            }
#endif
#if SD_RAW_WRITE_BUFFERING
            else if(strcmp_P(command, PSTR("sync")) == 0)
     b68:	c2 01       	movw	r24, r4
     b6a:	6c ed       	ldi	r22, 0xDC	; 220
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	0e 94 98 25 	call	0x4b30	; 0x4b30 <strcmp_P>
     b72:	89 2b       	or	r24, r25
     b74:	41 f4       	brne	.+16     	; 0xb86 <__stack+0x87>
            {
                if(!sd_raw_sync())
     b76:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <sd_raw_sync>
     b7a:	88 23       	and	r24, r24
     b7c:	09 f0       	breq	.+2      	; 0xb80 <__stack+0x81>
     b7e:	64 cd       	rjmp	.-1336   	; 0x648 <application_main+0x13c>
                    uart_puts_p(PSTR("error syncing disk\n"));
     b80:	88 ec       	ldi	r24, 0xC8	; 200
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	46 c0       	rjmp	.+140    	; 0xc12 <__stack+0x113>
            }
#endif
            else if(strncmp_P(command, PSTR("play "), 5) == 0)
     b86:	c2 01       	movw	r24, r4
     b88:	62 ec       	ldi	r22, 0xC2	; 194
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	45 e0       	ldi	r20, 0x05	; 5
     b8e:	50 e0       	ldi	r21, 0x00	; 0
     b90:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <strncmp_P>
     b94:	89 2b       	or	r24, r25
     b96:	61 f4       	brne	.+24     	; 0xbb0 <__stack+0xb1>
            {
                command += 5;
                if(command[0] == '\0')
     b98:	8a 89       	ldd	r24, Y+18	; 0x12
     b9a:	88 23       	and	r24, r24
     b9c:	09 f4       	brne	.+2      	; 0xba0 <__stack+0xa1>
     b9e:	54 cd       	rjmp	.-1368   	; 0x648 <application_main+0x13c>
                    continue;
                
                play_file(fs, dd, command);
     ba0:	c4 01       	movw	r24, r8
     ba2:	b3 01       	movw	r22, r6
     ba4:	ae 01       	movw	r20, r28
     ba6:	4e 5e       	subi	r20, 0xEE	; 238
     ba8:	5f 4f       	sbci	r21, 0xFF	; 255
     baa:	0e 94 41 02 	call	0x482	; 0x482 <play_file>
     bae:	4c cd       	rjmp	.-1384   	; 0x648 <application_main+0x13c>
            }
            else if(strncmp_P(command, PSTR("adc"), 3) == 0)
     bb0:	c2 01       	movw	r24, r4
     bb2:	6e eb       	ldi	r22, 0xBE	; 190
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	43 e0       	ldi	r20, 0x03	; 3
     bb8:	50 e0       	ldi	r21, 0x00	; 0
     bba:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <strncmp_P>
     bbe:	89 2b       	or	r24, r25
     bc0:	79 f4       	brne	.+30     	; 0xbe0 <__stack+0xe1>
            {
                set_buffer_event_handler(&buffer_event);
     bc2:	8c e0       	ldi	r24, 0x0C	; 12
     bc4:	96 e0       	ldi	r25, 0x06	; 6
     bc6:	0e 94 63 09 	call	0x12c6	; 0x12c6 <set_buffer_event_handler>
              
                adc_init();
     bca:	0e 94 24 08 	call	0x1048	; 0x1048 <adc_init>
                adc_start(&pcm_buffer[0], &pcm_buffer[PCM_BUFFER_SIZE], PCM_BUFFER_SIZE);
     bce:	87 e2       	ldi	r24, 0x27	; 39
     bd0:	94 e0       	ldi	r25, 0x04	; 4
     bd2:	67 e2       	ldi	r22, 0x27	; 39
     bd4:	76 e0       	ldi	r23, 0x06	; 6
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	52 e0       	ldi	r21, 0x02	; 2
     bda:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <adc_start>
     bde:	34 cd       	rjmp	.-1432   	; 0x648 <application_main+0x13c>
            }
            else
            {
                uart_puts_p(PSTR("unknown command: "));
     be0:	8c ea       	ldi	r24, 0xAC	; 172
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	0e 94 2d 06 	call	0xc5a	; 0xc5a <uart_puts_p>
                uart_puts(command);
     be8:	c2 01       	movw	r24, r4
     bea:	0e 94 3b 06 	call	0xc76	; 0xc76 <uart_puts>
                uart_putc('\n');
     bee:	8a e0       	ldi	r24, 0x0A	; 10
     bf0:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
     bf4:	29 cd       	rjmp	.-1454   	; 0x648 <application_main+0x13c>
            }
        }

        /* close file system */
        fat_close(fs);
     bf6:	c4 01       	movw	r24, r8
     bf8:	0e 94 ac 0c 	call	0x1958	; 0x1958 <fat_close>

        /* close partition */
        partition_close(partition);
     bfc:	c8 56       	subi	r28, 0x68	; 104
     bfe:	df 4f       	sbci	r29, 0xFF	; 255
     c00:	88 81       	ld	r24, Y
     c02:	99 81       	ldd	r25, Y+1	; 0x01
     c04:	c8 59       	subi	r28, 0x98	; 152
     c06:	d0 40       	sbci	r29, 0x00	; 0
     c08:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <partition_close>
     c0c:	c9 cc       	rjmp	.-1646   	; 0x5a0 <application_main+0x94>
                fat_close_file(fd);
            }
            else if(strcmp_P(command, PSTR("disk")) == 0)
            {
                if(!print_disk_info(fs))
                    uart_puts_p(PSTR("error reading disk info\n"));
     c0e:	89 e7       	ldi	r24, 0x79	; 121
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	0e 94 2d 06 	call	0xc5a	; 0xc5a <uart_puts_p>
     c16:	18 cd       	rjmp	.-1488   	; 0x648 <application_main+0x13c>

00000c18 <buffer_event>:
  printf_P(PSTR("End of file\r\n"));
}

void buffer_event(void)
{
  printf("B");
     c18:	82 e4       	ldi	r24, 0x42	; 66
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <putchar>
}
     c20:	08 95       	ret

00000c22 <uart_init>:

#include "uart.h"

void uart_init()
{
}
     c22:	08 95       	ret

00000c24 <uart_getc>:
    }
}

uint8_t uart_getc()
{
    uint8_t b = fgetc(stdout);
     c24:	80 91 78 08 	lds	r24, 0x0878
     c28:	90 91 79 08 	lds	r25, 0x0879
     c2c:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fgetc>
    if(b == '\r')
     c30:	8d 30       	cpi	r24, 0x0D	; 13
     c32:	09 f4       	brne	.+2      	; 0xc36 <uart_getc+0x12>
     c34:	8a e0       	ldi	r24, 0x0A	; 10
        b = '\n';

    return b;
}
     c36:	08 95       	ret

00000c38 <uart_putc>:
void uart_init()
{
}

void uart_putc(uint8_t c)
{
     c38:	1f 93       	push	r17
     c3a:	18 2f       	mov	r17, r24
    if(c == '\n')
     c3c:	8a 30       	cpi	r24, 0x0A	; 10
     c3e:	19 f4       	brne	.+6      	; 0xc46 <uart_putc+0xe>
        uart_putc('\r');
     c40:	8d e0       	ldi	r24, 0x0D	; 13
     c42:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>

    fputc(c, stdout);
     c46:	60 91 78 08 	lds	r22, 0x0878
     c4a:	70 91 79 08 	lds	r23, 0x0879
     c4e:	81 2f       	mov	r24, r17
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <fputc>
}
     c56:	1f 91       	pop	r17
     c58:	08 95       	ret

00000c5a <uart_puts_p>:
    while(*str)
        uart_putc(*str++);
}

void uart_puts_p(PGM_P str)
{
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	ec 01       	movw	r28, r24
     c60:	fe 01       	movw	r30, r28
    while(1)
    {
        uint8_t b = pgm_read_byte_near(str++);
     c62:	21 96       	adiw	r28, 0x01	; 1
     c64:	84 91       	lpm	r24, Z+
        if(!b)
     c66:	88 23       	and	r24, r24
     c68:	19 f0       	breq	.+6      	; 0xc70 <uart_puts_p+0x16>
            break;

        uart_putc(b);
     c6a:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
     c6e:	f8 cf       	rjmp	.-16     	; 0xc60 <uart_puts_p+0x6>
    }
}
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	08 95       	ret

00000c76 <uart_puts>:
        num /= 10;
    }
}

void uart_puts(const char* str)
{
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	ec 01       	movw	r28, r24
     c7c:	03 c0       	rjmp	.+6      	; 0xc84 <uart_puts+0xe>
    while(*str)
        uart_putc(*str++);
     c7e:	21 96       	adiw	r28, 0x01	; 1
     c80:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
    }
}

void uart_puts(const char* str)
{
    while(*str)
     c84:	88 81       	ld	r24, Y
     c86:	88 23       	and	r24, r24
     c88:	d1 f7       	brne	.-12     	; 0xc7e <uart_puts+0x8>
        uart_putc(*str++);
}
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	08 95       	ret

00000c90 <uart_putdw_dec>:
        num /= 10;
    }
}

void uart_putdw_dec(uint32_t dw)
{
     c90:	4f 92       	push	r4
     c92:	5f 92       	push	r5
     c94:	6f 92       	push	r6
     c96:	7f 92       	push	r7
     c98:	8f 92       	push	r8
     c9a:	9f 92       	push	r9
     c9c:	af 92       	push	r10
     c9e:	bf 92       	push	r11
     ca0:	cf 92       	push	r12
     ca2:	df 92       	push	r13
     ca4:	ef 92       	push	r14
     ca6:	ff 92       	push	r15
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	5b 01       	movw	r10, r22
     cb2:	6c 01       	movw	r12, r24
     cb4:	e1 2c       	mov	r14, r1
     cb6:	8a ec       	ldi	r24, 0xCA	; 202
     cb8:	f8 2e       	mov	r15, r24
     cba:	8a e9       	ldi	r24, 0x9A	; 154
     cbc:	08 2f       	mov	r16, r24
     cbe:	8b e3       	ldi	r24, 0x3B	; 59
     cc0:	18 2f       	mov	r17, r24
     cc2:	44 24       	eor	r4, r4
     cc4:	c0 e0       	ldi	r28, 0x00	; 0
     cc6:	d0 e0       	ldi	r29, 0x00	; 0
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = dw / num;
     cc8:	c6 01       	movw	r24, r12
     cca:	b5 01       	movw	r22, r10
     ccc:	a8 01       	movw	r20, r16
     cce:	97 01       	movw	r18, r14
     cd0:	0e 94 76 25 	call	0x4aec	; 0x4aec <__udivmodsi4>
     cd4:	92 2e       	mov	r9, r18
        if(b > 0 || started || num == 1)
     cd6:	22 23       	and	r18, r18
     cd8:	41 f4       	brne	.+16     	; 0xcea <uart_putdw_dec+0x5a>
     cda:	44 20       	and	r4, r4
     cdc:	31 f4       	brne	.+12     	; 0xcea <uart_putdw_dec+0x5a>
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	e8 16       	cp	r14, r24
     ce2:	f1 04       	cpc	r15, r1
     ce4:	01 05       	cpc	r16, r1
     ce6:	11 05       	cpc	r17, r1
     ce8:	31 f4       	brne	.+12     	; 0xcf6 <uart_putdw_dec+0x66>
        {
            uart_putc('0' + b);
     cea:	89 2d       	mov	r24, r9
     cec:	80 5d       	subi	r24, 0xD0	; 208
     cee:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
     cf2:	44 24       	eor	r4, r4
     cf4:	43 94       	inc	r4
            started = 1;
        }
        dw -= b * num;

        num /= 10;
     cf6:	c8 01       	movw	r24, r16
     cf8:	b7 01       	movw	r22, r14
     cfa:	2a e0       	ldi	r18, 0x0A	; 10
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	40 e0       	ldi	r20, 0x00	; 0
     d00:	50 e0       	ldi	r21, 0x00	; 0
     d02:	0e 94 76 25 	call	0x4aec	; 0x4aec <__udivmodsi4>
     d06:	82 2e       	mov	r8, r18
     d08:	73 2e       	mov	r7, r19
     d0a:	64 2e       	mov	r6, r20
     d0c:	55 2e       	mov	r5, r21
     d0e:	21 96       	adiw	r28, 0x01	; 1
void uart_putdw_dec(uint32_t dw)
{
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
     d10:	ca 30       	cpi	r28, 0x0A	; 10
     d12:	d1 05       	cpc	r29, r1
     d14:	a9 f0       	breq	.+42     	; 0xd40 <uart_putdw_dec+0xb0>
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
        }
        dw -= b * num;
     d16:	69 2d       	mov	r22, r9
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	a8 01       	movw	r20, r16
     d20:	97 01       	movw	r18, r14
     d22:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__mulsi3>
     d26:	a6 1a       	sub	r10, r22
     d28:	b7 0a       	sbc	r11, r23
     d2a:	c8 0a       	sbc	r12, r24
     d2c:	d9 0a       	sbc	r13, r25
     d2e:	28 2d       	mov	r18, r8
     d30:	37 2d       	mov	r19, r7
     d32:	46 2d       	mov	r20, r6
     d34:	55 2d       	mov	r21, r5
     d36:	c9 01       	movw	r24, r18
     d38:	da 01       	movw	r26, r20
     d3a:	7c 01       	movw	r14, r24
     d3c:	8d 01       	movw	r16, r26
     d3e:	c4 cf       	rjmp	.-120    	; 0xcc8 <uart_putdw_dec+0x38>

        num /= 10;
    }
}
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	1f 91       	pop	r17
     d46:	0f 91       	pop	r16
     d48:	ff 90       	pop	r15
     d4a:	ef 90       	pop	r14
     d4c:	df 90       	pop	r13
     d4e:	cf 90       	pop	r12
     d50:	bf 90       	pop	r11
     d52:	af 90       	pop	r10
     d54:	9f 90       	pop	r9
     d56:	8f 90       	pop	r8
     d58:	7f 90       	pop	r7
     d5a:	6f 90       	pop	r6
     d5c:	5f 90       	pop	r5
     d5e:	4f 90       	pop	r4
     d60:	08 95       	ret

00000d62 <uart_putw_dec>:
    uart_putw_hex((uint16_t) (dw >> 16));
    uart_putw_hex((uint16_t) (dw & 0xffff));
}

void uart_putw_dec(uint16_t w)
{
     d62:	cf 92       	push	r12
     d64:	df 92       	push	r13
     d66:	ff 92       	push	r15
     d68:	0f 93       	push	r16
     d6a:	1f 93       	push	r17
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	6c 01       	movw	r12, r24
     d72:	c0 e1       	ldi	r28, 0x10	; 16
     d74:	d7 e2       	ldi	r29, 0x27	; 39
     d76:	40 e0       	ldi	r20, 0x00	; 0
     d78:	00 e0       	ldi	r16, 0x00	; 0
     d7a:	10 e0       	ldi	r17, 0x00	; 0
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = w / num;
     d7c:	c6 01       	movw	r24, r12
     d7e:	be 01       	movw	r22, r28
     d80:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <__udivmodhi4>
     d84:	f6 2e       	mov	r15, r22
        if(b > 0 || started || num == 1)
     d86:	66 23       	and	r22, r22
     d88:	29 f4       	brne	.+10     	; 0xd94 <uart_putw_dec+0x32>
     d8a:	44 23       	and	r20, r20
     d8c:	19 f4       	brne	.+6      	; 0xd94 <uart_putw_dec+0x32>
     d8e:	c1 30       	cpi	r28, 0x01	; 1
     d90:	d1 05       	cpc	r29, r1
     d92:	29 f4       	brne	.+10     	; 0xd9e <uart_putw_dec+0x3c>
        {
            uart_putc('0' + b);
     d94:	8f 2d       	mov	r24, r15
     d96:	80 5d       	subi	r24, 0xD0	; 208
     d98:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
     d9c:	41 e0       	ldi	r20, 0x01	; 1
            started = 1;
        }
        w -= b * num;

        num /= 10;
     d9e:	ce 01       	movw	r24, r28
     da0:	6a e0       	ldi	r22, 0x0A	; 10
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <__udivmodhi4>
     da8:	0f 5f       	subi	r16, 0xFF	; 255
     daa:	1f 4f       	sbci	r17, 0xFF	; 255
void uart_putw_dec(uint16_t w)
{
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
     dac:	05 30       	cpi	r16, 0x05	; 5
     dae:	11 05       	cpc	r17, r1
     db0:	71 f0       	breq	.+28     	; 0xdce <uart_putw_dec+0x6c>
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
        }
        w -= b * num;
     db2:	8f 2d       	mov	r24, r15
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	9c 01       	movw	r18, r24
     db8:	2c 9f       	mul	r18, r28
     dba:	c0 01       	movw	r24, r0
     dbc:	2d 9f       	mul	r18, r29
     dbe:	90 0d       	add	r25, r0
     dc0:	3c 9f       	mul	r19, r28
     dc2:	90 0d       	add	r25, r0
     dc4:	11 24       	eor	r1, r1
     dc6:	c8 1a       	sub	r12, r24
     dc8:	d9 0a       	sbc	r13, r25
     dca:	eb 01       	movw	r28, r22
     dcc:	d7 cf       	rjmp	.-82     	; 0xd7c <uart_putw_dec+0x1a>

        num /= 10;
    }
}
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	ff 90       	pop	r15
     dd8:	df 90       	pop	r13
     dda:	cf 90       	pop	r12
     ddc:	08 95       	ret

00000dde <uart_putc_hex>:

    fputc(c, stdout);
}

void uart_putc_hex(uint8_t b)
{
     dde:	1f 93       	push	r17
     de0:	18 2f       	mov	r17, r24
    /* upper nibble */
    if((b >> 4) < 0x0a)
     de2:	82 95       	swap	r24
     de4:	8f 70       	andi	r24, 0x0F	; 15
     de6:	8a 30       	cpi	r24, 0x0A	; 10
     de8:	10 f4       	brcc	.+4      	; 0xdee <uart_putc_hex+0x10>
        uart_putc((b >> 4) + '0');
     dea:	80 5d       	subi	r24, 0xD0	; 208
     dec:	01 c0       	rjmp	.+2      	; 0xdf0 <uart_putc_hex+0x12>
    else
        uart_putc((b >> 4) - 0x0a + 'a');
     dee:	89 5a       	subi	r24, 0xA9	; 169
     df0:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>

    /* lower nibble */
    if((b & 0x0f) < 0x0a)
     df4:	81 2f       	mov	r24, r17
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	8f 70       	andi	r24, 0x0F	; 15
     dfa:	90 70       	andi	r25, 0x00	; 0
     dfc:	21 2f       	mov	r18, r17
     dfe:	2f 70       	andi	r18, 0x0F	; 15
     e00:	0a 97       	sbiw	r24, 0x0a	; 10
     e02:	1c f4       	brge	.+6      	; 0xe0a <uart_putc_hex+0x2c>
        uart_putc((b & 0x0f) + '0');
     e04:	82 2f       	mov	r24, r18
     e06:	80 5d       	subi	r24, 0xD0	; 208
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <uart_putc_hex+0x30>
    else
        uart_putc((b & 0x0f) - 0x0a + 'a');
     e0a:	82 2f       	mov	r24, r18
     e0c:	89 5a       	subi	r24, 0xA9	; 169
     e0e:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
}
     e12:	1f 91       	pop	r17
     e14:	08 95       	ret

00000e16 <uart_putw_hex>:

void uart_putw_hex(uint16_t w)
{
     e16:	1f 93       	push	r17
     e18:	18 2f       	mov	r17, r24
    uart_putc_hex((uint8_t) (w >> 8));
     e1a:	89 2f       	mov	r24, r25
     e1c:	0e 94 ef 06 	call	0xdde	; 0xdde <uart_putc_hex>
    uart_putc_hex((uint8_t) (w & 0xff));
     e20:	81 2f       	mov	r24, r17
     e22:	0e 94 ef 06 	call	0xdde	; 0xdde <uart_putc_hex>
}
     e26:	1f 91       	pop	r17
     e28:	08 95       	ret

00000e2a <uart_putdw_hex>:

void uart_putdw_hex(uint32_t dw)
{
     e2a:	ef 92       	push	r14
     e2c:	ff 92       	push	r15
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	7b 01       	movw	r14, r22
     e34:	8c 01       	movw	r16, r24
    uart_putw_hex((uint16_t) (dw >> 16));
     e36:	c8 01       	movw	r24, r16
     e38:	aa 27       	eor	r26, r26
     e3a:	bb 27       	eor	r27, r27
     e3c:	0e 94 0b 07 	call	0xe16	; 0xe16 <uart_putw_hex>
    uart_putw_hex((uint16_t) (dw & 0xffff));
     e40:	c7 01       	movw	r24, r14
     e42:	0e 94 0b 07 	call	0xe16	; 0xe16 <uart_putw_hex>
}
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	ff 90       	pop	r15
     e4c:	ef 90       	pop	r14
     e4e:	08 95       	ret

00000e50 <basic_setup>:
******************************************************************************/

void basic_setup(void)
{
  /* Disable watchdog if enabled by bootloader/fuses */
  MCUSR &= ~(1 << WDRF);
     e50:	84 b7       	in	r24, 0x34	; 52
     e52:	87 7f       	andi	r24, 0xF7	; 247
     e54:	84 bf       	out	0x34, r24	; 52
  wdt_disable();
     e56:	88 e1       	ldi	r24, 0x18	; 24
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	80 93 60 00 	sts	0x0060, r24
     e60:	10 92 60 00 	sts	0x0060, r1
     e64:	0f be       	out	0x3f, r0	; 63

#if (BOARD == BOARD_USER)
#if (F_CPU == 16000000UL)
  /* Set the clock prescaler */
  clock_prescale_set(clock_div_1);
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	20 e8       	ldi	r18, 0x80	; 128
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	20 93 61 00 	sts	0x0061, r18
     e74:	80 93 61 00 	sts	0x0061, r24
     e78:	0f be       	out	0x3f, r0	; 63
  clock_prescale_set(clock_div_2);
#else
#error Unsupported F_CPU
#endif
#endif
}
     e7a:	08 95       	ret

00000e7c <main>:
******************************************************************************/

void basic_setup(void)
{
  /* Disable watchdog if enabled by bootloader/fuses */
  MCUSR &= ~(1 << WDRF);
     e7c:	84 b7       	in	r24, 0x34	; 52
     e7e:	87 7f       	andi	r24, 0xF7	; 247
     e80:	84 bf       	out	0x34, r24	; 52
  wdt_disable();
     e82:	88 e1       	ldi	r24, 0x18	; 24
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	80 93 60 00 	sts	0x0060, r24
     e8c:	10 92 60 00 	sts	0x0060, r1
     e90:	0f be       	out	0x3f, r0	; 63

#if (BOARD == BOARD_USER)
#if (F_CPU == 16000000UL)
  /* Set the clock prescaler */
  clock_prescale_set(clock_div_1);
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	20 e8       	ldi	r18, 0x80	; 128
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	20 93 61 00 	sts	0x0061, r18
     ea0:	80 93 61 00 	sts	0x0061, r24
     ea4:	0f be       	out	0x3f, r0	; 63
}

int main()
{
  basic_setup();
  application_main();
     ea6:	0e 94 86 02 	call	0x50c	; 0x50c <application_main>
  return 0;
}
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	08 95       	ret

00000eb0 <delay_ms>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     eb0:	20 ea       	ldi	r18, 0xA0	; 160
     eb2:	3f e0       	ldi	r19, 0x0F	; 15
     eb4:	04 c0       	rjmp	.+8      	; 0xebe <delay_ms+0xe>
     eb6:	f9 01       	movw	r30, r18
     eb8:	31 97       	sbiw	r30, 0x01	; 1
     eba:	f1 f7       	brne	.-4      	; 0xeb8 <delay_ms+0x8>
     ebc:	01 97       	sbiw	r24, 0x01	; 1
* Functions
******************************************************************************/

void delay_ms(uint16_t t)
{
  while (t--)
     ebe:	00 97       	sbiw	r24, 0x00	; 0
     ec0:	d1 f7       	brne	.-12     	; 0xeb6 <delay_ms+0x6>
    _delay_ms(1);
}
     ec2:	08 95       	ret

00000ec4 <delay_us>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ec4:	35 e0       	ldi	r19, 0x05	; 5
     ec6:	04 c0       	rjmp	.+8      	; 0xed0 <delay_us+0xc>
     ec8:	23 2f       	mov	r18, r19
     eca:	2a 95       	dec	r18
     ecc:	f1 f7       	brne	.-4      	; 0xeca <delay_us+0x6>
     ece:	01 97       	sbiw	r24, 0x01	; 1

void delay_us(uint16_t t)
{
  while (t--)
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	d1 f7       	brne	.-12     	; 0xec8 <delay_us+0x4>
    _delay_us(1);
}
     ed4:	08 95       	ret

00000ed6 <adc_pause>:
  sei();
}

void adc_pause(void)
{
  TIMSK0 &= ~_BV(OCIE0A);
     ed6:	ee e6       	ldi	r30, 0x6E	; 110
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	8d 7f       	andi	r24, 0xFD	; 253
     ede:	80 83       	st	Z, r24
}
     ee0:	08 95       	ret

00000ee2 <adc_resume>:

void adc_resume(void)
{
  TIMSK0 |= _BV(OCIE0A);
     ee2:	ee e6       	ldi	r30, 0x6E	; 110
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	82 60       	ori	r24, 0x02	; 2
     eea:	80 83       	st	Z, r24
}
     eec:	08 95       	ret

00000eee <adc_timer_handler>:
void adc_timer_handler(void)
{
  uint8_t sample = 0;
  
  /* Start a conversion */
  ADCSRA |= _BV(ADSC);
     eee:	80 91 7a 00 	lds	r24, 0x007A
     ef2:	80 64       	ori	r24, 0x40	; 64
     ef4:	80 93 7a 00 	sts	0x007A, r24

  /* Wait for the end of the conversion */
  while (ADCSRA & _BV(ADSC));
     ef8:	80 91 7a 00 	lds	r24, 0x007A
     efc:	86 fd       	sbrc	r24, 6
     efe:	fc cf       	rjmp	.-8      	; 0xef8 <adc_timer_handler+0xa>

  /* Clear the interrupt flag */
  ADCSRA |= _BV(ADIF); 
     f00:	80 91 7a 00 	lds	r24, 0x007A
     f04:	80 61       	ori	r24, 0x10	; 16
     f06:	80 93 7a 00 	sts	0x007A, r24

  /* Store the sampled value in a buffer */
  *adc.read_ptr = ADCL;
     f0a:	80 91 78 00 	lds	r24, 0x0078
     f0e:	e0 91 38 01 	lds	r30, 0x0138
     f12:	f0 91 39 01 	lds	r31, 0x0139
     f16:	81 93       	st	Z+, r24
  adc.read_ptr++;
     f18:	f0 93 39 01 	sts	0x0139, r31
     f1c:	e0 93 38 01 	sts	0x0138, r30

  /* Check the buffer end */
  if (adc.read_ptr >= adc.end_ptr)
     f20:	80 91 3a 01 	lds	r24, 0x013A
     f24:	90 91 3b 01 	lds	r25, 0x013B
     f28:	e8 17       	cp	r30, r24
     f2a:	f9 07       	cpc	r31, r25
     f2c:	90 f1       	brcs	.+100    	; 0xf92 <adc_timer_handler+0xa4>
  {
    /* Notify the client */
    buffer_full_flag = adc.current_buffer + (1 << 4);
     f2e:	80 91 37 01 	lds	r24, 0x0137
     f32:	80 5f       	subi	r24, 0xF0	; 240
     f34:	80 93 1e 04 	sts	0x041E, r24
     f38:	80 51       	subi	r24, 0x10	; 16

    /* Raise a buffer interrupt */
    TIMSK0 |= _BV(OCIE0B);
     f3a:	90 91 6e 00 	lds	r25, 0x006E
     f3e:	94 60       	ori	r25, 0x04	; 4
     f40:	90 93 6e 00 	sts	0x006E, r25
  
    /* Switch the current buffer */
    adc.current_buffer ^= 1;
     f44:	91 e0       	ldi	r25, 0x01	; 1
     f46:	89 27       	eor	r24, r25
     f48:	80 93 37 01 	sts	0x0137, r24
    if (adc.current_buffer)
     f4c:	88 23       	and	r24, r24
     f4e:	89 f0       	breq	.+34     	; 0xf72 <adc_timer_handler+0x84>
    {
      adc.read_ptr = adc_buffer_pool[1].start;
     f50:	80 91 23 04 	lds	r24, 0x0423
     f54:	90 91 24 04 	lds	r25, 0x0424
     f58:	90 93 39 01 	sts	0x0139, r25
     f5c:	80 93 38 01 	sts	0x0138, r24
      adc.end_ptr = adc_buffer_pool[1].end;
     f60:	80 91 25 04 	lds	r24, 0x0425
     f64:	90 91 26 04 	lds	r25, 0x0426
     f68:	90 93 3b 01 	sts	0x013B, r25
     f6c:	80 93 3a 01 	sts	0x013A, r24
     f70:	08 95       	ret
    }
    else
    {
      adc.read_ptr = adc_buffer_pool[0].start;
     f72:	80 91 1f 04 	lds	r24, 0x041F
     f76:	90 91 20 04 	lds	r25, 0x0420
     f7a:	90 93 39 01 	sts	0x0139, r25
     f7e:	80 93 38 01 	sts	0x0138, r24
      adc.end_ptr = adc_buffer_pool[0].end;
     f82:	80 91 21 04 	lds	r24, 0x0421
     f86:	90 91 22 04 	lds	r25, 0x0422
     f8a:	90 93 3b 01 	sts	0x013B, r25
     f8e:	80 93 3a 01 	sts	0x013A, r24
     f92:	08 95       	ret

00000f94 <adc_stop>:
}

void adc_stop(void)
{
  /* Stop the sample timer interrupt */
  TCCR0A = TCCR0B = OCR0A = TIMSK0 = 0;
     f94:	ee e6       	ldi	r30, 0x6E	; 110
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	10 82       	st	Z, r1
     f9a:	80 81       	ld	r24, Z
     f9c:	87 bd       	out	0x27, r24	; 39
     f9e:	87 b5       	in	r24, 0x27	; 39
     fa0:	85 bd       	out	0x25, r24	; 37
     fa2:	85 b5       	in	r24, 0x25	; 37
     fa4:	84 bd       	out	0x24, r24	; 36
  
  set_sample_timer_handler(NULL);
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0e 94 35 09 	call	0x126a	; 0x126a <set_sample_timer_handler>
}
     fae:	08 95       	ret

00000fb0 <adc_start>:
}

void adc_start(uint8_t* buffer0, uint8_t* buffer1, uint16_t size)
{
  /* Store the buffer params */
  adc_buffer_pool[0].start = buffer0;
     fb0:	90 93 20 04 	sts	0x0420, r25
     fb4:	80 93 1f 04 	sts	0x041F, r24
  adc_buffer_pool[0].end = buffer0 + size;
     fb8:	9c 01       	movw	r18, r24
     fba:	24 0f       	add	r18, r20
     fbc:	35 1f       	adc	r19, r21
     fbe:	30 93 22 04 	sts	0x0422, r19
     fc2:	20 93 21 04 	sts	0x0421, r18
  adc_buffer_pool[1].start = buffer1;
     fc6:	70 93 24 04 	sts	0x0424, r23
     fca:	60 93 23 04 	sts	0x0423, r22
  adc_buffer_pool[1].end = buffer1 + size;
     fce:	64 0f       	add	r22, r20
     fd0:	75 1f       	adc	r23, r21
     fd2:	70 93 26 04 	sts	0x0426, r23
     fd6:	60 93 25 04 	sts	0x0425, r22
  
  /* Init the read pointer */
  adc.current_buffer = 0;
     fda:	10 92 37 01 	sts	0x0137, r1
  adc.read_ptr = adc_buffer_pool[0].start;
     fde:	90 93 39 01 	sts	0x0139, r25
     fe2:	80 93 38 01 	sts	0x0138, r24
  adc.end_ptr = adc_buffer_pool[0].end;
     fe6:	30 93 3b 01 	sts	0x013B, r19
     fea:	20 93 3a 01 	sts	0x013A, r18
  
  buffer_full_flag = 0;
     fee:	10 92 1e 04 	sts	0x041E, r1
  
  /* Setup a periodic interrupt to update the sample value */
  set_sample_timer_handler(&adc_timer_handler);
     ff2:	87 e7       	ldi	r24, 0x77	; 119
     ff4:	97 e0       	ldi	r25, 0x07	; 7
     ff6:	0e 94 35 09 	call	0x126a	; 0x126a <set_sample_timer_handler>
    
  TCCR0A = _BV(WGM01); /* CTC mode */
     ffa:	22 e0       	ldi	r18, 0x02	; 2
     ffc:	24 bd       	out	0x24, r18	; 36
#if (F_CPU == 16000000)
  switch(adc.rate)
     ffe:	80 91 35 01 	lds	r24, 0x0135
    1002:	90 91 36 01 	lds	r25, 0x0136
    1006:	36 e5       	ldi	r19, 0x56	; 86
    1008:	82 32       	cpi	r24, 0x22	; 34
    100a:	93 07       	cpc	r25, r19
    100c:	59 f0       	breq	.+22     	; 0x1024 <adc_start+0x74>
    100e:	3c ea       	ldi	r19, 0xAC	; 172
    1010:	84 34       	cpi	r24, 0x44	; 68
    1012:	93 07       	cpc	r25, r19
    1014:	21 f0       	breq	.+8      	; 0x101e <adc_start+0x6e>
    1016:	80 58       	subi	r24, 0x80	; 128
    1018:	9e 43       	sbci	r25, 0x3E	; 62
    101a:	51 f4       	brne	.+20     	; 0x1030 <adc_start+0x80>
    101c:	06 c0       	rjmp	.+12     	; 0x102a <adc_start+0x7a>
  {
    case 44100:
      TCCR0B = _BV(CS01); /* Fclk / 8 */
    101e:	25 bd       	out	0x25, r18	; 37
      OCR0A = 45 - 1; /* 44444 Hz */
    1020:	8c e2       	ldi	r24, 0x2C	; 44
    1022:	08 c0       	rjmp	.+16     	; 0x1034 <adc_start+0x84>
      break;
    
    case 22050:
      TCCR0B = _BV(CS01); /* Fclk / 8 */
    1024:	25 bd       	out	0x25, r18	; 37
      OCR0A = 91 - 1; /* 21978 Hz */
    1026:	8a e5       	ldi	r24, 0x5A	; 90
    1028:	05 c0       	rjmp	.+10     	; 0x1034 <adc_start+0x84>
      break;
    
    case 16000:
      TCCR0B = _BV(CS01); /* Fclk / 8 */
    102a:	25 bd       	out	0x25, r18	; 37
      OCR0A = 125 - 1; /* 16000 Hz */
    102c:	8c e7       	ldi	r24, 0x7C	; 124
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <adc_start+0x84>
      break;
      
    case 8000:
    default:
      TCCR0B = _BV(CS01); /* Fclk / 8 */
    1030:	25 bd       	out	0x25, r18	; 37
      OCR0A = 250 - 1; /* 8000 Hz */
    1032:	89 ef       	ldi	r24, 0xF9	; 249
    1034:	87 bd       	out	0x27, r24	; 39
#else
#error F_CPU not supported
#endif
  
  /* Setup the buffer full interrupt */
  OCR0B = 1;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	88 bd       	out	0x28, r24	; 40
  
  /* Enable the sample timer interrupt */
  TIMSK0 |= _BV(OCIE0A) | _BV(OCIE0B);
    103a:	80 91 6e 00 	lds	r24, 0x006E
    103e:	86 60       	ori	r24, 0x06	; 6
    1040:	80 93 6e 00 	sts	0x006E, r24
  
  /* Enable interrupts */
  sei();
    1044:	78 94       	sei
}
    1046:	08 95       	ret

00001048 <adc_init>:
* Functions
******************************************************************************/

void adc_init(void)
{
  adc.rate = 8000;
    1048:	80 e4       	ldi	r24, 0x40	; 64
    104a:	9f e1       	ldi	r25, 0x1F	; 31
    104c:	90 93 36 01 	sts	0x0136, r25
    1050:	80 93 35 01 	sts	0x0135, r24
  
  /* Initialize the ADC on ADC0 */
  ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0); /* Enable the ADC, prescaler 128 */
    1054:	87 e8       	ldi	r24, 0x87	; 135
    1056:	80 93 7a 00 	sts	0x007A, r24
  ADMUX |= _BV(REFS0) | _BV(ADLAR); /* AVCC ref with cap on AREF, left justify, mux on ADC0 */
    105a:	ec e7       	ldi	r30, 0x7C	; 124
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	80 66       	ori	r24, 0x60	; 96
    1062:	80 83       	st	Z, r24

  DDRF  &= ~_BV(PF0); /* Setup ADC0 as an input */
    1064:	80 98       	cbi	0x10, 0	; 16
  DIDR0 |=  _BV(ADC0D); /* Disable the digital input buffer on PF0*/
    1066:	ee e7       	ldi	r30, 0x7E	; 126
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	81 60       	ori	r24, 0x01	; 1
    106e:	80 83       	st	Z, r24
  
  /* Init the buffer pool */
  memset(adc_buffer_pool, 0x00, sizeof(adc_buffer_pool));
    1070:	88 e0       	ldi	r24, 0x08	; 8
    1072:	ef e1       	ldi	r30, 0x1F	; 31
    1074:	f4 e0       	ldi	r31, 0x04	; 4
    1076:	df 01       	movw	r26, r30
    1078:	1d 92       	st	X+, r1
    107a:	8a 95       	dec	r24
    107c:	e9 f7       	brne	.-6      	; 0x1078 <adc_init+0x30>
  adc.current_buffer = 0;
    107e:	10 92 37 01 	sts	0x0137, r1
  adc.read_ptr = NULL;
    1082:	10 92 39 01 	sts	0x0139, r1
    1086:	10 92 38 01 	sts	0x0138, r1
}
    108a:	08 95       	ret

0000108c <dac_pause>:
  sei();
}

void dac_pause(void)
{
  TIMSK0 &= ~_BV(OCIE0A);
    108c:	ee e6       	ldi	r30, 0x6E	; 110
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	8d 7f       	andi	r24, 0xFD	; 253
    1094:	80 83       	st	Z, r24
}
    1096:	08 95       	ret

00001098 <dac_resume>:

void dac_resume(void)
{
  TIMSK0 |= _BV(OCIE0A);
    1098:	ee e6       	ldi	r30, 0x6E	; 110
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	82 60       	ori	r24, 0x02	; 2
    10a0:	80 83       	st	Z, r24
}
    10a2:	08 95       	ret

000010a4 <dac_timer_handler>:
  set_sample_timer_handler(NULL);
}

void dac_timer_handler(void)
{
  uint8_t l_sample = *dac.read_ptr++;
    10a4:	a0 91 40 01 	lds	r26, 0x0140
    10a8:	b0 91 41 01 	lds	r27, 0x0141
    10ac:	fd 01       	movw	r30, r26
    10ae:	91 91       	ld	r25, Z+
    10b0:	f0 93 41 01 	sts	0x0141, r31
    10b4:	e0 93 40 01 	sts	0x0140, r30
  OCR4A = l_sample;
    10b8:	90 93 cf 00 	sts	0x00CF, r25
  if (dac.channels == CHANNELS_STEREO)
    10bc:	80 91 3e 01 	lds	r24, 0x013E
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	51 f4       	brne	.+20     	; 0x10d8 <dac_timer_handler+0x34>
  {
    OCR4B = *dac.read_ptr++;
    10c4:	11 96       	adiw	r26, 0x01	; 1
    10c6:	8c 91       	ld	r24, X
    10c8:	80 93 d0 00 	sts	0x00D0, r24
    10cc:	31 96       	adiw	r30, 0x01	; 1
    10ce:	f0 93 41 01 	sts	0x0141, r31
    10d2:	e0 93 40 01 	sts	0x0140, r30
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <dac_timer_handler+0x38>
  }
  else
  {
    OCR4B = l_sample;
    10d8:	90 93 d0 00 	sts	0x00D0, r25
  }

  /* Check the buffer end */
  if (dac.read_ptr >= dac.end_ptr)
    10dc:	20 91 40 01 	lds	r18, 0x0140
    10e0:	30 91 41 01 	lds	r19, 0x0141
    10e4:	80 91 42 01 	lds	r24, 0x0142
    10e8:	90 91 43 01 	lds	r25, 0x0143
    10ec:	28 17       	cp	r18, r24
    10ee:	39 07       	cpc	r19, r25
    10f0:	90 f1       	brcs	.+100    	; 0x1156 <dac_timer_handler+0xb2>
  {
    /* Notify the client */
    empty_buffer_flag = dac.current_buffer + (1 << 4);
    10f2:	80 91 3f 01 	lds	r24, 0x013F
    10f6:	80 5f       	subi	r24, 0xF0	; 240
    10f8:	80 93 2f 08 	sts	0x082F, r24
    10fc:	80 51       	subi	r24, 0x10	; 16

    /* Raise a buffer empty interrupt */
    TIMSK0 |= _BV(OCIE0B);
    10fe:	90 91 6e 00 	lds	r25, 0x006E
    1102:	94 60       	ori	r25, 0x04	; 4
    1104:	90 93 6e 00 	sts	0x006E, r25
  
    /* Switch the current buffer */
    dac.current_buffer ^= 1;
    1108:	91 e0       	ldi	r25, 0x01	; 1
    110a:	89 27       	eor	r24, r25
    110c:	80 93 3f 01 	sts	0x013F, r24
    if (dac.current_buffer)
    1110:	88 23       	and	r24, r24
    1112:	89 f0       	breq	.+34     	; 0x1136 <dac_timer_handler+0x92>
    {
      dac.read_ptr = dac_buffer_pool[1].start;
    1114:	80 91 2b 08 	lds	r24, 0x082B
    1118:	90 91 2c 08 	lds	r25, 0x082C
    111c:	90 93 41 01 	sts	0x0141, r25
    1120:	80 93 40 01 	sts	0x0140, r24
      dac.end_ptr = dac_buffer_pool[1].end;
    1124:	80 91 2d 08 	lds	r24, 0x082D
    1128:	90 91 2e 08 	lds	r25, 0x082E
    112c:	90 93 43 01 	sts	0x0143, r25
    1130:	80 93 42 01 	sts	0x0142, r24
    1134:	08 95       	ret
    }
    else
    {
      dac.read_ptr = dac_buffer_pool[0].start;
    1136:	80 91 27 08 	lds	r24, 0x0827
    113a:	90 91 28 08 	lds	r25, 0x0828
    113e:	90 93 41 01 	sts	0x0141, r25
    1142:	80 93 40 01 	sts	0x0140, r24
      dac.end_ptr = dac_buffer_pool[0].end;
    1146:	80 91 29 08 	lds	r24, 0x0829
    114a:	90 91 2a 08 	lds	r25, 0x082A
    114e:	90 93 43 01 	sts	0x0143, r25
    1152:	80 93 42 01 	sts	0x0142, r24
    1156:	08 95       	ret

00001158 <dac_stop>:
}

void dac_stop(void)
{
  /* Stop the sample timer interrupt */
  TCCR0A = TCCR0B = OCR0A = TIMSK0 = 0;
    1158:	ee e6       	ldi	r30, 0x6E	; 110
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	10 82       	st	Z, r1
    115e:	80 81       	ld	r24, Z
    1160:	87 bd       	out	0x27, r24	; 39
    1162:	87 b5       	in	r24, 0x27	; 39
    1164:	85 bd       	out	0x25, r24	; 37
    1166:	85 b5       	in	r24, 0x25	; 37
    1168:	84 bd       	out	0x24, r24	; 36
  
  set_sample_timer_handler(NULL);
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 94 35 09 	call	0x126a	; 0x126a <set_sample_timer_handler>
}
    1172:	08 95       	ret

00001174 <dac_start>:
}

void dac_start(uint8_t* buffer0, uint8_t* buffer1, uint16_t size)
{
  /* Store the buffer params */
  dac_buffer_pool[0].start = buffer0;
    1174:	90 93 28 08 	sts	0x0828, r25
    1178:	80 93 27 08 	sts	0x0827, r24
  dac_buffer_pool[0].end = buffer0 + size;
    117c:	9c 01       	movw	r18, r24
    117e:	24 0f       	add	r18, r20
    1180:	35 1f       	adc	r19, r21
    1182:	30 93 2a 08 	sts	0x082A, r19
    1186:	20 93 29 08 	sts	0x0829, r18
  dac_buffer_pool[1].start = buffer1;
    118a:	70 93 2c 08 	sts	0x082C, r23
    118e:	60 93 2b 08 	sts	0x082B, r22
  dac_buffer_pool[1].end = buffer1 + size;
    1192:	64 0f       	add	r22, r20
    1194:	75 1f       	adc	r23, r21
    1196:	70 93 2e 08 	sts	0x082E, r23
    119a:	60 93 2d 08 	sts	0x082D, r22
  
  /* Init the read pointer */
  dac.current_buffer = 0;
    119e:	10 92 3f 01 	sts	0x013F, r1
  dac.read_ptr = dac_buffer_pool[0].start;
    11a2:	90 93 41 01 	sts	0x0141, r25
    11a6:	80 93 40 01 	sts	0x0140, r24
  dac.end_ptr = dac_buffer_pool[0].end;
    11aa:	30 93 43 01 	sts	0x0143, r19
    11ae:	20 93 42 01 	sts	0x0142, r18
  
  empty_buffer_flag = 0;
    11b2:	10 92 2f 08 	sts	0x082F, r1
  
  /* Setup a periodic interrupt to update the sample value */
  set_sample_timer_handler(&dac_timer_handler);
    11b6:	82 e5       	ldi	r24, 0x52	; 82
    11b8:	98 e0       	ldi	r25, 0x08	; 8
    11ba:	0e 94 35 09 	call	0x126a	; 0x126a <set_sample_timer_handler>
  
  TCCR0A = _BV(WGM01); /* CTC mode */
    11be:	22 e0       	ldi	r18, 0x02	; 2
    11c0:	24 bd       	out	0x24, r18	; 36
#if (F_CPU == 16000000)
  switch(dac.rate)
    11c2:	80 91 3c 01 	lds	r24, 0x013C
    11c6:	90 91 3d 01 	lds	r25, 0x013D
    11ca:	36 e5       	ldi	r19, 0x56	; 86
    11cc:	82 32       	cpi	r24, 0x22	; 34
    11ce:	93 07       	cpc	r25, r19
    11d0:	59 f0       	breq	.+22     	; 0x11e8 <dac_start+0x74>
    11d2:	3c ea       	ldi	r19, 0xAC	; 172
    11d4:	84 34       	cpi	r24, 0x44	; 68
    11d6:	93 07       	cpc	r25, r19
    11d8:	21 f0       	breq	.+8      	; 0x11e2 <dac_start+0x6e>
    11da:	80 58       	subi	r24, 0x80	; 128
    11dc:	9e 43       	sbci	r25, 0x3E	; 62
    11de:	51 f4       	brne	.+20     	; 0x11f4 <dac_start+0x80>
    11e0:	06 c0       	rjmp	.+12     	; 0x11ee <dac_start+0x7a>
  {
    case 44100:
      TCCR0B = _BV(CS01); /* Fclk / 8 */
    11e2:	25 bd       	out	0x25, r18	; 37
      OCR0A = 45 - 1; /* 44444 Hz */
    11e4:	8c e2       	ldi	r24, 0x2C	; 44
    11e6:	08 c0       	rjmp	.+16     	; 0x11f8 <dac_start+0x84>
      break;
    
    case 22050:
      TCCR0B = _BV(CS01); /* Fclk / 8 */
    11e8:	25 bd       	out	0x25, r18	; 37
      OCR0A = 91 - 1; /* 21978 Hz */
    11ea:	8a e5       	ldi	r24, 0x5A	; 90
    11ec:	05 c0       	rjmp	.+10     	; 0x11f8 <dac_start+0x84>
      break;
    
    case 16000:
      TCCR0B = _BV(CS01); /* Fclk / 8 */
    11ee:	25 bd       	out	0x25, r18	; 37
      OCR0A = 125 - 1; /* 16000 Hz */
    11f0:	8c e7       	ldi	r24, 0x7C	; 124
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <dac_start+0x84>
      break;
      
    case 8000:
    default:
      TCCR0B = _BV(CS01); /* Fclk / 8 */
    11f4:	25 bd       	out	0x25, r18	; 37
      OCR0A = 250 - 1; /* 8000 Hz */
    11f6:	89 ef       	ldi	r24, 0xF9	; 249
    11f8:	87 bd       	out	0x27, r24	; 39
#else
#error F_CPU not supported
#endif
  
  /* Setup the buffer empty interrupt */
  OCR0B = 1;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	88 bd       	out	0x28, r24	; 40
  
  /* Enable the sample timer interrupt */
  TIMSK0 |= _BV(OCIE0A) | _BV(OCIE0B);
    11fe:	80 91 6e 00 	lds	r24, 0x006E
    1202:	86 60       	ori	r24, 0x06	; 6
    1204:	80 93 6e 00 	sts	0x006E, r24
  
  /* Enable interrupts */
  sei();
    1208:	78 94       	sei
}
    120a:	08 95       	ret

0000120c <dac_init>:
* Functions
******************************************************************************/

void dac_init(uint16_t rate, uint8_t channels)
{
  dac.rate = rate;
    120c:	90 93 3d 01 	sts	0x013D, r25
    1210:	80 93 3c 01 	sts	0x013C, r24
  dac.channels = channels;
    1214:	60 93 3e 01 	sts	0x013E, r22
  
  /* Init the internal PLL */
  PLLFRQ = _BV(PDIV2);
    1218:	84 e0       	ldi	r24, 0x04	; 4
    121a:	82 bf       	out	0x32, r24	; 50
  PLLCSR = _BV(PLLE);
    121c:	82 e0       	ldi	r24, 0x02	; 2
    121e:	89 bd       	out	0x29, r24	; 41
  while(!(PLLCSR & _BV(PLOCK)));
    1220:	09 b4       	in	r0, 0x29	; 41
    1222:	00 fe       	sbrs	r0, 0
    1224:	fd cf       	rjmp	.-6      	; 0x1220 <dac_init+0x14>
  PLLFRQ |= _BV(PLLTM0); /* PCK 48MHz */
    1226:	82 b7       	in	r24, 0x32	; 50
    1228:	80 61       	ori	r24, 0x10	; 16
    122a:	82 bf       	out	0x32, r24	; 50
  
  /* Init a fast PWM on Timer4 */
  TCCR4A = _BV(COM4A0) | _BV(PWM4A); /* Clear OC4A on Compare Match */
    122c:	82 e4       	ldi	r24, 0x42	; 66
    122e:	80 93 c0 00 	sts	0x00C0, r24
  TCCR4B = _BV(CS40); /* No prescaling => f = PCK/256 = 187500Hz */
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	80 93 c1 00 	sts	0x00C1, r24
  OCR4A = 0;
    1238:	10 92 cf 00 	sts	0x00CF, r1
  
  /* Enable the OC4A output */
  DDRC |= _BV(PORTC7);
    123c:	3f 9a       	sbi	0x07, 7	; 7
  
  /* Enable a second PWM channel */
  TCCR4A |= _BV(COM4B1) | _BV(PWM4B);
    123e:	80 91 c0 00 	lds	r24, 0x00C0
    1242:	81 62       	ori	r24, 0x21	; 33
    1244:	80 93 c0 00 	sts	0x00C0, r24
  OCR4B = 0;
    1248:	10 92 d0 00 	sts	0x00D0, r1
  
  /* Enable the OC4B output */
  DDRB |= _BV(PORTB6);
    124c:	26 9a       	sbi	0x04, 6	; 4
  
  /* Init the buffer pool */
  memset(dac_buffer_pool, 0x00, sizeof(dac_buffer_pool));
    124e:	88 e0       	ldi	r24, 0x08	; 8
    1250:	e7 e2       	ldi	r30, 0x27	; 39
    1252:	f8 e0       	ldi	r31, 0x08	; 8
    1254:	df 01       	movw	r26, r30
    1256:	1d 92       	st	X+, r1
    1258:	8a 95       	dec	r24
    125a:	e9 f7       	brne	.-6      	; 0x1256 <dac_init+0x4a>
  dac.current_buffer = 0;
    125c:	10 92 3f 01 	sts	0x013F, r1
  dac.read_ptr = NULL;
    1260:	10 92 41 01 	sts	0x0141, r1
    1264:	10 92 40 01 	sts	0x0140, r1
}
    1268:	08 95       	ret

0000126a <set_sample_timer_handler>:
* Functions
******************************************************************************/

void set_sample_timer_handler(handler_t handler)
{
  sample_timer_handler = handler;
    126a:	90 93 45 01 	sts	0x0145, r25
    126e:	80 93 44 01 	sts	0x0144, r24
}
    1272:	08 95       	ret

00001274 <__vector_21>:

/* Sample timer interrupt */
ISR(TIMER0_COMPA_vect)
{
    1274:	1f 92       	push	r1
    1276:	0f 92       	push	r0
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	0f 92       	push	r0
    127c:	11 24       	eor	r1, r1
    127e:	2f 93       	push	r18
    1280:	3f 93       	push	r19
    1282:	4f 93       	push	r20
    1284:	5f 93       	push	r21
    1286:	6f 93       	push	r22
    1288:	7f 93       	push	r23
    128a:	8f 93       	push	r24
    128c:	9f 93       	push	r25
    128e:	af 93       	push	r26
    1290:	bf 93       	push	r27
    1292:	ef 93       	push	r30
    1294:	ff 93       	push	r31
  /* Call the handler */
  if (sample_timer_handler)
    1296:	e0 91 44 01 	lds	r30, 0x0144
    129a:	f0 91 45 01 	lds	r31, 0x0145
    129e:	30 97       	sbiw	r30, 0x00	; 0
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <__vector_21+0x30>
    sample_timer_handler();
    12a2:	09 95       	icall
}
    12a4:	ff 91       	pop	r31
    12a6:	ef 91       	pop	r30
    12a8:	bf 91       	pop	r27
    12aa:	af 91       	pop	r26
    12ac:	9f 91       	pop	r25
    12ae:	8f 91       	pop	r24
    12b0:	7f 91       	pop	r23
    12b2:	6f 91       	pop	r22
    12b4:	5f 91       	pop	r21
    12b6:	4f 91       	pop	r20
    12b8:	3f 91       	pop	r19
    12ba:	2f 91       	pop	r18
    12bc:	0f 90       	pop	r0
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	0f 90       	pop	r0
    12c2:	1f 90       	pop	r1
    12c4:	18 95       	reti

000012c6 <set_buffer_event_handler>:

void set_buffer_event_handler(handler_t handler)
{
  buffer_event_handler = handler;
    12c6:	90 93 47 01 	sts	0x0147, r25
    12ca:	80 93 46 01 	sts	0x0146, r24
}
    12ce:	08 95       	ret

000012d0 <__vector_22>:

extern void buffer_refill_handler(void);

/* Buffer event interrupt */
ISR(TIMER0_COMPB_vect)
{
    12d0:	1f 92       	push	r1
    12d2:	0f 92       	push	r0
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	0f 92       	push	r0
    12d8:	11 24       	eor	r1, r1
    12da:	2f 93       	push	r18
    12dc:	3f 93       	push	r19
    12de:	4f 93       	push	r20
    12e0:	5f 93       	push	r21
    12e2:	6f 93       	push	r22
    12e4:	7f 93       	push	r23
    12e6:	8f 93       	push	r24
    12e8:	9f 93       	push	r25
    12ea:	af 93       	push	r26
    12ec:	bf 93       	push	r27
    12ee:	ef 93       	push	r30
    12f0:	ff 93       	push	r31
  /* Disable the interrupt */
  TIMSK0 &= ~_BV(OCIE0B);
    12f2:	80 91 6e 00 	lds	r24, 0x006E
    12f6:	8b 7f       	andi	r24, 0xFB	; 251
    12f8:	80 93 6e 00 	sts	0x006E, r24
  
  /* Re-enable the interrupts to allow the execution of TIMER0_COMPA_vect */
  sei();
    12fc:	78 94       	sei
  
  /* Call the handler */
  if (buffer_event_handler)
    12fe:	e0 91 46 01 	lds	r30, 0x0146
    1302:	f0 91 47 01 	lds	r31, 0x0147
    1306:	30 97       	sbiw	r30, 0x00	; 0
    1308:	09 f0       	breq	.+2      	; 0x130c <__vector_22+0x3c>
    buffer_event_handler();
    130a:	09 95       	icall
    130c:	ff 91       	pop	r31
    130e:	ef 91       	pop	r30
    1310:	bf 91       	pop	r27
    1312:	af 91       	pop	r26
    1314:	9f 91       	pop	r25
    1316:	8f 91       	pop	r24
    1318:	7f 91       	pop	r23
    131a:	6f 91       	pop	r22
    131c:	5f 91       	pop	r21
    131e:	4f 91       	pop	r20
    1320:	3f 91       	pop	r19
    1322:	2f 91       	pop	r18
    1324:	0f 90       	pop	r0
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	0f 90       	pop	r0
    132a:	1f 90       	pop	r1
    132c:	18 95       	reti

0000132e <buffer_refill_handler>:
  dac_resume();
}

/* Buffer refill handler */
void buffer_refill_handler(void)
{
    132e:	cf 92       	push	r12
    1330:	df 92       	push	r13
    1332:	ef 92       	push	r14
    1334:	ff 92       	push	r15
    1336:	0f 93       	push	r16
    1338:	1f 93       	push	r17
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
  uint16_t size;
  uint8_t* p;
  
  if (empty_buffer_flag)
    133e:	80 91 2f 08 	lds	r24, 0x082F
    1342:	88 23       	and	r24, r24
    1344:	09 f4       	brne	.+2      	; 0x1348 <buffer_refill_handler+0x1a>
    1346:	ca c0       	rjmp	.+404    	; 0x14dc <buffer_refill_handler+0x1ae>
  {
    if (player.fd)
    1348:	c0 90 70 08 	lds	r12, 0x0870
    134c:	d0 90 71 08 	lds	r13, 0x0871
    1350:	c1 14       	cp	r12, r1
    1352:	d1 04       	cpc	r13, r1
    1354:	09 f4       	brne	.+2      	; 0x1358 <buffer_refill_handler+0x2a>
    1356:	c2 c0       	rjmp	.+388    	; 0x14dc <buffer_refill_handler+0x1ae>
    {
      p = (uint8_t*)pcm_buffer + (empty_buffer_flag & 0x1) * PCM_BUFFER_SIZE;
    1358:	80 91 2f 08 	lds	r24, 0x082F
    135c:	08 2f       	mov	r16, r24
    135e:	10 e0       	ldi	r17, 0x00	; 0
    1360:	01 70       	andi	r16, 0x01	; 1
    1362:	10 70       	andi	r17, 0x00	; 0
    1364:	10 2f       	mov	r17, r16
    1366:	00 27       	eor	r16, r16
    1368:	11 0f       	add	r17, r17
    136a:	09 5d       	subi	r16, 0xD9	; 217
    136c:	1b 4f       	sbci	r17, 0xFB	; 251
* Functions
******************************************************************************/

inline intptr_t read_samples(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len, uint8_t format)
{
  if (format == FORMAT_16_BITS_LE)
    136e:	80 91 72 08 	lds	r24, 0x0872
    1372:	81 30       	cpi	r24, 0x01	; 1
    1374:	09 f0       	breq	.+2      	; 0x1378 <buffer_refill_handler+0x4a>
    1376:	9b c0       	rjmp	.+310    	; 0x14ae <buffer_refill_handler+0x180>
    1378:	e8 01       	movw	r28, r16
    137a:	80 e1       	ldi	r24, 0x10	; 16
    137c:	e8 2e       	mov	r14, r24
    137e:	f1 2c       	mov	r15, r1
    uint8_t* p = buffer;
    
    i = buffer_len / 32;
    do
    {
      if (fat_read_file(fd, (uint8_t*)&scratch, 64) < 64)
    1380:	c6 01       	movw	r24, r12
    1382:	60 e3       	ldi	r22, 0x30	; 48
    1384:	78 e0       	ldi	r23, 0x08	; 8
    1386:	40 e4       	ldi	r20, 0x40	; 64
    1388:	50 e0       	ldi	r21, 0x00	; 0
    138a:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <fat_read_file>
    138e:	80 34       	cpi	r24, 0x40	; 64
    1390:	91 05       	cpc	r25, r1
    1392:	0c f4       	brge	.+2      	; 0x1396 <buffer_refill_handler+0x68>
    1394:	88 c0       	rjmp	.+272    	; 0x14a6 <buffer_refill_handler+0x178>
        break;

      *p++ = scratch[1] + 128;
    1396:	80 91 31 08 	lds	r24, 0x0831
    139a:	80 58       	subi	r24, 0x80	; 128
    139c:	88 83       	st	Y, r24
      *p++ = scratch[3] + 128;
    139e:	80 91 33 08 	lds	r24, 0x0833
    13a2:	80 58       	subi	r24, 0x80	; 128
    13a4:	89 83       	std	Y+1, r24	; 0x01
      *p++ = scratch[5] + 128;
    13a6:	80 91 35 08 	lds	r24, 0x0835
    13aa:	80 58       	subi	r24, 0x80	; 128
    13ac:	8a 83       	std	Y+2, r24	; 0x02
      *p++ = scratch[7] + 128;
    13ae:	80 91 37 08 	lds	r24, 0x0837
    13b2:	80 58       	subi	r24, 0x80	; 128
    13b4:	8b 83       	std	Y+3, r24	; 0x03
      *p++ = scratch[9] + 128;
    13b6:	80 91 39 08 	lds	r24, 0x0839
    13ba:	80 58       	subi	r24, 0x80	; 128
    13bc:	8c 83       	std	Y+4, r24	; 0x04
      *p++ = scratch[11] + 128;
    13be:	80 91 3b 08 	lds	r24, 0x083B
    13c2:	80 58       	subi	r24, 0x80	; 128
    13c4:	8d 83       	std	Y+5, r24	; 0x05
      *p++ = scratch[13] + 128;
    13c6:	80 91 3d 08 	lds	r24, 0x083D
    13ca:	80 58       	subi	r24, 0x80	; 128
    13cc:	8e 83       	std	Y+6, r24	; 0x06
      *p++ = scratch[15] + 128;
    13ce:	80 91 3f 08 	lds	r24, 0x083F
    13d2:	80 58       	subi	r24, 0x80	; 128
    13d4:	8f 83       	std	Y+7, r24	; 0x07
      *p++ = scratch[17] + 128;
    13d6:	80 91 41 08 	lds	r24, 0x0841
    13da:	80 58       	subi	r24, 0x80	; 128
    13dc:	88 87       	std	Y+8, r24	; 0x08
      *p++ = scratch[19] + 128;
    13de:	80 91 43 08 	lds	r24, 0x0843
    13e2:	80 58       	subi	r24, 0x80	; 128
    13e4:	89 87       	std	Y+9, r24	; 0x09
      *p++ = scratch[21] + 128;
    13e6:	80 91 45 08 	lds	r24, 0x0845
    13ea:	80 58       	subi	r24, 0x80	; 128
    13ec:	8a 87       	std	Y+10, r24	; 0x0a
      *p++ = scratch[23] + 128;
    13ee:	80 91 47 08 	lds	r24, 0x0847
    13f2:	80 58       	subi	r24, 0x80	; 128
    13f4:	8b 87       	std	Y+11, r24	; 0x0b
      *p++ = scratch[25] + 128;
    13f6:	80 91 49 08 	lds	r24, 0x0849
    13fa:	80 58       	subi	r24, 0x80	; 128
    13fc:	8c 87       	std	Y+12, r24	; 0x0c
      *p++ = scratch[27] + 128;
    13fe:	80 91 4b 08 	lds	r24, 0x084B
    1402:	80 58       	subi	r24, 0x80	; 128
    1404:	8d 87       	std	Y+13, r24	; 0x0d
      *p++ = scratch[29] + 128;
    1406:	80 91 4d 08 	lds	r24, 0x084D
    140a:	80 58       	subi	r24, 0x80	; 128
    140c:	8e 87       	std	Y+14, r24	; 0x0e
      *p++ = scratch[31] + 128;
    140e:	80 91 4f 08 	lds	r24, 0x084F
    1412:	80 58       	subi	r24, 0x80	; 128
    1414:	8f 87       	std	Y+15, r24	; 0x0f
      
      *p++ = scratch[33] + 128;
    1416:	80 91 51 08 	lds	r24, 0x0851
    141a:	80 58       	subi	r24, 0x80	; 128
    141c:	88 8b       	std	Y+16, r24	; 0x10
      *p++ = scratch[35] + 128;
    141e:	80 91 53 08 	lds	r24, 0x0853
    1422:	80 58       	subi	r24, 0x80	; 128
    1424:	89 8b       	std	Y+17, r24	; 0x11
      *p++ = scratch[37] + 128;
    1426:	80 91 55 08 	lds	r24, 0x0855
    142a:	80 58       	subi	r24, 0x80	; 128
    142c:	8a 8b       	std	Y+18, r24	; 0x12
      *p++ = scratch[39] + 128;
    142e:	80 91 57 08 	lds	r24, 0x0857
    1432:	80 58       	subi	r24, 0x80	; 128
    1434:	8b 8b       	std	Y+19, r24	; 0x13
      *p++ = scratch[41] + 128;
    1436:	80 91 59 08 	lds	r24, 0x0859
    143a:	80 58       	subi	r24, 0x80	; 128
    143c:	8c 8b       	std	Y+20, r24	; 0x14
      *p++ = scratch[43] + 128;
    143e:	80 91 5b 08 	lds	r24, 0x085B
    1442:	80 58       	subi	r24, 0x80	; 128
    1444:	8d 8b       	std	Y+21, r24	; 0x15
      *p++ = scratch[45] + 128;
    1446:	80 91 5d 08 	lds	r24, 0x085D
    144a:	80 58       	subi	r24, 0x80	; 128
    144c:	8e 8b       	std	Y+22, r24	; 0x16
      *p++ = scratch[47] + 128;
    144e:	80 91 5f 08 	lds	r24, 0x085F
    1452:	80 58       	subi	r24, 0x80	; 128
    1454:	8f 8b       	std	Y+23, r24	; 0x17
      *p++ = scratch[49] + 128;
    1456:	80 91 61 08 	lds	r24, 0x0861
    145a:	80 58       	subi	r24, 0x80	; 128
    145c:	88 8f       	std	Y+24, r24	; 0x18
      *p++ = scratch[51] + 128;
    145e:	80 91 63 08 	lds	r24, 0x0863
    1462:	80 58       	subi	r24, 0x80	; 128
    1464:	89 8f       	std	Y+25, r24	; 0x19
      *p++ = scratch[53] + 128;
    1466:	80 91 65 08 	lds	r24, 0x0865
    146a:	80 58       	subi	r24, 0x80	; 128
    146c:	8a 8f       	std	Y+26, r24	; 0x1a
      *p++ = scratch[55] + 128;
    146e:	80 91 67 08 	lds	r24, 0x0867
    1472:	80 58       	subi	r24, 0x80	; 128
    1474:	8b 8f       	std	Y+27, r24	; 0x1b
      *p++ = scratch[57] + 128;
    1476:	80 91 69 08 	lds	r24, 0x0869
    147a:	80 58       	subi	r24, 0x80	; 128
    147c:	8c 8f       	std	Y+28, r24	; 0x1c
      *p++ = scratch[59] + 128;
    147e:	80 91 6b 08 	lds	r24, 0x086B
    1482:	80 58       	subi	r24, 0x80	; 128
    1484:	8d 8f       	std	Y+29, r24	; 0x1d
      *p++ = scratch[61] + 128;
    1486:	80 91 6d 08 	lds	r24, 0x086D
    148a:	80 58       	subi	r24, 0x80	; 128
    148c:	8e 8f       	std	Y+30, r24	; 0x1e
      *p++ = scratch[63] + 128;
    148e:	80 91 6f 08 	lds	r24, 0x086F
    1492:	80 58       	subi	r24, 0x80	; 128
    1494:	8f 8f       	std	Y+31, r24	; 0x1f
  dac_resume();
}

/* Buffer refill handler */
void buffer_refill_handler(void)
{
    1496:	a0 96       	adiw	r28, 0x20	; 32
      *p++ = scratch[55] + 128;
      *p++ = scratch[57] + 128;
      *p++ = scratch[59] + 128;
      *p++ = scratch[61] + 128;
      *p++ = scratch[63] + 128;
    } while (--i);
    1498:	08 94       	sec
    149a:	e1 08       	sbc	r14, r1
    149c:	f1 08       	sbc	r15, r1
    149e:	e1 14       	cp	r14, r1
    14a0:	f1 04       	cpc	r15, r1
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <buffer_refill_handler+0x178>
    14a4:	6d cf       	rjmp	.-294    	; 0x1380 <buffer_refill_handler+0x52>
    
    return (p - buffer);
    14a6:	ce 01       	movw	r24, r28
    14a8:	80 1b       	sub	r24, r16
    14aa:	91 0b       	sbc	r25, r17
    14ac:	06 c0       	rjmp	.+12     	; 0x14ba <buffer_refill_handler+0x18c>
  }
  else
  {
    return fat_read_file(fd, buffer, buffer_len);
    14ae:	c6 01       	movw	r24, r12
    14b0:	b8 01       	movw	r22, r16
    14b2:	40 e0       	ldi	r20, 0x00	; 0
    14b4:	52 e0       	ldi	r21, 0x02	; 2
    14b6:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <fat_read_file>
  {
    if (player.fd)
    {
      p = (uint8_t*)pcm_buffer + (empty_buffer_flag & 0x1) * PCM_BUFFER_SIZE;

      if ((size = read_samples(player.fd, p, PCM_BUFFER_SIZE, player.format)) < PCM_BUFFER_SIZE)
    14ba:	80 50       	subi	r24, 0x00	; 0
    14bc:	92 40       	sbci	r25, 0x02	; 2
    14be:	60 f4       	brcc	.+24     	; 0x14d8 <buffer_refill_handler+0x1aa>
      {
        /* Stop the dac */
        dac_stop();
    14c0:	0e 94 ac 08 	call	0x1158	; 0x1158 <dac_stop>
        
        /* Notify the client */
        player.eof = 1;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	80 93 73 08 	sts	0x0873, r24
        if (player.notify_eof)
    14ca:	e0 91 74 08 	lds	r30, 0x0874
    14ce:	f0 91 75 08 	lds	r31, 0x0875
    14d2:	30 97       	sbiw	r30, 0x00	; 0
    14d4:	09 f0       	breq	.+2      	; 0x14d8 <buffer_refill_handler+0x1aa>
          player.notify_eof();
    14d6:	09 95       	icall
      }

      empty_buffer_flag = 0;
    14d8:	10 92 2f 08 	sts	0x082F, r1
    }
  }
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	0f 91       	pop	r16
    14e4:	ff 90       	pop	r15
    14e6:	ef 90       	pop	r14
    14e8:	df 90       	pop	r13
    14ea:	cf 90       	pop	r12
    14ec:	08 95       	ret

000014ee <player_resume>:
  dac_pause();
}

void player_resume(void)
{
  dac_resume();
    14ee:	0e 94 4c 08 	call	0x1098	; 0x1098 <dac_resume>
}
    14f2:	08 95       	ret

000014f4 <player_pause>:
  player.fd = NULL;
}

void player_pause(void)
{
  dac_pause();
    14f4:	0e 94 46 08 	call	0x108c	; 0x108c <dac_pause>
}
    14f8:	08 95       	ret

000014fa <player_stop>:
  dac_start(pcm_buffer, pcm_buffer + PCM_BUFFER_SIZE, PCM_BUFFER_SIZE);
}

void player_stop(void)
{
  dac_stop();
    14fa:	0e 94 ac 08 	call	0x1158	; 0x1158 <dac_stop>
  
  /* Reset the buffer event handler */
  set_buffer_event_handler(NULL);
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 63 09 	call	0x12c6	; 0x12c6 <set_buffer_event_handler>
  
  /* Reset the context */
  player.fd = NULL;
    1506:	10 92 71 08 	sts	0x0871, r1
    150a:	10 92 70 08 	sts	0x0870, r1
}
    150e:	08 95       	ret

00001510 <player_start>:
  
  return 0;
}

void player_start(struct fat_file_struct* fd, t_notify_eof notify_eof)
{
    1510:	ef 92       	push	r14
    1512:	ff 92       	push	r15
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	60 97       	sbiw	r28, 0x10	; 16
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
    152c:	8c 01       	movw	r16, r24
  uint16_t size;

  /* Init the player context */
  player.fd = fd;
    152e:	90 93 71 08 	sts	0x0871, r25
    1532:	80 93 70 08 	sts	0x0870, r24
  player.eof = 0;
    1536:	10 92 73 08 	sts	0x0873, r1
  player.notify_eof = notify_eof;
    153a:	70 93 75 08 	sts	0x0875, r23
    153e:	60 93 74 08 	sts	0x0874, r22

  /* Parse the file header */
  t_wavparser_status status;
  t_wavparser_header header;
  status = wavparser_parse_header(fd, &header);
    1542:	be 01       	movw	r22, r28
    1544:	6b 5f       	subi	r22, 0xFB	; 251
    1546:	7f 4f       	sbci	r23, 0xFF	; 255
    1548:	0e 94 b7 0b 	call	0x176e	; 0x176e <wavparser_parse_header>

  /* Init the DAC */
  uint16_t rate;
  uint8_t channels;
  
  switch(header.sample_rate)
    154c:	2d 85       	ldd	r18, Y+13	; 0x0d
    154e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1550:	8e e3       	ldi	r24, 0x3E	; 62
    1552:	20 38       	cpi	r18, 0x80	; 128
    1554:	38 07       	cpc	r19, r24
    1556:	99 f0       	breq	.+38     	; 0x157e <player_start+0x6e>
    1558:	ee e3       	ldi	r30, 0x3E	; 62
    155a:	21 38       	cpi	r18, 0x81	; 129
    155c:	3e 07       	cpc	r19, r30
    155e:	28 f4       	brcc	.+10     	; 0x156a <player_start+0x5a>
    1560:	ff e1       	ldi	r31, 0x1F	; 31
    1562:	20 34       	cpi	r18, 0x40	; 64
    1564:	3f 07       	cpc	r19, r31
    1566:	49 f4       	brne	.+18     	; 0x157a <player_start+0x6a>
    1568:	0a c0       	rjmp	.+20     	; 0x157e <player_start+0x6e>
    156a:	86 e5       	ldi	r24, 0x56	; 86
    156c:	22 32       	cpi	r18, 0x22	; 34
    156e:	38 07       	cpc	r19, r24
    1570:	31 f0       	breq	.+12     	; 0x157e <player_start+0x6e>
    1572:	ec ea       	ldi	r30, 0xAC	; 172
    1574:	24 34       	cpi	r18, 0x44	; 68
    1576:	3e 07       	cpc	r19, r30
    1578:	11 f0       	breq	.+4      	; 0x157e <player_start+0x6e>
    157a:	20 e4       	ldi	r18, 0x40	; 64
    157c:	3f e1       	ldi	r19, 0x1F	; 31
    default:
      rate = 8000;
      break;
  }
  
  if (header.num_channels == 2)
    157e:	9f 85       	ldd	r25, Y+15	; 0x0f
    channels = CHANNELS_STEREO;
  else
    channels = CHANNELS_MONO;

  if (header.bits_per_sample == 16)
    1580:	88 89       	ldd	r24, Y+16	; 0x10
    1582:	80 31       	cpi	r24, 0x10	; 16
    1584:	21 f4       	brne	.+8      	; 0x158e <player_start+0x7e>
    player.format = FORMAT_16_BITS_LE;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	80 93 72 08 	sts	0x0872, r24
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <player_start+0x82>
  else
    player.format = FORMAT_8_BITS;
    158e:	10 92 72 08 	sts	0x0872, r1

  dac_init(rate, channels);
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	92 30       	cpi	r25, 0x02	; 2
    1596:	09 f4       	brne	.+2      	; 0x159a <player_start+0x8a>
    1598:	61 e0       	ldi	r22, 0x01	; 1
    159a:	c9 01       	movw	r24, r18
    159c:	0e 94 06 09 	call	0x120c	; 0x120c <dac_init>

  /* Go to the start of the data */
  int32_t offset = header.data_start;
    15a0:	8d 81       	ldd	r24, Y+5	; 0x05
    15a2:	9e 81       	ldd	r25, Y+6	; 0x06
    15a4:	af 81       	ldd	r26, Y+7	; 0x07
    15a6:	b8 85       	ldd	r27, Y+8	; 0x08
    15a8:	89 83       	std	Y+1, r24	; 0x01
    15aa:	9a 83       	std	Y+2, r25	; 0x02
    15ac:	ab 83       	std	Y+3, r26	; 0x03
    15ae:	bc 83       	std	Y+4, r27	; 0x04
  fat_seek_file(fd, &offset, FAT_SEEK_SET);
    15b0:	c8 01       	movw	r24, r16
    15b2:	be 01       	movw	r22, r28
    15b4:	6f 5f       	subi	r22, 0xFF	; 255
    15b6:	7f 4f       	sbci	r23, 0xFF	; 255
    15b8:	40 e0       	ldi	r20, 0x00	; 0
    15ba:	0e 94 8e 1c 	call	0x391c	; 0x391c <fat_seek_file>

  /* Do some pre-buffering */
  if ((size = read_samples(player.fd, (uint8_t*)pcm_buffer, 2 * PCM_BUFFER_SIZE, player.format)) < (2 * PCM_BUFFER_SIZE))
    15be:	e0 90 70 08 	lds	r14, 0x0870
    15c2:	f0 90 71 08 	lds	r15, 0x0871
* Functions
******************************************************************************/

inline intptr_t read_samples(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len, uint8_t format)
{
  if (format == FORMAT_16_BITS_LE)
    15c6:	80 91 72 08 	lds	r24, 0x0872
    15ca:	81 30       	cpi	r24, 0x01	; 1
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <player_start+0xc0>
    15ce:	99 c0       	rjmp	.+306    	; 0x1702 <player_start+0x1f2>
    15d0:	07 e2       	ldi	r16, 0x27	; 39
    15d2:	14 e0       	ldi	r17, 0x04	; 4
    uint8_t* p = buffer;
    
    i = buffer_len / 32;
    do
    {
      if (fat_read_file(fd, (uint8_t*)&scratch, 64) < 64)
    15d4:	c7 01       	movw	r24, r14
    15d6:	60 e3       	ldi	r22, 0x30	; 48
    15d8:	78 e0       	ldi	r23, 0x08	; 8
    15da:	40 e4       	ldi	r20, 0x40	; 64
    15dc:	50 e0       	ldi	r21, 0x00	; 0
    15de:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <fat_read_file>
    15e2:	80 34       	cpi	r24, 0x40	; 64
    15e4:	91 05       	cpc	r25, r1
    15e6:	0c f4       	brge	.+2      	; 0x15ea <player_start+0xda>
    15e8:	88 c0       	rjmp	.+272    	; 0x16fa <player_start+0x1ea>
        break;

      *p++ = scratch[1] + 128;
    15ea:	80 91 31 08 	lds	r24, 0x0831
    15ee:	80 58       	subi	r24, 0x80	; 128
    15f0:	f8 01       	movw	r30, r16
    15f2:	80 83       	st	Z, r24
      *p++ = scratch[3] + 128;
    15f4:	80 91 33 08 	lds	r24, 0x0833
    15f8:	80 58       	subi	r24, 0x80	; 128
    15fa:	81 83       	std	Z+1, r24	; 0x01
      *p++ = scratch[5] + 128;
    15fc:	80 91 35 08 	lds	r24, 0x0835
    1600:	80 58       	subi	r24, 0x80	; 128
    1602:	82 83       	std	Z+2, r24	; 0x02
      *p++ = scratch[7] + 128;
    1604:	80 91 37 08 	lds	r24, 0x0837
    1608:	80 58       	subi	r24, 0x80	; 128
    160a:	83 83       	std	Z+3, r24	; 0x03
      *p++ = scratch[9] + 128;
    160c:	80 91 39 08 	lds	r24, 0x0839
    1610:	80 58       	subi	r24, 0x80	; 128
    1612:	84 83       	std	Z+4, r24	; 0x04
      *p++ = scratch[11] + 128;
    1614:	80 91 3b 08 	lds	r24, 0x083B
    1618:	80 58       	subi	r24, 0x80	; 128
    161a:	85 83       	std	Z+5, r24	; 0x05
      *p++ = scratch[13] + 128;
    161c:	80 91 3d 08 	lds	r24, 0x083D
    1620:	80 58       	subi	r24, 0x80	; 128
    1622:	86 83       	std	Z+6, r24	; 0x06
      *p++ = scratch[15] + 128;
    1624:	80 91 3f 08 	lds	r24, 0x083F
    1628:	80 58       	subi	r24, 0x80	; 128
    162a:	87 83       	std	Z+7, r24	; 0x07
      *p++ = scratch[17] + 128;
    162c:	80 91 41 08 	lds	r24, 0x0841
    1630:	80 58       	subi	r24, 0x80	; 128
    1632:	80 87       	std	Z+8, r24	; 0x08
      *p++ = scratch[19] + 128;
    1634:	80 91 43 08 	lds	r24, 0x0843
    1638:	80 58       	subi	r24, 0x80	; 128
    163a:	81 87       	std	Z+9, r24	; 0x09
      *p++ = scratch[21] + 128;
    163c:	80 91 45 08 	lds	r24, 0x0845
    1640:	80 58       	subi	r24, 0x80	; 128
    1642:	82 87       	std	Z+10, r24	; 0x0a
      *p++ = scratch[23] + 128;
    1644:	80 91 47 08 	lds	r24, 0x0847
    1648:	80 58       	subi	r24, 0x80	; 128
    164a:	83 87       	std	Z+11, r24	; 0x0b
      *p++ = scratch[25] + 128;
    164c:	80 91 49 08 	lds	r24, 0x0849
    1650:	80 58       	subi	r24, 0x80	; 128
    1652:	84 87       	std	Z+12, r24	; 0x0c
      *p++ = scratch[27] + 128;
    1654:	80 91 4b 08 	lds	r24, 0x084B
    1658:	80 58       	subi	r24, 0x80	; 128
    165a:	85 87       	std	Z+13, r24	; 0x0d
      *p++ = scratch[29] + 128;
    165c:	80 91 4d 08 	lds	r24, 0x084D
    1660:	80 58       	subi	r24, 0x80	; 128
    1662:	86 87       	std	Z+14, r24	; 0x0e
      *p++ = scratch[31] + 128;
    1664:	80 91 4f 08 	lds	r24, 0x084F
    1668:	80 58       	subi	r24, 0x80	; 128
    166a:	87 87       	std	Z+15, r24	; 0x0f
      
      *p++ = scratch[33] + 128;
    166c:	80 91 51 08 	lds	r24, 0x0851
    1670:	80 58       	subi	r24, 0x80	; 128
    1672:	80 8b       	std	Z+16, r24	; 0x10
      *p++ = scratch[35] + 128;
    1674:	80 91 53 08 	lds	r24, 0x0853
    1678:	80 58       	subi	r24, 0x80	; 128
    167a:	81 8b       	std	Z+17, r24	; 0x11
      *p++ = scratch[37] + 128;
    167c:	80 91 55 08 	lds	r24, 0x0855
    1680:	80 58       	subi	r24, 0x80	; 128
    1682:	82 8b       	std	Z+18, r24	; 0x12
      *p++ = scratch[39] + 128;
    1684:	80 91 57 08 	lds	r24, 0x0857
    1688:	80 58       	subi	r24, 0x80	; 128
    168a:	83 8b       	std	Z+19, r24	; 0x13
      *p++ = scratch[41] + 128;
    168c:	80 91 59 08 	lds	r24, 0x0859
    1690:	80 58       	subi	r24, 0x80	; 128
    1692:	84 8b       	std	Z+20, r24	; 0x14
      *p++ = scratch[43] + 128;
    1694:	80 91 5b 08 	lds	r24, 0x085B
    1698:	80 58       	subi	r24, 0x80	; 128
    169a:	85 8b       	std	Z+21, r24	; 0x15
      *p++ = scratch[45] + 128;
    169c:	80 91 5d 08 	lds	r24, 0x085D
    16a0:	80 58       	subi	r24, 0x80	; 128
    16a2:	86 8b       	std	Z+22, r24	; 0x16
      *p++ = scratch[47] + 128;
    16a4:	80 91 5f 08 	lds	r24, 0x085F
    16a8:	80 58       	subi	r24, 0x80	; 128
    16aa:	87 8b       	std	Z+23, r24	; 0x17
      *p++ = scratch[49] + 128;
    16ac:	80 91 61 08 	lds	r24, 0x0861
    16b0:	80 58       	subi	r24, 0x80	; 128
    16b2:	80 8f       	std	Z+24, r24	; 0x18
      *p++ = scratch[51] + 128;
    16b4:	80 91 63 08 	lds	r24, 0x0863
    16b8:	80 58       	subi	r24, 0x80	; 128
    16ba:	81 8f       	std	Z+25, r24	; 0x19
      *p++ = scratch[53] + 128;
    16bc:	80 91 65 08 	lds	r24, 0x0865
    16c0:	80 58       	subi	r24, 0x80	; 128
    16c2:	82 8f       	std	Z+26, r24	; 0x1a
      *p++ = scratch[55] + 128;
    16c4:	80 91 67 08 	lds	r24, 0x0867
    16c8:	80 58       	subi	r24, 0x80	; 128
    16ca:	83 8f       	std	Z+27, r24	; 0x1b
      *p++ = scratch[57] + 128;
    16cc:	80 91 69 08 	lds	r24, 0x0869
    16d0:	80 58       	subi	r24, 0x80	; 128
    16d2:	84 8f       	std	Z+28, r24	; 0x1c
      *p++ = scratch[59] + 128;
    16d4:	80 91 6b 08 	lds	r24, 0x086B
    16d8:	80 58       	subi	r24, 0x80	; 128
    16da:	85 8f       	std	Z+29, r24	; 0x1d
      *p++ = scratch[61] + 128;
    16dc:	80 91 6d 08 	lds	r24, 0x086D
    16e0:	80 58       	subi	r24, 0x80	; 128
    16e2:	86 8f       	std	Z+30, r24	; 0x1e
      *p++ = scratch[63] + 128;
    16e4:	80 91 6f 08 	lds	r24, 0x086F
    16e8:	80 58       	subi	r24, 0x80	; 128
    16ea:	87 8f       	std	Z+31, r24	; 0x1f
  
  return 0;
}

void player_start(struct fat_file_struct* fd, t_notify_eof notify_eof)
{
    16ec:	00 5e       	subi	r16, 0xE0	; 224
    16ee:	1f 4f       	sbci	r17, 0xFF	; 255
      *p++ = scratch[55] + 128;
      *p++ = scratch[57] + 128;
      *p++ = scratch[59] + 128;
      *p++ = scratch[61] + 128;
      *p++ = scratch[63] + 128;
    } while (--i);
    16f0:	f8 e0       	ldi	r31, 0x08	; 8
    16f2:	07 32       	cpi	r16, 0x27	; 39
    16f4:	1f 07       	cpc	r17, r31
    16f6:	09 f0       	breq	.+2      	; 0x16fa <player_start+0x1ea>
    16f8:	6d cf       	rjmp	.-294    	; 0x15d4 <player_start+0xc4>
    
    return (p - buffer);
    16fa:	98 01       	movw	r18, r16
    16fc:	27 52       	subi	r18, 0x27	; 39
    16fe:	34 40       	sbci	r19, 0x04	; 4
    1700:	08 c0       	rjmp	.+16     	; 0x1712 <player_start+0x202>
  }
  else
  {
    return fat_read_file(fd, buffer, buffer_len);
    1702:	c7 01       	movw	r24, r14
    1704:	67 e2       	ldi	r22, 0x27	; 39
    1706:	74 e0       	ldi	r23, 0x04	; 4
    1708:	40 e0       	ldi	r20, 0x00	; 0
    170a:	54 e0       	ldi	r21, 0x04	; 4
    170c:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <fat_read_file>
    1710:	9c 01       	movw	r18, r24
  /* Go to the start of the data */
  int32_t offset = header.data_start;
  fat_seek_file(fd, &offset, FAT_SEEK_SET);

  /* Do some pre-buffering */
  if ((size = read_samples(player.fd, (uint8_t*)pcm_buffer, 2 * PCM_BUFFER_SIZE, player.format)) < (2 * PCM_BUFFER_SIZE))
    1712:	84 e0       	ldi	r24, 0x04	; 4
    1714:	20 30       	cpi	r18, 0x00	; 0
    1716:	38 07       	cpc	r19, r24
    1718:	88 f4       	brcc	.+34     	; 0x173c <player_start+0x22c>
  {
    printf_P(PSTR("Buffering error %i\r\n "), size);
    171a:	00 d0       	rcall	.+0      	; 0x171c <player_start+0x20c>
    171c:	00 d0       	rcall	.+0      	; 0x171e <player_start+0x20e>
    171e:	8b ec       	ldi	r24, 0xCB	; 203
    1720:	92 e0       	ldi	r25, 0x02	; 2
    1722:	ed b7       	in	r30, 0x3d	; 61
    1724:	fe b7       	in	r31, 0x3e	; 62
    1726:	92 83       	std	Z+2, r25	; 0x02
    1728:	81 83       	std	Z+1, r24	; 0x01
    172a:	34 83       	std	Z+4, r19	; 0x04
    172c:	23 83       	std	Z+3, r18	; 0x03
    172e:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <printf_P>
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	0c c0       	rjmp	.+24     	; 0x1754 <player_start+0x244>
    return; 
  }

  /* Set the buffer event handler */
  set_buffer_event_handler(&buffer_refill_handler);
    173c:	87 e9       	ldi	r24, 0x97	; 151
    173e:	99 e0       	ldi	r25, 0x09	; 9
    1740:	0e 94 63 09 	call	0x12c6	; 0x12c6 <set_buffer_event_handler>

  /* Start the DAC */
  dac_start(pcm_buffer, pcm_buffer + PCM_BUFFER_SIZE, PCM_BUFFER_SIZE);
    1744:	87 e2       	ldi	r24, 0x27	; 39
    1746:	94 e0       	ldi	r25, 0x04	; 4
    1748:	67 e2       	ldi	r22, 0x27	; 39
    174a:	76 e0       	ldi	r23, 0x06	; 6
    174c:	40 e0       	ldi	r20, 0x00	; 0
    174e:	52 e0       	ldi	r21, 0x02	; 2
    1750:	0e 94 ba 08 	call	0x1174	; 0x1174 <dac_start>
}
    1754:	60 96       	adiw	r28, 0x10	; 16
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	1f 91       	pop	r17
    1766:	0f 91       	pop	r16
    1768:	ff 90       	pop	r15
    176a:	ef 90       	pop	r14
    176c:	08 95       	ret

0000176e <wavparser_parse_header>:
#else
#define DEBUG_TRACE(sTRING, pARAM)
#endif

t_wavparser_status wavparser_parse_header(struct fat_file_struct* fd, t_wavparser_header* header)
{
    176e:	8f 92       	push	r8
    1770:	9f 92       	push	r9
    1772:	af 92       	push	r10
    1774:	bf 92       	push	r11
    1776:	cf 92       	push	r12
    1778:	df 92       	push	r13
    177a:	ef 92       	push	r14
    177c:	ff 92       	push	r15
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	2f 97       	sbiw	r28, 0x0f	; 15
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	f8 94       	cli
    1790:	de bf       	out	0x3e, r29	; 62
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	cd bf       	out	0x3d, r28	; 61
    1796:	8c 01       	movw	r16, r24
    1798:	5b 01       	movw	r10, r22
  char buffer[5] = { 0, 0, 0, 0, 0};
  uint32_t dword;
  uint16_t word;

  /* Check the header pointer */
  if (header == NULL)
    179a:	61 15       	cp	r22, r1
    179c:	71 05       	cpc	r23, r1
    179e:	11 f4       	brne	.+4      	; 0x17a4 <wavparser_parse_header+0x36>
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	b5 c0       	rjmp	.+362    	; 0x190e <wavparser_parse_header+0x1a0>
  {
    return WAVPARSER_INVALID_PARAMETER;
  }

  /* Go the start of the file */
  int32_t offset = 0;
    17a4:	1f 82       	std	Y+7, r1	; 0x07
    17a6:	18 86       	std	Y+8, r1	; 0x08
    17a8:	19 86       	std	Y+9, r1	; 0x09
    17aa:	1a 86       	std	Y+10, r1	; 0x0a
#define DEBUG_TRACE(sTRING, pARAM)
#endif

t_wavparser_status wavparser_parse_header(struct fat_file_struct* fd, t_wavparser_header* header)
{
  char buffer[5] = { 0, 0, 0, 0, 0};
    17ac:	9b e0       	ldi	r25, 0x0B	; 11
    17ae:	c9 2e       	mov	r12, r25
    17b0:	d1 2c       	mov	r13, r1
    17b2:	cc 0e       	add	r12, r28
    17b4:	dd 1e       	adc	r13, r29
    17b6:	85 e0       	ldi	r24, 0x05	; 5
    17b8:	f6 01       	movw	r30, r12
    17ba:	11 92       	st	Z+, r1
    17bc:	8a 95       	dec	r24
    17be:	e9 f7       	brne	.-6      	; 0x17ba <wavparser_parse_header+0x4c>
    return WAVPARSER_INVALID_PARAMETER;
  }

  /* Go the start of the file */
  int32_t offset = 0;
  fat_seek_file(fd, &offset, FAT_SEEK_SET);
    17c0:	c8 01       	movw	r24, r16
    17c2:	be 01       	movw	r22, r28
    17c4:	69 5f       	subi	r22, 0xF9	; 249
    17c6:	7f 4f       	sbci	r23, 0xFF	; 255
    17c8:	40 e0       	ldi	r20, 0x00	; 0
    17ca:	0e 94 8e 1c 	call	0x391c	; 0x391c <fat_seek_file>

  /* Read the chunk id */
  fat_read_file(fd, (uint8_t*)buffer, 4 * sizeof(char));
    17ce:	c8 01       	movw	r24, r16
    17d0:	b6 01       	movw	r22, r12
    17d2:	44 e0       	ldi	r20, 0x04	; 4
    17d4:	50 e0       	ldi	r21, 0x00	; 0
    17d6:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <fat_read_file>
  DEBUG_TRACE("chunk_id = %s\n", buffer);
  if (strncmp(buffer, "RIFF", 4) != 0)
    17da:	c6 01       	movw	r24, r12
    17dc:	62 e0       	ldi	r22, 0x02	; 2
    17de:	71 e0       	ldi	r23, 0x01	; 1
    17e0:	44 e0       	ldi	r20, 0x04	; 4
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <strncmp>
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	09 f0       	breq	.+2      	; 0x17ee <wavparser_parse_header+0x80>
    17ec:	8f c0       	rjmp	.+286    	; 0x190c <wavparser_parse_header+0x19e>
  {
    return WAVPARSER_INVALID_CHUNK_ID;
  }

  /* Read the chunk size */
  fat_read_file(fd, (uint8_t*)&dword, sizeof(dword));
    17ee:	83 e0       	ldi	r24, 0x03	; 3
    17f0:	88 2e       	mov	r8, r24
    17f2:	91 2c       	mov	r9, r1
    17f4:	8c 0e       	add	r8, r28
    17f6:	9d 1e       	adc	r9, r29
    17f8:	c8 01       	movw	r24, r16
    17fa:	b4 01       	movw	r22, r8
    17fc:	44 e0       	ldi	r20, 0x04	; 4
    17fe:	50 e0       	ldi	r21, 0x00	; 0
    1800:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <fat_read_file>
  DEBUG_TRACE("chunk_size = %li\n", dword);

  /* Read the format */
  fat_read_file(fd, (uint8_t*)buffer, 4 * sizeof(char));
    1804:	c8 01       	movw	r24, r16
    1806:	b6 01       	movw	r22, r12
    1808:	44 e0       	ldi	r20, 0x04	; 4
    180a:	50 e0       	ldi	r21, 0x00	; 0
    180c:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <fat_read_file>
  DEBUG_TRACE("format = %s\n", buffer);
  if (strncmp(buffer, "WAVE", 4) != 0)
    1810:	c6 01       	movw	r24, r12
    1812:	67 e0       	ldi	r22, 0x07	; 7
    1814:	71 e0       	ldi	r23, 0x01	; 1
    1816:	44 e0       	ldi	r20, 0x04	; 4
    1818:	50 e0       	ldi	r21, 0x00	; 0
    181a:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <strncmp>
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	11 f0       	breq	.+4      	; 0x1826 <wavparser_parse_header+0xb8>
    1822:	83 e0       	ldi	r24, 0x03	; 3
    1824:	74 c0       	rjmp	.+232    	; 0x190e <wavparser_parse_header+0x1a0>
  {
    return WAVPARSER_INVALID_FORMAT;
  }

  /* Read the sub chunk id 1 */
  fat_read_file(fd, (uint8_t*)buffer, 4 * sizeof(char));
    1826:	c8 01       	movw	r24, r16
    1828:	b6 01       	movw	r22, r12
    182a:	44 e0       	ldi	r20, 0x04	; 4
    182c:	50 e0       	ldi	r21, 0x00	; 0
    182e:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <fat_read_file>
  DEBUG_TRACE("subchunk_id 1 = %s\n", buffer);
  if (strncmp(buffer, "fmt ", 4) != 0)
    1832:	c6 01       	movw	r24, r12
    1834:	6c e0       	ldi	r22, 0x0C	; 12
    1836:	71 e0       	ldi	r23, 0x01	; 1
    1838:	44 e0       	ldi	r20, 0x04	; 4
    183a:	50 e0       	ldi	r21, 0x00	; 0
    183c:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <strncmp>
    1840:	00 97       	sbiw	r24, 0x00	; 0
    1842:	09 f0       	breq	.+2      	; 0x1846 <wavparser_parse_header+0xd8>
    1844:	63 c0       	rjmp	.+198    	; 0x190c <wavparser_parse_header+0x19e>
  {
    return WAVPARSER_INVALID_CHUNK_ID;
  }

  /* Read the sub chunk size */
  fat_read_file(fd, (uint8_t*)&dword, sizeof(dword));
    1846:	c8 01       	movw	r24, r16
    1848:	b4 01       	movw	r22, r8
    184a:	44 e0       	ldi	r20, 0x04	; 4
    184c:	50 e0       	ldi	r21, 0x00	; 0
    184e:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <fat_read_file>
  DEBUG_TRACE("subchunk_size = %li\n", dword);

  /* Read the audio parameters */
  fat_read_file(fd, (uint8_t*)&word, sizeof(word));
    1852:	7e 01       	movw	r14, r28
    1854:	08 94       	sec
    1856:	e1 1c       	adc	r14, r1
    1858:	f1 1c       	adc	r15, r1
    185a:	c8 01       	movw	r24, r16
    185c:	b7 01       	movw	r22, r14
    185e:	42 e0       	ldi	r20, 0x02	; 2
    1860:	50 e0       	ldi	r21, 0x00	; 0
    1862:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <fat_read_file>
  DEBUG_TRACE("audio_format = %i\n", word);
  if (word != 1)
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	9a 81       	ldd	r25, Y+2	; 0x02
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	11 f0       	breq	.+4      	; 0x1872 <wavparser_parse_header+0x104>
    186e:	84 e0       	ldi	r24, 0x04	; 4
    1870:	4e c0       	rjmp	.+156    	; 0x190e <wavparser_parse_header+0x1a0>
  {
    /* Only support PCM format */
    return WAVPARSER_UNSUPPORTED_AUDIO_FORMAT;
  }

  fat_read_file(fd, (uint8_t*)&word, sizeof(word));
    1872:	c8 01       	movw	r24, r16
    1874:	b7 01       	movw	r22, r14
    1876:	42 e0       	ldi	r20, 0x02	; 2
    1878:	50 e0       	ldi	r21, 0x00	; 0
    187a:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <fat_read_file>
  DEBUG_TRACE("num_channels = %i\n", word);
  header->num_channels = (uint8_t)word;
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	f5 01       	movw	r30, r10
    1882:	82 87       	std	Z+10, r24	; 0x0a

  fat_read_file(fd, (uint8_t*)&dword, sizeof(dword));
    1884:	c8 01       	movw	r24, r16
    1886:	b4 01       	movw	r22, r8
    1888:	44 e0       	ldi	r20, 0x04	; 4
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <fat_read_file>
  DEBUG_TRACE("sample_rate = %li\n", dword);
  header->sample_rate = (uint16_t)dword;
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	f5 01       	movw	r30, r10
    1896:	91 87       	std	Z+9, r25	; 0x09
    1898:	80 87       	std	Z+8, r24	; 0x08

  fat_read_file(fd, (uint8_t*)&dword, sizeof(dword));
    189a:	c8 01       	movw	r24, r16
    189c:	b4 01       	movw	r22, r8
    189e:	44 e0       	ldi	r20, 0x04	; 4
    18a0:	50 e0       	ldi	r21, 0x00	; 0
    18a2:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <fat_read_file>
  DEBUG_TRACE("byte_rate = %li\n", dword);

  fat_read_file(fd, (uint8_t*)&word, sizeof(word));
    18a6:	c8 01       	movw	r24, r16
    18a8:	b7 01       	movw	r22, r14
    18aa:	42 e0       	ldi	r20, 0x02	; 2
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <fat_read_file>
  DEBUG_TRACE("block_align = %i\n", word);

  fat_read_file(fd, (uint8_t*)&word, sizeof(word));
    18b2:	c8 01       	movw	r24, r16
    18b4:	b7 01       	movw	r22, r14
    18b6:	42 e0       	ldi	r20, 0x02	; 2
    18b8:	50 e0       	ldi	r21, 0x00	; 0
    18ba:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <fat_read_file>
  DEBUG_TRACE("bits_per_sample = %i\n", word);
  header->bits_per_sample = (uint8_t)word;
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	f5 01       	movw	r30, r10
    18c2:	83 87       	std	Z+11, r24	; 0x0b

  /* Read the sub chunk id 2 */
  fat_read_file(fd, (uint8_t*)buffer, 4 * sizeof(char));
    18c4:	c8 01       	movw	r24, r16
    18c6:	b6 01       	movw	r22, r12
    18c8:	44 e0       	ldi	r20, 0x04	; 4
    18ca:	50 e0       	ldi	r21, 0x00	; 0
    18cc:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <fat_read_file>
  DEBUG_TRACE("subchunk_id 2 = %s\n", buffer);
  if (strncmp(buffer, "data", 4) != 0)
    18d0:	c6 01       	movw	r24, r12
    18d2:	61 e1       	ldi	r22, 0x11	; 17
    18d4:	71 e0       	ldi	r23, 0x01	; 1
    18d6:	44 e0       	ldi	r20, 0x04	; 4
    18d8:	50 e0       	ldi	r21, 0x00	; 0
    18da:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <strncmp>
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	a9 f4       	brne	.+42     	; 0x190c <wavparser_parse_header+0x19e>
  {
    return WAVPARSER_INVALID_CHUNK_ID;
  }

  /* Read the sub chunk size */
  fat_read_file(fd, (uint8_t*)&dword, sizeof(dword));
    18e2:	c8 01       	movw	r24, r16
    18e4:	b4 01       	movw	r22, r8
    18e6:	44 e0       	ldi	r20, 0x04	; 4
    18e8:	50 e0       	ldi	r21, 0x00	; 0
    18ea:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <fat_read_file>
  DEBUG_TRACE("subchunk_size = %li\n", dword);

  header->data_size = dword;
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	9c 81       	ldd	r25, Y+4	; 0x04
    18f2:	ad 81       	ldd	r26, Y+5	; 0x05
    18f4:	be 81       	ldd	r27, Y+6	; 0x06
    18f6:	f5 01       	movw	r30, r10
    18f8:	84 83       	std	Z+4, r24	; 0x04
    18fa:	95 83       	std	Z+5, r25	; 0x05
    18fc:	a6 83       	std	Z+6, r26	; 0x06
    18fe:	b7 83       	std	Z+7, r27	; 0x07
  fat_tell_file(fd, &header->data_start);
    1900:	c8 01       	movw	r24, r16
    1902:	b5 01       	movw	r22, r10
    1904:	0e 94 32 11 	call	0x2264	; 0x2264 <fat_tell_file>
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	01 c0       	rjmp	.+2      	; 0x190e <wavparser_parse_header+0x1a0>

  return WAVPARSER_OK;
    190c:	82 e0       	ldi	r24, 0x02	; 2
    190e:	2f 96       	adiw	r28, 0x0f	; 15
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	de bf       	out	0x3e, r29	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	cd bf       	out	0x3d, r28	; 61
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	ff 90       	pop	r15
    1924:	ef 90       	pop	r14
    1926:	df 90       	pop	r13
    1928:	cf 90       	pop	r12
    192a:	bf 90       	pop	r11
    192c:	af 90       	pop	r10
    192e:	9f 90       	pop	r9
    1930:	8f 90       	pop	r8
    1932:	08 95       	ret

00001934 <SerialStream_TxByte>:
#include "SerialStream.h"

FILE USARTStream = FDEV_SETUP_STREAM(SerialStream_TxByte, SerialStream_RxByte, _FDEV_SETUP_RW);

static int SerialStream_TxByte(char DataByte, FILE *Stream)
{
    1934:	98 2f       	mov	r25, r24
			 *
			 *  \param[in] DataByte  Byte to transmit through the USART
			 */
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1936:	80 91 c8 00 	lds	r24, 0x00C8
    193a:	85 ff       	sbrs	r24, 5
    193c:	fc cf       	rjmp	.-8      	; 0x1936 <SerialStream_TxByte+0x2>
				UDR1 = DataByte;
    193e:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;
	
	Serial_TxByte(DataByte);
	return 0;
}
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	08 95       	ret

00001948 <SerialStream_RxByte>:
			 *
			 *  \return Byte received from the USART
			 */
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
    1948:	80 91 c8 00 	lds	r24, 0x00C8
    194c:	87 ff       	sbrs	r24, 7
    194e:	fc cf       	rjmp	.-8      	; 0x1948 <SerialStream_RxByte>
				return UDR1; 
    1950:	80 91 ce 00 	lds	r24, 0x00CE
static int SerialStream_RxByte(FILE *Stream)
{
	(void)Stream;

	return Serial_RxByte();
}
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	08 95       	ret

00001958 <fat_close>:
 *
 * \param[in] fs The filesystem to close.
 * \see fat_open
 */
void fat_close(struct fat_fs_struct* fs)
{
    1958:	fc 01       	movw	r30, r24
    if(!fs)
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	11 f0       	breq	.+4      	; 0x1962 <fat_close+0xa>
        return;

#if USE_DYNAMIC_MEMORY
    free(fs);
#else
    fs->partition = 0;
    195e:	11 82       	std	Z+1, r1	; 0x01
    1960:	10 82       	st	Z, r1
    1962:	08 95       	ret

00001964 <fat_get_next_cluster>:
 * \param[in] fs The filesystem for which to determine the next cluster.
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    1964:	0f 93       	push	r16
    1966:	1f 93       	push	r17
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	00 d0       	rcall	.+0      	; 0x196e <fat_get_next_cluster+0xa>
    196e:	00 d0       	rcall	.+0      	; 0x1970 <fat_get_next_cluster+0xc>
    1970:	00 d0       	rcall	.+0      	; 0x1972 <fat_get_next_cluster+0xe>
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	dc 01       	movw	r26, r24
    if(!fs || cluster_num < 2)
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	09 f4       	brne	.+2      	; 0x197e <fat_get_next_cluster+0x1a>
    197c:	88 c0       	rjmp	.+272    	; 0x1a8e <fat_get_next_cluster+0x12a>
    197e:	42 30       	cpi	r20, 0x02	; 2
    1980:	51 05       	cpc	r21, r1
    1982:	61 05       	cpc	r22, r1
    1984:	71 05       	cpc	r23, r1
    1986:	08 f4       	brcc	.+2      	; 0x198a <fat_get_next_cluster+0x26>
    1988:	82 c0       	rjmp	.+260    	; 0x1a8e <fat_get_next_cluster+0x12a>
        return 0;

#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    198a:	ed 91       	ld	r30, X+
    198c:	fc 91       	ld	r31, X
    198e:	11 97       	sbiw	r26, 0x01	; 1
    1990:	80 85       	ldd	r24, Z+8	; 0x08
    1992:	16 96       	adiw	r26, 0x06	; 6
    1994:	0d 91       	ld	r16, X+
    1996:	1d 91       	ld	r17, X+
    1998:	2d 91       	ld	r18, X+
    199a:	3c 91       	ld	r19, X
    199c:	19 97       	sbiw	r26, 0x09	; 9
    199e:	01 90       	ld	r0, Z+
    19a0:	f0 81       	ld	r31, Z
    19a2:	e0 2d       	mov	r30, r0
    19a4:	8b 30       	cpi	r24, 0x0B	; 11
    19a6:	d9 f5       	brne	.+118    	; 0x1a1e <fat_get_next_cluster+0xba>
    {
        /* read appropriate fat entry */
        uint32_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    19a8:	92 e0       	ldi	r25, 0x02	; 2
    19aa:	44 0f       	add	r20, r20
    19ac:	55 1f       	adc	r21, r21
    19ae:	66 1f       	adc	r22, r22
    19b0:	77 1f       	adc	r23, r23
    19b2:	9a 95       	dec	r25
    19b4:	d1 f7       	brne	.-12     	; 0x19aa <fat_get_next_cluster+0x46>
    19b6:	04 0f       	add	r16, r20
    19b8:	15 1f       	adc	r17, r21
    19ba:	26 1f       	adc	r18, r22
    19bc:	37 1f       	adc	r19, r23
    19be:	c9 01       	movw	r24, r18
    19c0:	b8 01       	movw	r22, r16
    19c2:	ae 01       	movw	r20, r28
    19c4:	4d 5f       	subi	r20, 0xFD	; 253
    19c6:	5f 4f       	sbci	r21, 0xFF	; 255
    19c8:	24 e0       	ldi	r18, 0x04	; 4
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	09 95       	icall
    19ce:	88 23       	and	r24, r24
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <fat_get_next_cluster+0x70>
    19d2:	5d c0       	rjmp	.+186    	; 0x1a8e <fat_get_next_cluster+0x12a>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh32(fat_entry);
    19d4:	2b 81       	ldd	r18, Y+3	; 0x03
    19d6:	3c 81       	ldd	r19, Y+4	; 0x04
    19d8:	4d 81       	ldd	r20, Y+5	; 0x05
    19da:	5e 81       	ldd	r21, Y+6	; 0x06
        
        if(cluster_num == FAT32_CLUSTER_FREE ||
    19dc:	21 15       	cp	r18, r1
    19de:	31 05       	cpc	r19, r1
    19e0:	41 05       	cpc	r20, r1
    19e2:	51 05       	cpc	r21, r1
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <fat_get_next_cluster+0x84>
    19e6:	57 c0       	rjmp	.+174    	; 0x1a96 <fat_get_next_cluster+0x132>
    19e8:	27 3f       	cpi	r18, 0xF7	; 247
    19ea:	8f ef       	ldi	r24, 0xFF	; 255
    19ec:	38 07       	cpc	r19, r24
    19ee:	8f ef       	ldi	r24, 0xFF	; 255
    19f0:	48 07       	cpc	r20, r24
    19f2:	8f e0       	ldi	r24, 0x0F	; 15
    19f4:	58 07       	cpc	r21, r24
    19f6:	09 f4       	brne	.+2      	; 0x19fa <fat_get_next_cluster+0x96>
    19f8:	4a c0       	rjmp	.+148    	; 0x1a8e <fat_get_next_cluster+0x12a>
    19fa:	da 01       	movw	r26, r20
    19fc:	c9 01       	movw	r24, r18
    19fe:	80 5f       	subi	r24, 0xF0	; 240
    1a00:	9f 4f       	sbci	r25, 0xFF	; 255
    1a02:	af 4f       	sbci	r26, 0xFF	; 255
    1a04:	bf 40       	sbci	r27, 0x0F	; 15
    1a06:	07 97       	sbiw	r24, 0x07	; 7
    1a08:	a1 05       	cpc	r26, r1
    1a0a:	b1 05       	cpc	r27, r1
    1a0c:	08 f4       	brcc	.+2      	; 0x1a10 <fat_get_next_cluster+0xac>
    1a0e:	3f c0       	rjmp	.+126    	; 0x1a8e <fat_get_next_cluster+0x12a>
    1a10:	da 01       	movw	r26, r20
    1a12:	c9 01       	movw	r24, r18
    1a14:	88 5f       	subi	r24, 0xF8	; 248
    1a16:	9f 4f       	sbci	r25, 0xFF	; 255
    1a18:	af 4f       	sbci	r26, 0xFF	; 255
    1a1a:	bf 40       	sbci	r27, 0x0F	; 15
    1a1c:	34 c0       	rjmp	.+104    	; 0x1a86 <fat_get_next_cluster+0x122>
    else
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    1a1e:	44 0f       	add	r20, r20
    1a20:	55 1f       	adc	r21, r21
    1a22:	66 1f       	adc	r22, r22
    1a24:	77 1f       	adc	r23, r23
    1a26:	04 0f       	add	r16, r20
    1a28:	15 1f       	adc	r17, r21
    1a2a:	26 1f       	adc	r18, r22
    1a2c:	37 1f       	adc	r19, r23
    1a2e:	c9 01       	movw	r24, r18
    1a30:	b8 01       	movw	r22, r16
    1a32:	ae 01       	movw	r20, r28
    1a34:	4f 5f       	subi	r20, 0xFF	; 255
    1a36:	5f 4f       	sbci	r21, 0xFF	; 255
    1a38:	22 e0       	ldi	r18, 0x02	; 2
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	09 95       	icall
    1a3e:	88 23       	and	r24, r24
    1a40:	31 f1       	breq	.+76     	; 0x1a8e <fat_get_next_cluster+0x12a>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	9a 81       	ldd	r25, Y+2	; 0x02
    1a46:	9c 01       	movw	r18, r24
    1a48:	40 e0       	ldi	r20, 0x00	; 0
    1a4a:	50 e0       	ldi	r21, 0x00	; 0
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
    1a4c:	21 15       	cp	r18, r1
    1a4e:	31 05       	cpc	r19, r1
    1a50:	41 05       	cpc	r20, r1
    1a52:	51 05       	cpc	r21, r1
    1a54:	01 f1       	breq	.+64     	; 0x1a96 <fat_get_next_cluster+0x132>
    1a56:	27 3f       	cpi	r18, 0xF7	; 247
    1a58:	8f ef       	ldi	r24, 0xFF	; 255
    1a5a:	38 07       	cpc	r19, r24
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	48 07       	cpc	r20, r24
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	58 07       	cpc	r21, r24
    1a64:	a1 f0       	breq	.+40     	; 0x1a8e <fat_get_next_cluster+0x12a>
    1a66:	da 01       	movw	r26, r20
    1a68:	c9 01       	movw	r24, r18
    1a6a:	80 5f       	subi	r24, 0xF0	; 240
    1a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6e:	a0 40       	sbci	r26, 0x00	; 0
    1a70:	b0 40       	sbci	r27, 0x00	; 0
    1a72:	07 97       	sbiw	r24, 0x07	; 7
    1a74:	a1 05       	cpc	r26, r1
    1a76:	b1 05       	cpc	r27, r1
    1a78:	50 f0       	brcs	.+20     	; 0x1a8e <fat_get_next_cluster+0x12a>
    1a7a:	da 01       	movw	r26, r20
    1a7c:	c9 01       	movw	r24, r18
    1a7e:	88 5f       	subi	r24, 0xF8	; 248
    1a80:	9f 4f       	sbci	r25, 0xFF	; 255
    1a82:	a0 40       	sbci	r26, 0x00	; 0
    1a84:	b0 40       	sbci	r27, 0x00	; 0
    1a86:	08 97       	sbiw	r24, 0x08	; 8
    1a88:	a1 05       	cpc	r26, r1
    1a8a:	b1 05       	cpc	r27, r1
    1a8c:	20 f4       	brcc	.+8      	; 0x1a96 <fat_get_next_cluster+0x132>
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e0       	ldi	r20, 0x00	; 0
    1a94:	50 e0       	ldi	r21, 0x00	; 0
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
            return 0;
    }

    return cluster_num;
}
    1a96:	b9 01       	movw	r22, r18
    1a98:	ca 01       	movw	r24, r20
    1a9a:	26 96       	adiw	r28, 0x06	; 6
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	cd bf       	out	0x3d, r28	; 61
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	08 95       	ret

00001ab0 <fat_free_clusters>:
 * \param[in] cluster_num The starting cluster of the chain which to free.
 * \returns 0 on failure, 1 on success.
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    1ab0:	2f 92       	push	r2
    1ab2:	3f 92       	push	r3
    1ab4:	4f 92       	push	r4
    1ab6:	5f 92       	push	r5
    1ab8:	6f 92       	push	r6
    1aba:	7f 92       	push	r7
    1abc:	8f 92       	push	r8
    1abe:	9f 92       	push	r9
    1ac0:	af 92       	push	r10
    1ac2:	bf 92       	push	r11
    1ac4:	cf 92       	push	r12
    1ac6:	df 92       	push	r13
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <fat_free_clusters+0x26>
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <fat_free_clusters+0x28>
    1ad8:	00 d0       	rcall	.+0      	; 0x1ada <fat_free_clusters+0x2a>
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	4c 01       	movw	r8, r24
    if(!fs || cluster_num < 2)
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <fat_free_clusters+0x36>
    1ae4:	b2 c0       	rjmp	.+356    	; 0x1c4a <fat_free_clusters+0x19a>
    1ae6:	42 30       	cpi	r20, 0x02	; 2
    1ae8:	51 05       	cpc	r21, r1
    1aea:	61 05       	cpc	r22, r1
    1aec:	71 05       	cpc	r23, r1
    1aee:	08 f4       	brcc	.+2      	; 0x1af2 <fat_free_clusters+0x42>
    1af0:	ac c0       	rjmp	.+344    	; 0x1c4a <fat_free_clusters+0x19a>
        return 0;

    offset_t fat_offset = fs->header.fat_offset;
    1af2:	dc 01       	movw	r26, r24
    1af4:	16 96       	adiw	r26, 0x06	; 6
    1af6:	4d 90       	ld	r4, X+
    1af8:	5d 90       	ld	r5, X+
    1afa:	6d 90       	ld	r6, X+
    1afc:	7c 90       	ld	r7, X
    1afe:	19 97       	sbiw	r26, 0x09	; 9
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    1b00:	ed 91       	ld	r30, X+
    1b02:	fc 91       	ld	r31, X
    1b04:	80 85       	ldd	r24, Z+8	; 0x08
    1b06:	8b 30       	cpi	r24, 0x0B	; 11
    1b08:	09 f0       	breq	.+2      	; 0x1b0c <fat_free_clusters+0x5c>
    1b0a:	5c c0       	rjmp	.+184    	; 0x1bc4 <fat_free_clusters+0x114>
    {
        uint32_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    1b0c:	e3 e0       	ldi	r30, 0x03	; 3
    1b0e:	2e 2e       	mov	r2, r30
    1b10:	31 2c       	mov	r3, r1
    1b12:	2c 0e       	add	r2, r28
    1b14:	3d 1e       	adc	r3, r29
    1b16:	5a 01       	movw	r10, r20
    1b18:	6b 01       	movw	r12, r22
    1b1a:	32 e0       	ldi	r19, 0x02	; 2
    1b1c:	aa 0c       	add	r10, r10
    1b1e:	bb 1c       	adc	r11, r11
    1b20:	cc 1c       	adc	r12, r12
    1b22:	dd 1c       	adc	r13, r13
    1b24:	3a 95       	dec	r19
    1b26:	d1 f7       	brne	.-12     	; 0x1b1c <fat_free_clusters+0x6c>
    1b28:	a4 0c       	add	r10, r4
    1b2a:	b5 1c       	adc	r11, r5
    1b2c:	c6 1c       	adc	r12, r6
    1b2e:	d7 1c       	adc	r13, r7
    1b30:	d4 01       	movw	r26, r8
    1b32:	ed 91       	ld	r30, X+
    1b34:	fc 91       	ld	r31, X
    1b36:	01 90       	ld	r0, Z+
    1b38:	f0 81       	ld	r31, Z
    1b3a:	e0 2d       	mov	r30, r0
    1b3c:	c6 01       	movw	r24, r12
    1b3e:	b5 01       	movw	r22, r10
    1b40:	a1 01       	movw	r20, r2
    1b42:	24 e0       	ldi	r18, 0x04	; 4
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	09 95       	icall
    1b48:	88 23       	and	r24, r24
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <fat_free_clusters+0x9e>
    1b4c:	7e c0       	rjmp	.+252    	; 0x1c4a <fat_free_clusters+0x19a>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint32_t cluster_num_next = ltoh32(fat_entry);
    1b4e:	eb 80       	ldd	r14, Y+3	; 0x03
    1b50:	fc 80       	ldd	r15, Y+4	; 0x04
    1b52:	0d 81       	ldd	r16, Y+5	; 0x05
    1b54:	1e 81       	ldd	r17, Y+6	; 0x06

            if(cluster_num_next == FAT32_CLUSTER_FREE)
    1b56:	e1 14       	cp	r14, r1
    1b58:	f1 04       	cpc	r15, r1
    1b5a:	01 05       	cpc	r16, r1
    1b5c:	11 05       	cpc	r17, r1
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <fat_free_clusters+0xb2>
    1b60:	76 c0       	rjmp	.+236    	; 0x1c4e <fat_free_clusters+0x19e>
                return 1;
            if(cluster_num_next == FAT32_CLUSTER_BAD ||
    1b62:	d8 01       	movw	r26, r16
    1b64:	c7 01       	movw	r24, r14
    1b66:	80 5f       	subi	r24, 0xF0	; 240
    1b68:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6a:	af 4f       	sbci	r26, 0xFF	; 255
    1b6c:	bf 40       	sbci	r27, 0x0F	; 15
    1b6e:	08 97       	sbiw	r24, 0x08	; 8
    1b70:	a1 05       	cpc	r26, r1
    1b72:	b1 05       	cpc	r27, r1
    1b74:	08 f4       	brcc	.+2      	; 0x1b78 <fat_free_clusters+0xc8>
    1b76:	69 c0       	rjmp	.+210    	; 0x1c4a <fat_free_clusters+0x19a>
               (cluster_num_next >= FAT32_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT32_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT32_CLUSTER_LAST_MIN && cluster_num_next <= FAT32_CLUSTER_LAST_MAX)
    1b78:	d8 01       	movw	r26, r16
    1b7a:	c7 01       	movw	r24, r14
    1b7c:	88 5f       	subi	r24, 0xF8	; 248
    1b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b80:	af 4f       	sbci	r26, 0xFF	; 255
    1b82:	bf 40       	sbci	r27, 0x0F	; 15
    1b84:	08 97       	sbiw	r24, 0x08	; 8
    1b86:	a1 05       	cpc	r26, r1
    1b88:	b1 05       	cpc	r27, r1
    1b8a:	18 f4       	brcc	.+6      	; 0x1b92 <fat_free_clusters+0xe2>
    1b8c:	ee 24       	eor	r14, r14
    1b8e:	ff 24       	eor	r15, r15
    1b90:	87 01       	movw	r16, r14
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL32(FAT32_CLUSTER_FREE);
    1b92:	1b 82       	std	Y+3, r1	; 0x03
    1b94:	1c 82       	std	Y+4, r1	; 0x04
    1b96:	1d 82       	std	Y+5, r1	; 0x05
    1b98:	1e 82       	std	Y+6, r1	; 0x06
            fs->partition->device_write(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
    1b9a:	d4 01       	movw	r26, r8
    1b9c:	ed 91       	ld	r30, X+
    1b9e:	fc 91       	ld	r31, X
    1ba0:	04 80       	ldd	r0, Z+4	; 0x04
    1ba2:	f5 81       	ldd	r31, Z+5	; 0x05
    1ba4:	e0 2d       	mov	r30, r0
    1ba6:	c6 01       	movw	r24, r12
    1ba8:	b5 01       	movw	r22, r10
    1baa:	a1 01       	movw	r20, r2
    1bac:	24 e0       	ldi	r18, 0x04	; 4
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	09 95       	icall
    1bb2:	b8 01       	movw	r22, r16
    1bb4:	a7 01       	movw	r20, r14
    offset_t fat_offset = fs->header.fat_offset;
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    {
        uint32_t fat_entry;
        while(cluster_num)
    1bb6:	e1 14       	cp	r14, r1
    1bb8:	f1 04       	cpc	r15, r1
    1bba:	01 05       	cpc	r16, r1
    1bbc:	11 05       	cpc	r17, r1
    1bbe:	09 f0       	breq	.+2      	; 0x1bc2 <fat_free_clusters+0x112>
    1bc0:	aa cf       	rjmp	.-172    	; 0x1b16 <fat_free_clusters+0x66>
    1bc2:	45 c0       	rjmp	.+138    	; 0x1c4e <fat_free_clusters+0x19e>
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    1bc4:	5e 01       	movw	r10, r28
    1bc6:	08 94       	sec
    1bc8:	a1 1c       	adc	r10, r1
    1bca:	b1 1c       	adc	r11, r1
    1bcc:	7a 01       	movw	r14, r20
    1bce:	8b 01       	movw	r16, r22
    1bd0:	ee 0c       	add	r14, r14
    1bd2:	ff 1c       	adc	r15, r15
    1bd4:	00 1f       	adc	r16, r16
    1bd6:	11 1f       	adc	r17, r17
    1bd8:	e4 0c       	add	r14, r4
    1bda:	f5 1c       	adc	r15, r5
    1bdc:	06 1d       	adc	r16, r6
    1bde:	17 1d       	adc	r17, r7
    1be0:	d4 01       	movw	r26, r8
    1be2:	ed 91       	ld	r30, X+
    1be4:	fc 91       	ld	r31, X
    1be6:	01 90       	ld	r0, Z+
    1be8:	f0 81       	ld	r31, Z
    1bea:	e0 2d       	mov	r30, r0
    1bec:	c8 01       	movw	r24, r16
    1bee:	b7 01       	movw	r22, r14
    1bf0:	a5 01       	movw	r20, r10
    1bf2:	22 e0       	ldi	r18, 0x02	; 2
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	09 95       	icall
    1bf8:	88 23       	and	r24, r24
    1bfa:	39 f1       	breq	.+78     	; 0x1c4a <fat_free_clusters+0x19a>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ltoh16(fat_entry);
    1bfc:	c9 80       	ldd	r12, Y+1	; 0x01
    1bfe:	da 80       	ldd	r13, Y+2	; 0x02

            if(cluster_num_next == FAT16_CLUSTER_FREE)
    1c00:	c1 14       	cp	r12, r1
    1c02:	d1 04       	cpc	r13, r1
    1c04:	21 f1       	breq	.+72     	; 0x1c4e <fat_free_clusters+0x19e>
                return 1;
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
    1c06:	c6 01       	movw	r24, r12
    1c08:	40 96       	adiw	r24, 0x10	; 16
    1c0a:	08 97       	sbiw	r24, 0x08	; 8
    1c0c:	f0 f0       	brcs	.+60     	; 0x1c4a <fat_free_clusters+0x19a>
               (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
    1c0e:	b8 ef       	ldi	r27, 0xF8	; 248
    1c10:	cb 16       	cp	r12, r27
    1c12:	bf ef       	ldi	r27, 0xFF	; 255
    1c14:	db 06       	cpc	r13, r27
    1c16:	10 f0       	brcs	.+4      	; 0x1c1c <fat_free_clusters+0x16c>
    1c18:	cc 24       	eor	r12, r12
    1c1a:	dd 24       	eor	r13, r13
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
    1c1c:	1a 82       	std	Y+2, r1	; 0x02
    1c1e:	19 82       	std	Y+1, r1	; 0x01
            fs->partition->device_write(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
    1c20:	d4 01       	movw	r26, r8
    1c22:	ed 91       	ld	r30, X+
    1c24:	fc 91       	ld	r31, X
    1c26:	04 80       	ldd	r0, Z+4	; 0x04
    1c28:	f5 81       	ldd	r31, Z+5	; 0x05
    1c2a:	e0 2d       	mov	r30, r0
    1c2c:	c8 01       	movw	r24, r16
    1c2e:	b7 01       	movw	r22, r14
    1c30:	a5 01       	movw	r20, r10
    1c32:	22 e0       	ldi	r18, 0x02	; 2
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	09 95       	icall

            /* We continue in any case here, even if freeing the cluster failed.
             * The cluster is lost, but maybe we can still free up some later ones.
             */

            cluster_num = cluster_num_next;
    1c38:	a6 01       	movw	r20, r12
    1c3a:	60 e0       	ldi	r22, 0x00	; 0
    1c3c:	70 e0       	ldi	r23, 0x00	; 0
    }
    else
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
    1c3e:	41 15       	cp	r20, r1
    1c40:	51 05       	cpc	r21, r1
    1c42:	61 05       	cpc	r22, r1
    1c44:	71 05       	cpc	r23, r1
    1c46:	11 f6       	brne	.-124    	; 0x1bcc <fat_free_clusters+0x11c>
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <fat_free_clusters+0x19e>
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	01 c0       	rjmp	.+2      	; 0x1c50 <fat_free_clusters+0x1a0>
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
            cluster_num = cluster_num_next;
        }
    }

    return 1;
}
    1c50:	26 96       	adiw	r28, 0x06	; 6
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	de bf       	out	0x3e, r29	; 62
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	cd bf       	out	0x3d, r28	; 61
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	1f 91       	pop	r17
    1c62:	0f 91       	pop	r16
    1c64:	ff 90       	pop	r15
    1c66:	ef 90       	pop	r14
    1c68:	df 90       	pop	r13
    1c6a:	cf 90       	pop	r12
    1c6c:	bf 90       	pop	r11
    1c6e:	af 90       	pop	r10
    1c70:	9f 90       	pop	r9
    1c72:	8f 90       	pop	r8
    1c74:	7f 90       	pop	r7
    1c76:	6f 90       	pop	r6
    1c78:	5f 90       	pop	r5
    1c7a:	4f 90       	pop	r4
    1c7c:	3f 90       	pop	r3
    1c7e:	2f 90       	pop	r2
    1c80:	08 95       	ret

00001c82 <fat_append_clusters>:
 * \param[in] cluster_num The cluster to which to append the new chain.
 * \param[in] count The number of clusters to allocate.
 * \returns 0 on failure, the number of the first new cluster on success.
 */
cluster_t fat_append_clusters(const struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
    1c82:	2f 92       	push	r2
    1c84:	3f 92       	push	r3
    1c86:	4f 92       	push	r4
    1c88:	5f 92       	push	r5
    1c8a:	6f 92       	push	r6
    1c8c:	7f 92       	push	r7
    1c8e:	8f 92       	push	r8
    1c90:	9f 92       	push	r9
    1c92:	af 92       	push	r10
    1c94:	bf 92       	push	r11
    1c96:	cf 92       	push	r12
    1c98:	df 92       	push	r13
    1c9a:	ef 92       	push	r14
    1c9c:	ff 92       	push	r15
    1c9e:	0f 93       	push	r16
    1ca0:	1f 93       	push	r17
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	6d 97       	sbiw	r28, 0x1d	; 29
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	de bf       	out	0x3e, r29	; 62
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	cd bf       	out	0x3d, r28	; 61
    1cb6:	9d 8f       	std	Y+29, r25	; 0x1d
    1cb8:	8c 8f       	std	Y+28, r24	; 0x1c
    1cba:	3a 01       	movw	r6, r20
    1cbc:	4b 01       	movw	r8, r22
    1cbe:	b9 01       	movw	r22, r18
    if(!fs)
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <fat_append_clusters+0x44>
    1cc4:	44 c1       	rjmp	.+648    	; 0x1f4e <fat_append_clusters+0x2cc>
        return 0;

    device_read_t device_read = fs->partition->device_read;
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	ed 91       	ld	r30, X+
    1cca:	fc 91       	ld	r31, X
    1ccc:	11 97       	sbiw	r26, 0x01	; 1
    1cce:	20 81       	ld	r18, Z
    1cd0:	31 81       	ldd	r19, Z+1	; 0x01
    1cd2:	3b 8f       	std	Y+27, r19	; 0x1b
    1cd4:	2a 8f       	std	Y+26, r18	; 0x1a
    device_write_t device_write = fs->partition->device_write;
    1cd6:	44 81       	ldd	r20, Z+4	; 0x04
    1cd8:	55 81       	ldd	r21, Z+5	; 0x05
    1cda:	59 8f       	std	Y+25, r21	; 0x19
    1cdc:	48 8f       	std	Y+24, r20	; 0x18
    offset_t fat_offset = fs->header.fat_offset;
    1cde:	16 96       	adiw	r26, 0x06	; 6
    1ce0:	ad 90       	ld	r10, X+
    1ce2:	bd 90       	ld	r11, X+
    1ce4:	cd 90       	ld	r12, X+
    1ce6:	dc 90       	ld	r13, X
    1ce8:	19 97       	sbiw	r26, 0x09	; 9
    cluster_t cluster_next = 0;
    cluster_t cluster_max;
    uint16_t fat_entry16;
#if FAT_FAT32_SUPPORT
    uint32_t fat_entry32;
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
    1cea:	1f 86       	std	Y+15, r1	; 0x0f
    1cec:	80 85       	ldd	r24, Z+8	; 0x08
    1cee:	8b 30       	cpi	r24, 0x0B	; 11
    1cf0:	11 f4       	brne	.+4      	; 0x1cf6 <fat_append_clusters+0x74>
    1cf2:	51 e0       	ldi	r21, 0x01	; 1
    1cf4:	5f 87       	std	Y+15, r21	; 0x0f
    1cf6:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1cf8:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1cfa:	82 85       	ldd	r24, Z+10	; 0x0a
    1cfc:	93 85       	ldd	r25, Z+11	; 0x0b
    1cfe:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d00:	b5 85       	ldd	r27, Z+13	; 0x0d

    if(is_fat32)
    1d02:	ff 85       	ldd	r31, Y+15	; 0x0f
    1d04:	ff 23       	and	r31, r31
    1d06:	51 f0       	breq	.+20     	; 0x1d1c <fat_append_clusters+0x9a>
        cluster_max = fs->header.fat_size / sizeof(fat_entry32);
    1d08:	9c 01       	movw	r18, r24
    1d0a:	ad 01       	movw	r20, r26
    1d0c:	92 e0       	ldi	r25, 0x02	; 2
    1d0e:	56 95       	lsr	r21
    1d10:	47 95       	ror	r20
    1d12:	37 95       	ror	r19
    1d14:	27 95       	ror	r18
    1d16:	9a 95       	dec	r25
    1d18:	d1 f7       	brne	.-12     	; 0x1d0e <fat_append_clusters+0x8c>
    1d1a:	06 c0       	rjmp	.+12     	; 0x1d28 <fat_append_clusters+0xa6>
    else
#endif
        cluster_max = fs->header.fat_size / sizeof(fat_entry16);
    1d1c:	9c 01       	movw	r18, r24
    1d1e:	ad 01       	movw	r20, r26
    1d20:	56 95       	lsr	r21
    1d22:	47 95       	ror	r20
    1d24:	37 95       	ror	r19
    1d26:	27 95       	ror	r18
    1d28:	28 8b       	std	Y+16, r18	; 0x10
    1d2a:	39 8b       	std	Y+17, r19	; 0x11
    1d2c:	4a 8b       	std	Y+18, r20	; 0x12
    1d2e:	5b 8b       	std	Y+19, r21	; 0x13
    1d30:	d6 01       	movw	r26, r12
    1d32:	c5 01       	movw	r24, r10
    1d34:	08 96       	adiw	r24, 0x08	; 8
    1d36:	a1 1d       	adc	r26, r1
    1d38:	b1 1d       	adc	r27, r1
    1d3a:	8b 87       	std	Y+11, r24	; 0x0b
    1d3c:	9c 87       	std	Y+12, r25	; 0x0c
    1d3e:	ad 87       	std	Y+13, r26	; 0x0d
    1d40:	be 87       	std	Y+14, r27	; 0x0e
    1d42:	a6 01       	movw	r20, r12
    1d44:	95 01       	movw	r18, r10
    1d46:	2c 5f       	subi	r18, 0xFC	; 252
    1d48:	3f 4f       	sbci	r19, 0xFF	; 255
    1d4a:	4f 4f       	sbci	r20, 0xFF	; 255
    1d4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d4e:	2f 83       	std	Y+7, r18	; 0x07
    1d50:	38 87       	std	Y+8, r19	; 0x08
    1d52:	49 87       	std	Y+9, r20	; 0x09
    1d54:	5a 87       	std	Y+10, r21	; 0x0a
    1d56:	c8 01       	movw	r24, r16
    1d58:	db 01       	movw	r26, r22
    1d5a:	8c 8b       	std	Y+20, r24	; 0x14
    1d5c:	9d 8b       	std	Y+21, r25	; 0x15
    1d5e:	ae 8b       	std	Y+22, r26	; 0x16
    1d60:	bf 8b       	std	Y+23, r27	; 0x17
    1d62:	ee 24       	eor	r14, r14
    1d64:	ff 24       	eor	r15, r15
    1d66:	87 01       	movw	r16, r14
    1d68:	b2 e0       	ldi	r27, 0x02	; 2
    1d6a:	2b 2e       	mov	r2, r27
    1d6c:	31 2c       	mov	r3, r1
    1d6e:	41 2c       	mov	r4, r1
    1d70:	51 2c       	mov	r5, r1
    1d72:	9a c0       	rjmp	.+308    	; 0x1ea8 <fat_append_clusters+0x226>

    for(cluster_t cluster_new = 2; cluster_new < cluster_max; ++cluster_new)
    {
#if FAT_FAT32_SUPPORT
        if(is_fat32)
    1d74:	3f 85       	ldd	r19, Y+15	; 0x0f
    1d76:	33 23       	and	r19, r19
    1d78:	81 f0       	breq	.+32     	; 0x1d9a <fat_append_clusters+0x118>
        {
            if(!device_read(fat_offset + cluster_new * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
    1d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d82:	ae 01       	movw	r20, r28
    1d84:	4d 5f       	subi	r20, 0xFD	; 253
    1d86:	5f 4f       	sbci	r21, 0xFF	; 255
    1d88:	24 e0       	ldi	r18, 0x04	; 4
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1d8e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1d90:	fd 01       	movw	r30, r26
    1d92:	09 95       	icall
    1d94:	88 23       	and	r24, r24
    1d96:	b1 f4       	brne	.+44     	; 0x1dc4 <fat_append_clusters+0x142>
    1d98:	da c0       	rjmp	.+436    	; 0x1f4e <fat_append_clusters+0x2cc>
                return 0;
        }
        else
#endif
        {
            if(!device_read(fat_offset + cluster_new * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    1d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9c:	78 85       	ldd	r23, Y+8	; 0x08
    1d9e:	89 85       	ldd	r24, Y+9	; 0x09
    1da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da2:	ae 01       	movw	r20, r28
    1da4:	4f 5f       	subi	r20, 0xFF	; 255
    1da6:	5f 4f       	sbci	r21, 0xFF	; 255
    1da8:	22 e0       	ldi	r18, 0x02	; 2
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1dae:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1db0:	09 95       	icall
    1db2:	88 23       	and	r24, r24
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <fat_append_clusters+0x136>
    1db6:	cb c0       	rjmp	.+406    	; 0x1f4e <fat_append_clusters+0x2cc>
        }
        else
#endif
        {
            /* check if this is a free cluster */
            if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbc:	89 2b       	or	r24, r25
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <fat_append_clusters+0x140>
    1dc0:	57 c0       	rjmp	.+174    	; 0x1e70 <fat_append_clusters+0x1ee>
    1dc2:	25 c0       	rjmp	.+74     	; 0x1e0e <fat_append_clusters+0x18c>

#if FAT_FAT32_SUPPORT
        if(is_fat32)
        {
            /* check if this is a free cluster */
            if(fat_entry32 != HTOL32(FAT32_CLUSTER_FREE))
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc8:	ad 81       	ldd	r26, Y+5	; 0x05
    1dca:	be 81       	ldd	r27, Y+6	; 0x06
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	a1 05       	cpc	r26, r1
    1dd0:	b1 05       	cpc	r27, r1
    1dd2:	09 f0       	breq	.+2      	; 0x1dd6 <fat_append_clusters+0x154>
    1dd4:	4d c0       	rjmp	.+154    	; 0x1e70 <fat_append_clusters+0x1ee>
                continue;

            /* allocate cluster */
            if(cluster_next == 0)
    1dd6:	e1 14       	cp	r14, r1
    1dd8:	f1 04       	cpc	r15, r1
    1dda:	01 05       	cpc	r16, r1
    1ddc:	11 05       	cpc	r17, r1
    1dde:	49 f4       	brne	.+18     	; 0x1df2 <fat_append_clusters+0x170>
                fat_entry32 = HTOL32(FAT32_CLUSTER_LAST_MAX);
    1de0:	2f ef       	ldi	r18, 0xFF	; 255
    1de2:	3f ef       	ldi	r19, 0xFF	; 255
    1de4:	4f ef       	ldi	r20, 0xFF	; 255
    1de6:	5f e0       	ldi	r21, 0x0F	; 15
    1de8:	2b 83       	std	Y+3, r18	; 0x03
    1dea:	3c 83       	std	Y+4, r19	; 0x04
    1dec:	4d 83       	std	Y+5, r20	; 0x05
    1dee:	5e 83       	std	Y+6, r21	; 0x06
    1df0:	04 c0       	rjmp	.+8      	; 0x1dfa <fat_append_clusters+0x178>
            else
                fat_entry32 = htol32(cluster_next);
    1df2:	eb 82       	std	Y+3, r14	; 0x03
    1df4:	fc 82       	std	Y+4, r15	; 0x04
    1df6:	0d 83       	std	Y+5, r16	; 0x05
    1df8:	1e 83       	std	Y+6, r17	; 0x06

            if(!device_write(fat_offset + cluster_new * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
    1dfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e02:	ae 01       	movw	r20, r28
    1e04:	4d 5f       	subi	r20, 0xFD	; 253
    1e06:	5f 4f       	sbci	r21, 0xFF	; 255
    1e08:	24 e0       	ldi	r18, 0x04	; 4
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	15 c0       	rjmp	.+42     	; 0x1e38 <fat_append_clusters+0x1b6>
            /* check if this is a free cluster */
            if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
                continue;

            /* allocate cluster */
            if(cluster_next == 0)
    1e0e:	e1 14       	cp	r14, r1
    1e10:	f1 04       	cpc	r15, r1
    1e12:	01 05       	cpc	r16, r1
    1e14:	11 05       	cpc	r17, r1
    1e16:	29 f4       	brne	.+10     	; 0x1e22 <fat_append_clusters+0x1a0>
                fat_entry16 = HTOL16(FAT16_CLUSTER_LAST_MAX);
    1e18:	ef ef       	ldi	r30, 0xFF	; 255
    1e1a:	ff ef       	ldi	r31, 0xFF	; 255
    1e1c:	fa 83       	std	Y+2, r31	; 0x02
    1e1e:	e9 83       	std	Y+1, r30	; 0x01
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <fat_append_clusters+0x1a4>
            else
                fat_entry16 = htol16((uint16_t) cluster_next);
    1e22:	fa 82       	std	Y+2, r15	; 0x02
    1e24:	e9 82       	std	Y+1, r14	; 0x01

            if(!device_write(fat_offset + cluster_new * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    1e26:	6f 81       	ldd	r22, Y+7	; 0x07
    1e28:	78 85       	ldd	r23, Y+8	; 0x08
    1e2a:	89 85       	ldd	r24, Y+9	; 0x09
    1e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2e:	ae 01       	movw	r20, r28
    1e30:	4f 5f       	subi	r20, 0xFF	; 255
    1e32:	5f 4f       	sbci	r21, 0xFF	; 255
    1e34:	22 e0       	ldi	r18, 0x02	; 2
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	a8 8d       	ldd	r26, Y+24	; 0x18
    1e3a:	b9 8d       	ldd	r27, Y+25	; 0x19
    1e3c:	fd 01       	movw	r30, r26
    1e3e:	09 95       	icall
    1e40:	88 23       	and	r24, r24
    1e42:	e1 f1       	breq	.+120    	; 0x1ebc <fat_append_clusters+0x23a>
                break;
        }

        cluster_next = cluster_new;
        if(--count_left == 0)
    1e44:	2c 89       	ldd	r18, Y+20	; 0x14
    1e46:	3d 89       	ldd	r19, Y+21	; 0x15
    1e48:	4e 89       	ldd	r20, Y+22	; 0x16
    1e4a:	5f 89       	ldd	r21, Y+23	; 0x17
    1e4c:	21 50       	subi	r18, 0x01	; 1
    1e4e:	30 40       	sbci	r19, 0x00	; 0
    1e50:	40 40       	sbci	r20, 0x00	; 0
    1e52:	50 40       	sbci	r21, 0x00	; 0
    1e54:	2c 8b       	std	Y+20, r18	; 0x14
    1e56:	3d 8b       	std	Y+21, r19	; 0x15
    1e58:	4e 8b       	std	Y+22, r20	; 0x16
    1e5a:	5f 8b       	std	Y+23, r21	; 0x17
    1e5c:	21 15       	cp	r18, r1
    1e5e:	31 05       	cpc	r19, r1
    1e60:	41 05       	cpc	r20, r1
    1e62:	51 05       	cpc	r21, r1
    1e64:	19 f4       	brne	.+6      	; 0x1e6c <fat_append_clusters+0x1ea>
    1e66:	82 01       	movw	r16, r4
    1e68:	71 01       	movw	r14, r2
    1e6a:	31 c0       	rjmp	.+98     	; 0x1ece <fat_append_clusters+0x24c>
    1e6c:	82 01       	movw	r16, r4
    1e6e:	71 01       	movw	r14, r2
        cluster_max = fs->header.fat_size / sizeof(fat_entry32);
    else
#endif
        cluster_max = fs->header.fat_size / sizeof(fat_entry16);

    for(cluster_t cluster_new = 2; cluster_new < cluster_max; ++cluster_new)
    1e70:	08 94       	sec
    1e72:	21 1c       	adc	r2, r1
    1e74:	31 1c       	adc	r3, r1
    1e76:	41 1c       	adc	r4, r1
    1e78:	51 1c       	adc	r5, r1
    1e7a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e7c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e7e:	ad 85       	ldd	r26, Y+13	; 0x0d
    1e80:	be 85       	ldd	r27, Y+14	; 0x0e
    1e82:	04 96       	adiw	r24, 0x04	; 4
    1e84:	a1 1d       	adc	r26, r1
    1e86:	b1 1d       	adc	r27, r1
    1e88:	8b 87       	std	Y+11, r24	; 0x0b
    1e8a:	9c 87       	std	Y+12, r25	; 0x0c
    1e8c:	ad 87       	std	Y+13, r26	; 0x0d
    1e8e:	be 87       	std	Y+14, r27	; 0x0e
    1e90:	2f 81       	ldd	r18, Y+7	; 0x07
    1e92:	38 85       	ldd	r19, Y+8	; 0x08
    1e94:	49 85       	ldd	r20, Y+9	; 0x09
    1e96:	5a 85       	ldd	r21, Y+10	; 0x0a
    1e98:	2e 5f       	subi	r18, 0xFE	; 254
    1e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9c:	4f 4f       	sbci	r20, 0xFF	; 255
    1e9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea0:	2f 83       	std	Y+7, r18	; 0x07
    1ea2:	38 87       	std	Y+8, r19	; 0x08
    1ea4:	49 87       	std	Y+9, r20	; 0x09
    1ea6:	5a 87       	std	Y+10, r21	; 0x0a
    1ea8:	88 89       	ldd	r24, Y+16	; 0x10
    1eaa:	99 89       	ldd	r25, Y+17	; 0x11
    1eac:	aa 89       	ldd	r26, Y+18	; 0x12
    1eae:	bb 89       	ldd	r27, Y+19	; 0x13
    1eb0:	28 16       	cp	r2, r24
    1eb2:	39 06       	cpc	r3, r25
    1eb4:	4a 06       	cpc	r4, r26
    1eb6:	5b 06       	cpc	r5, r27
    1eb8:	08 f4       	brcc	.+2      	; 0x1ebc <fat_append_clusters+0x23a>
    1eba:	5c cf       	rjmp	.-328    	; 0x1d74 <fat_append_clusters+0xf2>
            break;
    }

    do
    {
        if(count_left > 0)
    1ebc:	2c 89       	ldd	r18, Y+20	; 0x14
    1ebe:	3d 89       	ldd	r19, Y+21	; 0x15
    1ec0:	4e 89       	ldd	r20, Y+22	; 0x16
    1ec2:	5f 89       	ldd	r21, Y+23	; 0x17
    1ec4:	21 15       	cp	r18, r1
    1ec6:	31 05       	cpc	r19, r1
    1ec8:	41 05       	cpc	r20, r1
    1eca:	51 05       	cpc	r21, r1
    1ecc:	d1 f5       	brne	.+116    	; 0x1f42 <fat_append_clusters+0x2c0>
            break;

        /* We allocated a new cluster chain. Now join
         * it with the existing one (if any).
         */
        if(cluster_num >= 2)
    1ece:	32 e0       	ldi	r19, 0x02	; 2
    1ed0:	63 16       	cp	r6, r19
    1ed2:	71 04       	cpc	r7, r1
    1ed4:	81 04       	cpc	r8, r1
    1ed6:	91 04       	cpc	r9, r1
    1ed8:	e8 f1       	brcs	.+122    	; 0x1f54 <fat_append_clusters+0x2d2>
        {
#if FAT_FAT32_SUPPORT
            if(is_fat32)
    1eda:	4f 85       	ldd	r20, Y+15	; 0x0f
    1edc:	44 23       	and	r20, r20
    1ede:	d9 f0       	breq	.+54     	; 0x1f16 <fat_append_clusters+0x294>
            {
                fat_entry32 = htol32(cluster_next);
    1ee0:	eb 82       	std	Y+3, r14	; 0x03
    1ee2:	fc 82       	std	Y+4, r15	; 0x04
    1ee4:	0d 83       	std	Y+5, r16	; 0x05
    1ee6:	1e 83       	std	Y+6, r17	; 0x06

                if(!device_write(fat_offset + cluster_num * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
    1ee8:	a2 e0       	ldi	r26, 0x02	; 2
    1eea:	66 0c       	add	r6, r6
    1eec:	77 1c       	adc	r7, r7
    1eee:	88 1c       	adc	r8, r8
    1ef0:	99 1c       	adc	r9, r9
    1ef2:	aa 95       	dec	r26
    1ef4:	d1 f7       	brne	.-12     	; 0x1eea <fat_append_clusters+0x268>
    1ef6:	a6 0c       	add	r10, r6
    1ef8:	b7 1c       	adc	r11, r7
    1efa:	c8 1c       	adc	r12, r8
    1efc:	d9 1c       	adc	r13, r9
    1efe:	c6 01       	movw	r24, r12
    1f00:	b5 01       	movw	r22, r10
    1f02:	ae 01       	movw	r20, r28
    1f04:	4d 5f       	subi	r20, 0xFD	; 253
    1f06:	5f 4f       	sbci	r21, 0xFF	; 255
    1f08:	24 e0       	ldi	r18, 0x04	; 4
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	a8 8d       	ldd	r26, Y+24	; 0x18
    1f0e:	b9 8d       	ldd	r27, Y+25	; 0x19
    1f10:	fd 01       	movw	r30, r26
    1f12:	09 95       	icall
    1f14:	14 c0       	rjmp	.+40     	; 0x1f3e <fat_append_clusters+0x2bc>
                    break;
            }
            else
#endif
            {
                fat_entry16 = htol16((uint16_t) cluster_next);
    1f16:	fa 82       	std	Y+2, r15	; 0x02
    1f18:	e9 82       	std	Y+1, r14	; 0x01

                if(!device_write(fat_offset + cluster_num * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    1f1a:	66 0c       	add	r6, r6
    1f1c:	77 1c       	adc	r7, r7
    1f1e:	88 1c       	adc	r8, r8
    1f20:	99 1c       	adc	r9, r9
    1f22:	a6 0c       	add	r10, r6
    1f24:	b7 1c       	adc	r11, r7
    1f26:	c8 1c       	adc	r12, r8
    1f28:	d9 1c       	adc	r13, r9
    1f2a:	c6 01       	movw	r24, r12
    1f2c:	b5 01       	movw	r22, r10
    1f2e:	ae 01       	movw	r20, r28
    1f30:	4f 5f       	subi	r20, 0xFF	; 255
    1f32:	5f 4f       	sbci	r21, 0xFF	; 255
    1f34:	22 e0       	ldi	r18, 0x02	; 2
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	e8 8d       	ldd	r30, Y+24	; 0x18
    1f3a:	f9 8d       	ldd	r31, Y+25	; 0x19
    1f3c:	09 95       	icall
    1f3e:	88 23       	and	r24, r24
    1f40:	49 f4       	brne	.+18     	; 0x1f54 <fat_append_clusters+0x2d2>
    } while(0);

    /* No space left on device or writing error.
     * Free up all clusters already allocated.
     */
    fat_free_clusters(fs, cluster_next);
    1f42:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f44:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f46:	b8 01       	movw	r22, r16
    1f48:	a7 01       	movw	r20, r14
    1f4a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <fat_free_clusters>

    return 0;
    1f4e:	ee 24       	eor	r14, r14
    1f50:	ff 24       	eor	r15, r15
    1f52:	87 01       	movw	r16, r14
}
    1f54:	b7 01       	movw	r22, r14
    1f56:	c8 01       	movw	r24, r16
    1f58:	6d 96       	adiw	r28, 0x1d	; 29
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	1f 91       	pop	r17
    1f6a:	0f 91       	pop	r16
    1f6c:	ff 90       	pop	r15
    1f6e:	ef 90       	pop	r14
    1f70:	df 90       	pop	r13
    1f72:	cf 90       	pop	r12
    1f74:	bf 90       	pop	r11
    1f76:	af 90       	pop	r10
    1f78:	9f 90       	pop	r9
    1f7a:	8f 90       	pop	r8
    1f7c:	7f 90       	pop	r7
    1f7e:	6f 90       	pop	r6
    1f80:	5f 90       	pop	r5
    1f82:	4f 90       	pop	r4
    1f84:	3f 90       	pop	r3
    1f86:	2f 90       	pop	r2
    1f88:	08 95       	ret

00001f8a <fat_clear_cluster_callback>:
 * Callback function for clearing a cluster.
 */
uintptr_t fat_clear_cluster_callback(uint8_t* buffer, offset_t offset, void* p)
{
    return 16;
}
    1f8a:	80 e1       	ldi	r24, 0x10	; 16
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	08 95       	ret

00001f90 <fat_close_file>:
 *
 * \param[in] fd The file handle of the file to close.
 * \see fat_open_file
 */
void fat_close_file(struct fat_file_struct* fd)
{
    1f90:	fc 01       	movw	r30, r24
    if(fd)
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	11 f0       	breq	.+4      	; 0x1f9a <fat_close_file+0xa>
#if USE_DYNAMIC_MEMORY
        free(fd);
#else
        fd->fs = 0;
    1f96:	11 82       	std	Z+1, r1	; 0x01
    1f98:	10 82       	st	Z, r1
    1f9a:	08 95       	ret

00001f9c <fat_read_file>:
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat_write_file
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
{
    1f9c:	2f 92       	push	r2
    1f9e:	3f 92       	push	r3
    1fa0:	4f 92       	push	r4
    1fa2:	5f 92       	push	r5
    1fa4:	6f 92       	push	r6
    1fa6:	7f 92       	push	r7
    1fa8:	8f 92       	push	r8
    1faa:	9f 92       	push	r9
    1fac:	af 92       	push	r10
    1fae:	bf 92       	push	r11
    1fb0:	cf 92       	push	r12
    1fb2:	df 92       	push	r13
    1fb4:	ef 92       	push	r14
    1fb6:	ff 92       	push	r15
    1fb8:	0f 93       	push	r16
    1fba:	1f 93       	push	r17
    1fbc:	df 93       	push	r29
    1fbe:	cf 93       	push	r28
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	2c 97       	sbiw	r28, 0x0c	; 12
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	9c 83       	std	Y+4, r25	; 0x04
    1fd2:	8b 83       	std	Y+3, r24	; 0x03
    1fd4:	7e 83       	std	Y+6, r23	; 0x06
    1fd6:	6d 83       	std	Y+5, r22	; 0x05
    1fd8:	58 87       	std	Y+8, r21	; 0x08
    1fda:	4f 83       	std	Y+7, r20	; 0x07
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	09 f4       	brne	.+2      	; 0x1fe2 <fat_read_file+0x46>
    1fe0:	22 c1       	rjmp	.+580    	; 0x2226 <fat_read_file+0x28a>
    1fe2:	67 2b       	or	r22, r23
    1fe4:	09 f4       	brne	.+2      	; 0x1fe8 <fat_read_file+0x4c>
    1fe6:	1f c1       	rjmp	.+574    	; 0x2226 <fat_read_file+0x28a>
    1fe8:	45 2b       	or	r20, r21
    1fea:	09 f4       	brne	.+2      	; 0x1fee <fat_read_file+0x52>
    1fec:	1c c1       	rjmp	.+568    	; 0x2226 <fat_read_file+0x28a>
        return -1;

    /* determine number of bytes to read */
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
    1fee:	dc 01       	movw	r26, r24
    1ff0:	9f 96       	adiw	r26, 0x2f	; 47
    1ff2:	6d 90       	ld	r6, X+
    1ff4:	7d 90       	ld	r7, X+
    1ff6:	8d 90       	ld	r8, X+
    1ff8:	9c 90       	ld	r9, X
    1ffa:	d2 97       	sbiw	r26, 0x32	; 50
    1ffc:	97 96       	adiw	r26, 0x27	; 39
    1ffe:	2d 91       	ld	r18, X+
    2000:	3d 91       	ld	r19, X+
    2002:	4d 91       	ld	r20, X+
    2004:	5c 91       	ld	r21, X
    2006:	9a 97       	sbiw	r26, 0x2a	; 42
    2008:	ef 81       	ldd	r30, Y+7	; 0x07
    200a:	f8 85       	ldd	r31, Y+8	; 0x08
    200c:	cf 01       	movw	r24, r30
    200e:	a0 e0       	ldi	r26, 0x00	; 0
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	86 0d       	add	r24, r6
    2014:	97 1d       	adc	r25, r7
    2016:	a8 1d       	adc	r26, r8
    2018:	b9 1d       	adc	r27, r9
    201a:	28 17       	cp	r18, r24
    201c:	39 07       	cpc	r19, r25
    201e:	4a 07       	cpc	r20, r26
    2020:	5b 07       	cpc	r21, r27
    2022:	40 f4       	brcc	.+16     	; 0x2034 <fat_read_file+0x98>
        buffer_len = fd->dir_entry.file_size - fd->pos;
    2024:	b9 01       	movw	r22, r18
    2026:	66 19       	sub	r22, r6
    2028:	77 09       	sbc	r23, r7
    202a:	78 87       	std	Y+8, r23	; 0x08
    202c:	6f 83       	std	Y+7, r22	; 0x07
    if(buffer_len == 0)
    202e:	67 2b       	or	r22, r23
    2030:	09 f4       	brne	.+2      	; 0x2034 <fat_read_file+0x98>
    2032:	fc c0       	rjmp	.+504    	; 0x222c <fat_read_file+0x290>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    2034:	ab 81       	ldd	r26, Y+3	; 0x03
    2036:	bc 81       	ldd	r27, Y+4	; 0x04
    2038:	ed 91       	ld	r30, X+
    203a:	fc 91       	ld	r31, X
    203c:	11 97       	sbiw	r26, 0x01	; 1
    203e:	20 89       	ldd	r18, Z+16	; 0x10
    2040:	31 89       	ldd	r19, Z+17	; 0x11
    2042:	3a 83       	std	Y+2, r19	; 0x02
    2044:	29 83       	std	Y+1, r18	; 0x01
    cluster_t cluster_num = fd->pos_cluster;
    2046:	d3 96       	adiw	r26, 0x33	; 51
    2048:	ad 90       	ld	r10, X+
    204a:	bd 90       	ld	r11, X+
    204c:	cd 90       	ld	r12, X+
    204e:	dc 90       	ld	r13, X
    2050:	d6 97       	sbiw	r26, 0x36	; 54
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start reading */
    if(!cluster_num)
    2052:	a1 14       	cp	r10, r1
    2054:	b1 04       	cpc	r11, r1
    2056:	c1 04       	cpc	r12, r1
    2058:	d1 04       	cpc	r13, r1
    205a:	09 f0       	breq	.+2      	; 0x205e <fat_read_file+0xc2>
    205c:	47 c0       	rjmp	.+142    	; 0x20ec <fat_read_file+0x150>
    {
        cluster_num = fd->dir_entry.cluster;
    205e:	93 96       	adiw	r26, 0x23	; 35
    2060:	ad 90       	ld	r10, X+
    2062:	bd 90       	ld	r11, X+
    2064:	cd 90       	ld	r12, X+
    2066:	dc 90       	ld	r13, X
    2068:	96 97       	sbiw	r26, 0x26	; 38
        
        if(!cluster_num)
    206a:	a1 14       	cp	r10, r1
    206c:	b1 04       	cpc	r11, r1
    206e:	c1 04       	cpc	r12, r1
    2070:	d1 04       	cpc	r13, r1
    2072:	39 f4       	brne	.+14     	; 0x2082 <fat_read_file+0xe6>
        {
            if(!fd->pos)
    2074:	61 14       	cp	r6, r1
    2076:	71 04       	cpc	r7, r1
    2078:	81 04       	cpc	r8, r1
    207a:	91 04       	cpc	r9, r1
    207c:	09 f4       	brne	.+2      	; 0x2080 <fat_read_file+0xe4>
    207e:	d6 c0       	rjmp	.+428    	; 0x222c <fat_read_file+0x290>
    2080:	d2 c0       	rjmp	.+420    	; 0x2226 <fat_read_file+0x28a>
                return 0;
            else
                return -1;
        }

        if(fd->pos)
    2082:	61 14       	cp	r6, r1
    2084:	71 04       	cpc	r7, r1
    2086:	81 04       	cpc	r8, r1
    2088:	91 04       	cpc	r9, r1
    208a:	81 f1       	breq	.+96     	; 0x20ec <fat_read_file+0x150>
    208c:	84 01       	movw	r16, r8
    208e:	73 01       	movw	r14, r6
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
    2090:	69 81       	ldd	r22, Y+1	; 0x01
    2092:	7a 81       	ldd	r23, Y+2	; 0x02
    2094:	1b 01       	movw	r2, r22
    2096:	44 24       	eor	r4, r4
    2098:	55 24       	eor	r5, r5
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num)
    209a:	88 27       	eor	r24, r24
    209c:	99 27       	eor	r25, r25
    209e:	dc 01       	movw	r26, r24
    20a0:	82 19       	sub	r24, r2
    20a2:	93 09       	sbc	r25, r3
    20a4:	a4 09       	sbc	r26, r4
    20a6:	b5 09       	sbc	r27, r5
    20a8:	89 87       	std	Y+9, r24	; 0x09
    20aa:	9a 87       	std	Y+10, r25	; 0x0a
    20ac:	ab 87       	std	Y+11, r26	; 0x0b
    20ae:	bc 87       	std	Y+12, r27	; 0x0c
    20b0:	18 c0       	rjmp	.+48     	; 0x20e2 <fat_read_file+0x146>
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
    20b2:	ab 81       	ldd	r26, Y+3	; 0x03
    20b4:	bc 81       	ldd	r27, Y+4	; 0x04
    20b6:	8d 91       	ld	r24, X+
    20b8:	9c 91       	ld	r25, X
    20ba:	b6 01       	movw	r22, r12
    20bc:	a5 01       	movw	r20, r10
    20be:	0e 94 b2 0c 	call	0x1964	; 0x1964 <fat_get_next_cluster>
    20c2:	5b 01       	movw	r10, r22
    20c4:	6c 01       	movw	r12, r24
                if(!cluster_num)
    20c6:	61 15       	cp	r22, r1
    20c8:	71 05       	cpc	r23, r1
    20ca:	81 05       	cpc	r24, r1
    20cc:	91 05       	cpc	r25, r1
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <fat_read_file+0x136>
    20d0:	aa c0       	rjmp	.+340    	; 0x2226 <fat_read_file+0x28a>
    20d2:	69 85       	ldd	r22, Y+9	; 0x09
    20d4:	7a 85       	ldd	r23, Y+10	; 0x0a
    20d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    20d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    20da:	e6 0e       	add	r14, r22
    20dc:	f7 1e       	adc	r15, r23
    20de:	08 1f       	adc	r16, r24
    20e0:	19 1f       	adc	r17, r25
        }

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
    20e2:	e2 14       	cp	r14, r2
    20e4:	f3 04       	cpc	r15, r3
    20e6:	04 05       	cpc	r16, r4
    20e8:	15 05       	cpc	r17, r5
    20ea:	18 f7       	brcc	.-58     	; 0x20b2 <fat_read_file+0x116>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	9a 81       	ldd	r25, Y+2	; 0x02
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	4c 01       	movw	r8, r24
    20f4:	86 20       	and	r8, r6
    20f6:	97 20       	and	r9, r7
    20f8:	01 96       	adiw	r24, 0x01	; 1
    20fa:	9a 83       	std	Y+2, r25	; 0x02
    20fc:	89 83       	std	Y+1, r24	; 0x01
    20fe:	ef 80       	ldd	r14, Y+7	; 0x07
    2100:	f8 84       	ldd	r15, Y+8	; 0x08
    
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    2102:	ab 81       	ldd	r26, Y+3	; 0x03
    2104:	bc 81       	ldd	r27, Y+4	; 0x04
    2106:	6d 90       	ld	r6, X+
    2108:	7c 90       	ld	r7, X
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    210a:	61 14       	cp	r6, r1
    210c:	71 04       	cpc	r7, r1
    210e:	f9 f0       	breq	.+62     	; 0x214e <fat_read_file+0x1b2>
    2110:	b2 e0       	ldi	r27, 0x02	; 2
    2112:	ab 16       	cp	r10, r27
    2114:	b1 04       	cpc	r11, r1
    2116:	c1 04       	cpc	r12, r1
    2118:	d1 04       	cpc	r13, r1
    211a:	c8 f0       	brcs	.+50     	; 0x214e <fat_read_file+0x1b2>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    211c:	c6 01       	movw	r24, r12
    211e:	b5 01       	movw	r22, r10
    2120:	62 50       	subi	r22, 0x02	; 2
    2122:	70 40       	sbci	r23, 0x00	; 0
    2124:	80 40       	sbci	r24, 0x00	; 0
    2126:	90 40       	sbci	r25, 0x00	; 0
    2128:	f3 01       	movw	r30, r6
    212a:	20 89       	ldd	r18, Z+16	; 0x10
    212c:	31 89       	ldd	r19, Z+17	; 0x11
    212e:	40 e0       	ldi	r20, 0x00	; 0
    2130:	50 e0       	ldi	r21, 0x00	; 0
    2132:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__mulsi3>
    2136:	9b 01       	movw	r18, r22
    2138:	ac 01       	movw	r20, r24
    213a:	f3 01       	movw	r30, r6
    213c:	82 89       	ldd	r24, Z+18	; 0x12
    213e:	93 89       	ldd	r25, Z+19	; 0x13
    2140:	a4 89       	ldd	r26, Z+20	; 0x14
    2142:	b5 89       	ldd	r27, Z+21	; 0x15
    2144:	28 0f       	add	r18, r24
    2146:	39 1f       	adc	r19, r25
    2148:	4a 1f       	adc	r20, r26
    214a:	5b 1f       	adc	r21, r27
    214c:	04 c0       	rjmp	.+8      	; 0x2156 <fat_read_file+0x1ba>
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e0       	ldi	r20, 0x00	; 0
    2154:	50 e0       	ldi	r21, 0x00	; 0
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
        uint16_t copy_length = cluster_size - first_cluster_offset;
    2156:	09 81       	ldd	r16, Y+1	; 0x01
    2158:	1a 81       	ldd	r17, Y+2	; 0x02
    215a:	08 19       	sub	r16, r8
    215c:	19 09       	sbc	r17, r9
    215e:	e0 16       	cp	r14, r16
    2160:	f1 06       	cpc	r15, r17
    2162:	08 f4       	brcc	.+2      	; 0x2166 <fat_read_file+0x1ca>
    2164:	87 01       	movw	r16, r14
        if(copy_length > buffer_left)
            copy_length = buffer_left;

        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
    2166:	d3 01       	movw	r26, r6
    2168:	ed 91       	ld	r30, X+
    216a:	fc 91       	ld	r31, X
    216c:	c4 01       	movw	r24, r8
    216e:	a0 e0       	ldi	r26, 0x00	; 0
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	28 0f       	add	r18, r24
    2174:	39 1f       	adc	r19, r25
    2176:	4a 1f       	adc	r20, r26
    2178:	5b 1f       	adc	r21, r27
    217a:	01 90       	ld	r0, Z+
    217c:	f0 81       	ld	r31, Z
    217e:	e0 2d       	mov	r30, r0
    2180:	ca 01       	movw	r24, r20
    2182:	b9 01       	movw	r22, r18
    2184:	4d 81       	ldd	r20, Y+5	; 0x05
    2186:	5e 81       	ldd	r21, Y+6	; 0x06
    2188:	98 01       	movw	r18, r16
    218a:	09 95       	icall
    218c:	88 23       	and	r24, r24
    218e:	89 f1       	breq	.+98     	; 0x21f2 <fat_read_file+0x256>
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
        buffer_left -= copy_length;
    2190:	e0 1a       	sub	r14, r16
    2192:	f1 0a       	sbc	r15, r17
        fd->pos += copy_length;
    2194:	c8 01       	movw	r24, r16
    2196:	a0 e0       	ldi	r26, 0x00	; 0
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	eb 81       	ldd	r30, Y+3	; 0x03
    219c:	fc 81       	ldd	r31, Y+4	; 0x04
    219e:	27 a5       	ldd	r18, Z+47	; 0x2f
    21a0:	30 a9       	ldd	r19, Z+48	; 0x30
    21a2:	41 a9       	ldd	r20, Z+49	; 0x31
    21a4:	52 a9       	ldd	r21, Z+50	; 0x32
    21a6:	28 0f       	add	r18, r24
    21a8:	39 1f       	adc	r19, r25
    21aa:	4a 1f       	adc	r20, r26
    21ac:	5b 1f       	adc	r21, r27
    21ae:	df 01       	movw	r26, r30
    21b0:	27 a7       	std	Z+47, r18	; 0x2f
    21b2:	30 ab       	std	Z+48, r19	; 0x30
    21b4:	41 ab       	std	Z+49, r20	; 0x31
    21b6:	52 ab       	std	Z+50, r21	; 0x32

        if(first_cluster_offset + copy_length >= cluster_size)
    21b8:	c8 01       	movw	r24, r16
    21ba:	88 0d       	add	r24, r8
    21bc:	99 1d       	adc	r25, r9
    21be:	e9 81       	ldd	r30, Y+1	; 0x01
    21c0:	fa 81       	ldd	r31, Y+2	; 0x02
    21c2:	8e 17       	cp	r24, r30
    21c4:	9f 07       	cpc	r25, r31
    21c6:	e0 f0       	brcs	.+56     	; 0x2200 <fat_read_file+0x264>
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
    21c8:	8d 91       	ld	r24, X+
    21ca:	9c 91       	ld	r25, X
    21cc:	b6 01       	movw	r22, r12
    21ce:	a5 01       	movw	r20, r10
    21d0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <fat_get_next_cluster>
    21d4:	5b 01       	movw	r10, r22
    21d6:	6c 01       	movw	r12, r24
    21d8:	61 15       	cp	r22, r1
    21da:	71 05       	cpc	r23, r1
    21dc:	81 05       	cpc	r24, r1
    21de:	91 05       	cpc	r25, r1
    21e0:	69 f4       	brne	.+26     	; 0x21fc <fat_read_file+0x260>
            {
                first_cluster_offset = 0;
            }
            else
            {
                fd->pos_cluster = 0;
    21e2:	ab 81       	ldd	r26, Y+3	; 0x03
    21e4:	bc 81       	ldd	r27, Y+4	; 0x04
    21e6:	d3 96       	adiw	r26, 0x33	; 51
    21e8:	1d 92       	st	X+, r1
    21ea:	1d 92       	st	X+, r1
    21ec:	1d 92       	st	X+, r1
    21ee:	1c 92       	st	X, r1
    21f0:	d6 97       	sbiw	r26, 0x36	; 54
                return buffer_len - buffer_left;
    21f2:	4f 81       	ldd	r20, Y+7	; 0x07
    21f4:	58 85       	ldd	r21, Y+8	; 0x08
    21f6:	4e 19       	sub	r20, r14
    21f8:	5f 09       	sbc	r21, r15
    21fa:	1a c0       	rjmp	.+52     	; 0x2230 <fat_read_file+0x294>
    21fc:	88 24       	eor	r8, r8
    21fe:	99 24       	eor	r9, r9
            }
        }

        fd->pos_cluster = cluster_num;
    2200:	eb 81       	ldd	r30, Y+3	; 0x03
    2202:	fc 81       	ldd	r31, Y+4	; 0x04
    2204:	a3 aa       	std	Z+51, r10	; 0x33
    2206:	b4 aa       	std	Z+52, r11	; 0x34
    2208:	c5 aa       	std	Z+53, r12	; 0x35
    220a:	d6 aa       	std	Z+54, r13	; 0x36

    } while(buffer_left > 0); /* check if we are done */
    220c:	e1 14       	cp	r14, r1
    220e:	f1 04       	cpc	r15, r1
    2210:	39 f0       	breq	.+14     	; 0x2220 <fat_read_file+0x284>
        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
    2212:	2d 81       	ldd	r18, Y+5	; 0x05
    2214:	3e 81       	ldd	r19, Y+6	; 0x06
    2216:	20 0f       	add	r18, r16
    2218:	31 1f       	adc	r19, r17
    221a:	3e 83       	std	Y+6, r19	; 0x06
    221c:	2d 83       	std	Y+5, r18	; 0x05
    221e:	71 cf       	rjmp	.-286    	; 0x2102 <fat_read_file+0x166>

        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    return buffer_len;
    2220:	4f 81       	ldd	r20, Y+7	; 0x07
    2222:	58 85       	ldd	r21, Y+8	; 0x08
    2224:	05 c0       	rjmp	.+10     	; 0x2230 <fat_read_file+0x294>
    2226:	4f ef       	ldi	r20, 0xFF	; 255
    2228:	5f ef       	ldi	r21, 0xFF	; 255
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <fat_read_file+0x294>
    222c:	40 e0       	ldi	r20, 0x00	; 0
    222e:	50 e0       	ldi	r21, 0x00	; 0
}
    2230:	ca 01       	movw	r24, r20
    2232:	2c 96       	adiw	r28, 0x0c	; 12
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	1f 91       	pop	r17
    2244:	0f 91       	pop	r16
    2246:	ff 90       	pop	r15
    2248:	ef 90       	pop	r14
    224a:	df 90       	pop	r13
    224c:	cf 90       	pop	r12
    224e:	bf 90       	pop	r11
    2250:	af 90       	pop	r10
    2252:	9f 90       	pop	r9
    2254:	8f 90       	pop	r8
    2256:	7f 90       	pop	r7
    2258:	6f 90       	pop	r6
    225a:	5f 90       	pop	r5
    225c:	4f 90       	pop	r4
    225e:	3f 90       	pop	r3
    2260:	2f 90       	pop	r2
    2262:	08 95       	ret

00002264 <fat_tell_file>:
    return 1;
}

/* +ELASTICSHEEP */
uint8_t fat_tell_file(struct fat_file_struct* fd, uint32_t* offset)
{
    2264:	dc 01       	movw	r26, r24
    2266:	fb 01       	movw	r30, r22
  if (offset != NULL)
    2268:	61 15       	cp	r22, r1
    226a:	71 05       	cpc	r23, r1
    226c:	51 f0       	breq	.+20     	; 0x2282 <fat_tell_file+0x1e>
    *offset = (uint32_t)fd->pos;
    226e:	9f 96       	adiw	r26, 0x2f	; 47
    2270:	8d 91       	ld	r24, X+
    2272:	9d 91       	ld	r25, X+
    2274:	0d 90       	ld	r0, X+
    2276:	bc 91       	ld	r27, X
    2278:	a0 2d       	mov	r26, r0
    227a:	80 83       	st	Z, r24
    227c:	91 83       	std	Z+1, r25	; 0x01
    227e:	a2 83       	std	Z+2, r26	; 0x02
    2280:	b3 83       	std	Z+3, r27	; 0x03
  
  return 1;
}
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	08 95       	ret

00002286 <fat_close_dir>:
 *
 * \param[in] dd The directory descriptor to close.
 * \see fat_open_dir
 */
void fat_close_dir(struct fat_dir_struct* dd)
{
    2286:	fc 01       	movw	r30, r24
    if(dd)
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	11 f0       	breq	.+4      	; 0x2290 <fat_close_dir+0xa>
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    228c:	11 82       	std	Z+1, r1	; 0x01
    228e:	10 82       	st	Z, r1
    2290:	08 95       	ret

00002292 <fat_reset_dir>:
 * \param[in] dd The directory handle to reset.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    2292:	fc 01       	movw	r30, r24
    if(!dd)
    2294:	00 97       	sbiw	r24, 0x00	; 0
    2296:	11 f4       	brne	.+4      	; 0x229c <fat_reset_dir+0xa>
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	08 95       	ret
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    229c:	83 a1       	ldd	r24, Z+35	; 0x23
    229e:	94 a1       	ldd	r25, Z+36	; 0x24
    22a0:	a5 a1       	ldd	r26, Z+37	; 0x25
    22a2:	b6 a1       	ldd	r27, Z+38	; 0x26
    22a4:	87 a7       	std	Z+47, r24	; 0x2f
    22a6:	90 ab       	std	Z+48, r25	; 0x30
    22a8:	a1 ab       	std	Z+49, r26	; 0x31
    22aa:	b2 ab       	std	Z+50, r27	; 0x32
    dd->entry_offset = 0;
    22ac:	14 aa       	std	Z+52, r1	; 0x34
    22ae:	13 aa       	std	Z+51, r1	; 0x33
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
}
    22b2:	08 95       	ret

000022b4 <fat_dir_entry_read_callback>:
/**
 * \ingroup fat_fs
 * Callback function for reading a directory entry.
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
{
    22b4:	cf 92       	push	r12
    22b6:	df 92       	push	r13
    22b8:	ef 92       	push	r14
    22ba:	ff 92       	push	r15
    22bc:	0f 93       	push	r16
    22be:	1f 93       	push	r17
    22c0:	cf 93       	push	r28
    22c2:	df 93       	push	r29
    22c4:	8c 01       	movw	r16, r24
    22c6:	6a 01       	movw	r12, r20
    22c8:	7b 01       	movw	r14, r22
    struct fat_read_dir_callback_arg* arg = p;
    22ca:	b9 01       	movw	r22, r18
    struct fat_dir_entry_struct* dir_entry = arg->dir_entry;
    22cc:	d9 01       	movw	r26, r18
    22ce:	cd 91       	ld	r28, X+
    22d0:	dc 91       	ld	r29, X
    22d2:	11 97       	sbiw	r26, 0x01	; 1

    arg->bytes_read += 32;
    22d4:	12 96       	adiw	r26, 0x02	; 2
    22d6:	8d 91       	ld	r24, X+
    22d8:	9c 91       	ld	r25, X
    22da:	13 97       	sbiw	r26, 0x03	; 3
    22dc:	80 96       	adiw	r24, 0x20	; 32
    22de:	13 96       	adiw	r26, 0x03	; 3
    22e0:	9c 93       	st	X, r25
    22e2:	8e 93       	st	-X, r24
    22e4:	12 97       	sbiw	r26, 0x02	; 2

    /* skip deleted or empty entries */
    if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
    22e6:	f8 01       	movw	r30, r16
    22e8:	80 81       	ld	r24, Z
    22ea:	85 3e       	cpi	r24, 0xE5	; 229
    22ec:	09 f4       	brne	.+2      	; 0x22f0 <fat_dir_entry_read_callback+0x3c>
    22ee:	b9 c0       	rjmp	.+370    	; 0x2462 <fat_dir_entry_read_callback+0x1ae>
    22f0:	88 23       	and	r24, r24
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <fat_dir_entry_read_callback+0x42>
    22f4:	b6 c0       	rjmp	.+364    	; 0x2462 <fat_dir_entry_read_callback+0x1ae>
        return 1;

    if(!dir_entry->entry_offset)
    22f6:	89 a5       	ldd	r24, Y+41	; 0x29
    22f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    22fa:	ab a5       	ldd	r26, Y+43	; 0x2b
    22fc:	bc a5       	ldd	r27, Y+44	; 0x2c
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	a1 05       	cpc	r26, r1
    2302:	b1 05       	cpc	r27, r1
    2304:	21 f4       	brne	.+8      	; 0x230e <fat_dir_entry_read_callback+0x5a>
        dir_entry->entry_offset = offset;
    2306:	c9 a6       	std	Y+41, r12	; 0x29
    2308:	da a6       	std	Y+42, r13	; 0x2a
    230a:	eb a6       	std	Y+43, r14	; 0x2b
    230c:	fc a6       	std	Y+44, r15	; 0x2c
 * \returns 0 on failure, 1 on success and 2 if the
 *          directory entry is complete.
 */
uint8_t fat_interpret_dir_entry(struct fat_dir_entry_struct* dir_entry, const uint8_t* raw_entry)
{
    if(!dir_entry || !raw_entry || !raw_entry[0])
    230e:	20 97       	sbiw	r28, 0x00	; 0
    2310:	09 f4       	brne	.+2      	; 0x2314 <fat_dir_entry_read_callback+0x60>
    2312:	a9 c0       	rjmp	.+338    	; 0x2466 <fat_dir_entry_read_callback+0x1b2>
    2314:	01 15       	cp	r16, r1
    2316:	11 05       	cpc	r17, r1
    2318:	09 f4       	brne	.+2      	; 0x231c <fat_dir_entry_read_callback+0x68>
    231a:	a5 c0       	rjmp	.+330    	; 0x2466 <fat_dir_entry_read_callback+0x1b2>
    231c:	d8 01       	movw	r26, r16
    231e:	9c 91       	ld	r25, X
    2320:	99 23       	and	r25, r25
    2322:	09 f4       	brne	.+2      	; 0x2326 <fat_dir_entry_read_callback+0x72>
    2324:	a0 c0       	rjmp	.+320    	; 0x2466 <fat_dir_entry_read_callback+0x1b2>
        return 0;

    char* long_name = dir_entry->long_name;
    if(raw_entry[11] == 0x0f)
    2326:	1b 96       	adiw	r26, 0x0b	; 11
    2328:	8c 91       	ld	r24, X
    232a:	8f 30       	cpi	r24, 0x0F	; 15
    232c:	29 f5       	brne	.+74     	; 0x2378 <fat_dir_entry_read_callback+0xc4>
    {
        /* Lfn supports unicode, but we do not, for now.
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((raw_entry[0] & 0x3f) - 1) * 13;
    232e:	89 2f       	mov	r24, r25
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	8f 73       	andi	r24, 0x3F	; 63
    2334:	90 70       	andi	r25, 0x00	; 0
    2336:	2d e0       	ldi	r18, 0x0D	; 13
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	82 9f       	mul	r24, r18
    233c:	a0 01       	movw	r20, r0
    233e:	83 9f       	mul	r24, r19
    2340:	50 0d       	add	r21, r0
    2342:	92 9f       	mul	r25, r18
    2344:	50 0d       	add	r21, r0
    2346:	11 24       	eor	r1, r1
    2348:	4d 50       	subi	r20, 0x0D	; 13
    234a:	50 40       	sbci	r21, 0x00	; 0
    234c:	a4 e2       	ldi	r26, 0x24	; 36
    234e:	b1 e0       	ldi	r27, 0x01	; 1
    2350:	c4 0f       	add	r28, r20
    2352:	d5 1f       	adc	r29, r21
    2354:	0d c0       	rjmp	.+26     	; 0x2370 <fat_dir_entry_read_callback+0xbc>
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
            long_name[char_offset + i] = raw_entry[char_mapping[i]];
    2356:	8d 91       	ld	r24, X+
    2358:	f8 01       	movw	r30, r16
    235a:	e8 0f       	add	r30, r24
    235c:	f1 1d       	adc	r31, r1
    235e:	80 81       	ld	r24, Z
    2360:	89 93       	st	Y+, r24
    2362:	4f 5f       	subi	r20, 0xFF	; 255
    2364:	5f 4f       	sbci	r21, 0xFF	; 255
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((raw_entry[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
    2366:	e1 e0       	ldi	r30, 0x01	; 1
    2368:	a1 33       	cpi	r26, 0x31	; 49
    236a:	be 07       	cpc	r27, r30
    236c:	09 f4       	brne	.+2      	; 0x2370 <fat_dir_entry_read_callback+0xbc>
    236e:	79 c0       	rjmp	.+242    	; 0x2462 <fat_dir_entry_read_callback+0x1ae>
    2370:	4f 31       	cpi	r20, 0x1F	; 31
    2372:	51 05       	cpc	r21, r1
    2374:	80 f3       	brcs	.-32     	; 0x2356 <fat_dir_entry_read_callback+0xa2>
    2376:	75 c0       	rjmp	.+234    	; 0x2462 <fat_dir_entry_read_callback+0x1ae>
        return 1;
    }
    else
    {
        /* if we do not have a long name, take the short one */
        if(long_name[0] == '\0')
    2378:	88 81       	ld	r24, Y
    237a:	88 23       	and	r24, r24
    237c:	09 f0       	breq	.+2      	; 0x2380 <fat_dir_entry_read_callback+0xcc>
    237e:	4e c0       	rjmp	.+156    	; 0x241c <fat_dir_entry_read_callback+0x168>
    2380:	a8 01       	movw	r20, r16
    2382:	de 01       	movw	r26, r28
    2384:	78 01       	movw	r14, r16
    2386:	20 e0       	ldi	r18, 0x00	; 0
        {
            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(raw_entry[i] == ' ')
    2388:	f7 01       	movw	r30, r14
    238a:	90 81       	ld	r25, Z
    238c:	90 32       	cpi	r25, 0x20	; 32
    238e:	a1 f0       	breq	.+40     	; 0x23b8 <fat_dir_entry_read_callback+0x104>
                    break;
                long_name[i] = raw_entry[i];
    2390:	9c 93       	st	X, r25
                /* Windows NT and later versions do not store LFN entries
                 * for 8.3 names which have a lowercase basename, extension
                 * or both when everything else is uppercase. They use two
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((raw_entry[12] & 0x08) && raw_entry[i] >= 'A' && raw_entry[i] <= 'Z')
    2392:	f8 01       	movw	r30, r16
    2394:	84 85       	ldd	r24, Z+12	; 0x0c
    2396:	83 ff       	sbrs	r24, 3
    2398:	08 c0       	rjmp	.+16     	; 0x23aa <fat_dir_entry_read_callback+0xf6>
    239a:	f7 01       	movw	r30, r14
    239c:	80 81       	ld	r24, Z
    239e:	81 34       	cpi	r24, 0x41	; 65
    23a0:	20 f0       	brcs	.+8      	; 0x23aa <fat_dir_entry_read_callback+0xf6>
    23a2:	8b 35       	cpi	r24, 0x5B	; 91
    23a4:	10 f4       	brcc	.+4      	; 0x23aa <fat_dir_entry_read_callback+0xf6>
                    long_name[i] += 'a' - 'A';
    23a6:	90 5e       	subi	r25, 0xE0	; 224
    23a8:	9c 93       	st	X, r25
    {
        /* if we do not have a long name, take the short one */
        if(long_name[0] == '\0')
        {
            uint8_t i;
            for(i = 0; i < 8; ++i)
    23aa:	2f 5f       	subi	r18, 0xFF	; 255
    23ac:	08 94       	sec
    23ae:	e1 1c       	adc	r14, r1
    23b0:	f1 1c       	adc	r15, r1
    23b2:	11 96       	adiw	r26, 0x01	; 1
    23b4:	28 30       	cpi	r18, 0x08	; 8
    23b6:	41 f7       	brne	.-48     	; 0x2388 <fat_dir_entry_read_callback+0xd4>
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((raw_entry[12] & 0x08) && raw_entry[i] >= 'A' && raw_entry[i] <= 'Z')
                    long_name[i] += 'a' - 'A';
            }
            if(long_name[0] == 0x05)
    23b8:	88 81       	ld	r24, Y
    23ba:	85 30       	cpi	r24, 0x05	; 5
    23bc:	11 f4       	brne	.+4      	; 0x23c2 <fat_dir_entry_read_callback+0x10e>
                long_name[0] = (char) FAT_DIRENTRY_DELETED;
    23be:	85 ee       	ldi	r24, 0xE5	; 229
    23c0:	88 83       	st	Y, r24

            if(raw_entry[8] != ' ')
    23c2:	d8 01       	movw	r26, r16
    23c4:	18 96       	adiw	r26, 0x08	; 8
    23c6:	8c 91       	ld	r24, X
    23c8:	80 32       	cpi	r24, 0x20	; 32
    23ca:	21 f1       	breq	.+72     	; 0x2414 <fat_dir_entry_read_callback+0x160>
            {
                long_name[i++] = '.';
    23cc:	fe 01       	movw	r30, r28
    23ce:	e2 0f       	add	r30, r18
    23d0:	f1 1d       	adc	r31, r1
    23d2:	8e e2       	ldi	r24, 0x2E	; 46
    23d4:	80 83       	st	Z, r24
    23d6:	32 2f       	mov	r19, r18
    23d8:	3f 5f       	subi	r19, 0xFF	; 255

                uint8_t j = 8;
                for(; j < 11; ++j)
    23da:	2c 5f       	subi	r18, 0xFC	; 252
                {
                    if(raw_entry[j] == ' ')
    23dc:	fa 01       	movw	r30, r20
    23de:	90 85       	ldd	r25, Z+8	; 0x08
    23e0:	90 32       	cpi	r25, 0x20	; 32
    23e2:	b9 f0       	breq	.+46     	; 0x2412 <fat_dir_entry_read_callback+0x15e>
                        break;
                    long_name[i] = raw_entry[j];
    23e4:	fe 01       	movw	r30, r28
    23e6:	e3 0f       	add	r30, r19
    23e8:	f1 1d       	adc	r31, r1
    23ea:	90 83       	st	Z, r25

                    /* See above for the lowercase 8.3 name handling of
                     * Windows NT and later.
                     */
                    if((raw_entry[12] & 0x10) && raw_entry[j] >= 'A' && raw_entry[j] <= 'Z')
    23ec:	d8 01       	movw	r26, r16
    23ee:	1c 96       	adiw	r26, 0x0c	; 12
    23f0:	8c 91       	ld	r24, X
    23f2:	84 ff       	sbrs	r24, 4
    23f4:	09 c0       	rjmp	.+18     	; 0x2408 <fat_dir_entry_read_callback+0x154>
    23f6:	da 01       	movw	r26, r20
    23f8:	18 96       	adiw	r26, 0x08	; 8
    23fa:	8c 91       	ld	r24, X
    23fc:	81 34       	cpi	r24, 0x41	; 65
    23fe:	20 f0       	brcs	.+8      	; 0x2408 <fat_dir_entry_read_callback+0x154>
    2400:	8b 35       	cpi	r24, 0x5B	; 91
    2402:	10 f4       	brcc	.+4      	; 0x2408 <fat_dir_entry_read_callback+0x154>
                        long_name[i] += 'a' - 'A';
    2404:	90 5e       	subi	r25, 0xE0	; 224
    2406:	90 83       	st	Z, r25

                    ++i;
    2408:	3f 5f       	subi	r19, 0xFF	; 255
    240a:	4f 5f       	subi	r20, 0xFF	; 255
    240c:	5f 4f       	sbci	r21, 0xFF	; 255
            if(raw_entry[8] != ' ')
            {
                long_name[i++] = '.';

                uint8_t j = 8;
                for(; j < 11; ++j)
    240e:	32 17       	cp	r19, r18
    2410:	29 f7       	brne	.-54     	; 0x23dc <fat_dir_entry_read_callback+0x128>
    2412:	23 2f       	mov	r18, r19

                    ++i;
                }
            } 

            long_name[i] = '\0';
    2414:	fe 01       	movw	r30, r28
    2416:	e2 0f       	add	r30, r18
    2418:	f1 1d       	adc	r31, r1
    241a:	10 82       	st	Z, r1
        }
        
        /* extract properties of file and store them within the structure */
        dir_entry->attributes = raw_entry[11];
    241c:	f8 01       	movw	r30, r16
    241e:	83 85       	ldd	r24, Z+11	; 0x0b
    2420:	88 a3       	std	Y+32, r24	; 0x20
        dir_entry->cluster = ltoh16(*((uint16_t*) &raw_entry[26]));
    2422:	22 8d       	ldd	r18, Z+26	; 0x1a
    2424:	33 8d       	ldd	r19, Z+27	; 0x1b
    2426:	40 e0       	ldi	r20, 0x00	; 0
    2428:	50 e0       	ldi	r21, 0x00	; 0
#if FAT_FAT32_SUPPORT
        dir_entry->cluster |= ((cluster_t) ltoh16(*((uint16_t*) &raw_entry[20]))) << 16;
    242a:	84 89       	ldd	r24, Z+20	; 0x14
    242c:	95 89       	ldd	r25, Z+21	; 0x15
    242e:	a0 e0       	ldi	r26, 0x00	; 0
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	dc 01       	movw	r26, r24
    2434:	99 27       	eor	r25, r25
    2436:	88 27       	eor	r24, r24
    2438:	82 2b       	or	r24, r18
    243a:	93 2b       	or	r25, r19
    243c:	a4 2b       	or	r26, r20
    243e:	b5 2b       	or	r27, r21
    2440:	89 a3       	std	Y+33, r24	; 0x21
    2442:	9a a3       	std	Y+34, r25	; 0x22
    2444:	ab a3       	std	Y+35, r26	; 0x23
    2446:	bc a3       	std	Y+36, r27	; 0x24
#endif
        dir_entry->file_size = ltoh32(*((uint32_t*) &raw_entry[28]));
    2448:	84 8d       	ldd	r24, Z+28	; 0x1c
    244a:	95 8d       	ldd	r25, Z+29	; 0x1d
    244c:	a6 8d       	ldd	r26, Z+30	; 0x1e
    244e:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2450:	8d a3       	std	Y+37, r24	; 0x25
    2452:	9e a3       	std	Y+38, r25	; 0x26
    2454:	af a3       	std	Y+39, r26	; 0x27
    2456:	b8 a7       	std	Y+40, r27	; 0x28
        {
            return 1;
        }
        case 2: /* directory entry complete, finish */
        {
            arg->finished = 1;
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	db 01       	movw	r26, r22
    245c:	14 96       	adiw	r26, 0x04	; 4
    245e:	8c 93       	st	X, r24
    2460:	02 c0       	rjmp	.+4      	; 0x2466 <fat_dir_entry_read_callback+0x1b2>
            return 0;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	01 c0       	rjmp	.+2      	; 0x2468 <fat_dir_entry_read_callback+0x1b4>
    2466:	80 e0       	ldi	r24, 0x00	; 0
        }
    }

    return 0;
}
    2468:	df 91       	pop	r29
    246a:	cf 91       	pop	r28
    246c:	1f 91       	pop	r17
    246e:	0f 91       	pop	r16
    2470:	ff 90       	pop	r15
    2472:	ef 90       	pop	r14
    2474:	df 90       	pop	r13
    2476:	cf 90       	pop	r12
    2478:	08 95       	ret

0000247a <fat_delete_file>:
 * \param[in] dir_entry The directory entry of the file to delete.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    247a:	7f 92       	push	r7
    247c:	8f 92       	push	r8
    247e:	9f 92       	push	r9
    2480:	af 92       	push	r10
    2482:	bf 92       	push	r11
    2484:	cf 92       	push	r12
    2486:	df 92       	push	r13
    2488:	ef 92       	push	r14
    248a:	ff 92       	push	r15
    248c:	0f 93       	push	r16
    248e:	1f 93       	push	r17
    2490:	df 93       	push	r29
    2492:	cf 93       	push	r28
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
    2498:	2c 97       	sbiw	r28, 0x0c	; 12
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	de bf       	out	0x3e, r29	; 62
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	cd bf       	out	0x3d, r28	; 61
    24a4:	6c 01       	movw	r12, r24
    24a6:	5b 01       	movw	r10, r22
    if(!fs || !dir_entry)
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	09 f4       	brne	.+2      	; 0x24ae <fat_delete_file+0x34>
    24ac:	57 c0       	rjmp	.+174    	; 0x255c <fat_delete_file+0xe2>
    24ae:	61 15       	cp	r22, r1
    24b0:	71 05       	cpc	r23, r1
    24b2:	09 f4       	brne	.+2      	; 0x24b6 <fat_delete_file+0x3c>
    24b4:	53 c0       	rjmp	.+166    	; 0x255c <fat_delete_file+0xe2>
        return 0;

    /* get offset of the file's directory entry */
    offset_t dir_entry_offset = dir_entry->entry_offset;
    24b6:	db 01       	movw	r26, r22
    24b8:	99 96       	adiw	r26, 0x29	; 41
    24ba:	ed 90       	ld	r14, X+
    24bc:	fd 90       	ld	r15, X+
    24be:	0d 91       	ld	r16, X+
    24c0:	1c 91       	ld	r17, X
    24c2:	9c 97       	sbiw	r26, 0x2c	; 44
    if(!dir_entry_offset)
    24c4:	e1 14       	cp	r14, r1
    24c6:	f1 04       	cpc	r15, r1
    24c8:	01 05       	cpc	r16, r1
    24ca:	11 05       	cpc	r17, r1
    24cc:	09 f4       	brne	.+2      	; 0x24d0 <fat_delete_file+0x56>
    24ce:	46 c0       	rjmp	.+140    	; 0x255c <fat_delete_file+0xe2>

    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
    24d0:	4e 01       	movw	r8, r28
    24d2:	08 94       	sec
    24d4:	81 1c       	adc	r8, r1
    24d6:	91 1c       	adc	r9, r1
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
    24d8:	85 ee       	ldi	r24, 0xE5	; 229
    24da:	78 2e       	mov	r7, r24

    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
    24dc:	d6 01       	movw	r26, r12
    24de:	ed 91       	ld	r30, X+
    24e0:	fc 91       	ld	r31, X
    24e2:	01 90       	ld	r0, Z+
    24e4:	f0 81       	ld	r31, Z
    24e6:	e0 2d       	mov	r30, r0
    24e8:	c8 01       	movw	r24, r16
    24ea:	b7 01       	movw	r22, r14
    24ec:	a4 01       	movw	r20, r8
    24ee:	2c e0       	ldi	r18, 0x0C	; 12
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	09 95       	icall
    24f4:	88 23       	and	r24, r24
    24f6:	91 f1       	breq	.+100    	; 0x255c <fat_delete_file+0xe2>
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
    24f8:	79 82       	std	Y+1, r7	; 0x01
        
        /* write back entry */
        if(!fs->partition->device_write(dir_entry_offset, buffer, sizeof(buffer)))
    24fa:	d6 01       	movw	r26, r12
    24fc:	ed 91       	ld	r30, X+
    24fe:	fc 91       	ld	r31, X
    2500:	04 80       	ldd	r0, Z+4	; 0x04
    2502:	f5 81       	ldd	r31, Z+5	; 0x05
    2504:	e0 2d       	mov	r30, r0
    2506:	c8 01       	movw	r24, r16
    2508:	b7 01       	movw	r22, r14
    250a:	a4 01       	movw	r20, r8
    250c:	2c e0       	ldi	r18, 0x0C	; 12
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	09 95       	icall
    2512:	88 23       	and	r24, r24
    2514:	19 f1       	breq	.+70     	; 0x255c <fat_delete_file+0xe2>
            return 0;

        /* check if we deleted the whole entry */
        if(buffer[11] != 0x0f)
    2516:	8c 85       	ldd	r24, Y+12	; 0x0c
    2518:	8f 30       	cpi	r24, 0x0F	; 15
    251a:	49 f4       	brne	.+18     	; 0x252e <fat_delete_file+0xb4>
            break;

        dir_entry_offset += 32;
    251c:	80 e2       	ldi	r24, 0x20	; 32
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	a0 e0       	ldi	r26, 0x00	; 0
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	e8 0e       	add	r14, r24
    2526:	f9 1e       	adc	r15, r25
    2528:	0a 1f       	adc	r16, r26
    252a:	1b 1f       	adc	r17, r27
    252c:	d7 cf       	rjmp	.-82     	; 0x24dc <fat_delete_file+0x62>
    }

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
    252e:	d5 01       	movw	r26, r10
    2530:	91 96       	adiw	r26, 0x21	; 33
    2532:	4d 91       	ld	r20, X+
    2534:	5d 91       	ld	r21, X+
    2536:	6d 91       	ld	r22, X+
    2538:	7c 91       	ld	r23, X
    253a:	94 97       	sbiw	r26, 0x24	; 36
    253c:	41 15       	cp	r20, r1
    253e:	51 05       	cpc	r21, r1
    2540:	61 05       	cpc	r22, r1
    2542:	71 05       	cpc	r23, r1
    2544:	39 f0       	breq	.+14     	; 0x2554 <fat_delete_file+0xda>
    2546:	c6 01       	movw	r24, r12
    2548:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <fat_free_clusters>
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	88 23       	and	r24, r24
    2552:	11 f0       	breq	.+4      	; 0x2558 <fat_delete_file+0xde>
    2554:	21 e0       	ldi	r18, 0x01	; 1
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	82 2f       	mov	r24, r18
    255a:	01 c0       	rjmp	.+2      	; 0x255e <fat_delete_file+0xe4>
    255c:	80 e0       	ldi	r24, 0x00	; 0
}
    255e:	2c 96       	adiw	r28, 0x0c	; 12
    2560:	0f b6       	in	r0, 0x3f	; 63
    2562:	f8 94       	cli
    2564:	de bf       	out	0x3e, r29	; 62
    2566:	0f be       	out	0x3f, r0	; 63
    2568:	cd bf       	out	0x3d, r28	; 61
    256a:	cf 91       	pop	r28
    256c:	df 91       	pop	r29
    256e:	1f 91       	pop	r17
    2570:	0f 91       	pop	r16
    2572:	ff 90       	pop	r15
    2574:	ef 90       	pop	r14
    2576:	df 90       	pop	r13
    2578:	cf 90       	pop	r12
    257a:	bf 90       	pop	r11
    257c:	af 90       	pop	r10
    257e:	9f 90       	pop	r9
    2580:	8f 90       	pop	r8
    2582:	7f 90       	pop	r7
    2584:	08 95       	ret

00002586 <fat_get_fs_size>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
    2586:	ef 92       	push	r14
    2588:	ff 92       	push	r15
    258a:	0f 93       	push	r16
    258c:	1f 93       	push	r17
    258e:	dc 01       	movw	r26, r24
    if(!fs)
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	29 f4       	brne	.+10     	; 0x259e <fat_get_fs_size+0x18>
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e0       	ldi	r20, 0x00	; 0
    259a:	50 e0       	ldi	r21, 0x00	; 0
    259c:	2c c0       	rjmp	.+88     	; 0x25f6 <fat_get_fs_size+0x70>
        return 0;

#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    259e:	ed 91       	ld	r30, X+
    25a0:	fc 91       	ld	r31, X
    25a2:	11 97       	sbiw	r26, 0x01	; 1
    25a4:	80 85       	ldd	r24, Z+8	; 0x08
    25a6:	1a 96       	adiw	r26, 0x0a	; 10
    25a8:	ed 90       	ld	r14, X+
    25aa:	fd 90       	ld	r15, X+
    25ac:	0d 91       	ld	r16, X+
    25ae:	1c 91       	ld	r17, X
    25b0:	1d 97       	sbiw	r26, 0x0d	; 13
    25b2:	50 96       	adiw	r26, 0x10	; 16
    25b4:	2d 91       	ld	r18, X+
    25b6:	3c 91       	ld	r19, X
    25b8:	51 97       	sbiw	r26, 0x11	; 17
    25ba:	8b 30       	cpi	r24, 0x0B	; 11
    25bc:	41 f4       	brne	.+16     	; 0x25ce <fat_get_fs_size+0x48>
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
    25be:	42 e0       	ldi	r20, 0x02	; 2
    25c0:	16 95       	lsr	r17
    25c2:	07 95       	ror	r16
    25c4:	f7 94       	ror	r15
    25c6:	e7 94       	ror	r14
    25c8:	4a 95       	dec	r20
    25ca:	d1 f7       	brne	.-12     	; 0x25c0 <fat_get_fs_size+0x3a>
    25cc:	04 c0       	rjmp	.+8      	; 0x25d6 <fat_get_fs_size+0x50>
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
    25ce:	16 95       	lsr	r17
    25d0:	07 95       	ror	r16
    25d2:	f7 94       	ror	r15
    25d4:	e7 94       	ror	r14
    25d6:	8e ef       	ldi	r24, 0xFE	; 254
    25d8:	9f ef       	ldi	r25, 0xFF	; 255
    25da:	af ef       	ldi	r26, 0xFF	; 255
    25dc:	bf ef       	ldi	r27, 0xFF	; 255
    25de:	e8 0e       	add	r14, r24
    25e0:	f9 1e       	adc	r15, r25
    25e2:	0a 1f       	adc	r16, r26
    25e4:	1b 1f       	adc	r17, r27
    25e6:	40 e0       	ldi	r20, 0x00	; 0
    25e8:	50 e0       	ldi	r21, 0x00	; 0
    25ea:	c8 01       	movw	r24, r16
    25ec:	b7 01       	movw	r22, r14
    25ee:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__mulsi3>
    25f2:	9b 01       	movw	r18, r22
    25f4:	ac 01       	movw	r20, r24
}
    25f6:	b9 01       	movw	r22, r18
    25f8:	ca 01       	movw	r24, r20
    25fa:	1f 91       	pop	r17
    25fc:	0f 91       	pop	r16
    25fe:	ff 90       	pop	r15
    2600:	ef 90       	pop	r14
    2602:	08 95       	ret

00002604 <fat_get_fs_free>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
offset_t fat_get_fs_free(const struct fat_fs_struct* fs)
{
    2604:	2f 92       	push	r2
    2606:	3f 92       	push	r3
    2608:	4f 92       	push	r4
    260a:	5f 92       	push	r5
    260c:	6f 92       	push	r6
    260e:	7f 92       	push	r7
    2610:	8f 92       	push	r8
    2612:	9f 92       	push	r9
    2614:	af 92       	push	r10
    2616:	bf 92       	push	r11
    2618:	cf 92       	push	r12
    261a:	df 92       	push	r13
    261c:	ef 92       	push	r14
    261e:	ff 92       	push	r15
    2620:	0f 93       	push	r16
    2622:	1f 93       	push	r17
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	a8 97       	sbiw	r28, 0x28	; 40
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	cd bf       	out	0x3d, r28	; 61
    2638:	98 a7       	std	Y+40, r25	; 0x28
    263a:	8f a3       	std	Y+39, r24	; 0x27
    if(!fs)
    263c:	89 2b       	or	r24, r25
    263e:	09 f4       	brne	.+2      	; 0x2642 <fat_get_fs_free+0x3e>
    2640:	64 c0       	rjmp	.+200    	; 0x270a <fat_get_fs_free+0x106>
        return 0;

    uint8_t fat[32];
    struct fat_usage_count_callback_arg count_arg;
    count_arg.cluster_count = 0;
    2642:	19 82       	std	Y+1, r1	; 0x01
    2644:	1a 82       	std	Y+2, r1	; 0x02
    2646:	1b 82       	std	Y+3, r1	; 0x03
    2648:	1c 82       	std	Y+4, r1	; 0x04
    count_arg.buffer_size = sizeof(fat);
    264a:	80 e2       	ldi	r24, 0x20	; 32
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	9e 83       	std	Y+6, r25	; 0x06
    2650:	8d 83       	std	Y+5, r24	; 0x05

    offset_t fat_offset = fs->header.fat_offset;
    2652:	af a1       	ldd	r26, Y+39	; 0x27
    2654:	b8 a5       	ldd	r27, Y+40	; 0x28
    2656:	16 96       	adiw	r26, 0x06	; 6
    2658:	4d 90       	ld	r4, X+
    265a:	5d 90       	ld	r5, X+
    265c:	6d 90       	ld	r6, X+
    265e:	7c 90       	ld	r7, X
    2660:	19 97       	sbiw	r26, 0x09	; 9
    uint32_t fat_size = fs->header.fat_size;
    2662:	1a 96       	adiw	r26, 0x0a	; 10
    2664:	8d 90       	ld	r8, X+
    2666:	9d 90       	ld	r9, X+
    2668:	ad 90       	ld	r10, X+
    266a:	bc 90       	ld	r11, X
    266c:	1d 97       	sbiw	r26, 0x0d	; 13
    266e:	39 c0       	rjmp	.+114    	; 0x26e2 <fat_get_fs_free+0xde>
    while(fat_size > 0)
    {
        uintptr_t length = UINTPTR_MAX - 1;
        if(fat_size < length)
    2670:	be ef       	ldi	r27, 0xFE	; 254
    2672:	8b 16       	cp	r8, r27
    2674:	bf ef       	ldi	r27, 0xFF	; 255
    2676:	9b 06       	cpc	r9, r27
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	ab 06       	cpc	r10, r27
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	bb 06       	cpc	r11, r27
    2680:	28 f0       	brcs	.+10     	; 0x268c <fat_get_fs_free+0x88>
    2682:	5e ef       	ldi	r21, 0xFE	; 254
    2684:	25 2e       	mov	r2, r21
    2686:	5f ef       	ldi	r21, 0xFF	; 255
    2688:	35 2e       	mov	r3, r21
    268a:	01 c0       	rjmp	.+2      	; 0x268e <fat_get_fs_free+0x8a>
            length = fat_size;
    268c:	14 01       	movw	r2, r8

        if(!fs->partition->device_read_interval(fat_offset,
    268e:	af a1       	ldd	r26, Y+39	; 0x27
    2690:	b8 a5       	ldd	r27, Y+40	; 0x28
    2692:	ed 91       	ld	r30, X+
    2694:	fc 91       	ld	r31, X
    2696:	a2 81       	ldd	r26, Z+2	; 0x02
    2698:	b3 81       	ldd	r27, Z+3	; 0x03
    269a:	80 85       	ldd	r24, Z+8	; 0x08
    269c:	86 30       	cpi	r24, 0x06	; 6
    269e:	19 f0       	breq	.+6      	; 0x26a6 <fat_get_fs_free+0xa2>
    26a0:	e6 ec       	ldi	r30, 0xC6	; 198
    26a2:	f3 e1       	ldi	r31, 0x13	; 19
    26a4:	02 c0       	rjmp	.+4      	; 0x26aa <fat_get_fs_free+0xa6>
    26a6:	e4 ea       	ldi	r30, 0xA4	; 164
    26a8:	f3 e1       	ldi	r31, 0x13	; 19
    26aa:	c3 01       	movw	r24, r6
    26ac:	b2 01       	movw	r22, r4
    26ae:	ae 01       	movw	r20, r28
    26b0:	49 5f       	subi	r20, 0xF9	; 249
    26b2:	5f 4f       	sbci	r21, 0xFF	; 255
    26b4:	20 e2       	ldi	r18, 0x20	; 32
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	81 01       	movw	r16, r2
    26ba:	7f 01       	movw	r14, r30
    26bc:	6e 01       	movw	r12, r28
    26be:	08 94       	sec
    26c0:	c1 1c       	adc	r12, r1
    26c2:	d1 1c       	adc	r13, r1
    26c4:	fd 01       	movw	r30, r26
    26c6:	09 95       	icall
    26c8:	88 23       	and	r24, r24
    26ca:	f9 f0       	breq	.+62     	; 0x270a <fat_get_fs_free+0x106>
                                                &count_arg
                                               )
          )
            return 0;

        fat_offset += length;
    26cc:	c1 01       	movw	r24, r2
    26ce:	a0 e0       	ldi	r26, 0x00	; 0
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	48 0e       	add	r4, r24
    26d4:	59 1e       	adc	r5, r25
    26d6:	6a 1e       	adc	r6, r26
    26d8:	7b 1e       	adc	r7, r27
        fat_size -= length;
    26da:	88 1a       	sub	r8, r24
    26dc:	99 0a       	sbc	r9, r25
    26de:	aa 0a       	sbc	r10, r26
    26e0:	bb 0a       	sbc	r11, r27
    count_arg.cluster_count = 0;
    count_arg.buffer_size = sizeof(fat);

    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
    26e2:	81 14       	cp	r8, r1
    26e4:	91 04       	cpc	r9, r1
    26e6:	a1 04       	cpc	r10, r1
    26e8:	b1 04       	cpc	r11, r1
    26ea:	11 f6       	brne	.-124    	; 0x2670 <fat_get_fs_free+0x6c>

        fat_offset += length;
        fat_size -= length;
    }

    return (offset_t) count_arg.cluster_count * fs->header.cluster_size;
    26ec:	ef a1       	ldd	r30, Y+39	; 0x27
    26ee:	f8 a5       	ldd	r31, Y+40	; 0x28
    26f0:	60 89       	ldd	r22, Z+16	; 0x10
    26f2:	71 89       	ldd	r23, Z+17	; 0x11
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	29 81       	ldd	r18, Y+1	; 0x01
    26fa:	3a 81       	ldd	r19, Y+2	; 0x02
    26fc:	4b 81       	ldd	r20, Y+3	; 0x03
    26fe:	5c 81       	ldd	r21, Y+4	; 0x04
    2700:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__mulsi3>
    2704:	9b 01       	movw	r18, r22
    2706:	ac 01       	movw	r20, r24
    2708:	04 c0       	rjmp	.+8      	; 0x2712 <fat_get_fs_free+0x10e>
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	40 e0       	ldi	r20, 0x00	; 0
    2710:	50 e0       	ldi	r21, 0x00	; 0
}
    2712:	b9 01       	movw	r22, r18
    2714:	ca 01       	movw	r24, r20
    2716:	a8 96       	adiw	r28, 0x28	; 40
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	f8 94       	cli
    271c:	de bf       	out	0x3e, r29	; 62
    271e:	0f be       	out	0x3f, r0	; 63
    2720:	cd bf       	out	0x3d, r28	; 61
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	1f 91       	pop	r17
    2728:	0f 91       	pop	r16
    272a:	ff 90       	pop	r15
    272c:	ef 90       	pop	r14
    272e:	df 90       	pop	r13
    2730:	cf 90       	pop	r12
    2732:	bf 90       	pop	r11
    2734:	af 90       	pop	r10
    2736:	9f 90       	pop	r9
    2738:	8f 90       	pop	r8
    273a:	7f 90       	pop	r7
    273c:	6f 90       	pop	r6
    273e:	5f 90       	pop	r5
    2740:	4f 90       	pop	r4
    2742:	3f 90       	pop	r3
    2744:	2f 90       	pop	r2
    2746:	08 95       	ret

00002748 <fat_get_fs_free_16_callback>:
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT.
 */
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
    2748:	cf 93       	push	r28
    274a:	df 93       	push	r29
    274c:	ec 01       	movw	r28, r24
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    274e:	f9 01       	movw	r30, r18
    uintptr_t buffer_size = count_arg->buffer_size;
    2750:	44 81       	ldd	r20, Z+4	; 0x04
    2752:	55 81       	ldd	r21, Z+5	; 0x05
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	12 c0       	rjmp	.+36     	; 0x277e <fat_get_fs_free_16_callback+0x36>

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
    {
        uint16_t cluster = *((uint16_t*) &buffer[0]);
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
    275a:	88 81       	ld	r24, Y
    275c:	99 81       	ldd	r25, Y+1	; 0x01
    275e:	89 2b       	or	r24, r25
    2760:	59 f4       	brne	.+22     	; 0x2778 <fat_get_fs_free_16_callback+0x30>
            ++(count_arg->cluster_count);
    2762:	80 81       	ld	r24, Z
    2764:	91 81       	ldd	r25, Z+1	; 0x01
    2766:	a2 81       	ldd	r26, Z+2	; 0x02
    2768:	b3 81       	ldd	r27, Z+3	; 0x03
    276a:	01 96       	adiw	r24, 0x01	; 1
    276c:	a1 1d       	adc	r26, r1
    276e:	b1 1d       	adc	r27, r1
    2770:	80 83       	st	Z, r24
    2772:	91 83       	std	Z+1, r25	; 0x01
    2774:	a2 83       	std	Z+2, r26	; 0x02
    2776:	b3 83       	std	Z+3, r27	; 0x03
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
    2778:	2e 5f       	subi	r18, 0xFE	; 254
    277a:	3f 4f       	sbci	r19, 0xFF	; 255
    277c:	22 96       	adiw	r28, 0x02	; 2
    277e:	24 17       	cp	r18, r20
    2780:	35 07       	cpc	r19, r21
    2782:	58 f3       	brcs	.-42     	; 0x275a <fat_get_fs_free_16_callback+0x12>
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	df 91       	pop	r29
    2788:	cf 91       	pop	r28
    278a:	08 95       	ret

0000278c <fat_get_fs_free_32_callback>:
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT32.
 */
uint8_t fat_get_fs_free_32_callback(uint8_t* buffer, offset_t offset, void* p)
{
    278c:	cf 93       	push	r28
    278e:	df 93       	push	r29
    2790:	ec 01       	movw	r28, r24
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    2792:	f9 01       	movw	r30, r18
    uintptr_t buffer_size = count_arg->buffer_size;
    2794:	44 81       	ldd	r20, Z+4	; 0x04
    2796:	55 81       	ldd	r21, Z+5	; 0x05
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	16 c0       	rjmp	.+44     	; 0x27ca <fat_get_fs_free_32_callback+0x3e>

    for(uintptr_t i = 0; i < buffer_size; i += 4, buffer += 4)
    {
        uint32_t cluster = *((uint32_t*) &buffer[0]);
        if(cluster == HTOL32(FAT32_CLUSTER_FREE))
    279e:	88 81       	ld	r24, Y
    27a0:	99 81       	ldd	r25, Y+1	; 0x01
    27a2:	aa 81       	ldd	r26, Y+2	; 0x02
    27a4:	bb 81       	ldd	r27, Y+3	; 0x03
    27a6:	00 97       	sbiw	r24, 0x00	; 0
    27a8:	a1 05       	cpc	r26, r1
    27aa:	b1 05       	cpc	r27, r1
    27ac:	59 f4       	brne	.+22     	; 0x27c4 <fat_get_fs_free_32_callback+0x38>
            ++(count_arg->cluster_count);
    27ae:	80 81       	ld	r24, Z
    27b0:	91 81       	ldd	r25, Z+1	; 0x01
    27b2:	a2 81       	ldd	r26, Z+2	; 0x02
    27b4:	b3 81       	ldd	r27, Z+3	; 0x03
    27b6:	01 96       	adiw	r24, 0x01	; 1
    27b8:	a1 1d       	adc	r26, r1
    27ba:	b1 1d       	adc	r27, r1
    27bc:	80 83       	st	Z, r24
    27be:	91 83       	std	Z+1, r25	; 0x01
    27c0:	a2 83       	std	Z+2, r26	; 0x02
    27c2:	b3 83       	std	Z+3, r27	; 0x03
uint8_t fat_get_fs_free_32_callback(uint8_t* buffer, offset_t offset, void* p)
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 4, buffer += 4)
    27c4:	2c 5f       	subi	r18, 0xFC	; 252
    27c6:	3f 4f       	sbci	r19, 0xFF	; 255
    27c8:	24 96       	adiw	r28, 0x04	; 4
    27ca:	24 17       	cp	r18, r20
    27cc:	35 07       	cpc	r19, r21
    27ce:	38 f3       	brcs	.-50     	; 0x279e <fat_get_fs_free_32_callback+0x12>
        if(cluster == HTOL32(FAT32_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	df 91       	pop	r29
    27d4:	cf 91       	pop	r28
    27d6:	08 95       	ret

000027d8 <fat_clear_cluster>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    27d8:	cf 92       	push	r12
    27da:	df 92       	push	r13
    27dc:	ef 92       	push	r14
    27de:	ff 92       	push	r15
    27e0:	0f 93       	push	r16
    27e2:	1f 93       	push	r17
    27e4:	df 93       	push	r29
    27e6:	cf 93       	push	r28
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	60 97       	sbiw	r28, 0x10	; 16
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	f8 94       	cli
    27f2:	de bf       	out	0x3e, r29	; 62
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	cd bf       	out	0x3d, r28	; 61
    27f8:	8c 01       	movw	r16, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	ba 01       	movw	r22, r20
    if(cluster_num < 2)
    27fe:	62 30       	cpi	r22, 0x02	; 2
    2800:	71 05       	cpc	r23, r1
    2802:	81 05       	cpc	r24, r1
    2804:	91 05       	cpc	r25, r1
    2806:	10 f4       	brcc	.+4      	; 0x280c <fat_clear_cluster+0x34>
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	36 c0       	rjmp	.+108    	; 0x2878 <fat_clear_cluster+0xa0>
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    280c:	01 15       	cp	r16, r1
    280e:	11 05       	cpc	r17, r1
    2810:	29 f4       	brne	.+10     	; 0x281c <fat_clear_cluster+0x44>
    2812:	40 e0       	ldi	r20, 0x00	; 0
    2814:	50 e0       	ldi	r21, 0x00	; 0
    2816:	60 e0       	ldi	r22, 0x00	; 0
    2818:	70 e0       	ldi	r23, 0x00	; 0
    281a:	16 c0       	rjmp	.+44     	; 0x2848 <fat_clear_cluster+0x70>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    281c:	62 50       	subi	r22, 0x02	; 2
    281e:	70 40       	sbci	r23, 0x00	; 0
    2820:	80 40       	sbci	r24, 0x00	; 0
    2822:	90 40       	sbci	r25, 0x00	; 0
    2824:	f8 01       	movw	r30, r16
    2826:	20 89       	ldd	r18, Z+16	; 0x10
    2828:	31 89       	ldd	r19, Z+17	; 0x11
    282a:	40 e0       	ldi	r20, 0x00	; 0
    282c:	50 e0       	ldi	r21, 0x00	; 0
    282e:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__mulsi3>
    2832:	ab 01       	movw	r20, r22
    2834:	bc 01       	movw	r22, r24
    2836:	f8 01       	movw	r30, r16
    2838:	82 89       	ldd	r24, Z+18	; 0x12
    283a:	93 89       	ldd	r25, Z+19	; 0x13
    283c:	a4 89       	ldd	r26, Z+20	; 0x14
    283e:	b5 89       	ldd	r27, Z+21	; 0x15
    2840:	48 0f       	add	r20, r24
    2842:	59 1f       	adc	r21, r25
    2844:	6a 1f       	adc	r22, r26
    2846:	7b 1f       	adc	r23, r27
        return 0;

    offset_t cluster_offset = fat_cluster_offset(fs, cluster_num);

    uint8_t zero[16];
    memset(zero, 0, sizeof(zero));
    2848:	de 01       	movw	r26, r28
    284a:	11 96       	adiw	r26, 0x01	; 1
    284c:	80 e1       	ldi	r24, 0x10	; 16
    284e:	fd 01       	movw	r30, r26
    2850:	11 92       	st	Z+, r1
    2852:	8a 95       	dec	r24
    2854:	e9 f7       	brne	.-6      	; 0x2850 <fat_clear_cluster+0x78>
    return fs->partition->device_write_interval(cluster_offset,
    2856:	f8 01       	movw	r30, r16
    2858:	80 81       	ld	r24, Z
    285a:	91 81       	ldd	r25, Z+1	; 0x01
    285c:	20 89       	ldd	r18, Z+16	; 0x10
    285e:	31 89       	ldd	r19, Z+17	; 0x11
    2860:	fc 01       	movw	r30, r24
    2862:	c6 80       	ldd	r12, Z+6	; 0x06
    2864:	d7 80       	ldd	r13, Z+7	; 0x07
    2866:	cb 01       	movw	r24, r22
    2868:	ba 01       	movw	r22, r20
    286a:	ad 01       	movw	r20, r26
    286c:	05 ec       	ldi	r16, 0xC5	; 197
    286e:	1f e0       	ldi	r17, 0x0F	; 15
    2870:	ee 24       	eor	r14, r14
    2872:	ff 24       	eor	r15, r15
    2874:	f6 01       	movw	r30, r12
    2876:	09 95       	icall
                                                zero,
                                                fs->header.cluster_size,
                                                fat_clear_cluster_callback,
                                                0
                                               );
}
    2878:	60 96       	adiw	r28, 0x10	; 16
    287a:	0f b6       	in	r0, 0x3f	; 63
    287c:	f8 94       	cli
    287e:	de bf       	out	0x3e, r29	; 62
    2880:	0f be       	out	0x3f, r0	; 63
    2882:	cd bf       	out	0x3d, r28	; 61
    2884:	cf 91       	pop	r28
    2886:	df 91       	pop	r29
    2888:	1f 91       	pop	r17
    288a:	0f 91       	pop	r16
    288c:	ff 90       	pop	r15
    288e:	ef 90       	pop	r14
    2890:	df 90       	pop	r13
    2892:	cf 90       	pop	r12
    2894:	08 95       	ret

00002896 <fat_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    2896:	2f 92       	push	r2
    2898:	3f 92       	push	r3
    289a:	4f 92       	push	r4
    289c:	5f 92       	push	r5
    289e:	6f 92       	push	r6
    28a0:	7f 92       	push	r7
    28a2:	8f 92       	push	r8
    28a4:	9f 92       	push	r9
    28a6:	af 92       	push	r10
    28a8:	bf 92       	push	r11
    28aa:	cf 92       	push	r12
    28ac:	df 92       	push	r13
    28ae:	ef 92       	push	r14
    28b0:	ff 92       	push	r15
    28b2:	0f 93       	push	r16
    28b4:	1f 93       	push	r17
    28b6:	df 93       	push	r29
    28b8:	cf 93       	push	r28
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
    28be:	a9 97       	sbiw	r28, 0x29	; 41
    28c0:	0f b6       	in	r0, 0x3f	; 63
    28c2:	f8 94       	cli
    28c4:	de bf       	out	0x3e, r29	; 62
    28c6:	0f be       	out	0x3f, r0	; 63
    28c8:	cd bf       	out	0x3d, r28	; 61
    28ca:	1c 01       	movw	r2, r24
    28cc:	79 a7       	std	Y+41, r23	; 0x29
    28ce:	68 a7       	std	Y+40, r22	; 0x28
    if(!dd || !dir_entry)
    28d0:	00 97       	sbiw	r24, 0x00	; 0
    28d2:	09 f4       	brne	.+2      	; 0x28d6 <fat_read_dir+0x40>
    28d4:	d7 c0       	rjmp	.+430    	; 0x2a84 <fat_read_dir+0x1ee>
    28d6:	61 15       	cp	r22, r1
    28d8:	71 05       	cpc	r23, r1
    28da:	09 f4       	brne	.+2      	; 0x28de <fat_read_dir+0x48>
    28dc:	d3 c0       	rjmp	.+422    	; 0x2a84 <fat_read_dir+0x1ee>
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    28de:	dc 01       	movw	r26, r24
    28e0:	6d 90       	ld	r6, X+
    28e2:	7c 90       	ld	r7, X
    28e4:	11 97       	sbiw	r26, 0x01	; 1
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    28e6:	f3 01       	movw	r30, r6
    28e8:	00 88       	ldd	r0, Z+16	; 0x10
    28ea:	f1 89       	ldd	r31, Z+17	; 0x11
    28ec:	e0 2d       	mov	r30, r0
    28ee:	ff a3       	std	Y+39, r31	; 0x27
    28f0:	ee a3       	std	Y+38, r30	; 0x26
    cluster_t cluster_num = dd->entry_cluster;
    28f2:	9f 96       	adiw	r26, 0x2f	; 47
    28f4:	8d 90       	ld	r8, X+
    28f6:	9d 90       	ld	r9, X+
    28f8:	ad 90       	ld	r10, X+
    28fa:	bc 90       	ld	r11, X
    28fc:	d2 97       	sbiw	r26, 0x32	; 50
    uint16_t cluster_offset = dd->entry_offset;
    28fe:	d3 96       	adiw	r26, 0x33	; 51
    2900:	4d 90       	ld	r4, X+
    2902:	5c 90       	ld	r5, X
    2904:	d4 97       	sbiw	r26, 0x34	; 52
    struct fat_read_dir_callback_arg arg;

    /* reset directory entry */
    memset(dir_entry, 0, sizeof(*dir_entry));
    2906:	8d e2       	ldi	r24, 0x2D	; 45
    2908:	db 01       	movw	r26, r22
    290a:	1d 92       	st	X+, r1
    290c:	8a 95       	dec	r24
    290e:	e9 f7       	brne	.-6      	; 0x290a <fat_read_dir+0x74>

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    2910:	fe 01       	movw	r30, r28
    2912:	31 96       	adiw	r30, 0x01	; 1
    2914:	85 e0       	ldi	r24, 0x05	; 5
    2916:	df 01       	movw	r26, r30
    2918:	1d 92       	st	X+, r1
    291a:	8a 95       	dec	r24
    291c:	e9 f7       	brne	.-6      	; 0x2918 <fat_read_dir+0x82>
    arg.dir_entry = dir_entry;

    /* check if we read from the root directory */
    if(cluster_num == 0)
    291e:	81 14       	cp	r8, r1
    2920:	91 04       	cpc	r9, r1
    2922:	a1 04       	cpc	r10, r1
    2924:	b1 04       	cpc	r11, r1
    2926:	09 f0       	breq	.+2      	; 0x292a <fat_read_dir+0x94>
    2928:	93 c0       	rjmp	.+294    	; 0x2a50 <fat_read_dir+0x1ba>
    {
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
    292a:	d3 01       	movw	r26, r6
    292c:	ed 91       	ld	r30, X+
    292e:	fc 91       	ld	r31, X
    2930:	11 97       	sbiw	r26, 0x01	; 1
    2932:	80 85       	ldd	r24, Z+8	; 0x08
    2934:	8b 30       	cpi	r24, 0x0B	; 11
    2936:	39 f4       	brne	.+14     	; 0x2946 <fat_read_dir+0xb0>
            cluster_num = header->root_dir_cluster;
    2938:	5a 96       	adiw	r26, 0x1a	; 26
    293a:	8d 90       	ld	r8, X+
    293c:	9d 90       	ld	r9, X+
    293e:	ad 90       	ld	r10, X+
    2940:	bc 90       	ld	r11, X
    2942:	5d 97       	sbiw	r26, 0x1d	; 29
    2944:	85 c0       	rjmp	.+266    	; 0x2a50 <fat_read_dir+0x1ba>
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    2946:	f3 01       	movw	r30, r6
    2948:	02 88       	ldd	r0, Z+18	; 0x12
    294a:	f3 89       	ldd	r31, Z+19	; 0x13
    294c:	e0 2d       	mov	r30, r0
    294e:	d3 01       	movw	r26, r6
    2950:	56 96       	adiw	r26, 0x16	; 22
    2952:	8d 91       	ld	r24, X+
    2954:	9c 91       	ld	r25, X
    2956:	57 97       	sbiw	r26, 0x17	; 23
    2958:	e8 1b       	sub	r30, r24
    295a:	f9 0b       	sbc	r31, r25
    295c:	ff a3       	std	Y+39, r31	; 0x27
    295e:	ee a3       	std	Y+38, r30	; 0x26
    2960:	77 c0       	rjmp	.+238    	; 0x2a50 <fat_read_dir+0x1ba>
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
        uint32_t pos = cluster_offset;
    2962:	72 01       	movw	r14, r4
    2964:	00 e0       	ldi	r16, 0x00	; 0
    2966:	10 e0       	ldi	r17, 0x00	; 0
        if(cluster_num == 0)
    2968:	81 14       	cp	r8, r1
    296a:	91 04       	cpc	r9, r1
    296c:	a1 04       	cpc	r10, r1
    296e:	b1 04       	cpc	r11, r1
    2970:	31 f4       	brne	.+12     	; 0x297e <fat_read_dir+0xe8>
            pos += header->root_dir_offset;
    2972:	f3 01       	movw	r30, r6
    2974:	66 89       	ldd	r22, Z+22	; 0x16
    2976:	77 89       	ldd	r23, Z+23	; 0x17
    2978:	80 8d       	ldd	r24, Z+24	; 0x18
    297a:	91 8d       	ldd	r25, Z+25	; 0x19
    297c:	2a c0       	rjmp	.+84     	; 0x29d2 <fat_read_dir+0x13c>
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    297e:	61 14       	cp	r6, r1
    2980:	71 04       	cpc	r7, r1
    2982:	09 f1       	breq	.+66     	; 0x29c6 <fat_read_dir+0x130>
    2984:	f2 e0       	ldi	r31, 0x02	; 2
    2986:	8f 16       	cp	r8, r31
    2988:	91 04       	cpc	r9, r1
    298a:	a1 04       	cpc	r10, r1
    298c:	b1 04       	cpc	r11, r1
    298e:	d8 f0       	brcs	.+54     	; 0x29c6 <fat_read_dir+0x130>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    2990:	c5 01       	movw	r24, r10
    2992:	b4 01       	movw	r22, r8
    2994:	62 50       	subi	r22, 0x02	; 2
    2996:	70 40       	sbci	r23, 0x00	; 0
    2998:	80 40       	sbci	r24, 0x00	; 0
    299a:	90 40       	sbci	r25, 0x00	; 0
    299c:	d3 01       	movw	r26, r6
    299e:	50 96       	adiw	r26, 0x10	; 16
    29a0:	2d 91       	ld	r18, X+
    29a2:	3c 91       	ld	r19, X
    29a4:	51 97       	sbiw	r26, 0x11	; 17
    29a6:	40 e0       	ldi	r20, 0x00	; 0
    29a8:	50 e0       	ldi	r21, 0x00	; 0
    29aa:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__mulsi3>
    29ae:	9b 01       	movw	r18, r22
    29b0:	ac 01       	movw	r20, r24
    29b2:	f3 01       	movw	r30, r6
    29b4:	82 89       	ldd	r24, Z+18	; 0x12
    29b6:	93 89       	ldd	r25, Z+19	; 0x13
    29b8:	a4 89       	ldd	r26, Z+20	; 0x14
    29ba:	b5 89       	ldd	r27, Z+21	; 0x15
    29bc:	28 0f       	add	r18, r24
    29be:	39 1f       	adc	r19, r25
    29c0:	4a 1f       	adc	r20, r26
    29c2:	5b 1f       	adc	r21, r27
    29c4:	04 c0       	rjmp	.+8      	; 0x29ce <fat_read_dir+0x138>
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	40 e0       	ldi	r20, 0x00	; 0
    29cc:	50 e0       	ldi	r21, 0x00	; 0
        uint16_t cluster_left = cluster_size - cluster_offset;
        uint32_t pos = cluster_offset;
        if(cluster_num == 0)
            pos += header->root_dir_offset;
        else
            pos += fat_cluster_offset(fs, cluster_num);
    29ce:	ca 01       	movw	r24, r20
    29d0:	b9 01       	movw	r22, r18
    29d2:	6e 0d       	add	r22, r14
    29d4:	7f 1d       	adc	r23, r15
    29d6:	80 1f       	adc	r24, r16
    29d8:	91 1f       	adc	r25, r17

        arg.bytes_read = 0;
    29da:	1c 82       	std	Y+4, r1	; 0x04
    29dc:	1b 82       	std	Y+3, r1	; 0x03
        if(!fs->partition->device_read_interval(pos,
    29de:	d3 01       	movw	r26, r6
    29e0:	ed 91       	ld	r30, X+
    29e2:	fc 91       	ld	r31, X
    29e4:	0e a1       	ldd	r16, Y+38	; 0x26
    29e6:	1f a1       	ldd	r17, Y+39	; 0x27
    29e8:	04 19       	sub	r16, r4
    29ea:	15 09       	sbc	r17, r5
    29ec:	02 80       	ldd	r0, Z+2	; 0x02
    29ee:	f3 81       	ldd	r31, Z+3	; 0x03
    29f0:	e0 2d       	mov	r30, r0
    29f2:	ae 01       	movw	r20, r28
    29f4:	4a 5f       	subi	r20, 0xFA	; 250
    29f6:	5f 4f       	sbci	r21, 0xFF	; 255
    29f8:	20 e2       	ldi	r18, 0x20	; 32
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	aa e5       	ldi	r26, 0x5A	; 90
    29fe:	ea 2e       	mov	r14, r26
    2a00:	a1 e1       	ldi	r26, 0x11	; 17
    2a02:	fa 2e       	mov	r15, r26
    2a04:	6e 01       	movw	r12, r28
    2a06:	08 94       	sec
    2a08:	c1 1c       	adc	r12, r1
    2a0a:	d1 1c       	adc	r13, r1
    2a0c:	09 95       	icall
    2a0e:	88 23       	and	r24, r24
    2a10:	c9 f1       	breq	.+114    	; 0x2a84 <fat_read_dir+0x1ee>
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;

        cluster_offset += arg.bytes_read;
    2a12:	8b 81       	ldd	r24, Y+3	; 0x03
    2a14:	9c 81       	ldd	r25, Y+4	; 0x04
    2a16:	48 0e       	add	r4, r24
    2a18:	59 1e       	adc	r5, r25

        if(cluster_offset >= cluster_size)
    2a1a:	ee a1       	ldd	r30, Y+38	; 0x26
    2a1c:	ff a1       	ldd	r31, Y+39	; 0x27
    2a1e:	4e 16       	cp	r4, r30
    2a20:	5f 06       	cpc	r5, r31
    2a22:	d0 f0       	brcs	.+52     	; 0x2a58 <fat_read_dir+0x1c2>
        {
            /* we reached the cluster border and switch to the next cluster */
            cluster_offset = 0;

            /* get number of next cluster */
            if(!(cluster_num = fat_get_next_cluster(fs, cluster_num)))
    2a24:	c3 01       	movw	r24, r6
    2a26:	b5 01       	movw	r22, r10
    2a28:	a4 01       	movw	r20, r8
    2a2a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <fat_get_next_cluster>
    2a2e:	4b 01       	movw	r8, r22
    2a30:	5c 01       	movw	r10, r24
    2a32:	44 24       	eor	r4, r4
    2a34:	55 24       	eor	r5, r5
    2a36:	61 15       	cp	r22, r1
    2a38:	71 05       	cpc	r23, r1
    2a3a:	81 05       	cpc	r24, r1
    2a3c:	91 05       	cpc	r25, r1
    2a3e:	61 f4       	brne	.+24     	; 0x2a58 <fat_read_dir+0x1c2>
            {
                /* directory entry not found, reset directory handle */
                cluster_num = dd->dir_entry.cluster;
    2a40:	d1 01       	movw	r26, r2
    2a42:	93 96       	adiw	r26, 0x23	; 35
    2a44:	8d 90       	ld	r8, X+
    2a46:	9d 90       	ld	r9, X+
    2a48:	ad 90       	ld	r10, X+
    2a4a:	bc 90       	ld	r11, X
    2a4c:	96 97       	sbiw	r26, 0x26	; 38
    2a4e:	08 c0       	rjmp	.+16     	; 0x2a60 <fat_read_dir+0x1ca>
    /* reset directory entry */
    memset(dir_entry, 0, sizeof(*dir_entry));

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    arg.dir_entry = dir_entry;
    2a50:	e8 a5       	ldd	r30, Y+40	; 0x28
    2a52:	f9 a5       	ldd	r31, Y+41	; 0x29
    2a54:	fa 83       	std	Y+2, r31	; 0x02
    2a56:	e9 83       	std	Y+1, r30	; 0x01
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    }

    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    2a58:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5a:	88 23       	and	r24, r24
    2a5c:	09 f4       	brne	.+2      	; 0x2a60 <fat_read_dir+0x1ca>
    2a5e:	81 cf       	rjmp	.-254    	; 0x2962 <fat_read_dir+0xcc>
                break;
            }
        }
    }

    dd->entry_cluster = cluster_num;
    2a60:	d1 01       	movw	r26, r2
    2a62:	9f 96       	adiw	r26, 0x2f	; 47
    2a64:	8d 92       	st	X+, r8
    2a66:	9d 92       	st	X+, r9
    2a68:	ad 92       	st	X+, r10
    2a6a:	bc 92       	st	X, r11
    2a6c:	d2 97       	sbiw	r26, 0x32	; 50
    dd->entry_offset = cluster_offset;
    2a6e:	d4 96       	adiw	r26, 0x34	; 52
    2a70:	5c 92       	st	X, r5
    2a72:	4e 92       	st	-X, r4
    2a74:	d3 97       	sbiw	r26, 0x33	; 51

    return dir_entry->long_name[0] != '\0' ? 1 : 0;
    2a76:	e8 a5       	ldd	r30, Y+40	; 0x28
    2a78:	f9 a5       	ldd	r31, Y+41	; 0x29
    2a7a:	80 81       	ld	r24, Z
    2a7c:	88 23       	and	r24, r24
    2a7e:	19 f0       	breq	.+6      	; 0x2a86 <fat_read_dir+0x1f0>
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	01 c0       	rjmp	.+2      	; 0x2a86 <fat_read_dir+0x1f0>
    2a84:	80 e0       	ldi	r24, 0x00	; 0
}
    2a86:	a9 96       	adiw	r28, 0x29	; 41
    2a88:	0f b6       	in	r0, 0x3f	; 63
    2a8a:	f8 94       	cli
    2a8c:	de bf       	out	0x3e, r29	; 62
    2a8e:	0f be       	out	0x3f, r0	; 63
    2a90:	cd bf       	out	0x3d, r28	; 61
    2a92:	cf 91       	pop	r28
    2a94:	df 91       	pop	r29
    2a96:	1f 91       	pop	r17
    2a98:	0f 91       	pop	r16
    2a9a:	ff 90       	pop	r15
    2a9c:	ef 90       	pop	r14
    2a9e:	df 90       	pop	r13
    2aa0:	cf 90       	pop	r12
    2aa2:	bf 90       	pop	r11
    2aa4:	af 90       	pop	r10
    2aa6:	9f 90       	pop	r9
    2aa8:	8f 90       	pop	r8
    2aaa:	7f 90       	pop	r7
    2aac:	6f 90       	pop	r6
    2aae:	5f 90       	pop	r5
    2ab0:	4f 90       	pop	r4
    2ab2:	3f 90       	pop	r3
    2ab4:	2f 90       	pop	r2
    2ab6:	08 95       	ret

00002ab8 <fat_open>:
 * \param[in] partition Discriptor of partition on which the filesystem resides.
 * \returns 0 on error, a FAT filesystem descriptor on success.
 * \see fat_close
 */
struct fat_fs_struct* fat_open(struct partition_struct* partition)
{
    2ab8:	2f 92       	push	r2
    2aba:	3f 92       	push	r3
    2abc:	4f 92       	push	r4
    2abe:	5f 92       	push	r5
    2ac0:	6f 92       	push	r6
    2ac2:	7f 92       	push	r7
    2ac4:	8f 92       	push	r8
    2ac6:	9f 92       	push	r9
    2ac8:	af 92       	push	r10
    2aca:	bf 92       	push	r11
    2acc:	cf 92       	push	r12
    2ace:	df 92       	push	r13
    2ad0:	ef 92       	push	r14
    2ad2:	ff 92       	push	r15
    2ad4:	0f 93       	push	r16
    2ad6:	1f 93       	push	r17
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
    2ae0:	ee 97       	sbiw	r28, 0x3e	; 62
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	f8 94       	cli
    2ae6:	de bf       	out	0x3e, r29	; 62
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	cd bf       	out	0x3d, r28	; 61
    2aec:	9e af       	std	Y+62, r25	; 0x3e
    2aee:	8d af       	std	Y+61, r24	; 0x3d
    if(!partition ||
    2af0:	00 97       	sbiw	r24, 0x00	; 0
    2af2:	09 f4       	brne	.+2      	; 0x2af6 <fat_open+0x3e>
    2af4:	89 c1       	rjmp	.+786    	; 0x2e08 <fat_open+0x350>
    2af6:	dc 01       	movw	r26, r24
    2af8:	14 96       	adiw	r26, 0x04	; 4
    2afa:	8d 91       	ld	r24, X+
    2afc:	9c 91       	ld	r25, X
    2afe:	15 97       	sbiw	r26, 0x05	; 5
    2b00:	89 2b       	or	r24, r25
    2b02:	09 f4       	brne	.+2      	; 0x2b06 <fat_open+0x4e>
    2b04:	81 c1       	rjmp	.+770    	; 0x2e08 <fat_open+0x350>
    2b06:	16 96       	adiw	r26, 0x06	; 6
    2b08:	8d 91       	ld	r24, X+
    2b0a:	9c 91       	ld	r25, X
    2b0c:	17 97       	sbiw	r26, 0x07	; 7
    2b0e:	89 2b       	or	r24, r25
    2b10:	09 f4       	brne	.+2      	; 0x2b14 <fat_open+0x5c>
    2b12:	7a c1       	rjmp	.+756    	; 0x2e08 <fat_open+0x350>
    2b14:	c0 c1       	rjmp	.+896    	; 0x2e96 <fat_open+0x3de>
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
        return 0;

    uint16_t bytes_per_sector = ltoh16(*((uint16_t*) &buffer[0x00]));
    2b16:	e9 81       	ldd	r30, Y+1	; 0x01
    2b18:	fa 81       	ldd	r31, Y+2	; 0x02
    2b1a:	fb ab       	std	Y+51, r31	; 0x33
    2b1c:	ea ab       	std	Y+50, r30	; 0x32
    uint16_t reserved_sectors = ltoh16(*((uint16_t*) &buffer[0x03]));
    2b1e:	2c 81       	ldd	r18, Y+4	; 0x04
    2b20:	3d 81       	ldd	r19, Y+5	; 0x05
    uint8_t sectors_per_cluster = buffer[0x02];
    2b22:	fb 81       	ldd	r31, Y+3	; 0x03
    2b24:	fc ab       	std	Y+52, r31	; 0x34
    uint8_t fat_copies = buffer[0x05];
    2b26:	4e 81       	ldd	r20, Y+6	; 0x06
    uint16_t max_root_entries = ltoh16(*((uint16_t*) &buffer[0x06]));
    2b28:	ef 80       	ldd	r14, Y+7	; 0x07
    2b2a:	f8 84       	ldd	r15, Y+8	; 0x08
    2b2c:	fe aa       	std	Y+54, r15	; 0x36
    2b2e:	ed aa       	std	Y+53, r14	; 0x35
    uint16_t sector_count_16 = ltoh16(*((uint16_t*) &buffer[0x08]));
    2b30:	e9 85       	ldd	r30, Y+9	; 0x09
    2b32:	fa 85       	ldd	r31, Y+10	; 0x0a
    uint16_t sectors_per_fat = ltoh16(*((uint16_t*) &buffer[0x0b]));
    2b34:	0c 85       	ldd	r16, Y+12	; 0x0c
    2b36:	1d 85       	ldd	r17, Y+13	; 0x0d
    2b38:	18 af       	std	Y+56, r17	; 0x38
    2b3a:	0f ab       	std	Y+55, r16	; 0x37
    uint32_t sector_count = ltoh32(*((uint32_t*) &buffer[0x15]));
    2b3c:	6e 88       	ldd	r6, Y+22	; 0x16
    2b3e:	7f 88       	ldd	r7, Y+23	; 0x17
    2b40:	88 8c       	ldd	r8, Y+24	; 0x18
    2b42:	99 8c       	ldd	r9, Y+25	; 0x19
#if FAT_FAT32_SUPPORT
    uint32_t sectors_per_fat32 = ltoh32(*((uint32_t*) &buffer[0x19]));
    2b44:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2b46:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2b48:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b4a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    uint32_t cluster_root_dir = ltoh32(*((uint32_t*) &buffer[0x21]));
    2b4c:	ea a0       	ldd	r14, Y+34	; 0x22
    2b4e:	fb a0       	ldd	r15, Y+35	; 0x23
    2b50:	0c a1       	ldd	r16, Y+36	; 0x24
    2b52:	1d a1       	ldd	r17, Y+37	; 0x25
    2b54:	e9 ae       	std	Y+57, r14	; 0x39
    2b56:	fa ae       	std	Y+58, r15	; 0x3a
    2b58:	0b af       	std	Y+59, r16	; 0x3b
    2b5a:	1c af       	std	Y+60, r17	; 0x3c
#endif

    if(sector_count == 0)
    2b5c:	61 14       	cp	r6, r1
    2b5e:	71 04       	cpc	r7, r1
    2b60:	81 04       	cpc	r8, r1
    2b62:	91 04       	cpc	r9, r1
    2b64:	31 f4       	brne	.+12     	; 0x2b72 <fat_open+0xba>
    {
        if(sector_count_16 == 0)
    2b66:	30 97       	sbiw	r30, 0x00	; 0
    2b68:	09 f4       	brne	.+2      	; 0x2b6c <fat_open+0xb4>
    2b6a:	4a c1       	rjmp	.+660    	; 0x2e00 <fat_open+0x348>
            /* illegal volume size */
            return 0;
        else
            sector_count = sector_count_16;
    2b6c:	3f 01       	movw	r6, r30
    2b6e:	88 24       	eor	r8, r8
    2b70:	99 24       	eor	r9, r9
    }
#if FAT_FAT32_SUPPORT
    if(sectors_per_fat != 0)
    2b72:	0f a9       	ldd	r16, Y+55	; 0x37
    2b74:	18 ad       	ldd	r17, Y+56	; 0x38
    2b76:	01 15       	cp	r16, r1
    2b78:	11 05       	cpc	r17, r1
    2b7a:	21 f0       	breq	.+8      	; 0x2b84 <fat_open+0xcc>
        sectors_per_fat32 = sectors_per_fat;
    2b7c:	b8 01       	movw	r22, r16
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	06 c0       	rjmp	.+12     	; 0x2b90 <fat_open+0xd8>
    else if(sectors_per_fat32 == 0)
    2b84:	61 15       	cp	r22, r1
    2b86:	71 05       	cpc	r23, r1
    2b88:	81 05       	cpc	r24, r1
    2b8a:	91 05       	cpc	r25, r1
    2b8c:	09 f4       	brne	.+2      	; 0x2b90 <fat_open+0xd8>
    2b8e:	38 c1       	rjmp	.+624    	; 0x2e00 <fat_open+0x348>
#if FAT_FAT32_SUPPORT
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    2b90:	79 01       	movw	r14, r18
    2b92:	00 e0       	ldi	r16, 0x00	; 0
    2b94:	10 e0       	ldi	r17, 0x00	; 0
    2b96:	ee a2       	std	Y+38, r14	; 0x26
    2b98:	ff a2       	std	Y+39, r15	; 0x27
    2b9a:	08 a7       	std	Y+40, r16	; 0x28
    2b9c:	19 a7       	std	Y+41, r17	; 0x29
    2b9e:	04 2f       	mov	r16, r20
    2ba0:	10 e0       	ldi	r17, 0x00	; 0
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	0a a7       	std	Y+42, r16	; 0x2a
    2ba8:	1b a7       	std	Y+43, r17	; 0x2b
    2baa:	2c a7       	std	Y+44, r18	; 0x2c
    2bac:	3d a7       	std	Y+45, r19	; 0x2d
    2bae:	a9 01       	movw	r20, r18
    2bb0:	98 01       	movw	r18, r16
    2bb2:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__mulsi3>
    2bb6:	6e a7       	std	Y+46, r22	; 0x2e
    2bb8:	7f a7       	std	Y+47, r23	; 0x2f
    2bba:	88 ab       	std	Y+48, r24	; 0x30
    2bbc:	99 ab       	std	Y+49, r25	; 0x31
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
    2bbe:	84 01       	movw	r16, r8
    2bc0:	73 01       	movw	r14, r6
    2bc2:	2e a1       	ldd	r18, Y+38	; 0x26
    2bc4:	3f a1       	ldd	r19, Y+39	; 0x27
    2bc6:	48 a5       	ldd	r20, Y+40	; 0x28
    2bc8:	59 a5       	ldd	r21, Y+41	; 0x29
    2bca:	e2 1a       	sub	r14, r18
    2bcc:	f3 0a       	sbc	r15, r19
    2bce:	04 0b       	sbc	r16, r20
    2bd0:	15 0b       	sbc	r17, r21
    2bd2:	e6 1a       	sub	r14, r22
    2bd4:	f7 0a       	sbc	r15, r23
    2bd6:	08 0b       	sbc	r16, r24
    2bd8:	19 0b       	sbc	r17, r25
    2bda:	8a a9       	ldd	r24, Y+50	; 0x32
    2bdc:	9b a9       	ldd	r25, Y+51	; 0x33
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	2d a9       	ldd	r18, Y+53	; 0x35
    2be2:	3e a9       	ldd	r19, Y+54	; 0x36
    2be4:	45 e0       	ldi	r20, 0x05	; 5
    2be6:	22 0f       	add	r18, r18
    2be8:	33 1f       	adc	r19, r19
    2bea:	4a 95       	dec	r20
    2bec:	e1 f7       	brne	.-8      	; 0x2be6 <fat_open+0x12e>
    2bee:	82 0f       	add	r24, r18
    2bf0:	93 1f       	adc	r25, r19
    2bf2:	6a a9       	ldd	r22, Y+50	; 0x32
    2bf4:	7b a9       	ldd	r23, Y+51	; 0x33
    2bf6:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <__udivmodhi4>
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	e6 1a       	sub	r14, r22
    2c00:	f7 0a       	sbc	r15, r23
    2c02:	08 0b       	sbc	r16, r24
    2c04:	19 0b       	sbc	r17, r25
    2c06:	8c a9       	ldd	r24, Y+52	; 0x34
    2c08:	28 2f       	mov	r18, r24
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	40 e0       	ldi	r20, 0x00	; 0
    2c0e:	50 e0       	ldi	r21, 0x00	; 0
    2c10:	c8 01       	movw	r24, r16
    2c12:	b7 01       	movw	r22, r14
    2c14:	0e 94 76 25 	call	0x4aec	; 0x4aec <__udivmodsi4>
    2c18:	79 01       	movw	r14, r18
    2c1a:	8a 01       	movw	r16, r20
    if(data_cluster_count < 4085)
    2c1c:	95 ef       	ldi	r25, 0xF5	; 245
    2c1e:	e9 16       	cp	r14, r25
    2c20:	9f e0       	ldi	r25, 0x0F	; 15
    2c22:	f9 06       	cpc	r15, r25
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	09 07       	cpc	r16, r25
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	19 07       	cpc	r17, r25
    2c2c:	08 f4       	brcc	.+2      	; 0x2c30 <fat_open+0x178>
    2c2e:	e8 c0       	rjmp	.+464    	; 0x2e00 <fat_open+0x348>
        /* this is a FAT12, not supported */
        return 0;
    else if(data_cluster_count < 65525)
    2c30:	a5 ef       	ldi	r26, 0xF5	; 245
    2c32:	ea 16       	cp	r14, r26
    2c34:	af ef       	ldi	r26, 0xFF	; 255
    2c36:	fa 06       	cpc	r15, r26
    2c38:	a0 e0       	ldi	r26, 0x00	; 0
    2c3a:	0a 07       	cpc	r16, r26
    2c3c:	a0 e0       	ldi	r26, 0x00	; 0
    2c3e:	1a 07       	cpc	r17, r26
    2c40:	28 f4       	brcc	.+10     	; 0x2c4c <fat_open+0x194>
        /* this is a FAT16 */
        partition->type = PARTITION_TYPE_FAT16;
    2c42:	86 e0       	ldi	r24, 0x06	; 6
    2c44:	ed ad       	ldd	r30, Y+61	; 0x3d
    2c46:	fe ad       	ldd	r31, Y+62	; 0x3e
    2c48:	80 87       	std	Z+8, r24	; 0x08
    2c4a:	05 c0       	rjmp	.+10     	; 0x2c56 <fat_open+0x19e>
    else
        /* this is a FAT32 */
        partition->type = PARTITION_TYPE_FAT32;
    2c4c:	8b e0       	ldi	r24, 0x0B	; 11
    2c4e:	ad ad       	ldd	r26, Y+61	; 0x3d
    2c50:	be ad       	ldd	r27, Y+62	; 0x3e
    2c52:	18 96       	adiw	r26, 0x08	; 8
    2c54:	8c 93       	st	X, r24

    /* fill header information */
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
    2c56:	8c e1       	ldi	r24, 0x1C	; 28
    2c58:	ea e4       	ldi	r30, 0x4A	; 74
    2c5a:	f1 e0       	ldi	r31, 0x01	; 1
    2c5c:	df 01       	movw	r26, r30
    2c5e:	1d 92       	st	X+, r1
    2c60:	8a 95       	dec	r24
    2c62:	e9 f7       	brne	.-6      	; 0x2c5e <fat_open+0x1a6>
    
    header->size = (offset_t) sector_count * bytes_per_sector;
    2c64:	ea a9       	ldd	r30, Y+50	; 0x32
    2c66:	fb a9       	ldd	r31, Y+51	; 0x33
    2c68:	5f 01       	movw	r10, r30
    2c6a:	cc 24       	eor	r12, r12
    2c6c:	dd 24       	eor	r13, r13
    2c6e:	c4 01       	movw	r24, r8
    2c70:	b3 01       	movw	r22, r6
    2c72:	a6 01       	movw	r20, r12
    2c74:	95 01       	movw	r18, r10
    2c76:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__mulsi3>
    2c7a:	60 93 4a 01 	sts	0x014A, r22
    2c7e:	70 93 4b 01 	sts	0x014B, r23
    2c82:	80 93 4c 01 	sts	0x014C, r24
    2c86:	90 93 4d 01 	sts	0x014D, r25

    header->fat_offset = /* jump to partition */
    2c8a:	c6 01       	movw	r24, r12
    2c8c:	b5 01       	movw	r22, r10
    2c8e:	2e a1       	ldd	r18, Y+38	; 0x26
    2c90:	3f a1       	ldd	r19, Y+39	; 0x27
    2c92:	48 a5       	ldd	r20, Y+40	; 0x28
    2c94:	59 a5       	ldd	r21, Y+41	; 0x29
    2c96:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__mulsi3>
    2c9a:	26 0e       	add	r2, r22
    2c9c:	37 1e       	adc	r3, r23
    2c9e:	48 1e       	adc	r4, r24
    2ca0:	59 1e       	adc	r5, r25
    2ca2:	20 92 4e 01 	sts	0x014E, r2
    2ca6:	30 92 4f 01 	sts	0x014F, r3
    2caa:	40 92 50 01 	sts	0x0150, r4
    2cae:	50 92 51 01 	sts	0x0151, r5
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);
    2cb2:	ad ad       	ldd	r26, Y+61	; 0x3d
    2cb4:	be ad       	ldd	r27, Y+62	; 0x3e
    2cb6:	18 96       	adiw	r26, 0x08	; 8
    2cb8:	8c 91       	ld	r24, X
    2cba:	86 30       	cpi	r24, 0x06	; 6
    2cbc:	29 f0       	breq	.+10     	; 0x2cc8 <fat_open+0x210>
    2cbe:	64 e0       	ldi	r22, 0x04	; 4
    2cc0:	70 e0       	ldi	r23, 0x00	; 0
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	04 c0       	rjmp	.+8      	; 0x2cd0 <fat_open+0x218>
    2cc8:	62 e0       	ldi	r22, 0x02	; 2
    2cca:	70 e0       	ldi	r23, 0x00	; 0
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	22 e0       	ldi	r18, 0x02	; 2
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e0       	ldi	r20, 0x00	; 0
    2cd6:	50 e0       	ldi	r21, 0x00	; 0
    2cd8:	e2 0e       	add	r14, r18
    2cda:	f3 1e       	adc	r15, r19
    2cdc:	04 1f       	adc	r16, r20
    2cde:	15 1f       	adc	r17, r21
    2ce0:	a8 01       	movw	r20, r16
    2ce2:	97 01       	movw	r18, r14
    2ce4:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__mulsi3>
    2ce8:	60 93 52 01 	sts	0x0152, r22
    2cec:	70 93 53 01 	sts	0x0153, r23
    2cf0:	80 93 54 01 	sts	0x0154, r24
    2cf4:	90 93 55 01 	sts	0x0155, r25

    header->sector_size = bytes_per_sector;
    2cf8:	4a a9       	ldd	r20, Y+50	; 0x32
    2cfa:	5b a9       	ldd	r21, Y+51	; 0x33
    2cfc:	50 93 57 01 	sts	0x0157, r21
    2d00:	40 93 56 01 	sts	0x0156, r20
    header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
    2d04:	5c a9       	ldd	r21, Y+52	; 0x34
    2d06:	85 2f       	mov	r24, r21
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	ea a9       	ldd	r30, Y+50	; 0x32
    2d0e:	fb a9       	ldd	r31, Y+51	; 0x33
    2d10:	ae 9f       	mul	r26, r30
    2d12:	c0 01       	movw	r24, r0
    2d14:	af 9f       	mul	r26, r31
    2d16:	90 0d       	add	r25, r0
    2d18:	be 9f       	mul	r27, r30
    2d1a:	90 0d       	add	r25, r0
    2d1c:	11 24       	eor	r1, r1
    2d1e:	90 93 59 01 	sts	0x0159, r25
    2d22:	80 93 58 01 	sts	0x0158, r24

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
    2d26:	ad ad       	ldd	r26, Y+61	; 0x3d
    2d28:	be ad       	ldd	r27, Y+62	; 0x3e
    2d2a:	18 96       	adiw	r26, 0x08	; 8
    2d2c:	8c 91       	ld	r24, X
    2d2e:	86 30       	cpi	r24, 0x06	; 6
    2d30:	e1 f5       	brne	.+120    	; 0x2daa <fat_open+0x2f2>
#endif
    {
        header->root_dir_offset = /* jump to fats */
    2d32:	ef a9       	ldd	r30, Y+55	; 0x37
    2d34:	f8 ad       	ldd	r31, Y+56	; 0x38
    2d36:	9f 01       	movw	r18, r30
    2d38:	40 e0       	ldi	r20, 0x00	; 0
    2d3a:	50 e0       	ldi	r21, 0x00	; 0
    2d3c:	c6 01       	movw	r24, r12
    2d3e:	b5 01       	movw	r22, r10
    2d40:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__mulsi3>
    2d44:	2a a5       	ldd	r18, Y+42	; 0x2a
    2d46:	3b a5       	ldd	r19, Y+43	; 0x2b
    2d48:	4c a5       	ldd	r20, Y+44	; 0x2c
    2d4a:	5d a5       	ldd	r21, Y+45	; 0x2d
    2d4c:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__mulsi3>
    2d50:	20 91 4e 01 	lds	r18, 0x014E
    2d54:	30 91 4f 01 	lds	r19, 0x014F
    2d58:	40 91 50 01 	lds	r20, 0x0150
    2d5c:	50 91 51 01 	lds	r21, 0x0151
    2d60:	62 0f       	add	r22, r18
    2d62:	73 1f       	adc	r23, r19
    2d64:	84 1f       	adc	r24, r20
    2d66:	95 1f       	adc	r25, r21
    2d68:	60 93 5e 01 	sts	0x015E, r22
    2d6c:	70 93 5f 01 	sts	0x015F, r23
    2d70:	80 93 60 01 	sts	0x0160, r24
    2d74:	90 93 61 01 	sts	0x0161, r25
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
    2d78:	ed a8       	ldd	r14, Y+53	; 0x35
    2d7a:	fe a8       	ldd	r15, Y+54	; 0x36
    2d7c:	97 01       	movw	r18, r14
    2d7e:	40 e0       	ldi	r20, 0x00	; 0
    2d80:	50 e0       	ldi	r21, 0x00	; 0
    2d82:	15 e0       	ldi	r17, 0x05	; 5
    2d84:	22 0f       	add	r18, r18
    2d86:	33 1f       	adc	r19, r19
    2d88:	44 1f       	adc	r20, r20
    2d8a:	55 1f       	adc	r21, r21
    2d8c:	1a 95       	dec	r17
    2d8e:	d1 f7       	brne	.-12     	; 0x2d84 <fat_open+0x2cc>
    2d90:	62 0f       	add	r22, r18
    2d92:	73 1f       	adc	r23, r19
    2d94:	84 1f       	adc	r24, r20
    2d96:	95 1f       	adc	r25, r21
    2d98:	60 93 5a 01 	sts	0x015A, r22
    2d9c:	70 93 5b 01 	sts	0x015B, r23
    2da0:	80 93 5c 01 	sts	0x015C, r24
    2da4:	90 93 5d 01 	sts	0x015D, r25
    2da8:	28 c0       	rjmp	.+80     	; 0x2dfa <fat_open+0x342>
                                      (offset_t) max_root_entries * 32;
    }
#if FAT_FAT32_SUPPORT
    else
    {
        header->cluster_zero_offset = /* jump to fats */
    2daa:	6e a5       	ldd	r22, Y+46	; 0x2e
    2dac:	7f a5       	ldd	r23, Y+47	; 0x2f
    2dae:	88 a9       	ldd	r24, Y+48	; 0x30
    2db0:	99 a9       	ldd	r25, Y+49	; 0x31
    2db2:	a6 01       	movw	r20, r12
    2db4:	95 01       	movw	r18, r10
    2db6:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__mulsi3>
    2dba:	20 91 4e 01 	lds	r18, 0x014E
    2dbe:	30 91 4f 01 	lds	r19, 0x014F
    2dc2:	40 91 50 01 	lds	r20, 0x0150
    2dc6:	50 91 51 01 	lds	r21, 0x0151
    2dca:	26 0f       	add	r18, r22
    2dcc:	37 1f       	adc	r19, r23
    2dce:	48 1f       	adc	r20, r24
    2dd0:	59 1f       	adc	r21, r25
    2dd2:	20 93 5a 01 	sts	0x015A, r18
    2dd6:	30 93 5b 01 	sts	0x015B, r19
    2dda:	40 93 5c 01 	sts	0x015C, r20
    2dde:	50 93 5d 01 	sts	0x015D, r21
                                      header->fat_offset +
                                      /* skip fats */
                                      (offset_t) fat_copies * sectors_per_fat32 * bytes_per_sector;

        header->root_dir_cluster = cluster_root_dir;
    2de2:	09 ad       	ldd	r16, Y+57	; 0x39
    2de4:	1a ad       	ldd	r17, Y+58	; 0x3a
    2de6:	2b ad       	ldd	r18, Y+59	; 0x3b
    2de8:	3c ad       	ldd	r19, Y+60	; 0x3c
    2dea:	00 93 62 01 	sts	0x0162, r16
    2dee:	10 93 63 01 	sts	0x0163, r17
    2df2:	20 93 64 01 	sts	0x0164, r18
    2df6:	30 93 65 01 	sts	0x0165, r19
    2dfa:	28 e4       	ldi	r18, 0x48	; 72
    2dfc:	31 e0       	ldi	r19, 0x01	; 1
    2dfe:	06 c0       	rjmp	.+12     	; 0x2e0c <fat_open+0x354>
    if(!fat_read_header(fs))
    {
#if USE_DYNAMIC_MEMORY
        free(fs);
#else
        fs->partition = 0;
    2e00:	10 92 49 01 	sts	0x0149, r1
    2e04:	10 92 48 01 	sts	0x0148, r1
#endif
        return 0;
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    }
    
    return fs;
}
    2e0c:	c9 01       	movw	r24, r18
    2e0e:	ee 96       	adiw	r28, 0x3e	; 62
    2e10:	0f b6       	in	r0, 0x3f	; 63
    2e12:	f8 94       	cli
    2e14:	de bf       	out	0x3e, r29	; 62
    2e16:	0f be       	out	0x3f, r0	; 63
    2e18:	cd bf       	out	0x3d, r28	; 61
    2e1a:	cf 91       	pop	r28
    2e1c:	df 91       	pop	r29
    2e1e:	1f 91       	pop	r17
    2e20:	0f 91       	pop	r16
    2e22:	ff 90       	pop	r15
    2e24:	ef 90       	pop	r14
    2e26:	df 90       	pop	r13
    2e28:	cf 90       	pop	r12
    2e2a:	bf 90       	pop	r11
    2e2c:	af 90       	pop	r10
    2e2e:	9f 90       	pop	r9
    2e30:	8f 90       	pop	r8
    2e32:	7f 90       	pop	r7
    2e34:	6f 90       	pop	r6
    2e36:	5f 90       	pop	r5
    2e38:	4f 90       	pop	r4
    2e3a:	3f 90       	pop	r3
    2e3c:	2f 90       	pop	r2
    2e3e:	08 95       	ret
    }
    if(i >= FAT_FS_COUNT)
        return 0;
#endif

    memset(fs, 0, sizeof(*fs));
    2e40:	e8 e4       	ldi	r30, 0x48	; 72
    2e42:	f1 e0       	ldi	r31, 0x01	; 1
    2e44:	8e e1       	ldi	r24, 0x1E	; 30
    2e46:	df 01       	movw	r26, r30
    2e48:	1d 92       	st	X+, r1
    2e4a:	8a 95       	dec	r24
    2e4c:	e9 f7       	brne	.-6      	; 0x2e48 <fat_open+0x390>

    fs->partition = partition;
    2e4e:	ed ad       	ldd	r30, Y+61	; 0x3d
    2e50:	fe ad       	ldd	r31, Y+62	; 0x3e
    2e52:	f0 93 49 01 	sts	0x0149, r31
    2e56:	e0 93 48 01 	sts	0x0148, r30
#if FAT_FAT32_SUPPORT
    uint8_t buffer[37];
#else
    uint8_t buffer[25];
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
    2e5a:	21 84       	ldd	r2, Z+9	; 0x09
    2e5c:	32 84       	ldd	r3, Z+10	; 0x0a
    2e5e:	43 84       	ldd	r4, Z+11	; 0x0b
    2e60:	54 84       	ldd	r5, Z+12	; 0x0c
    2e62:	b9 e0       	ldi	r27, 0x09	; 9
    2e64:	22 0c       	add	r2, r2
    2e66:	33 1c       	adc	r3, r3
    2e68:	44 1c       	adc	r4, r4
    2e6a:	55 1c       	adc	r5, r5
    2e6c:	ba 95       	dec	r27
    2e6e:	d1 f7       	brne	.-12     	; 0x2e64 <fat_open+0x3ac>
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
    2e70:	c2 01       	movw	r24, r4
    2e72:	b1 01       	movw	r22, r2
    2e74:	65 5f       	subi	r22, 0xF5	; 245
    2e76:	7f 4f       	sbci	r23, 0xFF	; 255
    2e78:	8f 4f       	sbci	r24, 0xFF	; 255
    2e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e7c:	01 90       	ld	r0, Z+
    2e7e:	f0 81       	ld	r31, Z
    2e80:	e0 2d       	mov	r30, r0
    2e82:	ae 01       	movw	r20, r28
    2e84:	4f 5f       	subi	r20, 0xFF	; 255
    2e86:	5f 4f       	sbci	r21, 0xFF	; 255
    2e88:	25 e2       	ldi	r18, 0x25	; 37
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	09 95       	icall
    2e8e:	88 23       	and	r24, r24
    2e90:	09 f4       	brne	.+2      	; 0x2e94 <fat_open+0x3dc>
    2e92:	b6 cf       	rjmp	.-148    	; 0x2e00 <fat_open+0x348>
    2e94:	40 ce       	rjmp	.-896    	; 0x2b16 <fat_open+0x5e>
#else
    struct fat_fs_struct* fs = fat_fs_handles;
    uint8_t i;
    for(i = 0; i < FAT_FS_COUNT; ++i)
    {
        if(!fs->partition)
    2e96:	80 91 48 01 	lds	r24, 0x0148
    2e9a:	90 91 49 01 	lds	r25, 0x0149
    2e9e:	89 2b       	or	r24, r25
    2ea0:	09 f0       	breq	.+2      	; 0x2ea4 <fat_open+0x3ec>
    2ea2:	b2 cf       	rjmp	.-156    	; 0x2e08 <fat_open+0x350>
    2ea4:	cd cf       	rjmp	.-102    	; 0x2e40 <fat_open+0x388>

00002ea6 <fat_find_offset_for_dir_entry>:
 * \param[in] parent The directory in which to search.
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(const struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
{
    2ea6:	2f 92       	push	r2
    2ea8:	3f 92       	push	r3
    2eaa:	4f 92       	push	r4
    2eac:	5f 92       	push	r5
    2eae:	6f 92       	push	r6
    2eb0:	7f 92       	push	r7
    2eb2:	8f 92       	push	r8
    2eb4:	9f 92       	push	r9
    2eb6:	af 92       	push	r10
    2eb8:	bf 92       	push	r11
    2eba:	cf 92       	push	r12
    2ebc:	df 92       	push	r13
    2ebe:	ef 92       	push	r14
    2ec0:	ff 92       	push	r15
    2ec2:	0f 93       	push	r16
    2ec4:	1f 93       	push	r17
    2ec6:	df 93       	push	r29
    2ec8:	cf 93       	push	r28
    2eca:	00 d0       	rcall	.+0      	; 0x2ecc <fat_find_offset_for_dir_entry+0x26>
    2ecc:	00 d0       	rcall	.+0      	; 0x2ece <fat_find_offset_for_dir_entry+0x28>
    2ece:	0f 92       	push	r0
    2ed0:	cd b7       	in	r28, 0x3d	; 61
    2ed2:	de b7       	in	r29, 0x3e	; 62
    2ed4:	9d 83       	std	Y+5, r25	; 0x05
    2ed6:	8c 83       	std	Y+4, r24	; 0x04
    2ed8:	9b 01       	movw	r18, r22
    if(!fs || !dir_entry)
    2eda:	89 2b       	or	r24, r25
    2edc:	09 f4       	brne	.+2      	; 0x2ee0 <fat_find_offset_for_dir_entry+0x3a>
    2ede:	f9 c0       	rjmp	.+498    	; 0x30d2 <fat_find_offset_for_dir_entry+0x22c>
    2ee0:	41 15       	cp	r20, r1
    2ee2:	51 05       	cpc	r21, r1
    2ee4:	09 f4       	brne	.+2      	; 0x2ee8 <fat_find_offset_for_dir_entry+0x42>
    2ee6:	f5 c0       	rjmp	.+490    	; 0x30d2 <fat_find_offset_for_dir_entry+0x22c>
        return 0;

    /* search for a place where to write the directory entry to disk */
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
    2ee8:	da 01       	movw	r26, r20
    2eea:	0d 90       	ld	r0, X+
    2eec:	00 20       	and	r0, r0
    2eee:	e9 f7       	brne	.-6      	; 0x2eea <fat_find_offset_for_dir_entry+0x44>
    2ef0:	a4 1b       	sub	r26, r20
    2ef2:	b5 0b       	sbc	r27, r21
    2ef4:	cd 01       	movw	r24, r26
    2ef6:	0b 96       	adiw	r24, 0x0b	; 11
    2ef8:	6d e0       	ldi	r22, 0x0D	; 13
    2efa:	70 e0       	ldi	r23, 0x00	; 0
    2efc:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <__udivmodhi4>
    2f00:	86 2f       	mov	r24, r22
    2f02:	8f 5f       	subi	r24, 0xFF	; 255
    2f04:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t free_dir_entries_found = 0;
    cluster_t cluster_num = parent->dir_entry.cluster;
    2f06:	d9 01       	movw	r26, r18
    2f08:	93 96       	adiw	r26, 0x23	; 35
    2f0a:	2d 90       	ld	r2, X+
    2f0c:	3d 90       	ld	r3, X+
    2f0e:	4d 90       	ld	r4, X+
    2f10:	5c 90       	ld	r5, X
    2f12:	96 97       	sbiw	r26, 0x26	; 38
    offset_t dir_entry_offset = 0;
    offset_t offset = 0;
    offset_t offset_to = 0;
#if FAT_FAT32_SUPPORT
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
    2f14:	ac 81       	ldd	r26, Y+4	; 0x04
    2f16:	bd 81       	ldd	r27, Y+5	; 0x05
    2f18:	ed 91       	ld	r30, X+
    2f1a:	fc 91       	ld	r31, X
    2f1c:	80 85       	ldd	r24, Z+8	; 0x08
#endif

    if(cluster_num == 0)
    2f1e:	21 14       	cp	r2, r1
    2f20:	31 04       	cpc	r3, r1
    2f22:	41 04       	cpc	r4, r1
    2f24:	51 04       	cpc	r5, r1
    2f26:	41 f4       	brne	.+16     	; 0x2f38 <fat_find_offset_for_dir_entry+0x92>
    {
#if FAT_FAT32_SUPPORT
        if(is_fat32)
    2f28:	8b 30       	cpi	r24, 0x0B	; 11
    2f2a:	81 f4       	brne	.+32     	; 0x2f4c <fat_find_offset_for_dir_entry+0xa6>
        {
            cluster_num = fs->header.root_dir_cluster;
    2f2c:	ec 81       	ldd	r30, Y+4	; 0x04
    2f2e:	fd 81       	ldd	r31, Y+5	; 0x05
    2f30:	22 8c       	ldd	r2, Z+26	; 0x1a
    2f32:	33 8c       	ldd	r3, Z+27	; 0x1b
    2f34:	44 8c       	ldd	r4, Z+28	; 0x1c
    2f36:	55 8c       	ldd	r5, Z+29	; 0x1d
    2f38:	aa 24       	eor	r10, r10
    2f3a:	bb 24       	eor	r11, r11
    2f3c:	65 01       	movw	r12, r10
    2f3e:	ee 24       	eor	r14, r14
    2f40:	ff 24       	eor	r15, r15
    2f42:	87 01       	movw	r16, r14
    2f44:	66 24       	eor	r6, r6
    2f46:	77 24       	eor	r7, r7
    2f48:	43 01       	movw	r8, r6
    2f4a:	10 c0       	rjmp	.+32     	; 0x2f6c <fat_find_offset_for_dir_entry+0xc6>
        }
        else
#endif
        {
            /* we read/write from the root directory entry */
            offset = fs->header.root_dir_offset;
    2f4c:	ac 81       	ldd	r26, Y+4	; 0x04
    2f4e:	bd 81       	ldd	r27, Y+5	; 0x05
    2f50:	56 96       	adiw	r26, 0x16	; 22
    2f52:	ed 90       	ld	r14, X+
    2f54:	fd 90       	ld	r15, X+
    2f56:	0d 91       	ld	r16, X+
    2f58:	1c 91       	ld	r17, X
    2f5a:	59 97       	sbiw	r26, 0x19	; 25
            offset_to = fs->header.cluster_zero_offset;
    2f5c:	52 96       	adiw	r26, 0x12	; 18
    2f5e:	6d 90       	ld	r6, X+
    2f60:	7d 90       	ld	r7, X+
    2f62:	8d 90       	ld	r8, X+
    2f64:	9c 90       	ld	r9, X
    2f66:	55 97       	sbiw	r26, 0x15	; 21
    2f68:	57 01       	movw	r10, r14
    2f6a:	68 01       	movw	r12, r16
    2f6c:	1a 82       	std	Y+2, r1	; 0x02
        }
    }
    
    while(1)
    {
        if(offset == offset_to)
    2f6e:	e6 14       	cp	r14, r6
    2f70:	f7 04       	cpc	r15, r7
    2f72:	08 05       	cpc	r16, r8
    2f74:	19 05       	cpc	r17, r9
    2f76:	09 f0       	breq	.+2      	; 0x2f7a <fat_find_offset_for_dir_entry+0xd4>
    2f78:	7e c0       	rjmp	.+252    	; 0x3076 <fat_find_offset_for_dir_entry+0x1d0>
        {
            if(cluster_num == 0)
    2f7a:	21 14       	cp	r2, r1
    2f7c:	31 04       	cpc	r3, r1
    2f7e:	41 04       	cpc	r4, r1
    2f80:	51 04       	cpc	r5, r1
    2f82:	09 f4       	brne	.+2      	; 0x2f86 <fat_find_offset_for_dir_entry+0xe0>
    2f84:	a6 c0       	rjmp	.+332    	; 0x30d2 <fat_find_offset_for_dir_entry+0x22c>
                /* We iterated through the whole root directory and
                 * could not find enough space for the directory entry.
                 */
                return 0;

            if(offset)
    2f86:	e1 14       	cp	r14, r1
    2f88:	f1 04       	cpc	r15, r1
    2f8a:	01 05       	cpc	r16, r1
    2f8c:	11 05       	cpc	r17, r1
    2f8e:	e9 f1       	breq	.+122    	; 0x300a <fat_find_offset_for_dir_entry+0x164>
            {
                /* We reached a cluster boundary and have to
                 * switch to the next cluster.
                 */

                cluster_t cluster_next = fat_get_next_cluster(fs, cluster_num);
    2f90:	8c 81       	ldd	r24, Y+4	; 0x04
    2f92:	9d 81       	ldd	r25, Y+5	; 0x05
    2f94:	b2 01       	movw	r22, r4
    2f96:	a1 01       	movw	r20, r2
    2f98:	0e 94 b2 0c 	call	0x1964	; 0x1964 <fat_get_next_cluster>
                if(!cluster_next)
    2f9c:	61 15       	cp	r22, r1
    2f9e:	71 05       	cpc	r23, r1
    2fa0:	81 05       	cpc	r24, r1
    2fa2:	91 05       	cpc	r25, r1
    2fa4:	81 f5       	brne	.+96     	; 0x3006 <fat_find_offset_for_dir_entry+0x160>
                {
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
    2fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    2fa8:	9d 81       	ldd	r25, Y+5	; 0x05
    2faa:	b2 01       	movw	r22, r4
    2fac:	a1 01       	movw	r20, r2
    2fae:	01 e0       	ldi	r16, 0x01	; 1
    2fb0:	10 e0       	ldi	r17, 0x00	; 0
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <fat_append_clusters>
    2fba:	7b 01       	movw	r14, r22
    2fbc:	8c 01       	movw	r16, r24
                    if(!cluster_next)
    2fbe:	61 15       	cp	r22, r1
    2fc0:	71 05       	cpc	r23, r1
    2fc2:	81 05       	cpc	r24, r1
    2fc4:	91 05       	cpc	r25, r1
    2fc6:	09 f4       	brne	.+2      	; 0x2fca <fat_find_offset_for_dir_entry+0x124>
    2fc8:	84 c0       	rjmp	.+264    	; 0x30d2 <fat_find_offset_for_dir_entry+0x22c>
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
    2fca:	62 50       	subi	r22, 0x02	; 2
    2fcc:	70 40       	sbci	r23, 0x00	; 0
    2fce:	80 40       	sbci	r24, 0x00	; 0
    2fd0:	90 40       	sbci	r25, 0x00	; 0
    2fd2:	ec 81       	ldd	r30, Y+4	; 0x04
    2fd4:	fd 81       	ldd	r31, Y+5	; 0x05
    2fd6:	20 89       	ldd	r18, Z+16	; 0x10
    2fd8:	31 89       	ldd	r19, Z+17	; 0x11
    2fda:	40 e0       	ldi	r20, 0x00	; 0
    2fdc:	50 e0       	ldi	r21, 0x00	; 0
    2fde:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__mulsi3>
    2fe2:	5b 01       	movw	r10, r22
    2fe4:	6c 01       	movw	r12, r24
    2fe6:	ec 81       	ldd	r30, Y+4	; 0x04
    2fe8:	fd 81       	ldd	r31, Y+5	; 0x05
    2fea:	82 89       	ldd	r24, Z+18	; 0x12
    2fec:	93 89       	ldd	r25, Z+19	; 0x13
    2fee:	a4 89       	ldd	r26, Z+20	; 0x14
    2ff0:	b5 89       	ldd	r27, Z+21	; 0x15
    2ff2:	a8 0e       	add	r10, r24
    2ff4:	b9 1e       	adc	r11, r25
    2ff6:	ca 1e       	adc	r12, r26
    2ff8:	db 1e       	adc	r13, r27
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;

                    /* clear cluster to avoid garbage directory entries */
                    fat_clear_cluster(fs, cluster_next);
    2ffa:	cf 01       	movw	r24, r30
    2ffc:	b8 01       	movw	r22, r16
    2ffe:	a7 01       	movw	r20, r14
    3000:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <fat_clear_cluster>
    3004:	69 c0       	rjmp	.+210    	; 0x30d8 <fat_find_offset_for_dir_entry+0x232>

                    break;
    3006:	1b 01       	movw	r2, r22
    3008:	2c 01       	movw	r4, r24
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    300a:	f2 e0       	ldi	r31, 0x02	; 2
    300c:	2f 16       	cp	r2, r31
    300e:	31 04       	cpc	r3, r1
    3010:	41 04       	cpc	r4, r1
    3012:	51 04       	cpc	r5, r1
    3014:	20 f4       	brcc	.+8      	; 0x301e <fat_find_offset_for_dir_entry+0x178>
    3016:	ee 24       	eor	r14, r14
    3018:	ff 24       	eor	r15, r15
    301a:	87 01       	movw	r16, r14
    301c:	1c c0       	rjmp	.+56     	; 0x3056 <fat_find_offset_for_dir_entry+0x1b0>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    301e:	c2 01       	movw	r24, r4
    3020:	b1 01       	movw	r22, r2
    3022:	62 50       	subi	r22, 0x02	; 2
    3024:	70 40       	sbci	r23, 0x00	; 0
    3026:	80 40       	sbci	r24, 0x00	; 0
    3028:	90 40       	sbci	r25, 0x00	; 0
    302a:	ac 81       	ldd	r26, Y+4	; 0x04
    302c:	bd 81       	ldd	r27, Y+5	; 0x05
    302e:	50 96       	adiw	r26, 0x10	; 16
    3030:	2d 91       	ld	r18, X+
    3032:	3c 91       	ld	r19, X
    3034:	51 97       	sbiw	r26, 0x11	; 17
    3036:	40 e0       	ldi	r20, 0x00	; 0
    3038:	50 e0       	ldi	r21, 0x00	; 0
    303a:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__mulsi3>
    303e:	7b 01       	movw	r14, r22
    3040:	8c 01       	movw	r16, r24
    3042:	ec 81       	ldd	r30, Y+4	; 0x04
    3044:	fd 81       	ldd	r31, Y+5	; 0x05
    3046:	82 89       	ldd	r24, Z+18	; 0x12
    3048:	93 89       	ldd	r25, Z+19	; 0x13
    304a:	a4 89       	ldd	r26, Z+20	; 0x14
    304c:	b5 89       	ldd	r27, Z+21	; 0x15
    304e:	e8 0e       	add	r14, r24
    3050:	f9 1e       	adc	r15, r25
    3052:	0a 1f       	adc	r16, r26
    3054:	1b 1f       	adc	r17, r27
                }
                cluster_num = cluster_next;
            }

            offset = fat_cluster_offset(fs, cluster_num);
            offset_to = offset + fs->header.cluster_size;
    3056:	ac 81       	ldd	r26, Y+4	; 0x04
    3058:	bd 81       	ldd	r27, Y+5	; 0x05
    305a:	50 96       	adiw	r26, 0x10	; 16
    305c:	8d 91       	ld	r24, X+
    305e:	9c 91       	ld	r25, X
    3060:	51 97       	sbiw	r26, 0x11	; 17
    3062:	3c 01       	movw	r6, r24
    3064:	88 24       	eor	r8, r8
    3066:	99 24       	eor	r9, r9
    3068:	6e 0c       	add	r6, r14
    306a:	7f 1c       	adc	r7, r15
    306c:	80 1e       	adc	r8, r16
    306e:	91 1e       	adc	r9, r17
    3070:	57 01       	movw	r10, r14
    3072:	68 01       	movw	r12, r16
    3074:	1a 82       	std	Y+2, r1	; 0x02
            free_dir_entries_found = 0;
        }
        
        /* read next lfn or 8.3 entry */
        uint8_t first_char;
        if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
    3076:	ac 81       	ldd	r26, Y+4	; 0x04
    3078:	bd 81       	ldd	r27, Y+5	; 0x05
    307a:	ed 91       	ld	r30, X+
    307c:	fc 91       	ld	r31, X
    307e:	01 90       	ld	r0, Z+
    3080:	f0 81       	ld	r31, Z
    3082:	e0 2d       	mov	r30, r0
    3084:	c8 01       	movw	r24, r16
    3086:	b7 01       	movw	r22, r14
    3088:	ae 01       	movw	r20, r28
    308a:	4f 5f       	subi	r20, 0xFF	; 255
    308c:	5f 4f       	sbci	r21, 0xFF	; 255
    308e:	21 e0       	ldi	r18, 0x01	; 1
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	09 95       	icall
    3094:	88 23       	and	r24, r24
    3096:	e9 f0       	breq	.+58     	; 0x30d2 <fat_find_offset_for_dir_entry+0x22c>
            return 0;

        /* check if we found a free directory entry */
        if(first_char == FAT_DIRENTRY_DELETED || !first_char)
    3098:	89 81       	ldd	r24, Y+1	; 0x01
    309a:	85 3e       	cpi	r24, 0xE5	; 229
    309c:	11 f0       	breq	.+4      	; 0x30a2 <fat_find_offset_for_dir_entry+0x1fc>
    309e:	88 23       	and	r24, r24
    30a0:	79 f4       	brne	.+30     	; 0x30c0 <fat_find_offset_for_dir_entry+0x21a>
        {
            /* check if we have the needed number of available entries */
            ++free_dir_entries_found;
    30a2:	ba 81       	ldd	r27, Y+2	; 0x02
    30a4:	bf 5f       	subi	r27, 0xFF	; 255
    30a6:	ba 83       	std	Y+2, r27	; 0x02
            if(free_dir_entries_found >= free_dir_entries_needed)
    30a8:	eb 81       	ldd	r30, Y+3	; 0x03
    30aa:	be 17       	cp	r27, r30
    30ac:	a8 f4       	brcc	.+42     	; 0x30d8 <fat_find_offset_for_dir_entry+0x232>
                break;

            offset += 32;
    30ae:	80 e2       	ldi	r24, 0x20	; 32
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	a0 e0       	ldi	r26, 0x00	; 0
    30b4:	b0 e0       	ldi	r27, 0x00	; 0
    30b6:	e8 0e       	add	r14, r24
    30b8:	f9 1e       	adc	r15, r25
    30ba:	0a 1f       	adc	r16, r26
    30bc:	1b 1f       	adc	r17, r27
    30be:	57 cf       	rjmp	.-338    	; 0x2f6e <fat_find_offset_for_dir_entry+0xc8>
        }
        else
        {
            offset += 32;
    30c0:	80 e2       	ldi	r24, 0x20	; 32
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	a0 e0       	ldi	r26, 0x00	; 0
    30c6:	b0 e0       	ldi	r27, 0x00	; 0
    30c8:	e8 0e       	add	r14, r24
    30ca:	f9 1e       	adc	r15, r25
    30cc:	0a 1f       	adc	r16, r26
    30ce:	1b 1f       	adc	r17, r27
    30d0:	4b cf       	rjmp	.-362    	; 0x2f68 <fat_find_offset_for_dir_entry+0xc2>
    30d2:	aa 24       	eor	r10, r10
    30d4:	bb 24       	eor	r11, r11
    30d6:	65 01       	movw	r12, r10
            free_dir_entries_found = 0;
        }
    }

    return dir_entry_offset;
}
    30d8:	b5 01       	movw	r22, r10
    30da:	c6 01       	movw	r24, r12
    30dc:	0f 90       	pop	r0
    30de:	0f 90       	pop	r0
    30e0:	0f 90       	pop	r0
    30e2:	0f 90       	pop	r0
    30e4:	0f 90       	pop	r0
    30e6:	cf 91       	pop	r28
    30e8:	df 91       	pop	r29
    30ea:	1f 91       	pop	r17
    30ec:	0f 91       	pop	r16
    30ee:	ff 90       	pop	r15
    30f0:	ef 90       	pop	r14
    30f2:	df 90       	pop	r13
    30f4:	cf 90       	pop	r12
    30f6:	bf 90       	pop	r11
    30f8:	af 90       	pop	r10
    30fa:	9f 90       	pop	r9
    30fc:	8f 90       	pop	r8
    30fe:	7f 90       	pop	r7
    3100:	6f 90       	pop	r6
    3102:	5f 90       	pop	r5
    3104:	4f 90       	pop	r4
    3106:	3f 90       	pop	r3
    3108:	2f 90       	pop	r2
    310a:	08 95       	ret

0000310c <fat_write_dir_entry>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    310c:	3f 92       	push	r3
    310e:	4f 92       	push	r4
    3110:	5f 92       	push	r5
    3112:	6f 92       	push	r6
    3114:	7f 92       	push	r7
    3116:	8f 92       	push	r8
    3118:	9f 92       	push	r9
    311a:	af 92       	push	r10
    311c:	bf 92       	push	r11
    311e:	cf 92       	push	r12
    3120:	df 92       	push	r13
    3122:	ef 92       	push	r14
    3124:	ff 92       	push	r15
    3126:	0f 93       	push	r16
    3128:	1f 93       	push	r17
    312a:	df 93       	push	r29
    312c:	cf 93       	push	r28
    312e:	cd b7       	in	r28, 0x3d	; 61
    3130:	de b7       	in	r29, 0x3e	; 62
    3132:	a0 97       	sbiw	r28, 0x20	; 32
    3134:	0f b6       	in	r0, 0x3f	; 63
    3136:	f8 94       	cli
    3138:	de bf       	out	0x3e, r29	; 62
    313a:	0f be       	out	0x3f, r0	; 63
    313c:	cd bf       	out	0x3d, r28	; 61
    313e:	fc 01       	movw	r30, r24
    3140:	8b 01       	movw	r16, r22
    if(!fs || !dir_entry)
    3142:	00 97       	sbiw	r24, 0x00	; 0
    3144:	09 f4       	brne	.+2      	; 0x3148 <fat_write_dir_entry+0x3c>
    3146:	25 c1       	rjmp	.+586    	; 0x3392 <fat_write_dir_entry+0x286>
    3148:	61 15       	cp	r22, r1
    314a:	71 05       	cpc	r23, r1
    314c:	09 f4       	brne	.+2      	; 0x3150 <fat_write_dir_entry+0x44>
    314e:	21 c1       	rjmp	.+578    	; 0x3392 <fat_write_dir_entry+0x286>
        fat_set_file_modification_date(dir_entry, year, month, day);
        fat_set_file_modification_time(dir_entry, hour, min, sec);
    }
#endif

    device_write_t device_write = fs->partition->device_write;
    3150:	01 90       	ld	r0, Z+
    3152:	f0 81       	ld	r31, Z
    3154:	e0 2d       	mov	r30, r0
    3156:	44 80       	ldd	r4, Z+4	; 0x04
    3158:	55 80       	ldd	r5, Z+5	; 0x05
    offset_t offset = dir_entry->entry_offset;
    315a:	db 01       	movw	r26, r22
    315c:	99 96       	adiw	r26, 0x29	; 41
    315e:	ad 90       	ld	r10, X+
    3160:	bd 90       	ld	r11, X+
    3162:	cd 90       	ld	r12, X+
    3164:	dc 90       	ld	r13, X
    3166:	9c 97       	sbiw	r26, 0x2c	; 44
    const char* name = dir_entry->long_name;
    3168:	e6 2e       	mov	r14, r22
    316a:	91 2e       	mov	r9, r17
    uint8_t name_len = strlen(name);
    316c:	fb 01       	movw	r30, r22
    316e:	01 90       	ld	r0, Z+
    3170:	00 20       	and	r0, r0
    3172:	e9 f7       	brne	.-6      	; 0x316e <fat_write_dir_entry+0x62>
    3174:	31 97       	sbiw	r30, 0x01	; 1
    3176:	fe 2e       	mov	r15, r30
    3178:	f6 1a       	sub	r15, r22
    uint8_t lfn_entry_count = (name_len + 12) / 13;
    317a:	8f 2d       	mov	r24, r15
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	0c 96       	adiw	r24, 0x0c	; 12
    3180:	6d e0       	ldi	r22, 0x0D	; 13
    3182:	70 e0       	ldi	r23, 0x00	; 0
    3184:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <__divmodhi4>
    3188:	76 2e       	mov	r7, r22
    uint8_t buffer[32];

    /* write 8.3 entry */

    /* generate 8.3 file name */
    memset(&buffer[0], ' ', 11);
    318a:	ce 01       	movw	r24, r28
    318c:	01 96       	adiw	r24, 0x01	; 1
    318e:	60 e2       	ldi	r22, 0x20	; 32
    3190:	70 e0       	ldi	r23, 0x00	; 0
    3192:	4b e0       	ldi	r20, 0x0B	; 11
    3194:	50 e0       	ldi	r21, 0x00	; 0
    3196:	0e 94 b8 25 	call	0x4b70	; 0x4b70 <memset>
    char* name_ext = strrchr(name, '.');
    319a:	c8 01       	movw	r24, r16
    319c:	6e e2       	ldi	r22, 0x2E	; 46
    319e:	70 e0       	ldi	r23, 0x00	; 0
    31a0:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <strrchr>
    31a4:	fc 01       	movw	r30, r24
    if(name_ext && *++name_ext)
    31a6:	00 97       	sbiw	r24, 0x00	; 0
    31a8:	e1 f0       	breq	.+56     	; 0x31e2 <fat_write_dir_entry+0xd6>
    31aa:	9c 01       	movw	r18, r24
    31ac:	2f 5f       	subi	r18, 0xFF	; 255
    31ae:	3f 4f       	sbci	r19, 0xFF	; 255
    31b0:	81 81       	ldd	r24, Z+1	; 0x01
    31b2:	88 23       	and	r24, r24
    31b4:	b1 f0       	breq	.+44     	; 0x31e2 <fat_write_dir_entry+0xd6>
    {
        uint8_t name_ext_len = strlen(name_ext);
    31b6:	d9 01       	movw	r26, r18
    31b8:	0d 90       	ld	r0, X+
    31ba:	00 20       	and	r0, r0
    31bc:	e9 f7       	brne	.-6      	; 0x31b8 <fat_write_dir_entry+0xac>
    31be:	11 97       	sbiw	r26, 0x01	; 1
    31c0:	a2 1b       	sub	r26, r18
    31c2:	b3 0b       	sbc	r27, r19
        name_len -= name_ext_len + 1;
    31c4:	8a 2f       	mov	r24, r26
    31c6:	80 95       	com	r24
    31c8:	f8 0e       	add	r15, r24

        if(name_ext_len > 3)
            name_ext_len = 3;
        
        memcpy(&buffer[8], name_ext, name_ext_len);
    31ca:	be 01       	movw	r22, r28
    31cc:	67 5f       	subi	r22, 0xF7	; 247
    31ce:	7f 4f       	sbci	r23, 0xFF	; 255
    31d0:	4a 2f       	mov	r20, r26
    31d2:	a4 30       	cpi	r26, 0x04	; 4
    31d4:	08 f0       	brcs	.+2      	; 0x31d8 <fat_write_dir_entry+0xcc>
    31d6:	43 e0       	ldi	r20, 0x03	; 3
    31d8:	cb 01       	movw	r24, r22
    31da:	b9 01       	movw	r22, r18
    31dc:	50 e0       	ldi	r21, 0x00	; 0
    31de:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <memcpy>
    31e2:	ce 01       	movw	r24, r28
    31e4:	01 96       	adiw	r24, 0x01	; 1
    }
    
    if(name_len <= 8)
    31e6:	b8 e0       	ldi	r27, 0x08	; 8
    31e8:	bf 15       	cp	r27, r15
    31ea:	88 f0       	brcs	.+34     	; 0x320e <fat_write_dir_entry+0x102>
    {
        memcpy(buffer, name, name_len);
    31ec:	6e 2d       	mov	r22, r14
    31ee:	79 2d       	mov	r23, r9
    31f0:	4f 2d       	mov	r20, r15
    31f2:	50 e0       	ldi	r21, 0x00	; 0
    31f4:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <memcpy>
         *
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
    31f8:	f8 01       	movw	r30, r16
    31fa:	80 81       	ld	r24, Z
    31fc:	8e 32       	cpi	r24, 0x2E	; 46
    31fe:	31 f5       	brne	.+76     	; 0x324c <fat_write_dir_entry+0x140>
    3200:	81 81       	ldd	r24, Z+1	; 0x01
    3202:	8e 32       	cpi	r24, 0x2E	; 46
    3204:	09 f4       	brne	.+2      	; 0x3208 <fat_write_dir_entry+0xfc>
    3206:	82 81       	ldd	r24, Z+2	; 0x02
    3208:	88 23       	and	r24, r24
    320a:	f9 f0       	breq	.+62     	; 0x324a <fat_write_dir_entry+0x13e>
    320c:	1f c0       	rjmp	.+62     	; 0x324c <fat_write_dir_entry+0x140>
          )
            lfn_entry_count = 0;
    }
    else
    {
        memcpy(buffer, name, 8);
    320e:	dc 01       	movw	r26, r24
    3210:	8e 2d       	mov	r24, r14
    3212:	99 2d       	mov	r25, r9
    3214:	9c 01       	movw	r18, r24
    3216:	f9 01       	movw	r30, r18
    3218:	88 e0       	ldi	r24, 0x08	; 8
    321a:	01 90       	ld	r0, Z+
    321c:	0d 92       	st	X+, r0
    321e:	81 50       	subi	r24, 0x01	; 1
    3220:	e1 f7       	brne	.-8      	; 0x321a <fat_write_dir_entry+0x10e>

        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;
    3222:	d8 01       	movw	r26, r16
    3224:	91 96       	adiw	r26, 0x21	; 33
    3226:	8c 91       	ld	r24, X
    3228:	98 2f       	mov	r25, r24
    322a:	92 95       	swap	r25
    322c:	9f 70       	andi	r25, 0x0F	; 15

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    322e:	80 3a       	cpi	r24, 0xA0	; 160
    3230:	10 f4       	brcc	.+4      	; 0x3236 <fat_write_dir_entry+0x12a>
    3232:	90 5d       	subi	r25, 0xD0	; 208
    3234:	01 c0       	rjmp	.+2      	; 0x3238 <fat_write_dir_entry+0x12c>
    3236:	9f 59       	subi	r25, 0x9F	; 159
        num &= 0x0f;
    3238:	8f 70       	andi	r24, 0x0F	; 15
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    323a:	8a 30       	cpi	r24, 0x0A	; 10
    323c:	10 f4       	brcc	.+4      	; 0x3242 <fat_write_dir_entry+0x136>
    323e:	80 5d       	subi	r24, 0xD0	; 208
    3240:	01 c0       	rjmp	.+2      	; 0x3244 <fat_write_dir_entry+0x138>
    3242:	8f 59       	subi	r24, 0x9F	; 159
        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    3244:	9f 83       	std	Y+7, r25	; 0x07
        num &= 0x0f;
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    3246:	88 87       	std	Y+8, r24	; 0x08
    3248:	01 c0       	rjmp	.+2      	; 0x324c <fat_write_dir_entry+0x140>
    324a:	77 24       	eor	r7, r7
    }
    if(buffer[0] == FAT_DIRENTRY_DELETED)
    324c:	89 81       	ldd	r24, Y+1	; 0x01
    324e:	85 3e       	cpi	r24, 0xE5	; 229
    3250:	11 f4       	brne	.+4      	; 0x3256 <fat_write_dir_entry+0x14a>
        buffer[0] = 0x05;
    3252:	85 e0       	ldi	r24, 0x05	; 5
    3254:	89 83       	std	Y+1, r24	; 0x01

    /* fill directory entry buffer */
    memset(&buffer[11], 0, sizeof(buffer) - 11);
    3256:	ac e0       	ldi	r26, 0x0C	; 12
    3258:	8a 2e       	mov	r8, r26
    325a:	91 2c       	mov	r9, r1
    325c:	8c 0e       	add	r8, r28
    325e:	9d 1e       	adc	r9, r29
    3260:	85 e1       	ldi	r24, 0x15	; 21
    3262:	f4 01       	movw	r30, r8
    3264:	11 92       	st	Z+, r1
    3266:	8a 95       	dec	r24
    3268:	e9 f7       	brne	.-6      	; 0x3264 <fat_write_dir_entry+0x158>
    buffer[0x0b] = dir_entry->attributes;
    326a:	d8 01       	movw	r26, r16
    326c:	90 96       	adiw	r26, 0x20	; 32
    326e:	8c 91       	ld	r24, X
    3270:	90 97       	sbiw	r26, 0x20	; 32
    3272:	8c 87       	std	Y+12, r24	; 0x0c
#if FAT_DATETIME_SUPPORT
    *((uint16_t*) &buffer[0x16]) = htol16(dir_entry->modification_time);
    *((uint16_t*) &buffer[0x18]) = htol16(dir_entry->modification_date);
#endif
#if FAT_FAT32_SUPPORT
    *((uint16_t*) &buffer[0x14]) = htol16((uint16_t) (dir_entry->cluster >> 16));
    3274:	91 96       	adiw	r26, 0x21	; 33
    3276:	2d 91       	ld	r18, X+
    3278:	3d 91       	ld	r19, X+
    327a:	4d 91       	ld	r20, X+
    327c:	5c 91       	ld	r21, X
    327e:	94 97       	sbiw	r26, 0x24	; 36
    3280:	ca 01       	movw	r24, r20
    3282:	aa 27       	eor	r26, r26
    3284:	bb 27       	eor	r27, r27
    3286:	9e 8b       	std	Y+22, r25	; 0x16
    3288:	8d 8b       	std	Y+21, r24	; 0x15
#endif
    *((uint16_t*) &buffer[0x1a]) = htol16(dir_entry->cluster);
    328a:	3c 8f       	std	Y+28, r19	; 0x1c
    328c:	2b 8f       	std	Y+27, r18	; 0x1b
    *((uint32_t*) &buffer[0x1c]) = htol32(dir_entry->file_size);
    328e:	f8 01       	movw	r30, r16
    3290:	85 a1       	ldd	r24, Z+37	; 0x25
    3292:	96 a1       	ldd	r25, Z+38	; 0x26
    3294:	a7 a1       	ldd	r26, Z+39	; 0x27
    3296:	b0 a5       	ldd	r27, Z+40	; 0x28
    3298:	8d 8f       	std	Y+29, r24	; 0x1d
    329a:	9e 8f       	std	Y+30, r25	; 0x1e
    329c:	af 8f       	std	Y+31, r26	; 0x1f
    329e:	b8 a3       	std	Y+32, r27	; 0x20

    /* write to disk */
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
    32a0:	67 2d       	mov	r22, r7
    32a2:	70 e0       	ldi	r23, 0x00	; 0
    32a4:	e5 e0       	ldi	r30, 0x05	; 5
    32a6:	66 0f       	add	r22, r22
    32a8:	77 1f       	adc	r23, r23
    32aa:	ea 95       	dec	r30
    32ac:	e1 f7       	brne	.-8      	; 0x32a6 <fat_write_dir_entry+0x19a>
    32ae:	80 e0       	ldi	r24, 0x00	; 0
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	6a 0d       	add	r22, r10
    32b4:	7b 1d       	adc	r23, r11
    32b6:	8c 1d       	adc	r24, r12
    32b8:	9d 1d       	adc	r25, r13
    32ba:	ae 01       	movw	r20, r28
    32bc:	4f 5f       	subi	r20, 0xFF	; 255
    32be:	5f 4f       	sbci	r21, 0xFF	; 255
    32c0:	20 e2       	ldi	r18, 0x20	; 32
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	f2 01       	movw	r30, r4
    32c6:	09 95       	icall
    32c8:	88 23       	and	r24, r24
    32ca:	09 f4       	brne	.+2      	; 0x32ce <fat_write_dir_entry+0x1c2>
    32cc:	62 c0       	rjmp	.+196    	; 0x3392 <fat_write_dir_entry+0x286>
        return 0;
    
    /* calculate checksum of 8.3 name */
    uint8_t checksum = buffer[0];
    32ce:	e9 80       	ldd	r14, Y+1	; 0x01
    32d0:	fe 01       	movw	r30, r28
    32d2:	32 96       	adiw	r30, 0x02	; 2
    for(uint8_t i = 1; i < 11; ++i)
    32d4:	94 01       	movw	r18, r8
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    32d6:	8e 2d       	mov	r24, r14
    32d8:	86 95       	lsr	r24
    32da:	e7 94       	ror	r14
    32dc:	ee 24       	eor	r14, r14
    32de:	e7 94       	ror	r14
    32e0:	e8 2a       	or	r14, r24
    32e2:	81 91       	ld	r24, Z+
    32e4:	e8 0e       	add	r14, r24
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
        return 0;
    
    /* calculate checksum of 8.3 name */
    uint8_t checksum = buffer[0];
    for(uint8_t i = 1; i < 11; ++i)
    32e6:	e2 17       	cp	r30, r18
    32e8:	f3 07       	cpc	r31, r19
    32ea:	a9 f7       	brne	.-22     	; 0x32d6 <fat_write_dir_entry+0x1ca>
    32ec:	f7 2c       	mov	r15, r7
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    {
        memset(buffer, 0xff, sizeof(buffer));
    32ee:	4e 01       	movw	r8, r28
    32f0:	08 94       	sec
    32f2:	81 1c       	adc	r8, r1
    32f4:	91 1c       	adc	r9, r1
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
    32f6:	6d e0       	ldi	r22, 0x0D	; 13
    32f8:	36 2e       	mov	r3, r22
        buffer[0x00] = lfn_entry;
        if(lfn_entry == lfn_entry_count)
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
    32fa:	5f e0       	ldi	r21, 0x0F	; 15
    32fc:	65 2e       	mov	r6, r21
    32fe:	44 c0       	rjmp	.+136    	; 0x3388 <fat_write_dir_entry+0x27c>
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    {
        memset(buffer, 0xff, sizeof(buffer));
    3300:	c4 01       	movw	r24, r8
    3302:	6f ef       	ldi	r22, 0xFF	; 255
    3304:	70 e0       	ldi	r23, 0x00	; 0
    3306:	40 e2       	ldi	r20, 0x20	; 32
    3308:	50 e0       	ldi	r21, 0x00	; 0
    330a:	0e 94 b8 25 	call	0x4b70	; 0x4b70 <memset>
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
    330e:	f3 9c       	mul	r15, r3
    3310:	d0 01       	movw	r26, r0
    3312:	11 24       	eor	r1, r1
    3314:	1d 97       	sbiw	r26, 0x0d	; 13
    3316:	a0 0f       	add	r26, r16
    3318:	b1 1f       	adc	r27, r17
    331a:	91 e0       	ldi	r25, 0x01	; 1
        uint8_t i = 1;
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
    331c:	f4 01       	movw	r30, r8
    331e:	e9 0f       	add	r30, r25
    3320:	f1 1d       	adc	r31, r1
    3322:	8c 91       	ld	r24, X
    3324:	80 83       	st	Z, r24
    3326:	89 2f       	mov	r24, r25
    3328:	8f 5f       	subi	r24, 0xFF	; 255
            buffer[i++] = 0;
    332a:	f4 01       	movw	r30, r8
    332c:	e8 0f       	add	r30, r24
    332e:	f1 1d       	adc	r31, r1
    3330:	10 82       	st	Z, r1
    3332:	9e 5f       	subi	r25, 0xFE	; 254

            switch(i)
    3334:	9b 30       	cpi	r25, 0x0B	; 11
    3336:	19 f0       	breq	.+6      	; 0x333e <fat_write_dir_entry+0x232>
    3338:	9a 31       	cpi	r25, 0x1A	; 26
    333a:	21 f4       	brne	.+8      	; 0x3344 <fat_write_dir_entry+0x238>
    333c:	02 c0       	rjmp	.+4      	; 0x3342 <fat_write_dir_entry+0x236>
    333e:	9e e0       	ldi	r25, 0x0E	; 14
    3340:	01 c0       	rjmp	.+2      	; 0x3344 <fat_write_dir_entry+0x238>
    3342:	9c e1       	ldi	r25, 0x1C	; 28
                case 0x1a:
                    i = 0x1c;
                    break;
            }

            if(!*long_name_curr++)
    3344:	8c 91       	ld	r24, X
    3346:	88 23       	and	r24, r24
    3348:	21 f0       	breq	.+8      	; 0x3352 <fat_write_dir_entry+0x246>
        memset(buffer, 0xff, sizeof(buffer));
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
    334a:	9f 31       	cpi	r25, 0x1F	; 31
    334c:	10 f4       	brcc	.+4      	; 0x3352 <fat_write_dir_entry+0x246>
                case 0x1a:
                    i = 0x1c;
                    break;
            }

            if(!*long_name_curr++)
    334e:	11 96       	adiw	r26, 0x01	; 1
    3350:	e5 cf       	rjmp	.-54     	; 0x331c <fat_write_dir_entry+0x210>
                break;
        }
        
        /* set index of lfn entry */
        buffer[0x00] = lfn_entry;
    3352:	f9 82       	std	Y+1, r15	; 0x01
        if(lfn_entry == lfn_entry_count)
    3354:	f7 14       	cp	r15, r7
    3356:	19 f4       	brne	.+6      	; 0x335e <fat_write_dir_entry+0x252>
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
    3358:	8f 2d       	mov	r24, r15
    335a:	80 64       	ori	r24, 0x40	; 64
    335c:	89 83       	std	Y+1, r24	; 0x01

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
    335e:	6c 86       	std	Y+12, r6	; 0x0c

        /* set 8.3 checksum */
        buffer[0x0d] = checksum;
    3360:	ee 86       	std	Y+14, r14	; 0x0e

        /* clear reserved bytes */
        buffer[0x0c] = 0;
    3362:	1d 86       	std	Y+13, r1	; 0x0d
        buffer[0x1a] = 0;
    3364:	1b 8e       	std	Y+27, r1	; 0x1b
        buffer[0x1b] = 0;
    3366:	1c 8e       	std	Y+28, r1	; 0x1c

        /* write entry */
        device_write(offset, buffer, sizeof(buffer));
    3368:	c6 01       	movw	r24, r12
    336a:	b5 01       	movw	r22, r10
    336c:	a4 01       	movw	r20, r8
    336e:	20 e2       	ldi	r18, 0x20	; 32
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	f2 01       	movw	r30, r4
    3374:	09 95       	icall
    
        offset += sizeof(buffer);
    3376:	80 e2       	ldi	r24, 0x20	; 32
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	a0 e0       	ldi	r26, 0x00	; 0
    337c:	b0 e0       	ldi	r27, 0x00	; 0
    337e:	a8 0e       	add	r10, r24
    3380:	b9 1e       	adc	r11, r25
    3382:	ca 1e       	adc	r12, r26
    3384:	db 1e       	adc	r13, r27
    uint8_t checksum = buffer[0];
    for(uint8_t i = 1; i < 11; ++i)
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    3386:	fa 94       	dec	r15
    3388:	ff 20       	and	r15, r15
    338a:	09 f0       	breq	.+2      	; 0x338e <fat_write_dir_entry+0x282>
    338c:	b9 cf       	rjmp	.-142    	; 0x3300 <fat_write_dir_entry+0x1f4>
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	01 c0       	rjmp	.+2      	; 0x3394 <fat_write_dir_entry+0x288>
    3392:	80 e0       	ldi	r24, 0x00	; 0
    
        offset += sizeof(buffer);
    }
    
    return 1;
}
    3394:	a0 96       	adiw	r28, 0x20	; 32
    3396:	0f b6       	in	r0, 0x3f	; 63
    3398:	f8 94       	cli
    339a:	de bf       	out	0x3e, r29	; 62
    339c:	0f be       	out	0x3f, r0	; 63
    339e:	cd bf       	out	0x3d, r28	; 61
    33a0:	cf 91       	pop	r28
    33a2:	df 91       	pop	r29
    33a4:	1f 91       	pop	r17
    33a6:	0f 91       	pop	r16
    33a8:	ff 90       	pop	r15
    33aa:	ef 90       	pop	r14
    33ac:	df 90       	pop	r13
    33ae:	cf 90       	pop	r12
    33b0:	bf 90       	pop	r11
    33b2:	af 90       	pop	r10
    33b4:	9f 90       	pop	r9
    33b6:	8f 90       	pop	r8
    33b8:	7f 90       	pop	r7
    33ba:	6f 90       	pop	r6
    33bc:	5f 90       	pop	r5
    33be:	4f 90       	pop	r4
    33c0:	3f 90       	pop	r3
    33c2:	08 95       	ret

000033c4 <fat_create_dir>:
 * \param[out] dir_entry The directory entry to fill for the new directory.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_dir
 */
uint8_t fat_create_dir(struct fat_dir_struct* parent, const char* dir, struct fat_dir_entry_struct* dir_entry)
{
    33c4:	5f 92       	push	r5
    33c6:	6f 92       	push	r6
    33c8:	7f 92       	push	r7
    33ca:	8f 92       	push	r8
    33cc:	9f 92       	push	r9
    33ce:	af 92       	push	r10
    33d0:	bf 92       	push	r11
    33d2:	cf 92       	push	r12
    33d4:	df 92       	push	r13
    33d6:	ef 92       	push	r14
    33d8:	ff 92       	push	r15
    33da:	0f 93       	push	r16
    33dc:	1f 93       	push	r17
    33de:	cf 93       	push	r28
    33e0:	df 93       	push	r29
    33e2:	5c 01       	movw	r10, r24
    33e4:	4b 01       	movw	r8, r22
    33e6:	ea 01       	movw	r28, r20
    if(!parent || !dir || !dir[0] || !dir_entry)
    33e8:	00 97       	sbiw	r24, 0x00	; 0
    33ea:	09 f4       	brne	.+2      	; 0x33ee <fat_create_dir+0x2a>
    33ec:	b2 c0       	rjmp	.+356    	; 0x3552 <fat_create_dir+0x18e>
    33ee:	61 15       	cp	r22, r1
    33f0:	71 05       	cpc	r23, r1
    33f2:	09 f4       	brne	.+2      	; 0x33f6 <fat_create_dir+0x32>
    33f4:	ae c0       	rjmp	.+348    	; 0x3552 <fat_create_dir+0x18e>
    33f6:	fb 01       	movw	r30, r22
    33f8:	80 81       	ld	r24, Z
    33fa:	88 23       	and	r24, r24
    33fc:	09 f4       	brne	.+2      	; 0x3400 <fat_create_dir+0x3c>
    33fe:	a9 c0       	rjmp	.+338    	; 0x3552 <fat_create_dir+0x18e>
    3400:	41 15       	cp	r20, r1
    3402:	51 05       	cpc	r21, r1
    3404:	a1 f4       	brne	.+40     	; 0x342e <fat_create_dir+0x6a>
    3406:	a5 c0       	rjmp	.+330    	; 0x3552 <fat_create_dir+0x18e>
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    {
        if(strcmp(dir, dir_entry->long_name) == 0)
    3408:	c4 01       	movw	r24, r8
    340a:	66 2d       	mov	r22, r6
    340c:	75 2d       	mov	r23, r5
    340e:	0e 94 ca 25 	call	0x4b94	; 0x4b94 <strcmp>
    3412:	00 97       	sbiw	r24, 0x00	; 0
    3414:	71 f4       	brne	.+28     	; 0x3432 <fat_create_dir+0x6e>
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    3416:	f5 01       	movw	r30, r10
    3418:	83 a1       	ldd	r24, Z+35	; 0x23
    341a:	94 a1       	ldd	r25, Z+36	; 0x24
    341c:	a5 a1       	ldd	r26, Z+37	; 0x25
    341e:	b6 a1       	ldd	r27, Z+38	; 0x26
    3420:	87 a7       	std	Z+47, r24	; 0x2f
    3422:	90 ab       	std	Z+48, r25	; 0x30
    3424:	a1 ab       	std	Z+49, r26	; 0x31
    3426:	b2 ab       	std	Z+50, r27	; 0x32
    dd->entry_offset = 0;
    3428:	14 aa       	std	Z+52, r1	; 0x34
    342a:	13 aa       	std	Z+51, r1	; 0x33
    342c:	92 c0       	rjmp	.+292    	; 0x3552 <fat_create_dir+0x18e>
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    {
        if(strcmp(dir, dir_entry->long_name) == 0)
    342e:	64 2e       	mov	r6, r20
    3430:	5d 2e       	mov	r5, r29
{
    if(!parent || !dir || !dir[0] || !dir_entry)
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    3432:	c5 01       	movw	r24, r10
    3434:	be 01       	movw	r22, r28
    3436:	0e 94 4b 14 	call	0x2896	; 0x2896 <fat_read_dir>
    343a:	88 23       	and	r24, r24
    343c:	29 f7       	brne	.-54     	; 0x3408 <fat_create_dir+0x44>
            fat_reset_dir(parent);
            return 0;
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    343e:	f5 01       	movw	r30, r10
    3440:	c0 80       	ld	r12, Z
    3442:	d1 80       	ldd	r13, Z+1	; 0x01

    /* allocate cluster which will hold directory entries */
    cluster_t dir_cluster = fat_append_clusters(fs, 0, 1);
    3444:	c6 01       	movw	r24, r12
    3446:	40 e0       	ldi	r20, 0x00	; 0
    3448:	50 e0       	ldi	r21, 0x00	; 0
    344a:	60 e0       	ldi	r22, 0x00	; 0
    344c:	70 e0       	ldi	r23, 0x00	; 0
    344e:	01 e0       	ldi	r16, 0x01	; 1
    3450:	10 e0       	ldi	r17, 0x00	; 0
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <fat_append_clusters>
    345a:	7b 01       	movw	r14, r22
    345c:	8c 01       	movw	r16, r24
    if(!dir_cluster)
    345e:	61 15       	cp	r22, r1
    3460:	71 05       	cpc	r23, r1
    3462:	81 05       	cpc	r24, r1
    3464:	91 05       	cpc	r25, r1
    3466:	09 f4       	brne	.+2      	; 0x346a <fat_create_dir+0xa6>
    3468:	74 c0       	rjmp	.+232    	; 0x3552 <fat_create_dir+0x18e>
        return 0;

    /* clear cluster to prevent bogus directory entries */
    fat_clear_cluster(fs, dir_cluster);
    346a:	c6 01       	movw	r24, r12
    346c:	b8 01       	movw	r22, r16
    346e:	a7 01       	movw	r20, r14
    3470:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <fat_clear_cluster>
    
    memset(dir_entry, 0, sizeof(*dir_entry));
    3474:	8d e2       	ldi	r24, 0x2D	; 45
    3476:	fe 01       	movw	r30, r28
    3478:	11 92       	st	Z+, r1
    347a:	8a 95       	dec	r24
    347c:	e9 f7       	brne	.-6      	; 0x3478 <fat_create_dir+0xb4>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    347e:	80 e1       	ldi	r24, 0x10	; 16
    3480:	88 a3       	std	Y+32, r24	; 0x20

    /* create "." directory self reference */
    dir_entry->entry_offset = fs->header.cluster_zero_offset +
    3482:	c8 01       	movw	r24, r16
    3484:	b7 01       	movw	r22, r14
    3486:	62 50       	subi	r22, 0x02	; 2
    3488:	70 40       	sbci	r23, 0x00	; 0
    348a:	80 40       	sbci	r24, 0x00	; 0
    348c:	90 40       	sbci	r25, 0x00	; 0
    348e:	f6 01       	movw	r30, r12
    3490:	20 89       	ldd	r18, Z+16	; 0x10
    3492:	31 89       	ldd	r19, Z+17	; 0x11
    3494:	40 e0       	ldi	r20, 0x00	; 0
    3496:	50 e0       	ldi	r21, 0x00	; 0
    3498:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__mulsi3>
    349c:	f6 01       	movw	r30, r12
    349e:	22 89       	ldd	r18, Z+18	; 0x12
    34a0:	33 89       	ldd	r19, Z+19	; 0x13
    34a2:	44 89       	ldd	r20, Z+20	; 0x14
    34a4:	55 89       	ldd	r21, Z+21	; 0x15
    34a6:	26 0f       	add	r18, r22
    34a8:	37 1f       	adc	r19, r23
    34aa:	48 1f       	adc	r20, r24
    34ac:	59 1f       	adc	r21, r25
    34ae:	29 a7       	std	Y+41, r18	; 0x29
    34b0:	3a a7       	std	Y+42, r19	; 0x2a
    34b2:	4b a7       	std	Y+43, r20	; 0x2b
    34b4:	5c a7       	std	Y+44, r21	; 0x2c
                              (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
    dir_entry->long_name[0] = '.';
    34b6:	be e2       	ldi	r27, 0x2E	; 46
    34b8:	7b 2e       	mov	r7, r27
    34ba:	78 82       	st	Y, r7
    dir_entry->cluster = dir_cluster;
    34bc:	e9 a2       	std	Y+33, r14	; 0x21
    34be:	fa a2       	std	Y+34, r15	; 0x22
    34c0:	0b a3       	std	Y+35, r16	; 0x23
    34c2:	1c a3       	std	Y+36, r17	; 0x24
    if(!fat_write_dir_entry(fs, dir_entry))
    34c4:	c6 01       	movw	r24, r12
    34c6:	be 01       	movw	r22, r28
    34c8:	0e 94 86 18 	call	0x310c	; 0x310c <fat_write_dir_entry>
    34cc:	88 23       	and	r24, r24
    34ce:	e1 f1       	breq	.+120    	; 0x3548 <fat_create_dir+0x184>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* create ".." parent directory reference */
    dir_entry->entry_offset += 32;
    34d0:	89 a5       	ldd	r24, Y+41	; 0x29
    34d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    34d4:	ab a5       	ldd	r26, Y+43	; 0x2b
    34d6:	bc a5       	ldd	r27, Y+44	; 0x2c
    34d8:	80 96       	adiw	r24, 0x20	; 32
    34da:	a1 1d       	adc	r26, r1
    34dc:	b1 1d       	adc	r27, r1
    34de:	89 a7       	std	Y+41, r24	; 0x29
    34e0:	9a a7       	std	Y+42, r25	; 0x2a
    34e2:	ab a7       	std	Y+43, r26	; 0x2b
    34e4:	bc a7       	std	Y+44, r27	; 0x2c
    dir_entry->long_name[1] = '.';
    34e6:	79 82       	std	Y+1, r7	; 0x01
    dir_entry->cluster = parent->dir_entry.cluster;
    34e8:	f5 01       	movw	r30, r10
    34ea:	83 a1       	ldd	r24, Z+35	; 0x23
    34ec:	94 a1       	ldd	r25, Z+36	; 0x24
    34ee:	a5 a1       	ldd	r26, Z+37	; 0x25
    34f0:	b6 a1       	ldd	r27, Z+38	; 0x26
    34f2:	89 a3       	std	Y+33, r24	; 0x21
    34f4:	9a a3       	std	Y+34, r25	; 0x22
    34f6:	ab a3       	std	Y+35, r26	; 0x23
    34f8:	bc a3       	std	Y+36, r27	; 0x24
    if(!fat_write_dir_entry(fs, dir_entry))
    34fa:	c6 01       	movw	r24, r12
    34fc:	be 01       	movw	r22, r28
    34fe:	0e 94 86 18 	call	0x310c	; 0x310c <fat_write_dir_entry>
    3502:	88 23       	and	r24, r24
    3504:	09 f1       	breq	.+66     	; 0x3548 <fat_create_dir+0x184>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* fill directory entry */
    strncpy(dir_entry->long_name, dir, sizeof(dir_entry->long_name) - 1);
    3506:	86 2d       	mov	r24, r6
    3508:	95 2d       	mov	r25, r5
    350a:	b4 01       	movw	r22, r8
    350c:	4f e1       	ldi	r20, 0x1F	; 31
    350e:	50 e0       	ldi	r21, 0x00	; 0
    3510:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <strncpy>
    dir_entry->cluster = dir_cluster;
    3514:	e9 a2       	std	Y+33, r14	; 0x21
    3516:	fa a2       	std	Y+34, r15	; 0x22
    3518:	0b a3       	std	Y+35, r16	; 0x23
    351a:	1c a3       	std	Y+36, r17	; 0x24

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    351c:	c6 01       	movw	r24, r12
    351e:	b5 01       	movw	r22, r10
    3520:	ae 01       	movw	r20, r28
    3522:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <fat_find_offset_for_dir_entry>
    3526:	69 a7       	std	Y+41, r22	; 0x29
    3528:	7a a7       	std	Y+42, r23	; 0x2a
    352a:	8b a7       	std	Y+43, r24	; 0x2b
    352c:	9c a7       	std	Y+44, r25	; 0x2c
    352e:	61 15       	cp	r22, r1
    3530:	71 05       	cpc	r23, r1
    3532:	81 05       	cpc	r24, r1
    3534:	91 05       	cpc	r25, r1
    3536:	41 f0       	breq	.+16     	; 0x3548 <fat_create_dir+0x184>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* write directory to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    3538:	c6 01       	movw	r24, r12
    353a:	be 01       	movw	r22, r28
    353c:	0e 94 86 18 	call	0x310c	; 0x310c <fat_write_dir_entry>
    3540:	88 23       	and	r24, r24
    3542:	11 f0       	breq	.+4      	; 0x3548 <fat_create_dir+0x184>
    3544:	81 e0       	ldi	r24, 0x01	; 1
    3546:	06 c0       	rjmp	.+12     	; 0x3554 <fat_create_dir+0x190>
    {
        fat_free_clusters(fs, dir_cluster);
    3548:	c6 01       	movw	r24, r12
    354a:	b8 01       	movw	r22, r16
    354c:	a7 01       	movw	r20, r14
    354e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <fat_free_clusters>
        return 0;
    3552:	80 e0       	ldi	r24, 0x00	; 0
    }

    return 1;
}
    3554:	df 91       	pop	r29
    3556:	cf 91       	pop	r28
    3558:	1f 91       	pop	r17
    355a:	0f 91       	pop	r16
    355c:	ff 90       	pop	r15
    355e:	ef 90       	pop	r14
    3560:	df 90       	pop	r13
    3562:	cf 90       	pop	r12
    3564:	bf 90       	pop	r11
    3566:	af 90       	pop	r10
    3568:	9f 90       	pop	r9
    356a:	8f 90       	pop	r8
    356c:	7f 90       	pop	r7
    356e:	6f 90       	pop	r6
    3570:	5f 90       	pop	r5
    3572:	08 95       	ret

00003574 <fat_create_file>:
 * \param[out] dir_entry The directory entry to fill for the new file.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    3574:	af 92       	push	r10
    3576:	bf 92       	push	r11
    3578:	cf 92       	push	r12
    357a:	df 92       	push	r13
    357c:	ef 92       	push	r14
    357e:	ff 92       	push	r15
    3580:	0f 93       	push	r16
    3582:	1f 93       	push	r17
    3584:	cf 93       	push	r28
    3586:	df 93       	push	r29
    3588:	8c 01       	movw	r16, r24
    358a:	7b 01       	movw	r14, r22
    358c:	ea 01       	movw	r28, r20
    if(!parent || !file || !file[0] || !dir_entry)
    358e:	00 97       	sbiw	r24, 0x00	; 0
    3590:	09 f4       	brne	.+2      	; 0x3594 <fat_create_file+0x20>
    3592:	4d c0       	rjmp	.+154    	; 0x362e <fat_create_file+0xba>
    3594:	61 15       	cp	r22, r1
    3596:	71 05       	cpc	r23, r1
    3598:	09 f4       	brne	.+2      	; 0x359c <fat_create_file+0x28>
    359a:	49 c0       	rjmp	.+146    	; 0x362e <fat_create_file+0xba>
    359c:	fb 01       	movw	r30, r22
    359e:	80 81       	ld	r24, Z
    35a0:	88 23       	and	r24, r24
    35a2:	09 f4       	brne	.+2      	; 0x35a6 <fat_create_file+0x32>
    35a4:	44 c0       	rjmp	.+136    	; 0x362e <fat_create_file+0xba>
    35a6:	41 15       	cp	r20, r1
    35a8:	51 05       	cpc	r21, r1
    35aa:	09 f4       	brne	.+2      	; 0x35ae <fat_create_file+0x3a>
    35ac:	40 c0       	rjmp	.+128    	; 0x362e <fat_create_file+0xba>
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    35ae:	b4 2e       	mov	r11, r20
    35b0:	ad 2e       	mov	r10, r29
        return 0;

    /* check if the file already exists */
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
    35b2:	c8 01       	movw	r24, r16
    35b4:	be 01       	movw	r22, r28
    35b6:	0e 94 4b 14 	call	0x2896	; 0x2896 <fat_read_dir>
    35ba:	88 23       	and	r24, r24
    35bc:	99 f0       	breq	.+38     	; 0x35e4 <fat_create_file+0x70>
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    35be:	c7 01       	movw	r24, r14
    35c0:	6b 2d       	mov	r22, r11
    35c2:	7a 2d       	mov	r23, r10
    35c4:	0e 94 ca 25 	call	0x4b94	; 0x4b94 <strcmp>
    35c8:	00 97       	sbiw	r24, 0x00	; 0
    35ca:	99 f7       	brne	.-26     	; 0x35b2 <fat_create_file+0x3e>
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    35cc:	f8 01       	movw	r30, r16
    35ce:	83 a1       	ldd	r24, Z+35	; 0x23
    35d0:	94 a1       	ldd	r25, Z+36	; 0x24
    35d2:	a5 a1       	ldd	r26, Z+37	; 0x25
    35d4:	b6 a1       	ldd	r27, Z+38	; 0x26
    35d6:	87 a7       	std	Z+47, r24	; 0x2f
    35d8:	90 ab       	std	Z+48, r25	; 0x30
    35da:	a1 ab       	std	Z+49, r26	; 0x31
    35dc:	b2 ab       	std	Z+50, r27	; 0x32
    dd->entry_offset = 0;
    35de:	14 aa       	std	Z+52, r1	; 0x34
    35e0:	13 aa       	std	Z+51, r1	; 0x33
    35e2:	25 c0       	rjmp	.+74     	; 0x362e <fat_create_file+0xba>
            fat_reset_dir(parent);
            return 0;
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    35e4:	f8 01       	movw	r30, r16
    35e6:	c0 80       	ld	r12, Z
    35e8:	d1 80       	ldd	r13, Z+1	; 0x01

    /* prepare directory entry with values already known */
    memset(dir_entry, 0, sizeof(*dir_entry));
    35ea:	8d e2       	ldi	r24, 0x2D	; 45
    35ec:	fe 01       	movw	r30, r28
    35ee:	11 92       	st	Z+, r1
    35f0:	8a 95       	dec	r24
    35f2:	e9 f7       	brne	.-6      	; 0x35ee <fat_create_file+0x7a>
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
    35f4:	8b 2d       	mov	r24, r11
    35f6:	9a 2d       	mov	r25, r10
    35f8:	b7 01       	movw	r22, r14
    35fa:	4f e1       	ldi	r20, 0x1F	; 31
    35fc:	50 e0       	ldi	r21, 0x00	; 0
    35fe:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <strncpy>

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    3602:	c6 01       	movw	r24, r12
    3604:	b8 01       	movw	r22, r16
    3606:	ae 01       	movw	r20, r28
    3608:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <fat_find_offset_for_dir_entry>
    360c:	69 a7       	std	Y+41, r22	; 0x29
    360e:	7a a7       	std	Y+42, r23	; 0x2a
    3610:	8b a7       	std	Y+43, r24	; 0x2b
    3612:	9c a7       	std	Y+44, r25	; 0x2c
    3614:	61 15       	cp	r22, r1
    3616:	71 05       	cpc	r23, r1
    3618:	81 05       	cpc	r24, r1
    361a:	91 05       	cpc	r25, r1
    361c:	41 f0       	breq	.+16     	; 0x362e <fat_create_file+0xba>
        return 0;
    
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    361e:	c6 01       	movw	r24, r12
    3620:	be 01       	movw	r22, r28
    3622:	0e 94 86 18 	call	0x310c	; 0x310c <fat_write_dir_entry>
    3626:	88 23       	and	r24, r24
    3628:	19 f0       	breq	.+6      	; 0x3630 <fat_create_file+0xbc>
    362a:	81 e0       	ldi	r24, 0x01	; 1
    362c:	01 c0       	rjmp	.+2      	; 0x3630 <fat_create_file+0xbc>
    362e:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
    
    return 1;
}
    3630:	df 91       	pop	r29
    3632:	cf 91       	pop	r28
    3634:	1f 91       	pop	r17
    3636:	0f 91       	pop	r16
    3638:	ff 90       	pop	r15
    363a:	ef 90       	pop	r14
    363c:	df 90       	pop	r13
    363e:	cf 90       	pop	r12
    3640:	bf 90       	pop	r11
    3642:	af 90       	pop	r10
    3644:	08 95       	ret

00003646 <fat_resize_file>:
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    3646:	2f 92       	push	r2
    3648:	3f 92       	push	r3
    364a:	4f 92       	push	r4
    364c:	5f 92       	push	r5
    364e:	6f 92       	push	r6
    3650:	7f 92       	push	r7
    3652:	8f 92       	push	r8
    3654:	9f 92       	push	r9
    3656:	af 92       	push	r10
    3658:	bf 92       	push	r11
    365a:	cf 92       	push	r12
    365c:	df 92       	push	r13
    365e:	ef 92       	push	r14
    3660:	ff 92       	push	r15
    3662:	0f 93       	push	r16
    3664:	1f 93       	push	r17
    3666:	df 93       	push	r29
    3668:	cf 93       	push	r28
    366a:	cd b7       	in	r28, 0x3d	; 61
    366c:	de b7       	in	r29, 0x3e	; 62
    366e:	2e 97       	sbiw	r28, 0x0e	; 14
    3670:	0f b6       	in	r0, 0x3f	; 63
    3672:	f8 94       	cli
    3674:	de bf       	out	0x3e, r29	; 62
    3676:	0f be       	out	0x3f, r0	; 63
    3678:	cd bf       	out	0x3d, r28	; 61
    367a:	1c 01       	movw	r2, r24
    367c:	4f 83       	std	Y+7, r20	; 0x07
    367e:	58 87       	std	Y+8, r21	; 0x08
    3680:	69 87       	std	Y+9, r22	; 0x09
    3682:	7a 87       	std	Y+10, r23	; 0x0a
    if(!fd)
    3684:	00 97       	sbiw	r24, 0x00	; 0
    3686:	09 f4       	brne	.+2      	; 0x368a <fat_resize_file+0x44>
    3688:	28 c1       	rjmp	.+592    	; 0x38da <fat_resize_file+0x294>
        return 0;

    cluster_t cluster_num = fd->dir_entry.cluster;
    368a:	dc 01       	movw	r26, r24
    368c:	93 96       	adiw	r26, 0x23	; 35
    368e:	cd 90       	ld	r12, X+
    3690:	dd 90       	ld	r13, X+
    3692:	ed 90       	ld	r14, X+
    3694:	fc 90       	ld	r15, X
    3696:	96 97       	sbiw	r26, 0x26	; 38
    uint16_t cluster_size = fd->fs->header.cluster_size;
    3698:	ed 91       	ld	r30, X+
    369a:	fc 91       	ld	r31, X
    369c:	20 89       	ldd	r18, Z+16	; 0x10
    369e:	31 89       	ldd	r19, Z+17	; 0x11
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
    36a0:	c1 14       	cp	r12, r1
    36a2:	d1 04       	cpc	r13, r1
    36a4:	e1 04       	cpc	r14, r1
    36a6:	f1 04       	cpc	r15, r1
    36a8:	99 f0       	breq	.+38     	; 0x36d0 <fat_resize_file+0x8a>
    36aa:	4f 80       	ldd	r4, Y+7	; 0x07
    36ac:	58 84       	ldd	r5, Y+8	; 0x08
    36ae:	69 84       	ldd	r6, Y+9	; 0x09
    36b0:	7a 84       	ldd	r7, Y+10	; 0x0a
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    36b2:	49 01       	movw	r8, r18
    36b4:	aa 24       	eor	r10, r10
    36b6:	bb 24       	eor	r11, r11
                cluster_num = cluster_num_next;
                size_new -= cluster_size;
            }
            else
            {
                break;
    36b8:	22 27       	eor	r18, r18
    36ba:	33 27       	eor	r19, r19
    36bc:	a9 01       	movw	r20, r18
    36be:	28 19       	sub	r18, r8
    36c0:	39 09       	sbc	r19, r9
    36c2:	4a 09       	sbc	r20, r10
    36c4:	5b 09       	sbc	r21, r11
    36c6:	2b 87       	std	Y+11, r18	; 0x0b
    36c8:	3c 87       	std	Y+12, r19	; 0x0c
    36ca:	4d 87       	std	Y+13, r20	; 0x0d
    36cc:	5e 87       	std	Y+14, r21	; 0x0e
    36ce:	20 c0       	rjmp	.+64     	; 0x3710 <fat_resize_file+0xca>
    uint16_t cluster_size = fd->fs->header.cluster_size;
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
    36d0:	8f 81       	ldd	r24, Y+7	; 0x07
    36d2:	98 85       	ldd	r25, Y+8	; 0x08
    36d4:	a9 85       	ldd	r26, Y+9	; 0x09
    36d6:	ba 85       	ldd	r27, Y+10	; 0x0a
    36d8:	00 97       	sbiw	r24, 0x00	; 0
    36da:	a1 05       	cpc	r26, r1
    36dc:	b1 05       	cpc	r27, r1
    36de:	09 f4       	brne	.+2      	; 0x36e2 <fat_resize_file+0x9c>
    36e0:	dc c0       	rjmp	.+440    	; 0x389a <fat_resize_file+0x254>
    36e2:	e3 cf       	rjmp	.-58     	; 0x36aa <fat_resize_file+0x64>

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
        {
            /* get next cluster of file */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    36e4:	d1 01       	movw	r26, r2
    36e6:	8d 91       	ld	r24, X+
    36e8:	9c 91       	ld	r25, X
    36ea:	b7 01       	movw	r22, r14
    36ec:	a6 01       	movw	r20, r12
    36ee:	0e 94 b2 0c 	call	0x1964	; 0x1964 <fat_get_next_cluster>
            if(cluster_num_next)
    36f2:	61 15       	cp	r22, r1
    36f4:	71 05       	cpc	r23, r1
    36f6:	81 05       	cpc	r24, r1
    36f8:	91 05       	cpc	r25, r1
    36fa:	81 f0       	breq	.+32     	; 0x371c <fat_resize_file+0xd6>
                cluster_num = cluster_num_next;
                size_new -= cluster_size;
            }
            else
            {
                break;
    36fc:	2b 85       	ldd	r18, Y+11	; 0x0b
    36fe:	3c 85       	ldd	r19, Y+12	; 0x0c
    3700:	4d 85       	ldd	r20, Y+13	; 0x0d
    3702:	5e 85       	ldd	r21, Y+14	; 0x0e
    3704:	42 0e       	add	r4, r18
    3706:	53 1e       	adc	r5, r19
    3708:	64 1e       	adc	r6, r20
    370a:	75 1e       	adc	r7, r21
    370c:	6b 01       	movw	r12, r22
    370e:	7c 01       	movw	r14, r24
        if(cluster_num == 0 && size_new == 0)
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    3710:	84 14       	cp	r8, r4
    3712:	95 04       	cpc	r9, r5
    3714:	a6 04       	cpc	r10, r6
    3716:	b7 04       	cpc	r11, r7
    3718:	28 f3       	brcs	.-54     	; 0x36e4 <fat_resize_file+0x9e>
    371a:	f9 c0       	rjmp	.+498    	; 0x390e <fat_resize_file+0x2c8>
        {
            /* Allocate new cluster chain and append
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
    371c:	c3 01       	movw	r24, r6
    371e:	b2 01       	movw	r22, r4
    3720:	68 0d       	add	r22, r8
    3722:	79 1d       	adc	r23, r9
    3724:	8a 1d       	adc	r24, r10
    3726:	9b 1d       	adc	r25, r11
    3728:	61 50       	subi	r22, 0x01	; 1
    372a:	70 40       	sbci	r23, 0x00	; 0
    372c:	80 40       	sbci	r24, 0x00	; 0
    372e:	90 40       	sbci	r25, 0x00	; 0
    3730:	a5 01       	movw	r20, r10
    3732:	94 01       	movw	r18, r8
    3734:	0e 94 76 25 	call	0x4aec	; 0x4aec <__udivmodsi4>
    3738:	89 01       	movw	r16, r18
    373a:	9a 01       	movw	r18, r20
    373c:	d1 01       	movw	r26, r2
    373e:	8d 91       	ld	r24, X+
    3740:	9c 91       	ld	r25, X
    3742:	b7 01       	movw	r22, r14
    3744:	a6 01       	movw	r20, r12
    3746:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <fat_append_clusters>
            if(!cluster_new_chain)
    374a:	61 15       	cp	r22, r1
    374c:	71 05       	cpc	r23, r1
    374e:	81 05       	cpc	r24, r1
    3750:	91 05       	cpc	r25, r1
    3752:	09 f4       	brne	.+2      	; 0x3756 <fat_resize_file+0x110>
    3754:	c2 c0       	rjmp	.+388    	; 0x38da <fat_resize_file+0x294>
                return 0;

            if(!cluster_num)
    3756:	c1 14       	cp	r12, r1
    3758:	d1 04       	cpc	r13, r1
    375a:	e1 04       	cpc	r14, r1
    375c:	f1 04       	cpc	r15, r1
    375e:	39 f4       	brne	.+14     	; 0x376e <fat_resize_file+0x128>
            {
                cluster_num = cluster_new_chain;
                fd->dir_entry.cluster = cluster_num;
    3760:	f1 01       	movw	r30, r2
    3762:	63 a3       	std	Z+35, r22	; 0x23
    3764:	74 a3       	std	Z+36, r23	; 0x24
    3766:	85 a3       	std	Z+37, r24	; 0x25
    3768:	96 a3       	std	Z+38, r25	; 0x26
    376a:	6b 01       	movw	r12, r22
    376c:	7c 01       	movw	r14, r24
            }
        }

        /* write new directory entry */
        fd->dir_entry.file_size = size;
    376e:	2f 81       	ldd	r18, Y+7	; 0x07
    3770:	38 85       	ldd	r19, Y+8	; 0x08
    3772:	49 85       	ldd	r20, Y+9	; 0x09
    3774:	5a 85       	ldd	r21, Y+10	; 0x0a
    3776:	d1 01       	movw	r26, r2
    3778:	97 96       	adiw	r26, 0x27	; 39
    377a:	2d 93       	st	X+, r18
    377c:	3d 93       	st	X+, r19
    377e:	4d 93       	st	X+, r20
    3780:	5c 93       	st	X, r21
    3782:	9a 97       	sbiw	r26, 0x2a	; 42
        if(size == 0)
    3784:	21 15       	cp	r18, r1
    3786:	31 05       	cpc	r19, r1
    3788:	41 05       	cpc	r20, r1
    378a:	51 05       	cpc	r21, r1
    378c:	29 f4       	brne	.+10     	; 0x3798 <fat_resize_file+0x152>
            fd->dir_entry.cluster = 0;
    378e:	f1 01       	movw	r30, r2
    3790:	13 a2       	std	Z+35, r1	; 0x23
    3792:	14 a2       	std	Z+36, r1	; 0x24
    3794:	15 a2       	std	Z+37, r1	; 0x25
    3796:	16 a2       	std	Z+38, r1	; 0x26
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    3798:	f1 01       	movw	r30, r2
    379a:	81 91       	ld	r24, Z+
    379c:	91 91       	ld	r25, Z+
    379e:	bf 01       	movw	r22, r30
    37a0:	0e 94 86 18 	call	0x310c	; 0x310c <fat_write_dir_entry>
    37a4:	88 23       	and	r24, r24
    37a6:	09 f4       	brne	.+2      	; 0x37aa <fat_resize_file+0x164>
    37a8:	98 c0       	rjmp	.+304    	; 0x38da <fat_resize_file+0x294>
            return 0;

        if(size == 0)
    37aa:	2f 81       	ldd	r18, Y+7	; 0x07
    37ac:	38 85       	ldd	r19, Y+8	; 0x08
    37ae:	49 85       	ldd	r20, Y+9	; 0x09
    37b0:	5a 85       	ldd	r21, Y+10	; 0x0a
    37b2:	21 15       	cp	r18, r1
    37b4:	31 05       	cpc	r19, r1
    37b6:	41 05       	cpc	r20, r1
    37b8:	51 05       	cpc	r21, r1
    37ba:	31 f4       	brne	.+12     	; 0x37c8 <fat_resize_file+0x182>
        {
            /* free all clusters of file */
            fat_free_clusters(fd->fs, cluster_num);
    37bc:	d1 01       	movw	r26, r2
    37be:	8d 91       	ld	r24, X+
    37c0:	9c 91       	ld	r25, X
    37c2:	b7 01       	movw	r22, r14
    37c4:	a6 01       	movw	r20, r12
    37c6:	67 c0       	rjmp	.+206    	; 0x3896 <fat_resize_file+0x250>
        }
        else if(size_new <= cluster_size)
    37c8:	84 14       	cp	r8, r4
    37ca:	95 04       	cpc	r9, r5
    37cc:	a6 04       	cpc	r10, r6
    37ce:	b7 04       	cpc	r11, r7
    37d0:	08 f4       	brcc	.+2      	; 0x37d4 <fat_resize_file+0x18e>
    37d2:	63 c0       	rjmp	.+198    	; 0x389a <fat_resize_file+0x254>
        {
            /* free all clusters no longer needed */
            fat_terminate_clusters(fd->fs, cluster_num);
    37d4:	f1 01       	movw	r30, r2
    37d6:	00 81       	ld	r16, Z
    37d8:	11 81       	ldd	r17, Z+1	; 0x01
 * \returns 0 on failure, 1 on success.
 * \see fat_free_clusters
 */
uint8_t fat_terminate_clusters(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    37da:	01 15       	cp	r16, r1
    37dc:	11 05       	cpc	r17, r1
    37de:	09 f4       	brne	.+2      	; 0x37e2 <fat_resize_file+0x19c>
    37e0:	5c c0       	rjmp	.+184    	; 0x389a <fat_resize_file+0x254>
    37e2:	f2 e0       	ldi	r31, 0x02	; 2
    37e4:	cf 16       	cp	r12, r31
    37e6:	d1 04       	cpc	r13, r1
    37e8:	e1 04       	cpc	r14, r1
    37ea:	f1 04       	cpc	r15, r1
    37ec:	08 f4       	brcc	.+2      	; 0x37f0 <fat_resize_file+0x1aa>
    37ee:	55 c0       	rjmp	.+170    	; 0x389a <fat_resize_file+0x254>
        return 0;

    /* fetch next cluster before overwriting the cluster entry */
    cluster_t cluster_num_next = fat_get_next_cluster(fs, cluster_num);
    37f0:	c8 01       	movw	r24, r16
    37f2:	b7 01       	movw	r22, r14
    37f4:	a6 01       	movw	r20, r12
    37f6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <fat_get_next_cluster>
    37fa:	4b 01       	movw	r8, r22
    37fc:	5c 01       	movw	r10, r24

    /* mark cluster as the last one */
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    37fe:	d8 01       	movw	r26, r16
    3800:	ed 91       	ld	r30, X+
    3802:	fc 91       	ld	r31, X
    3804:	80 85       	ldd	r24, Z+8	; 0x08
    3806:	04 80       	ldd	r0, Z+4	; 0x04
    3808:	f5 81       	ldd	r31, Z+5	; 0x05
    380a:	e0 2d       	mov	r30, r0
    380c:	8b 30       	cpi	r24, 0x0B	; 11
    380e:	01 f5       	brne	.+64     	; 0x3850 <fat_resize_file+0x20a>
    {
        uint32_t fat_entry = HTOL32(FAT32_CLUSTER_LAST_MAX);
    3810:	8f ef       	ldi	r24, 0xFF	; 255
    3812:	9f ef       	ldi	r25, 0xFF	; 255
    3814:	af ef       	ldi	r26, 0xFF	; 255
    3816:	bf e0       	ldi	r27, 0x0F	; 15
    3818:	8b 83       	std	Y+3, r24	; 0x03
    381a:	9c 83       	std	Y+4, r25	; 0x04
    381c:	ad 83       	std	Y+5, r26	; 0x05
    381e:	be 83       	std	Y+6, r27	; 0x06
        if(!fs->partition->device_write(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    3820:	92 e0       	ldi	r25, 0x02	; 2
    3822:	cc 0c       	add	r12, r12
    3824:	dd 1c       	adc	r13, r13
    3826:	ee 1c       	adc	r14, r14
    3828:	ff 1c       	adc	r15, r15
    382a:	9a 95       	dec	r25
    382c:	d1 f7       	brne	.-12     	; 0x3822 <fat_resize_file+0x1dc>
    382e:	d8 01       	movw	r26, r16
    3830:	16 96       	adiw	r26, 0x06	; 6
    3832:	6d 91       	ld	r22, X+
    3834:	7d 91       	ld	r23, X+
    3836:	8d 91       	ld	r24, X+
    3838:	9c 91       	ld	r25, X
    383a:	19 97       	sbiw	r26, 0x09	; 9
    383c:	6c 0d       	add	r22, r12
    383e:	7d 1d       	adc	r23, r13
    3840:	8e 1d       	adc	r24, r14
    3842:	9f 1d       	adc	r25, r15
    3844:	ae 01       	movw	r20, r28
    3846:	4d 5f       	subi	r20, 0xFD	; 253
    3848:	5f 4f       	sbci	r21, 0xFF	; 255
    384a:	24 e0       	ldi	r18, 0x04	; 4
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	18 c0       	rjmp	.+48     	; 0x3880 <fat_resize_file+0x23a>
            return 0;
    }
    else
#endif
    {
        uint16_t fat_entry = HTOL16(FAT16_CLUSTER_LAST_MAX);
    3850:	8f ef       	ldi	r24, 0xFF	; 255
    3852:	9f ef       	ldi	r25, 0xFF	; 255
    3854:	9a 83       	std	Y+2, r25	; 0x02
    3856:	89 83       	std	Y+1, r24	; 0x01
        if(!fs->partition->device_write(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    3858:	cc 0c       	add	r12, r12
    385a:	dd 1c       	adc	r13, r13
    385c:	ee 1c       	adc	r14, r14
    385e:	ff 1c       	adc	r15, r15
    3860:	d8 01       	movw	r26, r16
    3862:	16 96       	adiw	r26, 0x06	; 6
    3864:	6d 91       	ld	r22, X+
    3866:	7d 91       	ld	r23, X+
    3868:	8d 91       	ld	r24, X+
    386a:	9c 91       	ld	r25, X
    386c:	19 97       	sbiw	r26, 0x09	; 9
    386e:	6c 0d       	add	r22, r12
    3870:	7d 1d       	adc	r23, r13
    3872:	8e 1d       	adc	r24, r14
    3874:	9f 1d       	adc	r25, r15
    3876:	ae 01       	movw	r20, r28
    3878:	4f 5f       	subi	r20, 0xFF	; 255
    387a:	5f 4f       	sbci	r21, 0xFF	; 255
    387c:	22 e0       	ldi	r18, 0x02	; 2
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	09 95       	icall
    3882:	88 23       	and	r24, r24
    3884:	51 f0       	breq	.+20     	; 0x389a <fat_resize_file+0x254>
            return 0;
    }

    /* free remaining clusters */
    if(cluster_num_next)
    3886:	81 14       	cp	r8, r1
    3888:	91 04       	cpc	r9, r1
    388a:	a1 04       	cpc	r10, r1
    388c:	b1 04       	cpc	r11, r1
    388e:	29 f0       	breq	.+10     	; 0x389a <fat_resize_file+0x254>
        return fat_free_clusters(fs, cluster_num_next);
    3890:	c8 01       	movw	r24, r16
    3892:	b5 01       	movw	r22, r10
    3894:	a4 01       	movw	r20, r8
    3896:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <fat_free_clusters>
        }

    } while(0);

    /* correct file position */
    if(size < fd->pos)
    389a:	f1 01       	movw	r30, r2
    389c:	87 a5       	ldd	r24, Z+47	; 0x2f
    389e:	90 a9       	ldd	r25, Z+48	; 0x30
    38a0:	a1 a9       	ldd	r26, Z+49	; 0x31
    38a2:	b2 a9       	ldd	r27, Z+50	; 0x32
    38a4:	2f 81       	ldd	r18, Y+7	; 0x07
    38a6:	38 85       	ldd	r19, Y+8	; 0x08
    38a8:	49 85       	ldd	r20, Y+9	; 0x09
    38aa:	5a 85       	ldd	r21, Y+10	; 0x0a
    38ac:	28 17       	cp	r18, r24
    38ae:	39 07       	cpc	r19, r25
    38b0:	4a 07       	cpc	r20, r26
    38b2:	5b 07       	cpc	r21, r27
    38b4:	80 f4       	brcc	.+32     	; 0x38d6 <fat_resize_file+0x290>
    {
        fd->pos = size;
    38b6:	8f 81       	ldd	r24, Y+7	; 0x07
    38b8:	98 85       	ldd	r25, Y+8	; 0x08
    38ba:	a9 85       	ldd	r26, Y+9	; 0x09
    38bc:	ba 85       	ldd	r27, Y+10	; 0x0a
    38be:	f1 01       	movw	r30, r2
    38c0:	87 a7       	std	Z+47, r24	; 0x2f
    38c2:	90 ab       	std	Z+48, r25	; 0x30
    38c4:	a1 ab       	std	Z+49, r26	; 0x31
    38c6:	b2 ab       	std	Z+50, r27	; 0x32
        fd->pos_cluster = 0;
    38c8:	d1 01       	movw	r26, r2
    38ca:	d3 96       	adiw	r26, 0x33	; 51
    38cc:	1d 92       	st	X+, r1
    38ce:	1d 92       	st	X+, r1
    38d0:	1d 92       	st	X+, r1
    38d2:	1c 92       	st	X, r1
    38d4:	d6 97       	sbiw	r26, 0x36	; 54
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	01 c0       	rjmp	.+2      	; 0x38dc <fat_resize_file+0x296>
    38da:	80 e0       	ldi	r24, 0x00	; 0
    }

    return 1;
}
    38dc:	2e 96       	adiw	r28, 0x0e	; 14
    38de:	0f b6       	in	r0, 0x3f	; 63
    38e0:	f8 94       	cli
    38e2:	de bf       	out	0x3e, r29	; 62
    38e4:	0f be       	out	0x3f, r0	; 63
    38e6:	cd bf       	out	0x3d, r28	; 61
    38e8:	cf 91       	pop	r28
    38ea:	df 91       	pop	r29
    38ec:	1f 91       	pop	r17
    38ee:	0f 91       	pop	r16
    38f0:	ff 90       	pop	r15
    38f2:	ef 90       	pop	r14
    38f4:	df 90       	pop	r13
    38f6:	cf 90       	pop	r12
    38f8:	bf 90       	pop	r11
    38fa:	af 90       	pop	r10
    38fc:	9f 90       	pop	r9
    38fe:	8f 90       	pop	r8
    3900:	7f 90       	pop	r7
    3902:	6f 90       	pop	r6
    3904:	5f 90       	pop	r5
    3906:	4f 90       	pop	r4
    3908:	3f 90       	pop	r3
    390a:	2f 90       	pop	r2
    390c:	08 95       	ret
            {
                break;
            }
        }

        if(size_new > cluster_size || cluster_num == 0)
    390e:	c1 14       	cp	r12, r1
    3910:	d1 04       	cpc	r13, r1
    3912:	e1 04       	cpc	r14, r1
    3914:	f1 04       	cpc	r15, r1
    3916:	09 f4       	brne	.+2      	; 0x391a <fat_resize_file+0x2d4>
    3918:	01 cf       	rjmp	.-510    	; 0x371c <fat_resize_file+0xd6>
    391a:	29 cf       	rjmp	.-430    	; 0x376e <fat_resize_file+0x128>

0000391c <fat_seek_file>:
 *                   to this location before it returns.
 * \param[in] whence Affects the way \c offset is interpreted, see above.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    391c:	cf 92       	push	r12
    391e:	df 92       	push	r13
    3920:	ef 92       	push	r14
    3922:	ff 92       	push	r15
    3924:	0f 93       	push	r16
    3926:	1f 93       	push	r17
    3928:	cf 93       	push	r28
    392a:	df 93       	push	r29
    392c:	ec 01       	movw	r28, r24
    392e:	6b 01       	movw	r12, r22
    if(!fd || !offset)
    3930:	00 97       	sbiw	r24, 0x00	; 0
    3932:	09 f4       	brne	.+2      	; 0x3936 <fat_seek_file+0x1a>
    3934:	47 c0       	rjmp	.+142    	; 0x39c4 <fat_seek_file+0xa8>
    3936:	61 15       	cp	r22, r1
    3938:	71 05       	cpc	r23, r1
    393a:	09 f4       	brne	.+2      	; 0x393e <fat_seek_file+0x22>
    393c:	43 c0       	rjmp	.+134    	; 0x39c4 <fat_seek_file+0xa8>
        return 0;

    uint32_t new_pos = fd->pos;
    393e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3940:	98 a9       	ldd	r25, Y+48	; 0x30
    3942:	a9 a9       	ldd	r26, Y+49	; 0x31
    3944:	ba a9       	ldd	r27, Y+50	; 0x32
    switch(whence)
    3946:	41 30       	cpi	r20, 0x01	; 1
    3948:	59 f0       	breq	.+22     	; 0x3960 <fat_seek_file+0x44>
    394a:	41 30       	cpi	r20, 0x01	; 1
    394c:	18 f0       	brcs	.+6      	; 0x3954 <fat_seek_file+0x38>
    394e:	42 30       	cpi	r20, 0x02	; 2
    3950:	c9 f5       	brne	.+114    	; 0x39c4 <fat_seek_file+0xa8>
    3952:	0c c0       	rjmp	.+24     	; 0x396c <fat_seek_file+0x50>
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
    3954:	fb 01       	movw	r30, r22
    3956:	e0 80       	ld	r14, Z
    3958:	f1 80       	ldd	r15, Z+1	; 0x01
    395a:	02 81       	ldd	r16, Z+2	; 0x02
    395c:	13 81       	ldd	r17, Z+3	; 0x03
    395e:	13 c0       	rjmp	.+38     	; 0x3986 <fat_seek_file+0x6a>
            break;
        case FAT_SEEK_CUR:
            new_pos += *offset;
    3960:	fb 01       	movw	r30, r22
    3962:	e0 80       	ld	r14, Z
    3964:	f1 80       	ldd	r15, Z+1	; 0x01
    3966:	02 81       	ldd	r16, Z+2	; 0x02
    3968:	13 81       	ldd	r17, Z+3	; 0x03
    396a:	09 c0       	rjmp	.+18     	; 0x397e <fat_seek_file+0x62>
            break;
        case FAT_SEEK_END:
            new_pos = fd->dir_entry.file_size + *offset;
    396c:	fb 01       	movw	r30, r22
    396e:	e0 80       	ld	r14, Z
    3970:	f1 80       	ldd	r15, Z+1	; 0x01
    3972:	02 81       	ldd	r16, Z+2	; 0x02
    3974:	13 81       	ldd	r17, Z+3	; 0x03
    3976:	8f a1       	ldd	r24, Y+39	; 0x27
    3978:	98 a5       	ldd	r25, Y+40	; 0x28
    397a:	a9 a5       	ldd	r26, Y+41	; 0x29
    397c:	ba a5       	ldd	r27, Y+42	; 0x2a
    397e:	e8 0e       	add	r14, r24
    3980:	f9 1e       	adc	r15, r25
    3982:	0a 1f       	adc	r16, r26
    3984:	1b 1f       	adc	r17, r27
            break;
        default:
            return 0;
    }

    if(new_pos > fd->dir_entry.file_size
    3986:	8f a1       	ldd	r24, Y+39	; 0x27
    3988:	98 a5       	ldd	r25, Y+40	; 0x28
    398a:	a9 a5       	ldd	r26, Y+41	; 0x29
    398c:	ba a5       	ldd	r27, Y+42	; 0x2a
    398e:	8e 15       	cp	r24, r14
    3990:	9f 05       	cpc	r25, r15
    3992:	a0 07       	cpc	r26, r16
    3994:	b1 07       	cpc	r27, r17
    3996:	38 f4       	brcc	.+14     	; 0x39a6 <fat_seek_file+0x8a>
    3998:	ce 01       	movw	r24, r28
    399a:	b8 01       	movw	r22, r16
    399c:	a7 01       	movw	r20, r14
    399e:	0e 94 23 1b 	call	0x3646	; 0x3646 <fat_resize_file>
    39a2:	88 23       	and	r24, r24
    39a4:	79 f0       	breq	.+30     	; 0x39c4 <fat_seek_file+0xa8>
       && !fat_resize_file(fd, new_pos)
#endif
       )
        return 0;

    fd->pos = new_pos;
    39a6:	ef a6       	std	Y+47, r14	; 0x2f
    39a8:	f8 aa       	std	Y+48, r15	; 0x30
    39aa:	09 ab       	std	Y+49, r16	; 0x31
    39ac:	1a ab       	std	Y+50, r17	; 0x32
    fd->pos_cluster = 0;
    39ae:	1b aa       	std	Y+51, r1	; 0x33
    39b0:	1c aa       	std	Y+52, r1	; 0x34
    39b2:	1d aa       	std	Y+53, r1	; 0x35
    39b4:	1e aa       	std	Y+54, r1	; 0x36

    *offset = (int32_t) new_pos;
    39b6:	f6 01       	movw	r30, r12
    39b8:	e0 82       	st	Z, r14
    39ba:	f1 82       	std	Z+1, r15	; 0x01
    39bc:	02 83       	std	Z+2, r16	; 0x02
    39be:	13 83       	std	Z+3, r17	; 0x03
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	01 c0       	rjmp	.+2      	; 0x39c6 <fat_seek_file+0xaa>
    return 1;
    39c4:	80 e0       	ldi	r24, 0x00	; 0
}
    39c6:	df 91       	pop	r29
    39c8:	cf 91       	pop	r28
    39ca:	1f 91       	pop	r17
    39cc:	0f 91       	pop	r16
    39ce:	ff 90       	pop	r15
    39d0:	ef 90       	pop	r14
    39d2:	df 90       	pop	r13
    39d4:	cf 90       	pop	r12
    39d6:	08 95       	ret

000039d8 <fat_write_file>:
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written, 0 on disk full, or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    39d8:	2f 92       	push	r2
    39da:	3f 92       	push	r3
    39dc:	4f 92       	push	r4
    39de:	5f 92       	push	r5
    39e0:	6f 92       	push	r6
    39e2:	7f 92       	push	r7
    39e4:	8f 92       	push	r8
    39e6:	9f 92       	push	r9
    39e8:	af 92       	push	r10
    39ea:	bf 92       	push	r11
    39ec:	cf 92       	push	r12
    39ee:	df 92       	push	r13
    39f0:	ef 92       	push	r14
    39f2:	ff 92       	push	r15
    39f4:	0f 93       	push	r16
    39f6:	1f 93       	push	r17
    39f8:	df 93       	push	r29
    39fa:	cf 93       	push	r28
    39fc:	cd b7       	in	r28, 0x3d	; 61
    39fe:	de b7       	in	r29, 0x3e	; 62
    3a00:	28 97       	sbiw	r28, 0x08	; 8
    3a02:	0f b6       	in	r0, 0x3f	; 63
    3a04:	f8 94       	cli
    3a06:	de bf       	out	0x3e, r29	; 62
    3a08:	0f be       	out	0x3f, r0	; 63
    3a0a:	cd bf       	out	0x3d, r28	; 61
    3a0c:	98 87       	std	Y+8, r25	; 0x08
    3a0e:	8f 83       	std	Y+7, r24	; 0x07
    3a10:	7c 83       	std	Y+4, r23	; 0x04
    3a12:	6b 83       	std	Y+3, r22	; 0x03
    3a14:	5e 83       	std	Y+6, r21	; 0x06
    3a16:	4d 83       	std	Y+5, r20	; 0x05
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    3a18:	00 97       	sbiw	r24, 0x00	; 0
    3a1a:	09 f4       	brne	.+2      	; 0x3a1e <fat_write_file+0x46>
    3a1c:	7d c1       	rjmp	.+762    	; 0x3d18 <fat_write_file+0x340>
    3a1e:	67 2b       	or	r22, r23
    3a20:	09 f4       	brne	.+2      	; 0x3a24 <fat_write_file+0x4c>
    3a22:	7a c1       	rjmp	.+756    	; 0x3d18 <fat_write_file+0x340>
    3a24:	45 2b       	or	r20, r21
    3a26:	09 f4       	brne	.+2      	; 0x3a2a <fat_write_file+0x52>
    3a28:	77 c1       	rjmp	.+750    	; 0x3d18 <fat_write_file+0x340>
        return -1;
    if(fd->pos > fd->dir_entry.file_size)
    3a2a:	dc 01       	movw	r26, r24
    3a2c:	9f 96       	adiw	r26, 0x2f	; 47
    3a2e:	6d 90       	ld	r6, X+
    3a30:	7d 90       	ld	r7, X+
    3a32:	8d 90       	ld	r8, X+
    3a34:	9c 90       	ld	r9, X
    3a36:	d2 97       	sbiw	r26, 0x32	; 50
    3a38:	fc 01       	movw	r30, r24
    3a3a:	87 a1       	ldd	r24, Z+39	; 0x27
    3a3c:	90 a5       	ldd	r25, Z+40	; 0x28
    3a3e:	a1 a5       	ldd	r26, Z+41	; 0x29
    3a40:	b2 a5       	ldd	r27, Z+42	; 0x2a
    3a42:	86 15       	cp	r24, r6
    3a44:	97 05       	cpc	r25, r7
    3a46:	a8 05       	cpc	r26, r8
    3a48:	b9 05       	cpc	r27, r9
    3a4a:	08 f4       	brcc	.+2      	; 0x3a4e <fat_write_file+0x76>
    3a4c:	65 c1       	rjmp	.+714    	; 0x3d18 <fat_write_file+0x340>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    3a4e:	01 90       	ld	r0, Z+
    3a50:	f0 81       	ld	r31, Z
    3a52:	e0 2d       	mov	r30, r0
    3a54:	20 89       	ldd	r18, Z+16	; 0x10
    3a56:	31 89       	ldd	r19, Z+17	; 0x11
    3a58:	3a 83       	std	Y+2, r19	; 0x02
    3a5a:	29 83       	std	Y+1, r18	; 0x01
    cluster_t cluster_num = fd->pos_cluster;
    3a5c:	af 81       	ldd	r26, Y+7	; 0x07
    3a5e:	b8 85       	ldd	r27, Y+8	; 0x08
    3a60:	d3 96       	adiw	r26, 0x33	; 51
    3a62:	ed 90       	ld	r14, X+
    3a64:	fd 90       	ld	r15, X+
    3a66:	0d 91       	ld	r16, X+
    3a68:	1c 91       	ld	r17, X
    3a6a:	d6 97       	sbiw	r26, 0x36	; 54
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start writing */
    if(!cluster_num)
    3a6c:	e1 14       	cp	r14, r1
    3a6e:	f1 04       	cpc	r15, r1
    3a70:	01 05       	cpc	r16, r1
    3a72:	11 05       	cpc	r17, r1
    3a74:	09 f0       	breq	.+2      	; 0x3a78 <fat_write_file+0xa0>
    3a76:	73 c0       	rjmp	.+230    	; 0x3b5e <fat_write_file+0x186>
    {
        cluster_num = fd->dir_entry.cluster;
    3a78:	93 96       	adiw	r26, 0x23	; 35
    3a7a:	ed 90       	ld	r14, X+
    3a7c:	fd 90       	ld	r15, X+
    3a7e:	0d 91       	ld	r16, X+
    3a80:	1c 91       	ld	r17, X
    3a82:	96 97       	sbiw	r26, 0x26	; 38
        
        if(!cluster_num)
    3a84:	e1 14       	cp	r14, r1
    3a86:	f1 04       	cpc	r15, r1
    3a88:	01 05       	cpc	r16, r1
    3a8a:	11 05       	cpc	r17, r1
    3a8c:	f9 f4       	brne	.+62     	; 0x3acc <fat_write_file+0xf4>
        {
            if(!fd->pos)
    3a8e:	61 14       	cp	r6, r1
    3a90:	71 04       	cpc	r7, r1
    3a92:	81 04       	cpc	r8, r1
    3a94:	91 04       	cpc	r9, r1
    3a96:	09 f0       	breq	.+2      	; 0x3a9a <fat_write_file+0xc2>
    3a98:	3f c1       	rjmp	.+638    	; 0x3d18 <fat_write_file+0x340>
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
    3a9a:	cf 01       	movw	r24, r30
    3a9c:	40 e0       	ldi	r20, 0x00	; 0
    3a9e:	50 e0       	ldi	r21, 0x00	; 0
    3aa0:	60 e0       	ldi	r22, 0x00	; 0
    3aa2:	70 e0       	ldi	r23, 0x00	; 0
    3aa4:	01 e0       	ldi	r16, 0x01	; 1
    3aa6:	10 e0       	ldi	r17, 0x00	; 0
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <fat_append_clusters>
    3ab0:	7b 01       	movw	r14, r22
    3ab2:	8c 01       	movw	r16, r24
    3ab4:	ef 81       	ldd	r30, Y+7	; 0x07
    3ab6:	f8 85       	ldd	r31, Y+8	; 0x08
    3ab8:	63 a3       	std	Z+35, r22	; 0x23
    3aba:	74 a3       	std	Z+36, r23	; 0x24
    3abc:	85 a3       	std	Z+37, r24	; 0x25
    3abe:	96 a3       	std	Z+38, r25	; 0x26
                if(!cluster_num)
    3ac0:	61 15       	cp	r22, r1
    3ac2:	71 05       	cpc	r23, r1
    3ac4:	81 05       	cpc	r24, r1
    3ac6:	91 05       	cpc	r25, r1
    3ac8:	09 f4       	brne	.+2      	; 0x3acc <fat_write_file+0xf4>
    3aca:	26 c1       	rjmp	.+588    	; 0x3d18 <fat_write_file+0x340>
            {
                return -1;
            }
        }

        if(fd->pos)
    3acc:	af 81       	ldd	r26, Y+7	; 0x07
    3ace:	b8 85       	ldd	r27, Y+8	; 0x08
    3ad0:	9f 96       	adiw	r26, 0x2f	; 47
    3ad2:	ad 90       	ld	r10, X+
    3ad4:	bd 90       	ld	r11, X+
    3ad6:	cd 90       	ld	r12, X+
    3ad8:	dc 90       	ld	r13, X
    3ada:	d2 97       	sbiw	r26, 0x32	; 50
    3adc:	a1 14       	cp	r10, r1
    3ade:	b1 04       	cpc	r11, r1
    3ae0:	c1 04       	cpc	r12, r1
    3ae2:	d1 04       	cpc	r13, r1
    3ae4:	91 f5       	brne	.+100    	; 0x3b4a <fat_write_file+0x172>
    3ae6:	3b c0       	rjmp	.+118    	; 0x3b5e <fat_write_file+0x186>
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
    3ae8:	a2 18       	sub	r10, r2
    3aea:	b3 08       	sbc	r11, r3
    3aec:	c4 08       	sbc	r12, r4
    3aee:	d5 08       	sbc	r13, r5
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    3af0:	ef 81       	ldd	r30, Y+7	; 0x07
    3af2:	f8 85       	ldd	r31, Y+8	; 0x08
    3af4:	80 81       	ld	r24, Z
    3af6:	91 81       	ldd	r25, Z+1	; 0x01
    3af8:	b8 01       	movw	r22, r16
    3afa:	a7 01       	movw	r20, r14
    3afc:	0e 94 b2 0c 	call	0x1964	; 0x1964 <fat_get_next_cluster>
                if(!cluster_num_next && pos == 0)
    3b00:	61 15       	cp	r22, r1
    3b02:	71 05       	cpc	r23, r1
    3b04:	81 05       	cpc	r24, r1
    3b06:	91 05       	cpc	r25, r1
    3b08:	19 f0       	breq	.+6      	; 0x3b10 <fat_write_file+0x138>
    3b0a:	7b 01       	movw	r14, r22
    3b0c:	8c 01       	movw	r16, r24
    3b0e:	22 c0       	rjmp	.+68     	; 0x3b54 <fat_write_file+0x17c>
    3b10:	a1 14       	cp	r10, r1
    3b12:	b1 04       	cpc	r11, r1
    3b14:	c1 04       	cpc	r12, r1
    3b16:	d1 04       	cpc	r13, r1
    3b18:	09 f0       	breq	.+2      	; 0x3b1c <fat_write_file+0x144>
    3b1a:	fe c0       	rjmp	.+508    	; 0x3d18 <fat_write_file+0x340>
                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    3b1c:	af 81       	ldd	r26, Y+7	; 0x07
    3b1e:	b8 85       	ldd	r27, Y+8	; 0x08
    3b20:	8d 91       	ld	r24, X+
    3b22:	9c 91       	ld	r25, X
    3b24:	b8 01       	movw	r22, r16
    3b26:	a7 01       	movw	r20, r14
    3b28:	01 e0       	ldi	r16, 0x01	; 1
    3b2a:	10 e0       	ldi	r17, 0x00	; 0
    3b2c:	20 e0       	ldi	r18, 0x00	; 0
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <fat_append_clusters>
    3b34:	ab 01       	movw	r20, r22
    3b36:	bc 01       	movw	r22, r24
                if(!cluster_num_next)
    3b38:	41 15       	cp	r20, r1
    3b3a:	51 05       	cpc	r21, r1
    3b3c:	61 05       	cpc	r22, r1
    3b3e:	71 05       	cpc	r23, r1
    3b40:	09 f4       	brne	.+2      	; 0x3b44 <fat_write_file+0x16c>
    3b42:	ea c0       	rjmp	.+468    	; 0x3d18 <fat_write_file+0x340>
    3b44:	7a 01       	movw	r14, r20
    3b46:	8b 01       	movw	r16, r22
    3b48:	05 c0       	rjmp	.+10     	; 0x3b54 <fat_write_file+0x17c>

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
    3b4a:	e9 81       	ldd	r30, Y+1	; 0x01
    3b4c:	fa 81       	ldd	r31, Y+2	; 0x02
    3b4e:	1f 01       	movw	r2, r30
    3b50:	44 24       	eor	r4, r4
    3b52:	55 24       	eor	r5, r5
    3b54:	a2 14       	cp	r10, r2
    3b56:	b3 04       	cpc	r11, r3
    3b58:	c4 04       	cpc	r12, r4
    3b5a:	d5 04       	cpc	r13, r5
    3b5c:	28 f6       	brcc	.-118    	; 0x3ae8 <fat_write_file+0x110>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    3b5e:	29 81       	ldd	r18, Y+1	; 0x01
    3b60:	3a 81       	ldd	r19, Y+2	; 0x02
    3b62:	21 50       	subi	r18, 0x01	; 1
    3b64:	30 40       	sbci	r19, 0x00	; 0
    3b66:	62 22       	and	r6, r18
    3b68:	73 22       	and	r7, r19
    3b6a:	2f 5f       	subi	r18, 0xFF	; 255
    3b6c:	3f 4f       	sbci	r19, 0xFF	; 255
    3b6e:	3a 83       	std	Y+2, r19	; 0x02
    3b70:	29 83       	std	Y+1, r18	; 0x01
    3b72:	8d 80       	ldd	r8, Y+5	; 0x05
    3b74:	9e 80       	ldd	r9, Y+6	; 0x06
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    3b76:	af 81       	ldd	r26, Y+7	; 0x07
    3b78:	b8 85       	ldd	r27, Y+8	; 0x08
    3b7a:	ad 90       	ld	r10, X+
    3b7c:	bc 90       	ld	r11, X
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    3b7e:	a1 14       	cp	r10, r1
    3b80:	b1 04       	cpc	r11, r1
    3b82:	f9 f0       	breq	.+62     	; 0x3bc2 <fat_write_file+0x1ea>
    3b84:	b2 e0       	ldi	r27, 0x02	; 2
    3b86:	eb 16       	cp	r14, r27
    3b88:	f1 04       	cpc	r15, r1
    3b8a:	01 05       	cpc	r16, r1
    3b8c:	11 05       	cpc	r17, r1
    3b8e:	c8 f0       	brcs	.+50     	; 0x3bc2 <fat_write_file+0x1ea>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    3b90:	c8 01       	movw	r24, r16
    3b92:	b7 01       	movw	r22, r14
    3b94:	62 50       	subi	r22, 0x02	; 2
    3b96:	70 40       	sbci	r23, 0x00	; 0
    3b98:	80 40       	sbci	r24, 0x00	; 0
    3b9a:	90 40       	sbci	r25, 0x00	; 0
    3b9c:	f5 01       	movw	r30, r10
    3b9e:	20 89       	ldd	r18, Z+16	; 0x10
    3ba0:	31 89       	ldd	r19, Z+17	; 0x11
    3ba2:	40 e0       	ldi	r20, 0x00	; 0
    3ba4:	50 e0       	ldi	r21, 0x00	; 0
    3ba6:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__mulsi3>
    3baa:	9b 01       	movw	r18, r22
    3bac:	ac 01       	movw	r20, r24
    3bae:	f5 01       	movw	r30, r10
    3bb0:	82 89       	ldd	r24, Z+18	; 0x12
    3bb2:	93 89       	ldd	r25, Z+19	; 0x13
    3bb4:	a4 89       	ldd	r26, Z+20	; 0x14
    3bb6:	b5 89       	ldd	r27, Z+21	; 0x15
    3bb8:	28 0f       	add	r18, r24
    3bba:	39 1f       	adc	r19, r25
    3bbc:	4a 1f       	adc	r20, r26
    3bbe:	5b 1f       	adc	r21, r27
    3bc0:	04 c0       	rjmp	.+8      	; 0x3bca <fat_write_file+0x1f2>
    3bc2:	20 e0       	ldi	r18, 0x00	; 0
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	40 e0       	ldi	r20, 0x00	; 0
    3bc8:	50 e0       	ldi	r21, 0x00	; 0
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
        uint16_t write_length = cluster_size - first_cluster_offset;
    3bca:	c9 80       	ldd	r12, Y+1	; 0x01
    3bcc:	da 80       	ldd	r13, Y+2	; 0x02
    3bce:	c6 18       	sub	r12, r6
    3bd0:	d7 08       	sbc	r13, r7
    3bd2:	8c 14       	cp	r8, r12
    3bd4:	9d 04       	cpc	r9, r13
    3bd6:	08 f4       	brcc	.+2      	; 0x3bda <fat_write_file+0x202>
    3bd8:	64 01       	movw	r12, r8
        if(write_length > buffer_left)
            write_length = buffer_left;

        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
    3bda:	d5 01       	movw	r26, r10
    3bdc:	ed 91       	ld	r30, X+
    3bde:	fc 91       	ld	r31, X
    3be0:	c3 01       	movw	r24, r6
    3be2:	a0 e0       	ldi	r26, 0x00	; 0
    3be4:	b0 e0       	ldi	r27, 0x00	; 0
    3be6:	28 0f       	add	r18, r24
    3be8:	39 1f       	adc	r19, r25
    3bea:	4a 1f       	adc	r20, r26
    3bec:	5b 1f       	adc	r21, r27
    3bee:	04 80       	ldd	r0, Z+4	; 0x04
    3bf0:	f5 81       	ldd	r31, Z+5	; 0x05
    3bf2:	e0 2d       	mov	r30, r0
    3bf4:	ca 01       	movw	r24, r20
    3bf6:	b9 01       	movw	r22, r18
    3bf8:	4b 81       	ldd	r20, Y+3	; 0x03
    3bfa:	5c 81       	ldd	r21, Y+4	; 0x04
    3bfc:	96 01       	movw	r18, r12
    3bfe:	09 95       	icall
    3c00:	88 23       	and	r24, r24
    3c02:	09 f4       	brne	.+2      	; 0x3c06 <fat_write_file+0x22e>
    3c04:	5d c0       	rjmp	.+186    	; 0x3cc0 <fat_write_file+0x2e8>
            break;

        /* calculate new file position */
        buffer += write_length;
        buffer_left -= write_length;
    3c06:	8c 18       	sub	r8, r12
    3c08:	9d 08       	sbc	r9, r13
        fd->pos += write_length;
    3c0a:	c6 01       	movw	r24, r12
    3c0c:	a0 e0       	ldi	r26, 0x00	; 0
    3c0e:	b0 e0       	ldi	r27, 0x00	; 0
    3c10:	ef 81       	ldd	r30, Y+7	; 0x07
    3c12:	f8 85       	ldd	r31, Y+8	; 0x08
    3c14:	27 a5       	ldd	r18, Z+47	; 0x2f
    3c16:	30 a9       	ldd	r19, Z+48	; 0x30
    3c18:	41 a9       	ldd	r20, Z+49	; 0x31
    3c1a:	52 a9       	ldd	r21, Z+50	; 0x32
    3c1c:	28 0f       	add	r18, r24
    3c1e:	39 1f       	adc	r19, r25
    3c20:	4a 1f       	adc	r20, r26
    3c22:	5b 1f       	adc	r21, r27
    3c24:	df 01       	movw	r26, r30
    3c26:	27 a7       	std	Z+47, r18	; 0x2f
    3c28:	30 ab       	std	Z+48, r19	; 0x30
    3c2a:	41 ab       	std	Z+49, r20	; 0x31
    3c2c:	52 ab       	std	Z+50, r21	; 0x32

        if(first_cluster_offset + write_length >= cluster_size)
    3c2e:	c6 01       	movw	r24, r12
    3c30:	86 0d       	add	r24, r6
    3c32:	97 1d       	adc	r25, r7
    3c34:	e9 81       	ldd	r30, Y+1	; 0x01
    3c36:	fa 81       	ldd	r31, Y+2	; 0x02
    3c38:	8e 17       	cp	r24, r30
    3c3a:	9f 07       	cpc	r25, r31
    3c3c:	78 f1       	brcs	.+94     	; 0x3c9c <fat_write_file+0x2c4>
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    3c3e:	8d 91       	ld	r24, X+
    3c40:	9c 91       	ld	r25, X
    3c42:	b8 01       	movw	r22, r16
    3c44:	a7 01       	movw	r20, r14
    3c46:	0e 94 b2 0c 	call	0x1964	; 0x1964 <fat_get_next_cluster>
            if(!cluster_num_next && buffer_left > 0)
    3c4a:	61 15       	cp	r22, r1
    3c4c:	71 05       	cpc	r23, r1
    3c4e:	81 05       	cpc	r24, r1
    3c50:	91 05       	cpc	r25, r1
    3c52:	19 f0       	breq	.+6      	; 0x3c5a <fat_write_file+0x282>
    3c54:	7b 01       	movw	r14, r22
    3c56:	8c 01       	movw	r16, r24
    3c58:	1f c0       	rjmp	.+62     	; 0x3c98 <fat_write_file+0x2c0>
    3c5a:	81 14       	cp	r8, r1
    3c5c:	91 04       	cpc	r9, r1
    3c5e:	99 f0       	breq	.+38     	; 0x3c86 <fat_write_file+0x2ae>
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    3c60:	af 81       	ldd	r26, Y+7	; 0x07
    3c62:	b8 85       	ldd	r27, Y+8	; 0x08
    3c64:	8d 91       	ld	r24, X+
    3c66:	9c 91       	ld	r25, X
    3c68:	b8 01       	movw	r22, r16
    3c6a:	a7 01       	movw	r20, r14
    3c6c:	01 e0       	ldi	r16, 0x01	; 1
    3c6e:	10 e0       	ldi	r17, 0x00	; 0
    3c70:	20 e0       	ldi	r18, 0x00	; 0
    3c72:	30 e0       	ldi	r19, 0x00	; 0
    3c74:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <fat_append_clusters>
    3c78:	ab 01       	movw	r20, r22
    3c7a:	bc 01       	movw	r22, r24
            if(!cluster_num_next)
    3c7c:	41 15       	cp	r20, r1
    3c7e:	51 05       	cpc	r21, r1
    3c80:	61 05       	cpc	r22, r1
    3c82:	71 05       	cpc	r23, r1
    3c84:	39 f4       	brne	.+14     	; 0x3c94 <fat_write_file+0x2bc>
            {
                fd->pos_cluster = 0;
    3c86:	ef 81       	ldd	r30, Y+7	; 0x07
    3c88:	f8 85       	ldd	r31, Y+8	; 0x08
    3c8a:	13 aa       	std	Z+51, r1	; 0x33
    3c8c:	14 aa       	std	Z+52, r1	; 0x34
    3c8e:	15 aa       	std	Z+53, r1	; 0x35
    3c90:	16 aa       	std	Z+54, r1	; 0x36
    3c92:	16 c0       	rjmp	.+44     	; 0x3cc0 <fat_write_file+0x2e8>
                break;
    3c94:	7a 01       	movw	r14, r20
    3c96:	8b 01       	movw	r16, r22
    3c98:	66 24       	eor	r6, r6
    3c9a:	77 24       	eor	r7, r7

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
        }

        fd->pos_cluster = cluster_num;
    3c9c:	af 81       	ldd	r26, Y+7	; 0x07
    3c9e:	b8 85       	ldd	r27, Y+8	; 0x08
    3ca0:	d3 96       	adiw	r26, 0x33	; 51
    3ca2:	ed 92       	st	X+, r14
    3ca4:	fd 92       	st	X+, r15
    3ca6:	0d 93       	st	X+, r16
    3ca8:	1c 93       	st	X, r17
    3caa:	d6 97       	sbiw	r26, 0x36	; 54

    } while(buffer_left > 0); /* check if we are done */
    3cac:	81 14       	cp	r8, r1
    3cae:	91 04       	cpc	r9, r1
    3cb0:	39 f0       	breq	.+14     	; 0x3cc0 <fat_write_file+0x2e8>
        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
            break;

        /* calculate new file position */
        buffer += write_length;
    3cb2:	eb 81       	ldd	r30, Y+3	; 0x03
    3cb4:	fc 81       	ldd	r31, Y+4	; 0x04
    3cb6:	ec 0d       	add	r30, r12
    3cb8:	fd 1d       	adc	r31, r13
    3cba:	fc 83       	std	Y+4, r31	; 0x04
    3cbc:	eb 83       	std	Y+3, r30	; 0x03
    3cbe:	5b cf       	rjmp	.-330    	; 0x3b76 <fat_write_file+0x19e>
        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    /* update directory entry */
    if(fd->pos > fd->dir_entry.file_size)
    3cc0:	ef 81       	ldd	r30, Y+7	; 0x07
    3cc2:	f8 85       	ldd	r31, Y+8	; 0x08
    3cc4:	87 a5       	ldd	r24, Z+47	; 0x2f
    3cc6:	90 a9       	ldd	r25, Z+48	; 0x30
    3cc8:	a1 a9       	ldd	r26, Z+49	; 0x31
    3cca:	b2 a9       	ldd	r27, Z+50	; 0x32
    3ccc:	e7 a0       	ldd	r14, Z+39	; 0x27
    3cce:	f0 a4       	ldd	r15, Z+40	; 0x28
    3cd0:	01 a5       	ldd	r16, Z+41	; 0x29
    3cd2:	12 a5       	ldd	r17, Z+42	; 0x2a
    3cd4:	e8 16       	cp	r14, r24
    3cd6:	f9 06       	cpc	r15, r25
    3cd8:	0a 07       	cpc	r16, r26
    3cda:	1b 07       	cpc	r17, r27
    3cdc:	c0 f4       	brcc	.+48     	; 0x3d0e <fat_write_file+0x336>
    {
        uint32_t size_old = fd->dir_entry.file_size;

        /* update file size */
        fd->dir_entry.file_size = fd->pos;
    3cde:	87 a3       	std	Z+39, r24	; 0x27
    3ce0:	90 a7       	std	Z+40, r25	; 0x28
    3ce2:	a1 a7       	std	Z+41, r26	; 0x29
    3ce4:	b2 a7       	std	Z+42, r27	; 0x2a
        /* write directory entry */
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    3ce6:	81 91       	ld	r24, Z+
    3ce8:	91 91       	ld	r25, Z+
    3cea:	bf 01       	movw	r22, r30
    3cec:	0e 94 86 18 	call	0x310c	; 0x310c <fat_write_dir_entry>
    3cf0:	88 23       	and	r24, r24
    3cf2:	69 f4       	brne	.+26     	; 0x3d0e <fat_write_file+0x336>
        {
            /* We do not return an error here since we actually wrote
             * some data to disk. So we calculate the amount of data
             * we wrote to disk and which lies within the old file size.
             */
            buffer_left = fd->pos - size_old;
    3cf4:	af 81       	ldd	r26, Y+7	; 0x07
    3cf6:	b8 85       	ldd	r27, Y+8	; 0x08
    3cf8:	9f 96       	adiw	r26, 0x2f	; 47
    3cfa:	8d 90       	ld	r8, X+
    3cfc:	9c 90       	ld	r9, X
    3cfe:	d0 97       	sbiw	r26, 0x30	; 48
    3d00:	8e 18       	sub	r8, r14
    3d02:	9f 08       	sbc	r9, r15
            fd->pos = size_old;
    3d04:	fd 01       	movw	r30, r26
    3d06:	e7 a6       	std	Z+47, r14	; 0x2f
    3d08:	f0 aa       	std	Z+48, r15	; 0x30
    3d0a:	01 ab       	std	Z+49, r16	; 0x31
    3d0c:	12 ab       	std	Z+50, r17	; 0x32
        }
    }

    return buffer_len - buffer_left;
    3d0e:	4d 81       	ldd	r20, Y+5	; 0x05
    3d10:	5e 81       	ldd	r21, Y+6	; 0x06
    3d12:	48 19       	sub	r20, r8
    3d14:	59 09       	sbc	r21, r9
    3d16:	02 c0       	rjmp	.+4      	; 0x3d1c <fat_write_file+0x344>
    3d18:	4f ef       	ldi	r20, 0xFF	; 255
    3d1a:	5f ef       	ldi	r21, 0xFF	; 255
}
    3d1c:	ca 01       	movw	r24, r20
    3d1e:	28 96       	adiw	r28, 0x08	; 8
    3d20:	0f b6       	in	r0, 0x3f	; 63
    3d22:	f8 94       	cli
    3d24:	de bf       	out	0x3e, r29	; 62
    3d26:	0f be       	out	0x3f, r0	; 63
    3d28:	cd bf       	out	0x3d, r28	; 61
    3d2a:	cf 91       	pop	r28
    3d2c:	df 91       	pop	r29
    3d2e:	1f 91       	pop	r17
    3d30:	0f 91       	pop	r16
    3d32:	ff 90       	pop	r15
    3d34:	ef 90       	pop	r14
    3d36:	df 90       	pop	r13
    3d38:	cf 90       	pop	r12
    3d3a:	bf 90       	pop	r11
    3d3c:	af 90       	pop	r10
    3d3e:	9f 90       	pop	r9
    3d40:	8f 90       	pop	r8
    3d42:	7f 90       	pop	r7
    3d44:	6f 90       	pop	r6
    3d46:	5f 90       	pop	r5
    3d48:	4f 90       	pop	r4
    3d4a:	3f 90       	pop	r3
    3d4c:	2f 90       	pop	r2
    3d4e:	08 95       	ret

00003d50 <fat_open_dir>:
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    3d50:	cf 93       	push	r28
    3d52:	df 93       	push	r29
    3d54:	ac 01       	movw	r20, r24
    3d56:	db 01       	movw	r26, r22
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    3d58:	00 97       	sbiw	r24, 0x00	; 0
    3d5a:	a9 f1       	breq	.+106    	; 0x3dc6 <fat_open_dir+0x76>
    3d5c:	61 15       	cp	r22, r1
    3d5e:	71 05       	cpc	r23, r1
    3d60:	91 f1       	breq	.+100    	; 0x3dc6 <fat_open_dir+0x76>
    3d62:	90 96       	adiw	r26, 0x20	; 32
    3d64:	8c 91       	ld	r24, X
    3d66:	90 97       	sbiw	r26, 0x20	; 32
    3d68:	84 ff       	sbrs	r24, 4
    3d6a:	2d c0       	rjmp	.+90     	; 0x3dc6 <fat_open_dir+0x76>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    3d6c:	80 91 9d 01 	lds	r24, 0x019D
    3d70:	90 91 9e 01 	lds	r25, 0x019E
    3d74:	89 2b       	or	r24, r25
    3d76:	19 f4       	brne	.+6      	; 0x3d7e <fat_open_dir+0x2e>
    3d78:	ed e9       	ldi	r30, 0x9D	; 157
    3d7a:	f1 e0       	ldi	r31, 0x01	; 1
    3d7c:	08 c0       	rjmp	.+16     	; 0x3d8e <fat_open_dir+0x3e>
    3d7e:	80 91 d2 01 	lds	r24, 0x01D2
    3d82:	90 91 d3 01 	lds	r25, 0x01D3
    3d86:	89 2b       	or	r24, r25
    3d88:	f1 f4       	brne	.+60     	; 0x3dc6 <fat_open_dir+0x76>
    3d8a:	e2 ed       	ldi	r30, 0xD2	; 210
    3d8c:	f1 e0       	ldi	r31, 0x01	; 1
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
    3d8e:	9f 01       	movw	r18, r30
    3d90:	2e 5f       	subi	r18, 0xFE	; 254
    3d92:	3f 4f       	sbci	r19, 0xFF	; 255
    3d94:	bd 01       	movw	r22, r26
    3d96:	8d e2       	ldi	r24, 0x2D	; 45
    3d98:	eb 01       	movw	r28, r22
    3d9a:	09 90       	ld	r0, Y+
    3d9c:	be 01       	movw	r22, r28
    3d9e:	e9 01       	movw	r28, r18
    3da0:	09 92       	st	Y+, r0
    3da2:	9e 01       	movw	r18, r28
    3da4:	81 50       	subi	r24, 0x01	; 1
    3da6:	c1 f7       	brne	.-16     	; 0x3d98 <fat_open_dir+0x48>
    dd->fs = fs;
    3da8:	51 83       	std	Z+1, r21	; 0x01
    3daa:	40 83       	st	Z, r20
    dd->entry_cluster = dir_entry->cluster;
    3dac:	91 96       	adiw	r26, 0x21	; 33
    3dae:	8d 91       	ld	r24, X+
    3db0:	9d 91       	ld	r25, X+
    3db2:	0d 90       	ld	r0, X+
    3db4:	bc 91       	ld	r27, X
    3db6:	a0 2d       	mov	r26, r0
    3db8:	87 a7       	std	Z+47, r24	; 0x2f
    3dba:	90 ab       	std	Z+48, r25	; 0x30
    3dbc:	a1 ab       	std	Z+49, r26	; 0x31
    3dbe:	b2 ab       	std	Z+50, r27	; 0x32
    dd->entry_offset = 0;
    3dc0:	14 aa       	std	Z+52, r1	; 0x34
    3dc2:	13 aa       	std	Z+51, r1	; 0x33
    3dc4:	02 c0       	rjmp	.+4      	; 0x3dca <fat_open_dir+0x7a>

    return dd;
    3dc6:	e0 e0       	ldi	r30, 0x00	; 0
    3dc8:	f0 e0       	ldi	r31, 0x00	; 0
}
    3dca:	cf 01       	movw	r24, r30
    3dcc:	df 91       	pop	r29
    3dce:	cf 91       	pop	r28
    3dd0:	08 95       	ret

00003dd2 <fat_open_file>:
 * \param[in] dir_entry The directory entry of the file to open.
 * \returns The file handle, or 0 on failure.
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    3dd2:	cf 93       	push	r28
    3dd4:	df 93       	push	r29
    3dd6:	9c 01       	movw	r18, r24
    3dd8:	fb 01       	movw	r30, r22
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
    3dda:	00 97       	sbiw	r24, 0x00	; 0
    3ddc:	31 f0       	breq	.+12     	; 0x3dea <fat_open_file+0x18>
    3dde:	61 15       	cp	r22, r1
    3de0:	71 05       	cpc	r23, r1
    3de2:	19 f0       	breq	.+6      	; 0x3dea <fat_open_file+0x18>
    3de4:	80 a1       	ldd	r24, Z+32	; 0x20
    3de6:	84 ff       	sbrs	r24, 4
    3de8:	29 c0       	rjmp	.+82     	; 0x3e3c <fat_open_file+0x6a>
    3dea:	20 e0       	ldi	r18, 0x00	; 0
    3dec:	30 e0       	ldi	r19, 0x00	; 0
    fd->fs = fs;
    fd->pos = 0;
    fd->pos_cluster = dir_entry->cluster;

    return fd;
}
    3dee:	c9 01       	movw	r24, r18
    3df0:	df 91       	pop	r29
    3df2:	cf 91       	pop	r28
    3df4:	08 95       	ret
    }
    if(i >= FAT_FILE_COUNT)
        return 0;
#endif
    
    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
    3df6:	c8 e6       	ldi	r28, 0x68	; 104
    3df8:	d1 e0       	ldi	r29, 0x01	; 1
    3dfa:	df 01       	movw	r26, r30
    3dfc:	8d e2       	ldi	r24, 0x2D	; 45
    3dfe:	0d 90       	ld	r0, X+
    3e00:	09 92       	st	Y+, r0
    3e02:	81 50       	subi	r24, 0x01	; 1
    3e04:	e1 f7       	brne	.-8      	; 0x3dfe <fat_open_file+0x2c>
    fd->fs = fs;
    3e06:	30 93 67 01 	sts	0x0167, r19
    3e0a:	20 93 66 01 	sts	0x0166, r18
    fd->pos = 0;
    3e0e:	10 92 95 01 	sts	0x0195, r1
    3e12:	10 92 96 01 	sts	0x0196, r1
    3e16:	10 92 97 01 	sts	0x0197, r1
    3e1a:	10 92 98 01 	sts	0x0198, r1
    fd->pos_cluster = dir_entry->cluster;
    3e1e:	81 a1       	ldd	r24, Z+33	; 0x21
    3e20:	92 a1       	ldd	r25, Z+34	; 0x22
    3e22:	a3 a1       	ldd	r26, Z+35	; 0x23
    3e24:	b4 a1       	ldd	r27, Z+36	; 0x24
    3e26:	80 93 99 01 	sts	0x0199, r24
    3e2a:	90 93 9a 01 	sts	0x019A, r25
    3e2e:	a0 93 9b 01 	sts	0x019B, r26
    3e32:	b0 93 9c 01 	sts	0x019C, r27
    3e36:	26 e6       	ldi	r18, 0x66	; 102
    3e38:	31 e0       	ldi	r19, 0x01	; 1
    3e3a:	d9 cf       	rjmp	.-78     	; 0x3dee <fat_open_file+0x1c>
#else
    struct fat_file_struct* fd = fat_file_handles;
    uint8_t i;
    for(i = 0; i < FAT_FILE_COUNT; ++i)
    {
        if(!fd->fs)
    3e3c:	80 91 66 01 	lds	r24, 0x0166
    3e40:	90 91 67 01 	lds	r25, 0x0167
    3e44:	89 2b       	or	r24, r25
    3e46:	89 f6       	brne	.-94     	; 0x3dea <fat_open_file+0x18>
    3e48:	d6 cf       	rjmp	.-84     	; 0x3df6 <fat_open_file+0x24>

00003e4a <fat_get_dir_entry_of_path>:
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    3e4a:	6f 92       	push	r6
    3e4c:	7f 92       	push	r7
    3e4e:	8f 92       	push	r8
    3e50:	9f 92       	push	r9
    3e52:	af 92       	push	r10
    3e54:	bf 92       	push	r11
    3e56:	cf 92       	push	r12
    3e58:	df 92       	push	r13
    3e5a:	ef 92       	push	r14
    3e5c:	ff 92       	push	r15
    3e5e:	0f 93       	push	r16
    3e60:	1f 93       	push	r17
    3e62:	cf 93       	push	r28
    3e64:	df 93       	push	r29
    3e66:	4c 01       	movw	r8, r24
    3e68:	eb 01       	movw	r28, r22
    3e6a:	7a 01       	movw	r14, r20
    if(!fs || !path || path[0] == '\0' || !dir_entry)
    3e6c:	00 97       	sbiw	r24, 0x00	; 0
    3e6e:	09 f4       	brne	.+2      	; 0x3e72 <fat_get_dir_entry_of_path+0x28>
    3e70:	67 c0       	rjmp	.+206    	; 0x3f40 <fat_get_dir_entry_of_path+0xf6>
    3e72:	61 15       	cp	r22, r1
    3e74:	71 05       	cpc	r23, r1
    3e76:	09 f4       	brne	.+2      	; 0x3e7a <fat_get_dir_entry_of_path+0x30>
    3e78:	63 c0       	rjmp	.+198    	; 0x3f40 <fat_get_dir_entry_of_path+0xf6>
    3e7a:	88 81       	ld	r24, Y
    3e7c:	88 23       	and	r24, r24
    3e7e:	09 f4       	brne	.+2      	; 0x3e82 <fat_get_dir_entry_of_path+0x38>
    3e80:	5f c0       	rjmp	.+190    	; 0x3f40 <fat_get_dir_entry_of_path+0xf6>
    3e82:	41 15       	cp	r20, r1
    3e84:	51 05       	cpc	r21, r1
    3e86:	09 f4       	brne	.+2      	; 0x3e8a <fat_get_dir_entry_of_path+0x40>
    3e88:	5b c0       	rjmp	.+182    	; 0x3f40 <fat_get_dir_entry_of_path+0xf6>
        return 0;

    if(path[0] == '/')
    3e8a:	8f 32       	cpi	r24, 0x2F	; 47
    3e8c:	09 f4       	brne	.+2      	; 0x3e90 <fat_get_dir_entry_of_path+0x46>
        ++path;
    3e8e:	21 96       	adiw	r28, 0x01	; 1

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
    3e90:	8d e2       	ldi	r24, 0x2D	; 45
    3e92:	f7 01       	movw	r30, r14
    3e94:	11 92       	st	Z+, r1
    3e96:	8a 95       	dec	r24
    3e98:	e9 f7       	brne	.-6      	; 0x3e94 <fat_get_dir_entry_of_path+0x4a>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    3e9a:	80 e1       	ldi	r24, 0x10	; 16
    3e9c:	f7 01       	movw	r30, r14
    3e9e:	80 a3       	std	Z+32, r24	; 0x20
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    3ea0:	37 01       	movw	r6, r14
    3ea2:	01 c0       	rjmp	.+2      	; 0x3ea6 <fat_get_dir_entry_of_path+0x5c>
    3ea4:	e5 01       	movw	r28, r10
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
    3ea6:	88 81       	ld	r24, Y
    3ea8:	88 23       	and	r24, r24
    3eaa:	09 f4       	brne	.+2      	; 0x3eae <fat_get_dir_entry_of_path+0x64>
    3eac:	4b c0       	rjmp	.+150    	; 0x3f44 <fat_get_dir_entry_of_path+0xfa>
            return 1;

        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
    3eae:	c4 01       	movw	r24, r8
    3eb0:	b7 01       	movw	r22, r14
    3eb2:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <fat_open_dir>
    3eb6:	6c 01       	movw	r12, r24
        if(!dd)
    3eb8:	00 97       	sbiw	r24, 0x00	; 0
    3eba:	09 f4       	brne	.+2      	; 0x3ebe <fat_get_dir_entry_of_path+0x74>
    3ebc:	41 c0       	rjmp	.+130    	; 0x3f40 <fat_get_dir_entry_of_path+0xf6>
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
    3ebe:	ce 01       	movw	r24, r28
    3ec0:	6f e2       	ldi	r22, 0x2F	; 47
    3ec2:	70 e0       	ldi	r23, 0x00	; 0
    3ec4:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <strchr>
        uint8_t length_to_sep;
        if(sub_path)
    3ec8:	00 97       	sbiw	r24, 0x00	; 0
    3eca:	39 f0       	breq	.+14     	; 0x3eda <fat_get_dir_entry_of_path+0x90>
        {
            length_to_sep = sub_path - path;
    3ecc:	48 2f       	mov	r20, r24
    3ece:	4c 1b       	sub	r20, r28
            ++sub_path;
    3ed0:	5c 01       	movw	r10, r24
    3ed2:	08 94       	sec
    3ed4:	a1 1c       	adc	r10, r1
    3ed6:	b1 1c       	adc	r11, r1
    3ed8:	2a c0       	rjmp	.+84     	; 0x3f2e <fat_get_dir_entry_of_path+0xe4>
        }
        else
        {
            length_to_sep = strlen(path);
    3eda:	fe 01       	movw	r30, r28
    3edc:	01 90       	ld	r0, Z+
    3ede:	00 20       	and	r0, r0
    3ee0:	e9 f7       	brne	.-6      	; 0x3edc <fat_get_dir_entry_of_path+0x92>
    3ee2:	31 97       	sbiw	r30, 0x01	; 1
    3ee4:	4e 2f       	mov	r20, r30
    3ee6:	4c 1b       	sub	r20, r28
            sub_path = path + length_to_sep;
    3ee8:	5e 01       	movw	r10, r28
    3eea:	a4 0e       	add	r10, r20
    3eec:	b1 1c       	adc	r11, r1
    3eee:	1f c0       	rjmp	.+62     	; 0x3f2e <fat_get_dir_entry_of_path+0xe4>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    3ef0:	f3 01       	movw	r30, r6
    3ef2:	01 90       	ld	r0, Z+
    3ef4:	00 20       	and	r0, r0
    3ef6:	e9 f7       	brne	.-6      	; 0x3ef2 <fat_get_dir_entry_of_path+0xa8>
    3ef8:	31 97       	sbiw	r30, 0x01	; 1
    3efa:	e6 19       	sub	r30, r6
    3efc:	f7 09       	sbc	r31, r7
    3efe:	e0 17       	cp	r30, r16
    3f00:	f1 07       	cpc	r31, r17
    3f02:	b9 f4       	brne	.+46     	; 0x3f32 <fat_get_dir_entry_of_path+0xe8>
    3f04:	ce 01       	movw	r24, r28
    3f06:	b3 01       	movw	r22, r6
    3f08:	a8 01       	movw	r20, r16
    3f0a:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <strncmp>
    3f0e:	00 97       	sbiw	r24, 0x00	; 0
    3f10:	81 f4       	brne	.+32     	; 0x3f32 <fat_get_dir_entry_of_path+0xe8>
{
    if(dd)
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    3f12:	f6 01       	movw	r30, r12
    3f14:	11 82       	std	Z+1, r1	; 0x01
    3f16:	10 82       	st	Z, r1
                continue;

            fat_close_dir(dd);
            dd = 0;

            if(path[length_to_sep] == '\0')
    3f18:	0c 0f       	add	r16, r28
    3f1a:	1d 1f       	adc	r17, r29
    3f1c:	f8 01       	movw	r30, r16
    3f1e:	80 81       	ld	r24, Z
    3f20:	88 23       	and	r24, r24
    3f22:	81 f0       	breq	.+32     	; 0x3f44 <fat_get_dir_entry_of_path+0xfa>
                /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
    3f24:	f7 01       	movw	r30, r14
    3f26:	80 a1       	ldd	r24, Z+32	; 0x20
    3f28:	84 fd       	sbrc	r24, 4
    3f2a:	bc cf       	rjmp	.-136    	; 0x3ea4 <fat_get_dir_entry_of_path+0x5a>
    3f2c:	09 c0       	rjmp	.+18     	; 0x3f40 <fat_get_dir_entry_of_path+0xf6>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    3f2e:	04 2f       	mov	r16, r20
    3f30:	10 e0       	ldi	r17, 0x00	; 0
            length_to_sep = strlen(path);
            sub_path = path + length_to_sep;
        }
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
    3f32:	c6 01       	movw	r24, r12
    3f34:	b7 01       	movw	r22, r14
    3f36:	0e 94 4b 14 	call	0x2896	; 0x2896 <fat_read_dir>
    3f3a:	88 23       	and	r24, r24
    3f3c:	c9 f6       	brne	.-78     	; 0x3ef0 <fat_get_dir_entry_of_path+0xa6>
    3f3e:	12 c0       	rjmp	.+36     	; 0x3f64 <fat_get_dir_entry_of_path+0x11a>
    3f40:	80 e0       	ldi	r24, 0x00	; 0
    3f42:	01 c0       	rjmp	.+2      	; 0x3f46 <fat_get_dir_entry_of_path+0xfc>
    3f44:	81 e0       	ldi	r24, 0x01	; 1

        fat_close_dir(dd);
    }
    
    return 0;
}
    3f46:	df 91       	pop	r29
    3f48:	cf 91       	pop	r28
    3f4a:	1f 91       	pop	r17
    3f4c:	0f 91       	pop	r16
    3f4e:	ff 90       	pop	r15
    3f50:	ef 90       	pop	r14
    3f52:	df 90       	pop	r13
    3f54:	cf 90       	pop	r12
    3f56:	bf 90       	pop	r11
    3f58:	af 90       	pop	r10
    3f5a:	9f 90       	pop	r9
    3f5c:	8f 90       	pop	r8
    3f5e:	7f 90       	pop	r7
    3f60:	6f 90       	pop	r6
    3f62:	08 95       	ret
{
    if(dd)
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    3f64:	f6 01       	movw	r30, r12
    3f66:	11 82       	std	Z+1, r1	; 0x01
    3f68:	10 82       	st	Z, r1
    3f6a:	9d cf       	rjmp	.-198    	; 0x3ea6 <fat_get_dir_entry_of_path+0x5c>

00003f6c <partition_close>:
 * \param[in] partition The partition descriptor to destroy.
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    3f6c:	fc 01       	movw	r30, r24
    if(!partition)
    3f6e:	00 97       	sbiw	r24, 0x00	; 0
    3f70:	11 f4       	brne	.+4      	; 0x3f76 <partition_close+0xa>
    3f72:	80 e0       	ldi	r24, 0x00	; 0
    3f74:	08 95       	ret

    /* destroy partition descriptor */
#if USE_DYNAMIC_MEMORY
    free(partition);
#else
    partition->type = PARTITION_TYPE_FREE;
    3f76:	10 86       	std	Z+8, r1	; 0x08
    3f78:	81 e0       	ldi	r24, 0x01	; 1
#endif

    return 1;
}
    3f7a:	08 95       	ret

00003f7c <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    3f7c:	8f 92       	push	r8
    3f7e:	9f 92       	push	r9
    3f80:	af 92       	push	r10
    3f82:	bf 92       	push	r11
    3f84:	cf 92       	push	r12
    3f86:	df 92       	push	r13
    3f88:	ef 92       	push	r14
    3f8a:	ff 92       	push	r15
    3f8c:	0f 93       	push	r16
    3f8e:	df 93       	push	r29
    3f90:	cf 93       	push	r28
    3f92:	cd b7       	in	r28, 0x3d	; 61
    3f94:	de b7       	in	r29, 0x3e	; 62
    3f96:	60 97       	sbiw	r28, 0x10	; 16
    3f98:	0f b6       	in	r0, 0x3f	; 63
    3f9a:	f8 94       	cli
    3f9c:	de bf       	out	0x3e, r29	; 62
    3f9e:	0f be       	out	0x3f, r0	; 63
    3fa0:	cd bf       	out	0x3d, r28	; 61
    3fa2:	7c 01       	movw	r14, r24
    3fa4:	6b 01       	movw	r12, r22
    3fa6:	5a 01       	movw	r10, r20
    3fa8:	49 01       	movw	r8, r18
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
    3faa:	00 97       	sbiw	r24, 0x00	; 0
    3fac:	09 f4       	brne	.+2      	; 0x3fb0 <partition_open+0x34>
    3fae:	93 c0       	rjmp	.+294    	; 0x40d6 <partition_open+0x15a>
    3fb0:	61 15       	cp	r22, r1
    3fb2:	71 05       	cpc	r23, r1
    3fb4:	09 f4       	brne	.+2      	; 0x3fb8 <partition_open+0x3c>
    3fb6:	8f c0       	rjmp	.+286    	; 0x40d6 <partition_open+0x15a>
    3fb8:	04 30       	cpi	r16, 0x04	; 4
    3fba:	0c f0       	brlt	.+2      	; 0x3fbe <partition_open+0x42>
    3fbc:	8c c0       	rjmp	.+280    	; 0x40d6 <partition_open+0x15a>
        return 0;

    if(index >= 0)
    3fbe:	07 fd       	sbrc	r16, 7
    3fc0:	1d c0       	rjmp	.+58     	; 0x3ffc <partition_open+0x80>
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
    3fc2:	60 2f       	mov	r22, r16
    3fc4:	77 27       	eor	r23, r23
    3fc6:	67 fd       	sbrc	r22, 7
    3fc8:	70 95       	com	r23
    3fca:	e4 e0       	ldi	r30, 0x04	; 4
    3fcc:	66 0f       	add	r22, r22
    3fce:	77 1f       	adc	r23, r23
    3fd0:	ea 95       	dec	r30
    3fd2:	e1 f7       	brne	.-8      	; 0x3fcc <partition_open+0x50>
    3fd4:	62 54       	subi	r22, 0x42	; 66
    3fd6:	7e 4f       	sbci	r23, 0xFE	; 254
    3fd8:	88 27       	eor	r24, r24
    3fda:	77 fd       	sbrc	r23, 7
    3fdc:	80 95       	com	r24
    3fde:	98 2f       	mov	r25, r24
    3fe0:	ae 01       	movw	r20, r28
    3fe2:	4f 5f       	subi	r20, 0xFF	; 255
    3fe4:	5f 4f       	sbci	r21, 0xFF	; 255
    3fe6:	20 e1       	ldi	r18, 0x10	; 16
    3fe8:	30 e0       	ldi	r19, 0x00	; 0
    3fea:	f7 01       	movw	r30, r14
    3fec:	09 95       	icall
    3fee:	88 23       	and	r24, r24
    3ff0:	09 f4       	brne	.+2      	; 0x3ff4 <partition_open+0x78>
    3ff2:	71 c0       	rjmp	.+226    	; 0x40d6 <partition_open+0x15a>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
    3ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff6:	88 23       	and	r24, r24
    3ff8:	09 f4       	brne	.+2      	; 0x3ffc <partition_open+0x80>
    3ffa:	6d c0       	rjmp	.+218    	; 0x40d6 <partition_open+0x15a>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    3ffc:	80 91 0f 02 	lds	r24, 0x020F
    4000:	88 23       	and	r24, r24
    4002:	09 f0       	breq	.+2      	; 0x4006 <partition_open+0x8a>
    4004:	68 c0       	rjmp	.+208    	; 0x40d6 <partition_open+0x15a>
    4006:	7c c0       	rjmp	.+248    	; 0x4100 <partition_open+0x184>
    new_partition->device_write = device_write;
    new_partition->device_write_interval = device_write_interval;

    if(index >= 0)
    {
        new_partition->type = buffer[4];
    4008:	8d 81       	ldd	r24, Y+5	; 0x05
    400a:	80 93 0f 02 	sts	0x020F, r24
        new_partition->offset = ((uint32_t) buffer[8]) |
    400e:	2a 85       	ldd	r18, Y+10	; 0x0a
    4010:	30 e0       	ldi	r19, 0x00	; 0
    4012:	40 e0       	ldi	r20, 0x00	; 0
    4014:	50 e0       	ldi	r21, 0x00	; 0
    4016:	54 2f       	mov	r21, r20
    4018:	43 2f       	mov	r20, r19
    401a:	32 2f       	mov	r19, r18
    401c:	22 27       	eor	r18, r18
    401e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	a0 e0       	ldi	r26, 0x00	; 0
    4024:	b0 e0       	ldi	r27, 0x00	; 0
    4026:	dc 01       	movw	r26, r24
    4028:	99 27       	eor	r25, r25
    402a:	88 27       	eor	r24, r24
    402c:	28 2b       	or	r18, r24
    402e:	39 2b       	or	r19, r25
    4030:	4a 2b       	or	r20, r26
    4032:	5b 2b       	or	r21, r27
    4034:	89 85       	ldd	r24, Y+9	; 0x09
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	a0 e0       	ldi	r26, 0x00	; 0
    403a:	b0 e0       	ldi	r27, 0x00	; 0
    403c:	28 2b       	or	r18, r24
    403e:	39 2b       	or	r19, r25
    4040:	4a 2b       	or	r20, r26
    4042:	5b 2b       	or	r21, r27
    4044:	8c 85       	ldd	r24, Y+12	; 0x0c
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	a0 e0       	ldi	r26, 0x00	; 0
    404a:	b0 e0       	ldi	r27, 0x00	; 0
    404c:	b8 2f       	mov	r27, r24
    404e:	aa 27       	eor	r26, r26
    4050:	99 27       	eor	r25, r25
    4052:	88 27       	eor	r24, r24
    4054:	28 2b       	or	r18, r24
    4056:	39 2b       	or	r19, r25
    4058:	4a 2b       	or	r20, r26
    405a:	5b 2b       	or	r21, r27
    405c:	20 93 10 02 	sts	0x0210, r18
    4060:	30 93 11 02 	sts	0x0211, r19
    4064:	40 93 12 02 	sts	0x0212, r20
    4068:	50 93 13 02 	sts	0x0213, r21
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
    406c:	2e 85       	ldd	r18, Y+14	; 0x0e
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	40 e0       	ldi	r20, 0x00	; 0
    4072:	50 e0       	ldi	r21, 0x00	; 0
    4074:	54 2f       	mov	r21, r20
    4076:	43 2f       	mov	r20, r19
    4078:	32 2f       	mov	r19, r18
    407a:	22 27       	eor	r18, r18
    407c:	8f 85       	ldd	r24, Y+15	; 0x0f
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	a0 e0       	ldi	r26, 0x00	; 0
    4082:	b0 e0       	ldi	r27, 0x00	; 0
    4084:	dc 01       	movw	r26, r24
    4086:	99 27       	eor	r25, r25
    4088:	88 27       	eor	r24, r24
    408a:	28 2b       	or	r18, r24
    408c:	39 2b       	or	r19, r25
    408e:	4a 2b       	or	r20, r26
    4090:	5b 2b       	or	r21, r27
    4092:	8d 85       	ldd	r24, Y+13	; 0x0d
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	a0 e0       	ldi	r26, 0x00	; 0
    4098:	b0 e0       	ldi	r27, 0x00	; 0
    409a:	28 2b       	or	r18, r24
    409c:	39 2b       	or	r19, r25
    409e:	4a 2b       	or	r20, r26
    40a0:	5b 2b       	or	r21, r27
    40a2:	88 89       	ldd	r24, Y+16	; 0x10
    40a4:	90 e0       	ldi	r25, 0x00	; 0
    40a6:	a0 e0       	ldi	r26, 0x00	; 0
    40a8:	b0 e0       	ldi	r27, 0x00	; 0
    40aa:	b8 2f       	mov	r27, r24
    40ac:	aa 27       	eor	r26, r26
    40ae:	99 27       	eor	r25, r25
    40b0:	88 27       	eor	r24, r24
    40b2:	28 2b       	or	r18, r24
    40b4:	39 2b       	or	r19, r25
    40b6:	4a 2b       	or	r20, r26
    40b8:	5b 2b       	or	r21, r27
    40ba:	20 93 14 02 	sts	0x0214, r18
    40be:	30 93 15 02 	sts	0x0215, r19
    40c2:	40 93 16 02 	sts	0x0216, r20
    40c6:	50 93 17 02 	sts	0x0217, r21
    40ca:	03 c0       	rjmp	.+6      	; 0x40d2 <partition_open+0x156>
                                ((uint32_t) buffer[14] << 16) |
                                ((uint32_t) buffer[15] << 24);
    }
    else
    {
        new_partition->type = 0xff;
    40cc:	8f ef       	ldi	r24, 0xFF	; 255
    40ce:	80 93 0f 02 	sts	0x020F, r24
    40d2:	9f 01       	movw	r18, r30
    40d4:	02 c0       	rjmp	.+4      	; 0x40da <partition_open+0x15e>
    40d6:	20 e0       	ldi	r18, 0x00	; 0
    40d8:	30 e0       	ldi	r19, 0x00	; 0
    }

    return new_partition;
}
    40da:	c9 01       	movw	r24, r18
    40dc:	60 96       	adiw	r28, 0x10	; 16
    40de:	0f b6       	in	r0, 0x3f	; 63
    40e0:	f8 94       	cli
    40e2:	de bf       	out	0x3e, r29	; 62
    40e4:	0f be       	out	0x3f, r0	; 63
    40e6:	cd bf       	out	0x3d, r28	; 61
    40e8:	cf 91       	pop	r28
    40ea:	df 91       	pop	r29
    40ec:	0f 91       	pop	r16
    40ee:	ff 90       	pop	r15
    40f0:	ef 90       	pop	r14
    40f2:	df 90       	pop	r13
    40f4:	cf 90       	pop	r12
    40f6:	bf 90       	pop	r11
    40f8:	af 90       	pop	r10
    40fa:	9f 90       	pop	r9
    40fc:	8f 90       	pop	r8
    40fe:	08 95       	ret
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    4100:	e7 e0       	ldi	r30, 0x07	; 7
    4102:	f2 e0       	ldi	r31, 0x02	; 2
    4104:	81 e1       	ldi	r24, 0x11	; 17
    4106:	df 01       	movw	r26, r30
    4108:	1d 92       	st	X+, r1
    410a:	8a 95       	dec	r24
    410c:	e9 f7       	brne	.-6      	; 0x4108 <partition_open+0x18c>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    410e:	f0 92 08 02 	sts	0x0208, r15
    4112:	e0 92 07 02 	sts	0x0207, r14
    new_partition->device_read_interval = device_read_interval;
    4116:	d0 92 0a 02 	sts	0x020A, r13
    411a:	c0 92 09 02 	sts	0x0209, r12
    new_partition->device_write = device_write;
    411e:	b0 92 0c 02 	sts	0x020C, r11
    4122:	a0 92 0b 02 	sts	0x020B, r10
    new_partition->device_write_interval = device_write_interval;
    4126:	90 92 0e 02 	sts	0x020E, r9
    412a:	80 92 0d 02 	sts	0x020D, r8

    if(index >= 0)
    412e:	07 ff       	sbrs	r16, 7
    4130:	6b cf       	rjmp	.-298    	; 0x4008 <partition_open+0x8c>
    4132:	cc cf       	rjmp	.-104    	; 0x40cc <partition_open+0x150>

00004134 <sd_raw_available>:
 * \returns 1 if the card is available, 0 if it is not.
 */
uint8_t sd_raw_available()
{
    return get_pin_available() == 0x00;
}
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	08 95       	ret

00004138 <sd_raw_locked>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
    4138:	80 e0       	ldi	r24, 0x00	; 0
    413a:	08 95       	ret

0000413c <sd_raw_send_command>:
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
    413c:	28 2f       	mov	r18, r24
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    413e:	8f ef       	ldi	r24, 0xFF	; 255
    4140:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    4142:	0d b4       	in	r0, 0x2d	; 45
    4144:	07 fe       	sbrs	r0, 7
    4146:	fd cf       	rjmp	.-6      	; 0x4142 <sd_raw_send_command+0x6>
    SPSR &= ~(1 << SPIF);
    4148:	8d b5       	in	r24, 0x2d	; 45
    414a:	8f 77       	andi	r24, 0x7F	; 127
    414c:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    414e:	8e b5       	in	r24, 0x2e	; 46

    /* wait some clock cycles */
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    4150:	82 2f       	mov	r24, r18
    4152:	80 64       	ori	r24, 0x40	; 64
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    4154:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    4156:	0d b4       	in	r0, 0x2d	; 45
    4158:	07 fe       	sbrs	r0, 7
    415a:	fd cf       	rjmp	.-6      	; 0x4156 <sd_raw_send_command+0x1a>
    SPSR &= ~(1 << SPIF);
    415c:	8d b5       	in	r24, 0x2d	; 45
    415e:	8f 77       	andi	r24, 0x7F	; 127
    4160:	8d bd       	out	0x2d, r24	; 45
    /* wait some clock cycles */
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    4162:	87 2f       	mov	r24, r23
    4164:	99 27       	eor	r25, r25
    4166:	aa 27       	eor	r26, r26
    4168:	bb 27       	eor	r27, r27
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    416a:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    416c:	0d b4       	in	r0, 0x2d	; 45
    416e:	07 fe       	sbrs	r0, 7
    4170:	fd cf       	rjmp	.-6      	; 0x416c <sd_raw_send_command+0x30>
    SPSR &= ~(1 << SPIF);
    4172:	8d b5       	in	r24, 0x2d	; 45
    4174:	8f 77       	andi	r24, 0x7F	; 127
    4176:	8d bd       	out	0x2d, r24	; 45
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    4178:	cb 01       	movw	r24, r22
    417a:	aa 27       	eor	r26, r26
    417c:	bb 27       	eor	r27, r27
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    417e:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    4180:	0d b4       	in	r0, 0x2d	; 45
    4182:	07 fe       	sbrs	r0, 7
    4184:	fd cf       	rjmp	.-6      	; 0x4180 <sd_raw_send_command+0x44>
    SPSR &= ~(1 << SPIF);
    4186:	8d b5       	in	r24, 0x2d	; 45
    4188:	8f 77       	andi	r24, 0x7F	; 127
    418a:	8d bd       	out	0x2d, r24	; 45

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
    418c:	bb 27       	eor	r27, r27
    418e:	a7 2f       	mov	r26, r23
    4190:	96 2f       	mov	r25, r22
    4192:	85 2f       	mov	r24, r21
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    4194:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    4196:	0d b4       	in	r0, 0x2d	; 45
    4198:	07 fe       	sbrs	r0, 7
    419a:	fd cf       	rjmp	.-6      	; 0x4196 <sd_raw_send_command+0x5a>
    SPSR &= ~(1 << SPIF);
    419c:	8d b5       	in	r24, 0x2d	; 45
    419e:	8f 77       	andi	r24, 0x7F	; 127
    41a0:	8d bd       	out	0x2d, r24	; 45
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    41a2:	4e bd       	out	0x2e, r20	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    41a4:	0d b4       	in	r0, 0x2d	; 45
    41a6:	07 fe       	sbrs	r0, 7
    41a8:	fd cf       	rjmp	.-6      	; 0x41a4 <sd_raw_send_command+0x68>
    SPSR &= ~(1 << SPIF);
    41aa:	8d b5       	in	r24, 0x2d	; 45
    41ac:	8f 77       	andi	r24, 0x7F	; 127
    41ae:	8d bd       	out	0x2d, r24	; 45
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
    sd_raw_send_byte((arg >> 0) & 0xff);
    switch(command)
    41b0:	22 23       	and	r18, r18
    41b2:	19 f0       	breq	.+6      	; 0x41ba <sd_raw_send_command+0x7e>
    41b4:	28 30       	cpi	r18, 0x08	; 8
    41b6:	69 f4       	brne	.+26     	; 0x41d2 <sd_raw_send_command+0x96>
    41b8:	06 c0       	rjmp	.+12     	; 0x41c6 <sd_raw_send_command+0x8a>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    41ba:	85 e9       	ldi	r24, 0x95	; 149
    41bc:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    41be:	0d b4       	in	r0, 0x2d	; 45
    41c0:	07 fe       	sbrs	r0, 7
    41c2:	fd cf       	rjmp	.-6      	; 0x41be <sd_raw_send_command+0x82>
    41c4:	0b c0       	rjmp	.+22     	; 0x41dc <sd_raw_send_command+0xa0>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    41c6:	87 e8       	ldi	r24, 0x87	; 135
    41c8:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    41ca:	0d b4       	in	r0, 0x2d	; 45
    41cc:	07 fe       	sbrs	r0, 7
    41ce:	fd cf       	rjmp	.-6      	; 0x41ca <sd_raw_send_command+0x8e>
    41d0:	05 c0       	rjmp	.+10     	; 0x41dc <sd_raw_send_command+0xa0>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    41d2:	8f ef       	ldi	r24, 0xFF	; 255
    41d4:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    41d6:	0d b4       	in	r0, 0x2d	; 45
    41d8:	07 fe       	sbrs	r0, 7
    41da:	fd cf       	rjmp	.-6      	; 0x41d6 <sd_raw_send_command+0x9a>
    SPSR &= ~(1 << SPIF);
    41dc:	8d b5       	in	r24, 0x2d	; 45
    41de:	8f 77       	andi	r24, 0x7F	; 127
    41e0:	8d bd       	out	0x2d, r24	; 45
    41e2:	90 e0       	ldi	r25, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    41e4:	2f ef       	ldi	r18, 0xFF	; 255
    41e6:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR & (1 << SPIF)));
    41e8:	0d b4       	in	r0, 0x2d	; 45
    41ea:	07 fe       	sbrs	r0, 7
    41ec:	fd cf       	rjmp	.-6      	; 0x41e8 <sd_raw_send_command+0xac>
    SPSR &= ~(1 << SPIF);
    41ee:	8d b5       	in	r24, 0x2d	; 45
    41f0:	8f 77       	andi	r24, 0x7F	; 127
    41f2:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    41f4:	8e b5       	in	r24, 0x2e	; 46
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    {
        response = sd_raw_rec_byte();
        if(response != 0xff)
    41f6:	8f 3f       	cpi	r24, 0xFF	; 255
    41f8:	19 f4       	brne	.+6      	; 0x4200 <sd_raw_send_command+0xc4>
           sd_raw_send_byte(0xff);
           break;
    }
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    41fa:	9f 5f       	subi	r25, 0xFF	; 255
    41fc:	9a 30       	cpi	r25, 0x0A	; 10
    41fe:	99 f7       	brne	.-26     	; 0x41e6 <sd_raw_send_command+0xaa>
        if(response != 0xff)
            break;
    }

    return response;
}
    4200:	08 95       	ret

00004202 <sd_raw_get_info>:
 *
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
    4202:	cf 92       	push	r12
    4204:	df 92       	push	r13
    4206:	ef 92       	push	r14
    4208:	ff 92       	push	r15
    420a:	0f 93       	push	r16
    420c:	1f 93       	push	r17
    420e:	cf 93       	push	r28
    4210:	df 93       	push	r29
    4212:	ec 01       	movw	r28, r24
    if(!info || !sd_raw_available())
    4214:	00 97       	sbiw	r24, 0x00	; 0
    4216:	81 f0       	breq	.+32     	; 0x4238 <sd_raw_get_info+0x36>
        return 0;

    memset(info, 0, sizeof(*info));
    4218:	89 e1       	ldi	r24, 0x19	; 25
    421a:	fe 01       	movw	r30, r28
    421c:	11 92       	st	Z+, r1
    421e:	8a 95       	dec	r24
    4220:	e9 f7       	brne	.-6      	; 0x421c <sd_raw_get_info+0x1a>

    select_card();
    4222:	28 98       	cbi	0x05, 0	; 5

    /* read cid register */
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    4224:	8a e0       	ldi	r24, 0x0A	; 10
    4226:	40 e0       	ldi	r20, 0x00	; 0
    4228:	50 e0       	ldi	r21, 0x00	; 0
    422a:	60 e0       	ldi	r22, 0x00	; 0
    422c:	70 e0       	ldi	r23, 0x00	; 0
    422e:	0e 94 9e 20 	call	0x413c	; 0x413c <sd_raw_send_command>
    4232:	88 23       	and	r24, r24
    4234:	19 f0       	breq	.+6      	; 0x423c <sd_raw_get_info+0x3a>
    {
        unselect_card();
    4236:	28 9a       	sbi	0x05, 0	; 5
    4238:	80 e0       	ldi	r24, 0x00	; 0
    423a:	f7 c0       	rjmp	.+494    	; 0x442a <sd_raw_get_info+0x228>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    423c:	9f ef       	ldi	r25, 0xFF	; 255
    423e:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    4240:	0d b4       	in	r0, 0x2d	; 45
    4242:	07 fe       	sbrs	r0, 7
    4244:	fd cf       	rjmp	.-6      	; 0x4240 <sd_raw_get_info+0x3e>
    SPSR &= ~(1 << SPIF);
    4246:	8d b5       	in	r24, 0x2d	; 45
    4248:	8f 77       	andi	r24, 0x7F	; 127
    424a:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    424c:	8e b5       	in	r24, 0x2e	; 46
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    424e:	8e 3f       	cpi	r24, 0xFE	; 254
    4250:	b1 f7       	brne	.-20     	; 0x423e <sd_raw_get_info+0x3c>
    4252:	1c 2f       	mov	r17, r28
    4254:	ce 01       	movw	r24, r28
    4256:	fc 01       	movw	r30, r24
    4258:	60 e6       	ldi	r22, 0x60	; 96
    425a:	70 e0       	ldi	r23, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    425c:	0f ef       	ldi	r16, 0xFF	; 255
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    425e:	9e 2f       	mov	r25, r30
    4260:	91 1b       	sub	r25, r17
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    4262:	0e bd       	out	0x2e, r16	; 46
    while(!(SPSR & (1 << SPIF)));
    4264:	0d b4       	in	r0, 0x2d	; 45
    4266:	07 fe       	sbrs	r0, 7
    4268:	fd cf       	rjmp	.-6      	; 0x4264 <sd_raw_get_info+0x62>
    SPSR &= ~(1 << SPIF);
    426a:	8d b5       	in	r24, 0x2d	; 45
    426c:	8f 77       	andi	r24, 0x7F	; 127
    426e:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    4270:	2e b5       	in	r18, 0x2e	; 46
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();

        switch(i)
    4272:	98 30       	cpi	r25, 0x08	; 8
    4274:	28 f4       	brcc	.+10     	; 0x4280 <sd_raw_get_info+0x7e>
    4276:	93 30       	cpi	r25, 0x03	; 3
    4278:	88 f4       	brcc	.+34     	; 0x429c <sd_raw_get_info+0x9a>
    427a:	99 23       	and	r25, r25
    427c:	59 f0       	breq	.+22     	; 0x4294 <sd_raw_get_info+0x92>
    427e:	0c c0       	rjmp	.+24     	; 0x4298 <sd_raw_get_info+0x96>
    4280:	9d 30       	cpi	r25, 0x0D	; 13
    4282:	18 f4       	brcc	.+6      	; 0x428a <sd_raw_get_info+0x88>
    4284:	99 30       	cpi	r25, 0x09	; 9
    4286:	70 f4       	brcc	.+28     	; 0x42a4 <sd_raw_get_info+0xa2>
    4288:	0b c0       	rjmp	.+22     	; 0x42a0 <sd_raw_get_info+0x9e>
    428a:	9d 30       	cpi	r25, 0x0D	; 13
    428c:	19 f1       	breq	.+70     	; 0x42d4 <sd_raw_get_info+0xd2>
    428e:	9e 30       	cpi	r25, 0x0E	; 14
    4290:	69 f5       	brne	.+90     	; 0x42ec <sd_raw_get_info+0xea>
    4292:	24 c0       	rjmp	.+72     	; 0x42dc <sd_raw_get_info+0xda>
        {
            case 0:
                info->manufacturer = b;
    4294:	28 83       	st	Y, r18
    4296:	2a c0       	rjmp	.+84     	; 0x42ec <sd_raw_get_info+0xea>
                break;
            case 1:
            case 2:
                info->oem[i - 1] = b;
    4298:	20 83       	st	Z, r18
    429a:	28 c0       	rjmp	.+80     	; 0x42ec <sd_raw_get_info+0xea>
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                info->product[i - 3] = b;
    429c:	21 83       	std	Z+1, r18	; 0x01
    429e:	26 c0       	rjmp	.+76     	; 0x42ec <sd_raw_get_info+0xea>
                break;
            case 8:
                info->revision = b;
    42a0:	2a 87       	std	Y+10, r18	; 0x0a
    42a2:	24 c0       	rjmp	.+72     	; 0x42ec <sd_raw_get_info+0xea>
                break;
            case 9:
            case 10:
            case 11:
            case 12:
                info->serial |= (uint32_t) b << ((12 - i) * 8);
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	40 e0       	ldi	r20, 0x00	; 0
    42a8:	50 e0       	ldi	r21, 0x00	; 0
    42aa:	06 2e       	mov	r0, r22
    42ac:	04 c0       	rjmp	.+8      	; 0x42b6 <sd_raw_get_info+0xb4>
    42ae:	22 0f       	add	r18, r18
    42b0:	33 1f       	adc	r19, r19
    42b2:	44 1f       	adc	r20, r20
    42b4:	55 1f       	adc	r21, r21
    42b6:	0a 94       	dec	r0
    42b8:	d2 f7       	brpl	.-12     	; 0x42ae <sd_raw_get_info+0xac>
    42ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    42bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    42be:	ad 85       	ldd	r26, Y+13	; 0x0d
    42c0:	be 85       	ldd	r27, Y+14	; 0x0e
    42c2:	82 2b       	or	r24, r18
    42c4:	93 2b       	or	r25, r19
    42c6:	a4 2b       	or	r26, r20
    42c8:	b5 2b       	or	r27, r21
    42ca:	8b 87       	std	Y+11, r24	; 0x0b
    42cc:	9c 87       	std	Y+12, r25	; 0x0c
    42ce:	ad 87       	std	Y+13, r26	; 0x0d
    42d0:	be 87       	std	Y+14, r27	; 0x0e
    42d2:	0c c0       	rjmp	.+24     	; 0x42ec <sd_raw_get_info+0xea>
                break;
            case 13:
                info->manufacturing_year = b << 4;
    42d4:	22 95       	swap	r18
    42d6:	20 7f       	andi	r18, 0xF0	; 240
    42d8:	2f 87       	std	Y+15, r18	; 0x0f
    42da:	08 c0       	rjmp	.+16     	; 0x42ec <sd_raw_get_info+0xea>
                break;
            case 14:
                info->manufacturing_year |= b >> 4;
    42dc:	92 2f       	mov	r25, r18
    42de:	92 95       	swap	r25
    42e0:	9f 70       	andi	r25, 0x0F	; 15
    42e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    42e4:	89 2b       	or	r24, r25
    42e6:	8f 87       	std	Y+15, r24	; 0x0f
                info->manufacturing_month = b & 0x0f;
    42e8:	2f 70       	andi	r18, 0x0F	; 15
    42ea:	28 8b       	std	Y+16, r18	; 0x10
    42ec:	31 96       	adiw	r30, 0x01	; 1
    42ee:	68 50       	subi	r22, 0x08	; 8
    42f0:	70 40       	sbci	r23, 0x00	; 0
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    42f2:	8f ef       	ldi	r24, 0xFF	; 255
    42f4:	60 3d       	cpi	r22, 0xD0	; 208
    42f6:	78 07       	cpc	r23, r24
    42f8:	09 f0       	breq	.+2      	; 0x42fc <sd_raw_get_info+0xfa>
    42fa:	b1 cf       	rjmp	.-158    	; 0x425e <sd_raw_get_info+0x5c>
#if SD_RAW_SDHC
    uint16_t csd_c_size = 0;
#else
    uint32_t csd_c_size = 0;
#endif
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    42fc:	89 e0       	ldi	r24, 0x09	; 9
    42fe:	40 e0       	ldi	r20, 0x00	; 0
    4300:	50 e0       	ldi	r21, 0x00	; 0
    4302:	60 e0       	ldi	r22, 0x00	; 0
    4304:	70 e0       	ldi	r23, 0x00	; 0
    4306:	0e 94 9e 20 	call	0x413c	; 0x413c <sd_raw_send_command>
    430a:	88 23       	and	r24, r24
    430c:	09 f0       	breq	.+2      	; 0x4310 <sd_raw_get_info+0x10e>
    430e:	93 cf       	rjmp	.-218    	; 0x4236 <sd_raw_get_info+0x34>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    4310:	9f ef       	ldi	r25, 0xFF	; 255
    4312:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    4314:	0d b4       	in	r0, 0x2d	; 45
    4316:	07 fe       	sbrs	r0, 7
    4318:	fd cf       	rjmp	.-6      	; 0x4314 <sd_raw_get_info+0x112>
    SPSR &= ~(1 << SPIF);
    431a:	8d b5       	in	r24, 0x2d	; 45
    431c:	8f 77       	andi	r24, 0x7F	; 127
    431e:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    4320:	8e b5       	in	r24, 0x2e	; 46
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    4322:	8e 3f       	cpi	r24, 0xFE	; 254
    4324:	b1 f7       	brne	.-20     	; 0x4312 <sd_raw_get_info+0x110>
    4326:	f0 e0       	ldi	r31, 0x00	; 0
    4328:	70 e0       	ldi	r23, 0x00	; 0
    432a:	20 e0       	ldi	r18, 0x00	; 0
    432c:	30 e0       	ldi	r19, 0x00	; 0
    432e:	40 e0       	ldi	r20, 0x00	; 0
    4330:	50 e0       	ldi	r21, 0x00	; 0
    4332:	60 e0       	ldi	r22, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    4334:	1f ef       	ldi	r17, 0xFF	; 255
            if(b & 0x40)
                info->flag_copy = 1;
            if(b & 0x20)
                info->flag_write_protect = 1;
            if(b & 0x10)
                info->flag_write_protect_temp = 1;
    4336:	e1 e0       	ldi	r30, 0x01	; 1
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    4338:	1e bd       	out	0x2e, r17	; 46
    while(!(SPSR & (1 << SPIF)));
    433a:	0d b4       	in	r0, 0x2d	; 45
    433c:	07 fe       	sbrs	r0, 7
    433e:	fd cf       	rjmp	.-6      	; 0x433a <sd_raw_get_info+0x138>
    SPSR &= ~(1 << SPIF);
    4340:	8d b5       	in	r24, 0x2d	; 45
    4342:	8f 77       	andi	r24, 0x7F	; 127
    4344:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    4346:	8e b5       	in	r24, 0x2e	; 46
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();

        if(i == 14)
    4348:	6e 30       	cpi	r22, 0x0E	; 14
    434a:	79 f4       	brne	.+30     	; 0x436a <sd_raw_get_info+0x168>
        {
            if(b & 0x40)
    434c:	90 e0       	ldi	r25, 0x00	; 0
    434e:	86 fd       	sbrc	r24, 6
                info->flag_copy = 1;
    4350:	ed 8b       	std	Y+21, r30	; 0x15
            if(b & 0x20)
    4352:	85 fd       	sbrc	r24, 5
                info->flag_write_protect = 1;
    4354:	ee 8b       	std	Y+22, r30	; 0x16
            if(b & 0x10)
    4356:	84 fd       	sbrc	r24, 4
                info->flag_write_protect_temp = 1;
    4358:	ef 8b       	std	Y+23, r30	; 0x17
            info->format = (b & 0x0c) >> 2;
    435a:	8c 70       	andi	r24, 0x0C	; 12
    435c:	90 70       	andi	r25, 0x00	; 0
    435e:	95 95       	asr	r25
    4360:	87 95       	ror	r24
    4362:	95 95       	asr	r25
    4364:	87 95       	ror	r24
    4366:	88 8f       	std	Y+24, r24	; 0x18
    4368:	5a c0       	rjmp	.+180    	; 0x441e <sd_raw_get_info+0x21c>
                }
            }
            else
#endif
            {
                switch(i)
    436a:	67 30       	cpi	r22, 0x07	; 7
    436c:	f9 f0       	breq	.+62     	; 0x43ac <sd_raw_get_info+0x1aa>
    436e:	68 30       	cpi	r22, 0x08	; 8
    4370:	30 f4       	brcc	.+12     	; 0x437e <sd_raw_get_info+0x17c>
    4372:	65 30       	cpi	r22, 0x05	; 5
    4374:	61 f0       	breq	.+24     	; 0x438e <sd_raw_get_info+0x18c>
    4376:	66 30       	cpi	r22, 0x06	; 6
    4378:	09 f0       	breq	.+2      	; 0x437c <sd_raw_get_info+0x17a>
    437a:	51 c0       	rjmp	.+162    	; 0x441e <sd_raw_get_info+0x21c>
    437c:	0b c0       	rjmp	.+22     	; 0x4394 <sd_raw_get_info+0x192>
    437e:	69 30       	cpi	r22, 0x09	; 9
    4380:	a1 f1       	breq	.+104    	; 0x43ea <sd_raw_get_info+0x1e8>
    4382:	69 30       	cpi	r22, 0x09	; 9
    4384:	10 f1       	brcs	.+68     	; 0x43ca <sd_raw_get_info+0x1c8>
    4386:	6a 30       	cpi	r22, 0x0A	; 10
    4388:	09 f0       	breq	.+2      	; 0x438c <sd_raw_get_info+0x18a>
    438a:	49 c0       	rjmp	.+146    	; 0x441e <sd_raw_get_info+0x21c>
    438c:	32 c0       	rjmp	.+100    	; 0x43f2 <sd_raw_get_info+0x1f0>
                {
                    case 5:
                        csd_read_bl_len = b & 0x0f;
    438e:	f8 2f       	mov	r31, r24
    4390:	ff 70       	andi	r31, 0x0F	; 15
    4392:	45 c0       	rjmp	.+138    	; 0x441e <sd_raw_get_info+0x21c>
                        break;
                    case 6:
                        csd_c_size = b & 0x03;
    4394:	90 e0       	ldi	r25, 0x00	; 0
    4396:	a0 e0       	ldi	r26, 0x00	; 0
    4398:	b0 e0       	ldi	r27, 0x00	; 0
    439a:	83 70       	andi	r24, 0x03	; 3
    439c:	90 70       	andi	r25, 0x00	; 0
    439e:	a0 70       	andi	r26, 0x00	; 0
    43a0:	b0 70       	andi	r27, 0x00	; 0
                        csd_c_size <<= 8;
    43a2:	22 27       	eor	r18, r18
    43a4:	38 2f       	mov	r19, r24
    43a6:	49 2f       	mov	r20, r25
    43a8:	5a 2f       	mov	r21, r26
    43aa:	39 c0       	rjmp	.+114    	; 0x441e <sd_raw_get_info+0x21c>
                        break;
                    case 7:
                        csd_c_size |= b;
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	a0 e0       	ldi	r26, 0x00	; 0
    43b0:	b0 e0       	ldi	r27, 0x00	; 0
    43b2:	28 2b       	or	r18, r24
    43b4:	39 2b       	or	r19, r25
    43b6:	4a 2b       	or	r20, r26
    43b8:	5b 2b       	or	r21, r27
                        csd_c_size <<= 2;
    43ba:	a2 e0       	ldi	r26, 0x02	; 2
    43bc:	22 0f       	add	r18, r18
    43be:	33 1f       	adc	r19, r19
    43c0:	44 1f       	adc	r20, r20
    43c2:	55 1f       	adc	r21, r21
    43c4:	aa 95       	dec	r26
    43c6:	d1 f7       	brne	.-12     	; 0x43bc <sd_raw_get_info+0x1ba>
    43c8:	2a c0       	rjmp	.+84     	; 0x441e <sd_raw_get_info+0x21c>
                        break;
                    case 8:
                        csd_c_size |= b >> 6;
    43ca:	82 95       	swap	r24
    43cc:	86 95       	lsr	r24
    43ce:	86 95       	lsr	r24
    43d0:	83 70       	andi	r24, 0x03	; 3
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	a0 e0       	ldi	r26, 0x00	; 0
    43d6:	b0 e0       	ldi	r27, 0x00	; 0
    43d8:	28 2b       	or	r18, r24
    43da:	39 2b       	or	r19, r25
    43dc:	4a 2b       	or	r20, r26
    43de:	5b 2b       	or	r21, r27
                        ++csd_c_size;
    43e0:	2f 5f       	subi	r18, 0xFF	; 255
    43e2:	3f 4f       	sbci	r19, 0xFF	; 255
    43e4:	4f 4f       	sbci	r20, 0xFF	; 255
    43e6:	5f 4f       	sbci	r21, 0xFF	; 255
    43e8:	1a c0       	rjmp	.+52     	; 0x441e <sd_raw_get_info+0x21c>
                        break;
                    case 9:
                        csd_c_size_mult = b & 0x03;
    43ea:	78 2f       	mov	r23, r24
    43ec:	73 70       	andi	r23, 0x03	; 3
                        csd_c_size_mult <<= 1;
    43ee:	77 0f       	add	r23, r23
    43f0:	16 c0       	rjmp	.+44     	; 0x441e <sd_raw_get_info+0x21c>
                        break;
                    case 10:
                        csd_c_size_mult |= b >> 7;
    43f2:	88 1f       	adc	r24, r24
    43f4:	88 27       	eor	r24, r24
    43f6:	88 1f       	adc	r24, r24
    43f8:	78 2b       	or	r23, r24

                        info->capacity = (uint32_t) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);
    43fa:	8f 2f       	mov	r24, r31
    43fc:	90 e0       	ldi	r25, 0x00	; 0
    43fe:	02 96       	adiw	r24, 0x02	; 2
    4400:	87 0f       	add	r24, r23
    4402:	91 1d       	adc	r25, r1
    4404:	69 01       	movw	r12, r18
    4406:	7a 01       	movw	r14, r20
    4408:	04 c0       	rjmp	.+8      	; 0x4412 <sd_raw_get_info+0x210>
    440a:	cc 0c       	add	r12, r12
    440c:	dd 1c       	adc	r13, r13
    440e:	ee 1c       	adc	r14, r14
    4410:	ff 1c       	adc	r15, r15
    4412:	8a 95       	dec	r24
    4414:	d2 f7       	brpl	.-12     	; 0x440a <sd_raw_get_info+0x208>
    4416:	c9 8a       	std	Y+17, r12	; 0x11
    4418:	da 8a       	std	Y+18, r13	; 0x12
    441a:	eb 8a       	std	Y+19, r14	; 0x13
    441c:	fc 8a       	std	Y+20, r15	; 0x14
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    441e:	6f 5f       	subi	r22, 0xFF	; 255
    4420:	62 31       	cpi	r22, 0x12	; 18
    4422:	09 f0       	breq	.+2      	; 0x4426 <sd_raw_get_info+0x224>
    4424:	89 cf       	rjmp	.-238    	; 0x4338 <sd_raw_get_info+0x136>
                }
            }
        }
    }

    unselect_card();
    4426:	28 9a       	sbi	0x05, 0	; 5
    4428:	81 e0       	ldi	r24, 0x01	; 1

    return 1;
}
    442a:	df 91       	pop	r29
    442c:	cf 91       	pop	r28
    442e:	1f 91       	pop	r17
    4430:	0f 91       	pop	r16
    4432:	ff 90       	pop	r15
    4434:	ef 90       	pop	r14
    4436:	df 90       	pop	r13
    4438:	cf 90       	pop	r12
    443a:	08 95       	ret

0000443c <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    443c:	2f 92       	push	r2
    443e:	3f 92       	push	r3
    4440:	4f 92       	push	r4
    4442:	5f 92       	push	r5
    4444:	6f 92       	push	r6
    4446:	7f 92       	push	r7
    4448:	8f 92       	push	r8
    444a:	9f 92       	push	r9
    444c:	af 92       	push	r10
    444e:	bf 92       	push	r11
    4450:	cf 92       	push	r12
    4452:	df 92       	push	r13
    4454:	ef 92       	push	r14
    4456:	ff 92       	push	r15
    4458:	0f 93       	push	r16
    445a:	1f 93       	push	r17
    445c:	cf 93       	push	r28
    445e:	df 93       	push	r29
    4460:	4b 01       	movw	r8, r22
    4462:	5c 01       	movw	r10, r24
    4464:	2a 01       	movw	r4, r20
    4466:	39 01       	movw	r6, r18
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    4468:	33 24       	eor	r3, r3
    446a:	3a 94       	dec	r3
        buffer += write_length;
        offset += write_length;
        length -= write_length;

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    446c:	22 24       	eor	r2, r2
    446e:	23 94       	inc	r2
    4470:	a1 c0       	rjmp	.+322    	; 0x45b4 <sd_raw_write+0x178>
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
    4472:	e4 01       	movw	r28, r8
    4474:	d1 70       	andi	r29, 0x01	; 1
        block_address = offset - block_offset;
    4476:	ce 01       	movw	r24, r28
    4478:	a0 e0       	ldi	r26, 0x00	; 0
    447a:	b0 e0       	ldi	r27, 0x00	; 0
    447c:	85 01       	movw	r16, r10
    447e:	74 01       	movw	r14, r8
    4480:	e8 1a       	sub	r14, r24
    4482:	f9 0a       	sbc	r15, r25
    4484:	0a 0b       	sbc	r16, r26
    4486:	1b 0b       	sbc	r17, r27
        write_length = 512 - block_offset; /* write up to block border */
    4488:	c1 2c       	mov	r12, r1
    448a:	b2 e0       	ldi	r27, 0x02	; 2
    448c:	db 2e       	mov	r13, r27
    448e:	cc 1a       	sub	r12, r28
    4490:	dd 0a       	sbc	r13, r29
    4492:	6c 14       	cp	r6, r12
    4494:	7d 04       	cpc	r7, r13
    4496:	08 f4       	brcc	.+2      	; 0x449a <sd_raw_write+0x5e>
    4498:	63 01       	movw	r12, r6
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
    449a:	80 91 18 04 	lds	r24, 0x0418
    449e:	90 91 19 04 	lds	r25, 0x0419
    44a2:	a0 91 1a 04 	lds	r26, 0x041A
    44a6:	b0 91 1b 04 	lds	r27, 0x041B
    44aa:	e8 16       	cp	r14, r24
    44ac:	f9 06       	cpc	r15, r25
    44ae:	0a 07       	cpc	r16, r26
    44b0:	1b 07       	cpc	r17, r27
    44b2:	f9 f0       	breq	.+62     	; 0x44f2 <sd_raw_write+0xb6>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    44b4:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <sd_raw_sync>
    44b8:	88 23       	and	r24, r24
    44ba:	09 f4       	brne	.+2      	; 0x44be <sd_raw_write+0x82>
    44bc:	81 c0       	rjmp	.+258    	; 0x45c0 <sd_raw_write+0x184>
                return 0;
#endif

            if(block_offset || write_length < 512)
    44be:	20 97       	sbiw	r28, 0x00	; 0
    44c0:	29 f4       	brne	.+10     	; 0x44cc <sd_raw_write+0x90>
    44c2:	80 e0       	ldi	r24, 0x00	; 0
    44c4:	c8 16       	cp	r12, r24
    44c6:	82 e0       	ldi	r24, 0x02	; 2
    44c8:	d8 06       	cpc	r13, r24
    44ca:	58 f4       	brcc	.+22     	; 0x44e2 <sd_raw_write+0xa6>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    44cc:	c8 01       	movw	r24, r16
    44ce:	b7 01       	movw	r22, r14
    44d0:	48 e1       	ldi	r20, 0x18	; 24
    44d2:	52 e0       	ldi	r21, 0x02	; 2
    44d4:	20 e0       	ldi	r18, 0x00	; 0
    44d6:	32 e0       	ldi	r19, 0x02	; 2
    44d8:	0e 94 0e 23 	call	0x461c	; 0x461c <sd_raw_read>
    44dc:	88 23       	and	r24, r24
    44de:	09 f4       	brne	.+2      	; 0x44e2 <sd_raw_write+0xa6>
    44e0:	6f c0       	rjmp	.+222    	; 0x45c0 <sd_raw_write+0x184>
                    return 0;
            }
            raw_block_address = block_address;
    44e2:	e0 92 18 04 	sts	0x0418, r14
    44e6:	f0 92 19 04 	sts	0x0419, r15
    44ea:	00 93 1a 04 	sts	0x041A, r16
    44ee:	10 93 1b 04 	sts	0x041B, r17
        }

        if(buffer != raw_block)
    44f2:	88 e1       	ldi	r24, 0x18	; 24
    44f4:	48 16       	cp	r4, r24
    44f6:	82 e0       	ldi	r24, 0x02	; 2
    44f8:	58 06       	cpc	r5, r24
    44fa:	71 f0       	breq	.+28     	; 0x4518 <sd_raw_write+0xdc>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
    44fc:	9e 01       	movw	r18, r28
    44fe:	28 5e       	subi	r18, 0xE8	; 232
    4500:	3d 4f       	sbci	r19, 0xFD	; 253
    4502:	c9 01       	movw	r24, r18
    4504:	b2 01       	movw	r22, r4
    4506:	a6 01       	movw	r20, r12
    4508:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
    450c:	10 92 1c 04 	sts	0x041C, r1

            if(length == write_length)
    4510:	6c 14       	cp	r6, r12
    4512:	7d 04       	cpc	r7, r13
    4514:	09 f4       	brne	.+2      	; 0x4518 <sd_raw_write+0xdc>
    4516:	52 c0       	rjmp	.+164    	; 0x45bc <sd_raw_write+0x180>
                return 1;
#endif
        }

        /* address card */
        select_card();
    4518:	28 98       	cbi	0x05, 0	; 5

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
    451a:	88 e1       	ldi	r24, 0x18	; 24
    451c:	b8 01       	movw	r22, r16
    451e:	a7 01       	movw	r20, r14
    4520:	0e 94 9e 20 	call	0x413c	; 0x413c <sd_raw_send_command>
    4524:	88 23       	and	r24, r24
    4526:	11 f0       	breq	.+4      	; 0x452c <sd_raw_write+0xf0>
#endif
        {
            unselect_card();
    4528:	28 9a       	sbi	0x05, 0	; 5
    452a:	4a c0       	rjmp	.+148    	; 0x45c0 <sd_raw_write+0x184>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    452c:	8e ef       	ldi	r24, 0xFE	; 254
    452e:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    4530:	0d b4       	in	r0, 0x2d	; 45
    4532:	07 fe       	sbrs	r0, 7
    4534:	fd cf       	rjmp	.-6      	; 0x4530 <sd_raw_write+0xf4>
    SPSR &= ~(1 << SPIF);
    4536:	8d b5       	in	r24, 0x2d	; 45
    4538:	8f 77       	andi	r24, 0x7F	; 127
    453a:	8d bd       	out	0x2d, r24	; 45
    453c:	e8 e1       	ldi	r30, 0x18	; 24
    453e:	f2 e0       	ldi	r31, 0x02	; 2
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
    4540:	81 91       	ld	r24, Z+
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    4542:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    4544:	0d b4       	in	r0, 0x2d	; 45
    4546:	07 fe       	sbrs	r0, 7
    4548:	fd cf       	rjmp	.-6      	; 0x4544 <sd_raw_write+0x108>
    SPSR &= ~(1 << SPIF);
    454a:	8d b5       	in	r24, 0x2d	; 45
    454c:	8f 77       	andi	r24, 0x7F	; 127
    454e:	8d bd       	out	0x2d, r24	; 45
        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
    4550:	84 e0       	ldi	r24, 0x04	; 4
    4552:	e8 31       	cpi	r30, 0x18	; 24
    4554:	f8 07       	cpc	r31, r24
    4556:	a1 f7       	brne	.-24     	; 0x4540 <sd_raw_write+0x104>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    4558:	3e bc       	out	0x2e, r3	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    455a:	0d b4       	in	r0, 0x2d	; 45
    455c:	07 fe       	sbrs	r0, 7
    455e:	fd cf       	rjmp	.-6      	; 0x455a <sd_raw_write+0x11e>
    SPSR &= ~(1 << SPIF);
    4560:	8d b5       	in	r24, 0x2d	; 45
    4562:	8f 77       	andi	r24, 0x7F	; 127
    4564:	8d bd       	out	0x2d, r24	; 45
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    4566:	3e bc       	out	0x2e, r3	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    4568:	0d b4       	in	r0, 0x2d	; 45
    456a:	07 fe       	sbrs	r0, 7
    456c:	fd cf       	rjmp	.-6      	; 0x4568 <sd_raw_write+0x12c>
    SPSR &= ~(1 << SPIF);
    456e:	8d b5       	in	r24, 0x2d	; 45
    4570:	8f 77       	andi	r24, 0x7F	; 127
    4572:	8d bd       	out	0x2d, r24	; 45
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    4574:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    4576:	0d b4       	in	r0, 0x2d	; 45
    4578:	07 fe       	sbrs	r0, 7
    457a:	fd cf       	rjmp	.-6      	; 0x4576 <sd_raw_write+0x13a>
    SPSR &= ~(1 << SPIF);
    457c:	8d b5       	in	r24, 0x2d	; 45
    457e:	8f 77       	andi	r24, 0x7F	; 127
    4580:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    4582:	8e b5       	in	r24, 0x2e	; 46
        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
        sd_raw_send_byte(0xff);

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
    4584:	8f 3f       	cpi	r24, 0xFF	; 255
    4586:	b1 f7       	brne	.-20     	; 0x4574 <sd_raw_write+0x138>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    4588:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    458a:	0d b4       	in	r0, 0x2d	; 45
    458c:	07 fe       	sbrs	r0, 7
    458e:	fd cf       	rjmp	.-6      	; 0x458a <sd_raw_write+0x14e>
    SPSR &= ~(1 << SPIF);
    4590:	8d b5       	in	r24, 0x2d	; 45
    4592:	8f 77       	andi	r24, 0x7F	; 127
    4594:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    4596:	8e b5       	in	r24, 0x2e	; 46
        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
        sd_raw_rec_byte();

        /* deaddress card */
        unselect_card();
    4598:	28 9a       	sbi	0x05, 0	; 5

        buffer += write_length;
    459a:	4c 0c       	add	r4, r12
    459c:	5d 1c       	adc	r5, r13
        offset += write_length;
    459e:	c6 01       	movw	r24, r12
    45a0:	a0 e0       	ldi	r26, 0x00	; 0
    45a2:	b0 e0       	ldi	r27, 0x00	; 0
    45a4:	88 0e       	add	r8, r24
    45a6:	99 1e       	adc	r9, r25
    45a8:	aa 1e       	adc	r10, r26
    45aa:	bb 1e       	adc	r11, r27
        length -= write_length;
    45ac:	6c 18       	sub	r6, r12
    45ae:	7d 08       	sbc	r7, r13

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    45b0:	20 92 1c 04 	sts	0x041C, r2
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    45b4:	61 14       	cp	r6, r1
    45b6:	71 04       	cpc	r7, r1
    45b8:	09 f0       	breq	.+2      	; 0x45bc <sd_raw_write+0x180>
    45ba:	5b cf       	rjmp	.-330    	; 0x4472 <sd_raw_write+0x36>
    45bc:	81 e0       	ldi	r24, 0x01	; 1
    45be:	01 c0       	rjmp	.+2      	; 0x45c2 <sd_raw_write+0x186>
    45c0:	80 e0       	ldi	r24, 0x00	; 0
        raw_block_written = 1;
#endif
    }

    return 1;
}
    45c2:	df 91       	pop	r29
    45c4:	cf 91       	pop	r28
    45c6:	1f 91       	pop	r17
    45c8:	0f 91       	pop	r16
    45ca:	ff 90       	pop	r15
    45cc:	ef 90       	pop	r14
    45ce:	df 90       	pop	r13
    45d0:	cf 90       	pop	r12
    45d2:	bf 90       	pop	r11
    45d4:	af 90       	pop	r10
    45d6:	9f 90       	pop	r9
    45d8:	8f 90       	pop	r8
    45da:	7f 90       	pop	r7
    45dc:	6f 90       	pop	r6
    45de:	5f 90       	pop	r5
    45e0:	4f 90       	pop	r4
    45e2:	3f 90       	pop	r3
    45e4:	2f 90       	pop	r2
    45e6:	08 95       	ret

000045e8 <sd_raw_sync>:
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    45e8:	80 91 1c 04 	lds	r24, 0x041C
    45ec:	88 23       	and	r24, r24
    45ee:	11 f0       	breq	.+4      	; 0x45f4 <sd_raw_sync+0xc>
    45f0:	81 e0       	ldi	r24, 0x01	; 1
    45f2:	08 95       	ret
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    45f4:	60 91 18 04 	lds	r22, 0x0418
    45f8:	70 91 19 04 	lds	r23, 0x0419
    45fc:	80 91 1a 04 	lds	r24, 0x041A
    4600:	90 91 1b 04 	lds	r25, 0x041B
    4604:	48 e1       	ldi	r20, 0x18	; 24
    4606:	52 e0       	ldi	r21, 0x02	; 2
    4608:	20 e0       	ldi	r18, 0x00	; 0
    460a:	32 e0       	ldi	r19, 0x02	; 2
    460c:	0e 94 1e 22 	call	0x443c	; 0x443c <sd_raw_write>
    4610:	88 23       	and	r24, r24
    4612:	19 f0       	breq	.+6      	; 0x461a <sd_raw_sync+0x32>
        return 0;
    raw_block_written = 1;
    4614:	81 e0       	ldi	r24, 0x01	; 1
    4616:	80 93 1c 04 	sts	0x041C, r24
#endif
    return 1;
}
    461a:	08 95       	ret

0000461c <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    461c:	3f 92       	push	r3
    461e:	4f 92       	push	r4
    4620:	5f 92       	push	r5
    4622:	6f 92       	push	r6
    4624:	7f 92       	push	r7
    4626:	8f 92       	push	r8
    4628:	9f 92       	push	r9
    462a:	af 92       	push	r10
    462c:	bf 92       	push	r11
    462e:	cf 92       	push	r12
    4630:	df 92       	push	r13
    4632:	ef 92       	push	r14
    4634:	ff 92       	push	r15
    4636:	0f 93       	push	r16
    4638:	1f 93       	push	r17
    463a:	cf 93       	push	r28
    463c:	df 93       	push	r29
    463e:	3b 01       	movw	r6, r22
    4640:	4c 01       	movw	r8, r24
    4642:	6a 01       	movw	r12, r20
    4644:	29 01       	movw	r4, r18
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    4646:	33 24       	eor	r3, r3
    4648:	3a 94       	dec	r3
    464a:	8f c0       	rjmp	.+286    	; 0x476a <sd_raw_read+0x14e>
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
    464c:	1f ef       	ldi	r17, 0xFF	; 255
    464e:	a1 2e       	mov	r10, r17
    4650:	11 e0       	ldi	r17, 0x01	; 1
    4652:	b1 2e       	mov	r11, r17
    4654:	a6 20       	and	r10, r6
    4656:	b7 20       	and	r11, r7
        block_address = offset - block_offset;
    4658:	c5 01       	movw	r24, r10
    465a:	a0 e0       	ldi	r26, 0x00	; 0
    465c:	b0 e0       	ldi	r27, 0x00	; 0
    465e:	84 01       	movw	r16, r8
    4660:	73 01       	movw	r14, r6
    4662:	e8 1a       	sub	r14, r24
    4664:	f9 0a       	sbc	r15, r25
    4666:	0a 0b       	sbc	r16, r26
    4668:	1b 0b       	sbc	r17, r27
        read_length = 512 - block_offset; /* read up to block border */
    466a:	c0 e0       	ldi	r28, 0x00	; 0
    466c:	d2 e0       	ldi	r29, 0x02	; 2
    466e:	ca 19       	sub	r28, r10
    4670:	db 09       	sbc	r29, r11
    4672:	4c 16       	cp	r4, r28
    4674:	5d 06       	cpc	r5, r29
    4676:	08 f4       	brcc	.+2      	; 0x467a <sd_raw_read+0x5e>
    4678:	e2 01       	movw	r28, r4
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    467a:	80 91 18 04 	lds	r24, 0x0418
    467e:	90 91 19 04 	lds	r25, 0x0419
    4682:	a0 91 1a 04 	lds	r26, 0x041A
    4686:	b0 91 1b 04 	lds	r27, 0x041B
    468a:	e8 16       	cp	r14, r24
    468c:	f9 06       	cpc	r15, r25
    468e:	0a 07       	cpc	r16, r26
    4690:	1b 07       	cpc	r17, r27
    4692:	09 f4       	brne	.+2      	; 0x4696 <sd_raw_read+0x7a>
    4694:	57 c0       	rjmp	.+174    	; 0x4744 <sd_raw_read+0x128>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    4696:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <sd_raw_sync>
    469a:	88 23       	and	r24, r24
    469c:	09 f4       	brne	.+2      	; 0x46a0 <sd_raw_read+0x84>
    469e:	6a c0       	rjmp	.+212    	; 0x4774 <sd_raw_read+0x158>
                return 0;
#endif

            /* address card */
            select_card();
    46a0:	28 98       	cbi	0x05, 0	; 5

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
    46a2:	81 e1       	ldi	r24, 0x11	; 17
    46a4:	b8 01       	movw	r22, r16
    46a6:	a7 01       	movw	r20, r14
    46a8:	0e 94 9e 20 	call	0x413c	; 0x413c <sd_raw_send_command>
    46ac:	88 23       	and	r24, r24
    46ae:	19 f0       	breq	.+6      	; 0x46b6 <sd_raw_read+0x9a>
#endif
            {
                unselect_card();
    46b0:	28 9a       	sbi	0x05, 0	; 5
    46b2:	80 e0       	ldi	r24, 0x00	; 0
    46b4:	5f c0       	rjmp	.+190    	; 0x4774 <sd_raw_read+0x158>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    46b6:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    46b8:	0d b4       	in	r0, 0x2d	; 45
    46ba:	07 fe       	sbrs	r0, 7
    46bc:	fd cf       	rjmp	.-6      	; 0x46b8 <sd_raw_read+0x9c>
    SPSR &= ~(1 << SPIF);
    46be:	8d b5       	in	r24, 0x2d	; 45
    46c0:	8f 77       	andi	r24, 0x7F	; 127
    46c2:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    46c4:	8e b5       	in	r24, 0x2e	; 46
                unselect_card();
                return 0;
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
    46c6:	8e 3f       	cpi	r24, 0xFE	; 254
    46c8:	b1 f7       	brne	.-20     	; 0x46b6 <sd_raw_read+0x9a>
    46ca:	e8 e1       	ldi	r30, 0x18	; 24
    46cc:	f2 e0       	ldi	r31, 0x02	; 2
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    46ce:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    46d0:	0d b4       	in	r0, 0x2d	; 45
    46d2:	07 fe       	sbrs	r0, 7
    46d4:	fd cf       	rjmp	.-6      	; 0x46d0 <sd_raw_read+0xb4>
    SPSR &= ~(1 << SPIF);
    46d6:	8d b5       	in	r24, 0x2d	; 45
    46d8:	8f 77       	andi	r24, 0x7F	; 127
    46da:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    46dc:	8e b5       	in	r24, 0x2e	; 46
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
    46de:	80 83       	st	Z, r24
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
    46e0:	84 e0       	ldi	r24, 0x04	; 4
    46e2:	e7 31       	cpi	r30, 0x17	; 23
    46e4:	f8 07       	cpc	r31, r24
    46e6:	11 f0       	breq	.+4      	; 0x46ec <sd_raw_read+0xd0>
                *cache++ = sd_raw_rec_byte();
    46e8:	31 96       	adiw	r30, 0x01	; 1
    46ea:	f1 cf       	rjmp	.-30     	; 0x46ce <sd_raw_read+0xb2>
            raw_block_address = block_address;
    46ec:	e0 92 18 04 	sts	0x0418, r14
    46f0:	f0 92 19 04 	sts	0x0419, r15
    46f4:	00 93 1a 04 	sts	0x041A, r16
    46f8:	10 93 1b 04 	sts	0x041B, r17

            memcpy(buffer, raw_block + block_offset, read_length);
    46fc:	95 01       	movw	r18, r10
    46fe:	28 5e       	subi	r18, 0xE8	; 232
    4700:	3d 4f       	sbci	r19, 0xFD	; 253
    4702:	c6 01       	movw	r24, r12
    4704:	b9 01       	movw	r22, r18
    4706:	ae 01       	movw	r20, r28
    4708:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <memcpy>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    470c:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    470e:	0d b4       	in	r0, 0x2d	; 45
    4710:	07 fe       	sbrs	r0, 7
    4712:	fd cf       	rjmp	.-6      	; 0x470e <sd_raw_read+0xf2>
    SPSR &= ~(1 << SPIF);
    4714:	8d b5       	in	r24, 0x2d	; 45
    4716:	8f 77       	andi	r24, 0x7F	; 127
    4718:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    471a:	8e b5       	in	r24, 0x2e	; 46
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    471c:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    471e:	0d b4       	in	r0, 0x2d	; 45
    4720:	07 fe       	sbrs	r0, 7
    4722:	fd cf       	rjmp	.-6      	; 0x471e <sd_raw_read+0x102>
    SPSR &= ~(1 << SPIF);
    4724:	8d b5       	in	r24, 0x2d	; 45
    4726:	8f 77       	andi	r24, 0x7F	; 127
    4728:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    472a:	8e b5       	in	r24, 0x2e	; 46
            /* read crc16 */
            sd_raw_rec_byte();
            sd_raw_rec_byte();
            
            /* deaddress card */
            unselect_card();
    472c:	28 9a       	sbi	0x05, 0	; 5
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    472e:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    4730:	0d b4       	in	r0, 0x2d	; 45
    4732:	07 fe       	sbrs	r0, 7
    4734:	fd cf       	rjmp	.-6      	; 0x4730 <sd_raw_read+0x114>
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;

            memcpy(buffer, raw_block + block_offset, read_length);
            buffer += read_length;
    4736:	cc 0e       	add	r12, r28
    4738:	dd 1e       	adc	r13, r29
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    while(!(SPSR & (1 << SPIF)));
    SPSR &= ~(1 << SPIF);
    473a:	8d b5       	in	r24, 0x2d	; 45
    473c:	8f 77       	andi	r24, 0x7F	; 127
    473e:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    4740:	8e b5       	in	r24, 0x2e	; 46
    4742:	0a c0       	rjmp	.+20     	; 0x4758 <sd_raw_read+0x13c>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    4744:	95 01       	movw	r18, r10
    4746:	28 5e       	subi	r18, 0xE8	; 232
    4748:	3d 4f       	sbci	r19, 0xFD	; 253
    474a:	c6 01       	movw	r24, r12
    474c:	b9 01       	movw	r22, r18
    474e:	ae 01       	movw	r20, r28
    4750:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <memcpy>
            buffer += read_length;
    4754:	cc 0e       	add	r12, r28
    4756:	dd 1e       	adc	r13, r29
        }
#endif

        length -= read_length;
    4758:	4c 1a       	sub	r4, r28
    475a:	5d 0a       	sbc	r5, r29
        offset += read_length;
    475c:	ce 01       	movw	r24, r28
    475e:	a0 e0       	ldi	r26, 0x00	; 0
    4760:	b0 e0       	ldi	r27, 0x00	; 0
    4762:	68 0e       	add	r6, r24
    4764:	79 1e       	adc	r7, r25
    4766:	8a 1e       	adc	r8, r26
    4768:	9b 1e       	adc	r9, r27
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    476a:	41 14       	cp	r4, r1
    476c:	51 04       	cpc	r5, r1
    476e:	09 f0       	breq	.+2      	; 0x4772 <sd_raw_read+0x156>
    4770:	6d cf       	rjmp	.-294    	; 0x464c <sd_raw_read+0x30>
    4772:	81 e0       	ldi	r24, 0x01	; 1
        length -= read_length;
        offset += read_length;
    }

    return 1;
}
    4774:	df 91       	pop	r29
    4776:	cf 91       	pop	r28
    4778:	1f 91       	pop	r17
    477a:	0f 91       	pop	r16
    477c:	ff 90       	pop	r15
    477e:	ef 90       	pop	r14
    4780:	df 90       	pop	r13
    4782:	cf 90       	pop	r12
    4784:	bf 90       	pop	r11
    4786:	af 90       	pop	r10
    4788:	9f 90       	pop	r9
    478a:	8f 90       	pop	r8
    478c:	7f 90       	pop	r7
    478e:	6f 90       	pop	r6
    4790:	5f 90       	pop	r5
    4792:	4f 90       	pop	r4
    4794:	3f 90       	pop	r3
    4796:	08 95       	ret

00004798 <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    4798:	2f 92       	push	r2
    479a:	3f 92       	push	r3
    479c:	4f 92       	push	r4
    479e:	5f 92       	push	r5
    47a0:	6f 92       	push	r6
    47a2:	7f 92       	push	r7
    47a4:	8f 92       	push	r8
    47a6:	9f 92       	push	r9
    47a8:	af 92       	push	r10
    47aa:	bf 92       	push	r11
    47ac:	cf 92       	push	r12
    47ae:	df 92       	push	r13
    47b0:	ef 92       	push	r14
    47b2:	ff 92       	push	r15
    47b4:	0f 93       	push	r16
    47b6:	1f 93       	push	r17
    47b8:	df 93       	push	r29
    47ba:	cf 93       	push	r28
    47bc:	00 d0       	rcall	.+0      	; 0x47be <sd_raw_read_interval+0x26>
    47be:	00 d0       	rcall	.+0      	; 0x47c0 <sd_raw_read_interval+0x28>
    47c0:	cd b7       	in	r28, 0x3d	; 61
    47c2:	de b7       	in	r29, 0x3e	; 62
    47c4:	4b 01       	movw	r8, r22
    47c6:	5c 01       	movw	r10, r24
    47c8:	3a 01       	movw	r6, r20
    47ca:	3c 83       	std	Y+4, r19	; 0x04
    47cc:	2b 83       	std	Y+3, r18	; 0x03
    47ce:	27 01       	movw	r4, r14
    47d0:	da 82       	std	Y+2, r13	; 0x02
    47d2:	c9 82       	std	Y+1, r12	; 0x01
    if(!buffer || interval == 0 || length < interval || !callback)
    47d4:	41 15       	cp	r20, r1
    47d6:	51 05       	cpc	r21, r1
    47d8:	a9 f1       	breq	.+106    	; 0x4844 <sd_raw_read_interval+0xac>
    47da:	21 15       	cp	r18, r1
    47dc:	31 05       	cpc	r19, r1
    47de:	91 f1       	breq	.+100    	; 0x4844 <sd_raw_read_interval+0xac>
    47e0:	02 17       	cp	r16, r18
    47e2:	13 07       	cpc	r17, r19
    47e4:	78 f1       	brcs	.+94     	; 0x4844 <sd_raw_read_interval+0xac>
    47e6:	e1 14       	cp	r14, r1
    47e8:	f1 04       	cpc	r15, r1
    47ea:	61 f1       	breq	.+88     	; 0x4844 <sd_raw_read_interval+0xac>
    47ec:	19 01       	movw	r2, r18
    47ee:	30 94       	com	r3
    47f0:	21 94       	neg	r2
    47f2:	31 08       	sbc	r3, r1
    47f4:	33 94       	inc	r3
    47f6:	02 1b       	sub	r16, r18
    47f8:	13 0b       	sbc	r17, r19
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    47fa:	69 01       	movw	r12, r18
    47fc:	ee 24       	eor	r14, r14
    47fe:	ff 24       	eor	r15, r15
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
    4800:	c5 01       	movw	r24, r10
    4802:	b4 01       	movw	r22, r8
    4804:	a3 01       	movw	r20, r6
    4806:	2b 81       	ldd	r18, Y+3	; 0x03
    4808:	3c 81       	ldd	r19, Y+4	; 0x04
    480a:	0e 94 0e 23 	call	0x461c	; 0x461c <sd_raw_read>
    480e:	88 23       	and	r24, r24
    4810:	c9 f0       	breq	.+50     	; 0x4844 <sd_raw_read_interval+0xac>
            return 0;
        if(!callback(buffer, offset, p))
    4812:	c3 01       	movw	r24, r6
    4814:	b5 01       	movw	r22, r10
    4816:	a4 01       	movw	r20, r8
    4818:	29 81       	ldd	r18, Y+1	; 0x01
    481a:	3a 81       	ldd	r19, Y+2	; 0x02
    481c:	f2 01       	movw	r30, r4
    481e:	09 95       	icall
    4820:	88 23       	and	r24, r24
    4822:	91 f0       	breq	.+36     	; 0x4848 <sd_raw_read_interval+0xb0>
            break;
    4824:	02 0d       	add	r16, r2
    4826:	13 1d       	adc	r17, r3
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    4828:	8b 81       	ldd	r24, Y+3	; 0x03
    482a:	9c 81       	ldd	r25, Y+4	; 0x04
    482c:	80 0f       	add	r24, r16
    482e:	91 1f       	adc	r25, r17
    4830:	2b 81       	ldd	r18, Y+3	; 0x03
    4832:	3c 81       	ldd	r19, Y+4	; 0x04
    4834:	82 17       	cp	r24, r18
    4836:	93 07       	cpc	r25, r19
    4838:	38 f0       	brcs	.+14     	; 0x4848 <sd_raw_read_interval+0xb0>
    483a:	8c 0c       	add	r8, r12
    483c:	9d 1c       	adc	r9, r13
    483e:	ae 1c       	adc	r10, r14
    4840:	bf 1c       	adc	r11, r15
    4842:	de cf       	rjmp	.-68     	; 0x4800 <sd_raw_read_interval+0x68>
    4844:	80 e0       	ldi	r24, 0x00	; 0
    4846:	01 c0       	rjmp	.+2      	; 0x484a <sd_raw_read_interval+0xb2>
    4848:	81 e0       	ldi	r24, 0x01	; 1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
    484a:	0f 90       	pop	r0
    484c:	0f 90       	pop	r0
    484e:	0f 90       	pop	r0
    4850:	0f 90       	pop	r0
    4852:	cf 91       	pop	r28
    4854:	df 91       	pop	r29
    4856:	1f 91       	pop	r17
    4858:	0f 91       	pop	r16
    485a:	ff 90       	pop	r15
    485c:	ef 90       	pop	r14
    485e:	df 90       	pop	r13
    4860:	cf 90       	pop	r12
    4862:	bf 90       	pop	r11
    4864:	af 90       	pop	r10
    4866:	9f 90       	pop	r9
    4868:	8f 90       	pop	r8
    486a:	7f 90       	pop	r7
    486c:	6f 90       	pop	r6
    486e:	5f 90       	pop	r5
    4870:	4f 90       	pop	r4
    4872:	3f 90       	pop	r3
    4874:	2f 90       	pop	r2
    4876:	08 95       	ret

00004878 <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
    4878:	0f 93       	push	r16
    487a:	1f 93       	push	r17
    487c:	cf 93       	push	r28
    487e:	df 93       	push	r29
    /* enable inputs for reading card status */
    configure_pin_available();
    configure_pin_locked();

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
    4880:	22 9a       	sbi	0x04, 2	; 4
    configure_pin_sck();
    4882:	21 9a       	sbi	0x04, 1	; 4
    configure_pin_ss();
    4884:	20 9a       	sbi	0x04, 0	; 4
    configure_pin_miso();
    4886:	23 98       	cbi	0x04, 3	; 4

    unselect_card();
    4888:	28 9a       	sbi	0x05, 0	; 5

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
    SPCR = (0 << SPIE) | /* SPI Interrupt Enable */
    488a:	83 e5       	ldi	r24, 0x53	; 83
    488c:	8c bd       	out	0x2c, r24	; 44
           (1 << MSTR) | /* Master mode */
           (0 << CPOL) | /* Clock Polarity: SCK low when idle */
           (0 << CPHA) | /* Clock Phase: sample on rising SCK edge */
           (1 << SPR1) | /* Clock Frequency: f_OSC / 128 */
           (1 << SPR0);
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
    488e:	8d b5       	in	r24, 0x2d	; 45
    4890:	8e 7f       	andi	r24, 0xFE	; 254
    4892:	8d bd       	out	0x2d, r24	; 45

    /* initialization procedure */
    sd_raw_card_type = 0;
    4894:	10 92 1d 04 	sts	0x041D, r1
    4898:	90 e0       	ldi	r25, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    489a:	2f ef       	ldi	r18, 0xFF	; 255
    489c:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR & (1 << SPIF)));
    489e:	0d b4       	in	r0, 0x2d	; 45
    48a0:	07 fe       	sbrs	r0, 7
    48a2:	fd cf       	rjmp	.-6      	; 0x489e <sd_raw_init+0x26>
    SPSR &= ~(1 << SPIF);
    48a4:	8d b5       	in	r24, 0x2d	; 45
    48a6:	8f 77       	andi	r24, 0x7F	; 127
    48a8:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    48aa:	8e b5       	in	r24, 0x2e	; 46
    
    if(!sd_raw_available())
        return 0;

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    48ac:	9f 5f       	subi	r25, 0xFF	; 255
    48ae:	9a 30       	cpi	r25, 0x0A	; 10
    48b0:	a9 f7       	brne	.-22     	; 0x489c <sd_raw_init+0x24>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    48b2:	28 98       	cbi	0x05, 0	; 5
    48b4:	c0 e0       	ldi	r28, 0x00	; 0
    48b6:	d0 e0       	ldi	r29, 0x00	; 0

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    48b8:	80 e0       	ldi	r24, 0x00	; 0
    48ba:	40 e0       	ldi	r20, 0x00	; 0
    48bc:	50 e0       	ldi	r21, 0x00	; 0
    48be:	60 e0       	ldi	r22, 0x00	; 0
    48c0:	70 e0       	ldi	r23, 0x00	; 0
    48c2:	0e 94 9e 20 	call	0x413c	; 0x413c <sd_raw_send_command>
    48c6:	18 2f       	mov	r17, r24
        if(response == (1 << R1_IDLE_STATE))
    48c8:	81 30       	cpi	r24, 0x01	; 1
    48ca:	39 f0       	breq	.+14     	; 0x48da <sd_raw_init+0x62>
            break;

        if(i == 0x1ff)
    48cc:	81 e0       	ldi	r24, 0x01	; 1
    48ce:	cf 3f       	cpi	r28, 0xFF	; 255
    48d0:	d8 07       	cpc	r29, r24
    48d2:	09 f4       	brne	.+2      	; 0x48d6 <sd_raw_init+0x5e>
    48d4:	40 c0       	rjmp	.+128    	; 0x4956 <sd_raw_init+0xde>
    /* address card */
    select_card();

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    48d6:	21 96       	adiw	r28, 0x01	; 1
    48d8:	ef cf       	rjmp	.-34     	; 0x48b8 <sd_raw_init+0x40>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
    48da:	87 e3       	ldi	r24, 0x37	; 55
    48dc:	40 e0       	ldi	r20, 0x00	; 0
    48de:	50 e0       	ldi	r21, 0x00	; 0
    48e0:	60 e0       	ldi	r22, 0x00	; 0
    48e2:	70 e0       	ldi	r23, 0x00	; 0
    48e4:	0e 94 9e 20 	call	0x413c	; 0x413c <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    48e8:	89 e2       	ldi	r24, 0x29	; 41
    48ea:	40 e0       	ldi	r20, 0x00	; 0
    48ec:	50 e0       	ldi	r21, 0x00	; 0
    48ee:	60 e0       	ldi	r22, 0x00	; 0
    48f0:	70 e0       	ldi	r23, 0x00	; 0
    48f2:	0e 94 9e 20 	call	0x413c	; 0x413c <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    48f6:	82 fd       	sbrc	r24, 2
    48f8:	02 c0       	rjmp	.+4      	; 0x48fe <sd_raw_init+0x86>
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    48fa:	10 93 1d 04 	sts	0x041D, r17
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    48fe:	80 91 1d 04 	lds	r24, 0x041D
    4902:	08 2f       	mov	r16, r24
    4904:	10 e0       	ldi	r17, 0x00	; 0
    4906:	03 70       	andi	r16, 0x03	; 3
    4908:	10 70       	andi	r17, 0x00	; 0
    490a:	c0 e0       	ldi	r28, 0x00	; 0
    490c:	d0 e0       	ldi	r29, 0x00	; 0
    490e:	01 15       	cp	r16, r1
    4910:	11 05       	cpc	r17, r1
    4912:	49 f0       	breq	.+18     	; 0x4926 <sd_raw_init+0xae>
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
    4914:	87 e3       	ldi	r24, 0x37	; 55
    4916:	40 e0       	ldi	r20, 0x00	; 0
    4918:	50 e0       	ldi	r21, 0x00	; 0
    491a:	60 e0       	ldi	r22, 0x00	; 0
    491c:	70 e0       	ldi	r23, 0x00	; 0
    491e:	0e 94 9e 20 	call	0x413c	; 0x413c <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    4922:	89 e2       	ldi	r24, 0x29	; 41
    4924:	01 c0       	rjmp	.+2      	; 0x4928 <sd_raw_init+0xb0>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    4926:	81 e0       	ldi	r24, 0x01	; 1
    4928:	40 e0       	ldi	r20, 0x00	; 0
    492a:	50 e0       	ldi	r21, 0x00	; 0
    492c:	60 e0       	ldi	r22, 0x00	; 0
    492e:	70 e0       	ldi	r23, 0x00	; 0
    4930:	0e 94 9e 20 	call	0x413c	; 0x413c <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
    4934:	80 ff       	sbrs	r24, 0
    4936:	06 c0       	rjmp	.+12     	; 0x4944 <sd_raw_init+0xcc>
            break;

        if(i == 0x7fff)
    4938:	8f e7       	ldi	r24, 0x7F	; 127
    493a:	cf 3f       	cpi	r28, 0xFF	; 255
    493c:	d8 07       	cpc	r29, r24
    493e:	59 f0       	breq	.+22     	; 0x4956 <sd_raw_init+0xde>
            /* MMC card */
        }
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    4940:	21 96       	adiw	r28, 0x01	; 1
    4942:	e5 cf       	rjmp	.-54     	; 0x490e <sd_raw_init+0x96>
        sd_raw_rec_byte();
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    4944:	80 e1       	ldi	r24, 0x10	; 16
    4946:	40 e0       	ldi	r20, 0x00	; 0
    4948:	52 e0       	ldi	r21, 0x02	; 2
    494a:	60 e0       	ldi	r22, 0x00	; 0
    494c:	70 e0       	ldi	r23, 0x00	; 0
    494e:	0e 94 9e 20 	call	0x413c	; 0x413c <sd_raw_send_command>
    4952:	88 23       	and	r24, r24
    4954:	19 f0       	breq	.+6      	; 0x495c <sd_raw_init+0xe4>
    {
        unselect_card();
    4956:	28 9a       	sbi	0x05, 0	; 5
    4958:	80 e0       	ldi	r24, 0x00	; 0
    495a:	22 c0       	rjmp	.+68     	; 0x49a0 <sd_raw_init+0x128>
        return 0;
    }

    /* deaddress card */
    unselect_card();
    495c:	28 9a       	sbi	0x05, 0	; 5

    /* switch to highest SPI frequency possible */
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
    495e:	8c b5       	in	r24, 0x2c	; 44
    4960:	8c 7f       	andi	r24, 0xFC	; 252
    4962:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
    4964:	8d b5       	in	r24, 0x2d	; 45
    4966:	81 60       	ori	r24, 0x01	; 1
    4968:	8d bd       	out	0x2d, r24	; 45

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
    496a:	8f ef       	ldi	r24, 0xFF	; 255
    496c:	9f ef       	ldi	r25, 0xFF	; 255
    496e:	af ef       	ldi	r26, 0xFF	; 255
    4970:	bf ef       	ldi	r27, 0xFF	; 255
    4972:	80 93 18 04 	sts	0x0418, r24
    4976:	90 93 19 04 	sts	0x0419, r25
    497a:	a0 93 1a 04 	sts	0x041A, r26
    497e:	b0 93 1b 04 	sts	0x041B, r27
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
    4982:	81 e0       	ldi	r24, 0x01	; 1
    4984:	80 93 1c 04 	sts	0x041C, r24
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    4988:	60 e0       	ldi	r22, 0x00	; 0
    498a:	70 e0       	ldi	r23, 0x00	; 0
    498c:	80 e0       	ldi	r24, 0x00	; 0
    498e:	90 e0       	ldi	r25, 0x00	; 0
    4990:	48 e1       	ldi	r20, 0x18	; 24
    4992:	52 e0       	ldi	r21, 0x02	; 2
    4994:	20 e0       	ldi	r18, 0x00	; 0
    4996:	32 e0       	ldi	r19, 0x02	; 2
    4998:	0e 94 0e 23 	call	0x461c	; 0x461c <sd_raw_read>
    499c:	81 11       	cpse	r24, r1
    499e:	81 e0       	ldi	r24, 0x01	; 1
        return 0;
#endif

    return 1;
}
    49a0:	df 91       	pop	r29
    49a2:	cf 91       	pop	r28
    49a4:	1f 91       	pop	r17
    49a6:	0f 91       	pop	r16
    49a8:	08 95       	ret

000049aa <sd_raw_write_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
    49aa:	4f 92       	push	r4
    49ac:	5f 92       	push	r5
    49ae:	6f 92       	push	r6
    49b0:	7f 92       	push	r7
    49b2:	8f 92       	push	r8
    49b4:	9f 92       	push	r9
    49b6:	af 92       	push	r10
    49b8:	bf 92       	push	r11
    49ba:	cf 92       	push	r12
    49bc:	df 92       	push	r13
    49be:	ef 92       	push	r14
    49c0:	ff 92       	push	r15
    49c2:	0f 93       	push	r16
    49c4:	1f 93       	push	r17
    49c6:	cf 93       	push	r28
    49c8:	df 93       	push	r29
    49ca:	5b 01       	movw	r10, r22
    49cc:	6c 01       	movw	r12, r24
    49ce:	4a 01       	movw	r8, r20
    49d0:	e9 01       	movw	r28, r18
    49d2:	38 01       	movw	r6, r16
    49d4:	27 01       	movw	r4, r14
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
    49d6:	41 15       	cp	r20, r1
    49d8:	51 05       	cpc	r21, r1
    49da:	71 f1       	breq	.+92     	; 0x4a38 <sd_raw_write_interval+0x8e>
    49dc:	01 15       	cp	r16, r1
    49de:	11 05       	cpc	r17, r1
    49e0:	59 f1       	breq	.+86     	; 0x4a38 <sd_raw_write_interval+0x8e>
        return 0;

    uint8_t endless = (length == 0);
    49e2:	ff 24       	eor	r15, r15
    49e4:	21 15       	cp	r18, r1
    49e6:	31 05       	cpc	r19, r1
    49e8:	11 f5       	brne	.+68     	; 0x4a2e <sd_raw_write_interval+0x84>
    49ea:	ff 24       	eor	r15, r15
    49ec:	f3 94       	inc	r15
    49ee:	1f c0       	rjmp	.+62     	; 0x4a2e <sd_raw_write_interval+0x84>
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    49f0:	c4 01       	movw	r24, r8
    49f2:	b6 01       	movw	r22, r12
    49f4:	a5 01       	movw	r20, r10
    49f6:	92 01       	movw	r18, r4
    49f8:	f3 01       	movw	r30, r6
    49fa:	09 95       	icall
    49fc:	8c 01       	movw	r16, r24
        if(!bytes_to_write)
    49fe:	00 97       	sbiw	r24, 0x00	; 0
    4a00:	e9 f0       	breq	.+58     	; 0x4a3c <sd_raw_write_interval+0x92>
            break;
        if(!endless && bytes_to_write > length)
    4a02:	ff 20       	and	r15, r15
    4a04:	19 f4       	brne	.+6      	; 0x4a0c <sd_raw_write_interval+0x62>
    4a06:	c8 17       	cp	r28, r24
    4a08:	d9 07       	cpc	r29, r25
    4a0a:	b0 f0       	brcs	.+44     	; 0x4a38 <sd_raw_write_interval+0x8e>
            return 0;

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
    4a0c:	c6 01       	movw	r24, r12
    4a0e:	b5 01       	movw	r22, r10
    4a10:	a4 01       	movw	r20, r8
    4a12:	98 01       	movw	r18, r16
    4a14:	0e 94 1e 22 	call	0x443c	; 0x443c <sd_raw_write>
    4a18:	88 23       	and	r24, r24
    4a1a:	71 f0       	breq	.+28     	; 0x4a38 <sd_raw_write_interval+0x8e>
            return 0;

        offset += bytes_to_write;
    4a1c:	c8 01       	movw	r24, r16
    4a1e:	a0 e0       	ldi	r26, 0x00	; 0
    4a20:	b0 e0       	ldi	r27, 0x00	; 0
    4a22:	a8 0e       	add	r10, r24
    4a24:	b9 1e       	adc	r11, r25
    4a26:	ca 1e       	adc	r12, r26
    4a28:	db 1e       	adc	r13, r27
        length -= bytes_to_write;
    4a2a:	c0 1b       	sub	r28, r16
    4a2c:	d1 0b       	sbc	r29, r17

    if(!buffer || !callback)
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    4a2e:	ff 20       	and	r15, r15
    4a30:	f9 f6       	brne	.-66     	; 0x49f0 <sd_raw_write_interval+0x46>
    4a32:	20 97       	sbiw	r28, 0x00	; 0
    4a34:	e9 f6       	brne	.-70     	; 0x49f0 <sd_raw_write_interval+0x46>
    4a36:	02 c0       	rjmp	.+4      	; 0x4a3c <sd_raw_write_interval+0x92>
    4a38:	80 e0       	ldi	r24, 0x00	; 0
    4a3a:	01 c0       	rjmp	.+2      	; 0x4a3e <sd_raw_write_interval+0x94>
    4a3c:	81 e0       	ldi	r24, 0x01	; 1
        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
}
    4a3e:	df 91       	pop	r29
    4a40:	cf 91       	pop	r28
    4a42:	1f 91       	pop	r17
    4a44:	0f 91       	pop	r16
    4a46:	ff 90       	pop	r15
    4a48:	ef 90       	pop	r14
    4a4a:	df 90       	pop	r13
    4a4c:	cf 90       	pop	r12
    4a4e:	bf 90       	pop	r11
    4a50:	af 90       	pop	r10
    4a52:	9f 90       	pop	r9
    4a54:	8f 90       	pop	r8
    4a56:	7f 90       	pop	r7
    4a58:	6f 90       	pop	r6
    4a5a:	5f 90       	pop	r5
    4a5c:	4f 90       	pop	r4
    4a5e:	08 95       	ret

00004a60 <__mulsi3>:
    4a60:	62 9f       	mul	r22, r18
    4a62:	d0 01       	movw	r26, r0
    4a64:	73 9f       	mul	r23, r19
    4a66:	f0 01       	movw	r30, r0
    4a68:	82 9f       	mul	r24, r18
    4a6a:	e0 0d       	add	r30, r0
    4a6c:	f1 1d       	adc	r31, r1
    4a6e:	64 9f       	mul	r22, r20
    4a70:	e0 0d       	add	r30, r0
    4a72:	f1 1d       	adc	r31, r1
    4a74:	92 9f       	mul	r25, r18
    4a76:	f0 0d       	add	r31, r0
    4a78:	83 9f       	mul	r24, r19
    4a7a:	f0 0d       	add	r31, r0
    4a7c:	74 9f       	mul	r23, r20
    4a7e:	f0 0d       	add	r31, r0
    4a80:	65 9f       	mul	r22, r21
    4a82:	f0 0d       	add	r31, r0
    4a84:	99 27       	eor	r25, r25
    4a86:	72 9f       	mul	r23, r18
    4a88:	b0 0d       	add	r27, r0
    4a8a:	e1 1d       	adc	r30, r1
    4a8c:	f9 1f       	adc	r31, r25
    4a8e:	63 9f       	mul	r22, r19
    4a90:	b0 0d       	add	r27, r0
    4a92:	e1 1d       	adc	r30, r1
    4a94:	f9 1f       	adc	r31, r25
    4a96:	bd 01       	movw	r22, r26
    4a98:	cf 01       	movw	r24, r30
    4a9a:	11 24       	eor	r1, r1
    4a9c:	08 95       	ret

00004a9e <__udivmodhi4>:
    4a9e:	aa 1b       	sub	r26, r26
    4aa0:	bb 1b       	sub	r27, r27
    4aa2:	51 e1       	ldi	r21, 0x11	; 17
    4aa4:	07 c0       	rjmp	.+14     	; 0x4ab4 <__udivmodhi4_ep>

00004aa6 <__udivmodhi4_loop>:
    4aa6:	aa 1f       	adc	r26, r26
    4aa8:	bb 1f       	adc	r27, r27
    4aaa:	a6 17       	cp	r26, r22
    4aac:	b7 07       	cpc	r27, r23
    4aae:	10 f0       	brcs	.+4      	; 0x4ab4 <__udivmodhi4_ep>
    4ab0:	a6 1b       	sub	r26, r22
    4ab2:	b7 0b       	sbc	r27, r23

00004ab4 <__udivmodhi4_ep>:
    4ab4:	88 1f       	adc	r24, r24
    4ab6:	99 1f       	adc	r25, r25
    4ab8:	5a 95       	dec	r21
    4aba:	a9 f7       	brne	.-22     	; 0x4aa6 <__udivmodhi4_loop>
    4abc:	80 95       	com	r24
    4abe:	90 95       	com	r25
    4ac0:	bc 01       	movw	r22, r24
    4ac2:	cd 01       	movw	r24, r26
    4ac4:	08 95       	ret

00004ac6 <__divmodhi4>:
    4ac6:	97 fb       	bst	r25, 7
    4ac8:	09 2e       	mov	r0, r25
    4aca:	07 26       	eor	r0, r23
    4acc:	0a d0       	rcall	.+20     	; 0x4ae2 <__divmodhi4_neg1>
    4ace:	77 fd       	sbrc	r23, 7
    4ad0:	04 d0       	rcall	.+8      	; 0x4ada <__divmodhi4_neg2>
    4ad2:	e5 df       	rcall	.-54     	; 0x4a9e <__udivmodhi4>
    4ad4:	06 d0       	rcall	.+12     	; 0x4ae2 <__divmodhi4_neg1>
    4ad6:	00 20       	and	r0, r0
    4ad8:	1a f4       	brpl	.+6      	; 0x4ae0 <__divmodhi4_exit>

00004ada <__divmodhi4_neg2>:
    4ada:	70 95       	com	r23
    4adc:	61 95       	neg	r22
    4ade:	7f 4f       	sbci	r23, 0xFF	; 255

00004ae0 <__divmodhi4_exit>:
    4ae0:	08 95       	ret

00004ae2 <__divmodhi4_neg1>:
    4ae2:	f6 f7       	brtc	.-4      	; 0x4ae0 <__divmodhi4_exit>
    4ae4:	90 95       	com	r25
    4ae6:	81 95       	neg	r24
    4ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    4aea:	08 95       	ret

00004aec <__udivmodsi4>:
    4aec:	a1 e2       	ldi	r26, 0x21	; 33
    4aee:	1a 2e       	mov	r1, r26
    4af0:	aa 1b       	sub	r26, r26
    4af2:	bb 1b       	sub	r27, r27
    4af4:	fd 01       	movw	r30, r26
    4af6:	0d c0       	rjmp	.+26     	; 0x4b12 <__udivmodsi4_ep>

00004af8 <__udivmodsi4_loop>:
    4af8:	aa 1f       	adc	r26, r26
    4afa:	bb 1f       	adc	r27, r27
    4afc:	ee 1f       	adc	r30, r30
    4afe:	ff 1f       	adc	r31, r31
    4b00:	a2 17       	cp	r26, r18
    4b02:	b3 07       	cpc	r27, r19
    4b04:	e4 07       	cpc	r30, r20
    4b06:	f5 07       	cpc	r31, r21
    4b08:	20 f0       	brcs	.+8      	; 0x4b12 <__udivmodsi4_ep>
    4b0a:	a2 1b       	sub	r26, r18
    4b0c:	b3 0b       	sbc	r27, r19
    4b0e:	e4 0b       	sbc	r30, r20
    4b10:	f5 0b       	sbc	r31, r21

00004b12 <__udivmodsi4_ep>:
    4b12:	66 1f       	adc	r22, r22
    4b14:	77 1f       	adc	r23, r23
    4b16:	88 1f       	adc	r24, r24
    4b18:	99 1f       	adc	r25, r25
    4b1a:	1a 94       	dec	r1
    4b1c:	69 f7       	brne	.-38     	; 0x4af8 <__udivmodsi4_loop>
    4b1e:	60 95       	com	r22
    4b20:	70 95       	com	r23
    4b22:	80 95       	com	r24
    4b24:	90 95       	com	r25
    4b26:	9b 01       	movw	r18, r22
    4b28:	ac 01       	movw	r20, r24
    4b2a:	bd 01       	movw	r22, r26
    4b2c:	cf 01       	movw	r24, r30
    4b2e:	08 95       	ret

00004b30 <strcmp_P>:
    4b30:	fb 01       	movw	r30, r22
    4b32:	dc 01       	movw	r26, r24
    4b34:	8d 91       	ld	r24, X+
    4b36:	05 90       	lpm	r0, Z+
    4b38:	80 19       	sub	r24, r0
    4b3a:	01 10       	cpse	r0, r1
    4b3c:	d9 f3       	breq	.-10     	; 0x4b34 <strcmp_P+0x4>
    4b3e:	99 0b       	sbc	r25, r25
    4b40:	08 95       	ret

00004b42 <strncmp_P>:
    4b42:	fb 01       	movw	r30, r22
    4b44:	dc 01       	movw	r26, r24
    4b46:	41 50       	subi	r20, 0x01	; 1
    4b48:	50 40       	sbci	r21, 0x00	; 0
    4b4a:	30 f0       	brcs	.+12     	; 0x4b58 <strncmp_P+0x16>
    4b4c:	8d 91       	ld	r24, X+
    4b4e:	05 90       	lpm	r0, Z+
    4b50:	80 19       	sub	r24, r0
    4b52:	19 f4       	brne	.+6      	; 0x4b5a <strncmp_P+0x18>
    4b54:	00 20       	and	r0, r0
    4b56:	b9 f7       	brne	.-18     	; 0x4b46 <strncmp_P+0x4>
    4b58:	88 1b       	sub	r24, r24
    4b5a:	99 0b       	sbc	r25, r25
    4b5c:	08 95       	ret

00004b5e <memcpy>:
    4b5e:	fb 01       	movw	r30, r22
    4b60:	dc 01       	movw	r26, r24
    4b62:	02 c0       	rjmp	.+4      	; 0x4b68 <memcpy+0xa>
    4b64:	01 90       	ld	r0, Z+
    4b66:	0d 92       	st	X+, r0
    4b68:	41 50       	subi	r20, 0x01	; 1
    4b6a:	50 40       	sbci	r21, 0x00	; 0
    4b6c:	d8 f7       	brcc	.-10     	; 0x4b64 <memcpy+0x6>
    4b6e:	08 95       	ret

00004b70 <memset>:
    4b70:	dc 01       	movw	r26, r24
    4b72:	01 c0       	rjmp	.+2      	; 0x4b76 <memset+0x6>
    4b74:	6d 93       	st	X+, r22
    4b76:	41 50       	subi	r20, 0x01	; 1
    4b78:	50 40       	sbci	r21, 0x00	; 0
    4b7a:	e0 f7       	brcc	.-8      	; 0x4b74 <memset+0x4>
    4b7c:	08 95       	ret

00004b7e <strchr>:
    4b7e:	fc 01       	movw	r30, r24
    4b80:	81 91       	ld	r24, Z+
    4b82:	86 17       	cp	r24, r22
    4b84:	21 f0       	breq	.+8      	; 0x4b8e <strchr+0x10>
    4b86:	88 23       	and	r24, r24
    4b88:	d9 f7       	brne	.-10     	; 0x4b80 <strchr+0x2>
    4b8a:	99 27       	eor	r25, r25
    4b8c:	08 95       	ret
    4b8e:	31 97       	sbiw	r30, 0x01	; 1
    4b90:	cf 01       	movw	r24, r30
    4b92:	08 95       	ret

00004b94 <strcmp>:
    4b94:	fb 01       	movw	r30, r22
    4b96:	dc 01       	movw	r26, r24
    4b98:	8d 91       	ld	r24, X+
    4b9a:	01 90       	ld	r0, Z+
    4b9c:	80 19       	sub	r24, r0
    4b9e:	01 10       	cpse	r0, r1
    4ba0:	d9 f3       	breq	.-10     	; 0x4b98 <strcmp+0x4>
    4ba2:	99 0b       	sbc	r25, r25
    4ba4:	08 95       	ret

00004ba6 <strncmp>:
    4ba6:	fb 01       	movw	r30, r22
    4ba8:	dc 01       	movw	r26, r24
    4baa:	41 50       	subi	r20, 0x01	; 1
    4bac:	50 40       	sbci	r21, 0x00	; 0
    4bae:	30 f0       	brcs	.+12     	; 0x4bbc <strncmp+0x16>
    4bb0:	8d 91       	ld	r24, X+
    4bb2:	01 90       	ld	r0, Z+
    4bb4:	80 19       	sub	r24, r0
    4bb6:	19 f4       	brne	.+6      	; 0x4bbe <strncmp+0x18>
    4bb8:	00 20       	and	r0, r0
    4bba:	b9 f7       	brne	.-18     	; 0x4baa <strncmp+0x4>
    4bbc:	88 1b       	sub	r24, r24
    4bbe:	99 0b       	sbc	r25, r25
    4bc0:	08 95       	ret

00004bc2 <strncpy>:
    4bc2:	fb 01       	movw	r30, r22
    4bc4:	dc 01       	movw	r26, r24
    4bc6:	41 50       	subi	r20, 0x01	; 1
    4bc8:	50 40       	sbci	r21, 0x00	; 0
    4bca:	48 f0       	brcs	.+18     	; 0x4bde <strncpy+0x1c>
    4bcc:	01 90       	ld	r0, Z+
    4bce:	0d 92       	st	X+, r0
    4bd0:	00 20       	and	r0, r0
    4bd2:	c9 f7       	brne	.-14     	; 0x4bc6 <strncpy+0x4>
    4bd4:	01 c0       	rjmp	.+2      	; 0x4bd8 <strncpy+0x16>
    4bd6:	1d 92       	st	X+, r1
    4bd8:	41 50       	subi	r20, 0x01	; 1
    4bda:	50 40       	sbci	r21, 0x00	; 0
    4bdc:	e0 f7       	brcc	.-8      	; 0x4bd6 <strncpy+0x14>
    4bde:	08 95       	ret

00004be0 <strrchr>:
    4be0:	fc 01       	movw	r30, r24
    4be2:	81 e0       	ldi	r24, 0x01	; 1
    4be4:	90 e0       	ldi	r25, 0x00	; 0
    4be6:	01 90       	ld	r0, Z+
    4be8:	06 16       	cp	r0, r22
    4bea:	09 f4       	brne	.+2      	; 0x4bee <strrchr+0xe>
    4bec:	cf 01       	movw	r24, r30
    4bee:	00 20       	and	r0, r0
    4bf0:	d1 f7       	brne	.-12     	; 0x4be6 <strrchr+0x6>
    4bf2:	01 97       	sbiw	r24, 0x01	; 1
    4bf4:	08 95       	ret

00004bf6 <fgetc>:
    4bf6:	cf 93       	push	r28
    4bf8:	df 93       	push	r29
    4bfa:	ec 01       	movw	r28, r24
    4bfc:	4b 81       	ldd	r20, Y+3	; 0x03
    4bfe:	40 ff       	sbrs	r20, 0
    4c00:	1a c0       	rjmp	.+52     	; 0x4c36 <fgetc+0x40>
    4c02:	46 ff       	sbrs	r20, 6
    4c04:	0a c0       	rjmp	.+20     	; 0x4c1a <fgetc+0x24>
    4c06:	4f 7b       	andi	r20, 0xBF	; 191
    4c08:	4b 83       	std	Y+3, r20	; 0x03
    4c0a:	8e 81       	ldd	r24, Y+6	; 0x06
    4c0c:	9f 81       	ldd	r25, Y+7	; 0x07
    4c0e:	01 96       	adiw	r24, 0x01	; 1
    4c10:	9f 83       	std	Y+7, r25	; 0x07
    4c12:	8e 83       	std	Y+6, r24	; 0x06
    4c14:	8a 81       	ldd	r24, Y+2	; 0x02
    4c16:	28 2f       	mov	r18, r24
    4c18:	2b c0       	rjmp	.+86     	; 0x4c70 <fgetc+0x7a>
    4c1a:	42 ff       	sbrs	r20, 2
    4c1c:	13 c0       	rjmp	.+38     	; 0x4c44 <fgetc+0x4e>
    4c1e:	e8 81       	ld	r30, Y
    4c20:	f9 81       	ldd	r31, Y+1	; 0x01
    4c22:	80 81       	ld	r24, Z
    4c24:	28 2f       	mov	r18, r24
    4c26:	33 27       	eor	r19, r19
    4c28:	27 fd       	sbrc	r18, 7
    4c2a:	30 95       	com	r19
    4c2c:	21 15       	cp	r18, r1
    4c2e:	31 05       	cpc	r19, r1
    4c30:	29 f4       	brne	.+10     	; 0x4c3c <fgetc+0x46>
    4c32:	40 62       	ori	r20, 0x20	; 32
    4c34:	4b 83       	std	Y+3, r20	; 0x03
    4c36:	2f ef       	ldi	r18, 0xFF	; 255
    4c38:	3f ef       	ldi	r19, 0xFF	; 255
    4c3a:	1b c0       	rjmp	.+54     	; 0x4c72 <fgetc+0x7c>
    4c3c:	31 96       	adiw	r30, 0x01	; 1
    4c3e:	f9 83       	std	Y+1, r31	; 0x01
    4c40:	e8 83       	st	Y, r30
    4c42:	11 c0       	rjmp	.+34     	; 0x4c66 <fgetc+0x70>
    4c44:	ea 85       	ldd	r30, Y+10	; 0x0a
    4c46:	fb 85       	ldd	r31, Y+11	; 0x0b
    4c48:	ce 01       	movw	r24, r28
    4c4a:	09 95       	icall
    4c4c:	9c 01       	movw	r18, r24
    4c4e:	97 ff       	sbrs	r25, 7
    4c50:	0a c0       	rjmp	.+20     	; 0x4c66 <fgetc+0x70>
    4c52:	9b 81       	ldd	r25, Y+3	; 0x03
    4c54:	2f 5f       	subi	r18, 0xFF	; 255
    4c56:	3f 4f       	sbci	r19, 0xFF	; 255
    4c58:	11 f0       	breq	.+4      	; 0x4c5e <fgetc+0x68>
    4c5a:	80 e2       	ldi	r24, 0x20	; 32
    4c5c:	01 c0       	rjmp	.+2      	; 0x4c60 <fgetc+0x6a>
    4c5e:	80 e1       	ldi	r24, 0x10	; 16
    4c60:	89 2b       	or	r24, r25
    4c62:	8b 83       	std	Y+3, r24	; 0x03
    4c64:	e8 cf       	rjmp	.-48     	; 0x4c36 <fgetc+0x40>
    4c66:	8e 81       	ldd	r24, Y+6	; 0x06
    4c68:	9f 81       	ldd	r25, Y+7	; 0x07
    4c6a:	01 96       	adiw	r24, 0x01	; 1
    4c6c:	9f 83       	std	Y+7, r25	; 0x07
    4c6e:	8e 83       	std	Y+6, r24	; 0x06
    4c70:	30 e0       	ldi	r19, 0x00	; 0
    4c72:	c9 01       	movw	r24, r18
    4c74:	df 91       	pop	r29
    4c76:	cf 91       	pop	r28
    4c78:	08 95       	ret

00004c7a <fputc>:
    4c7a:	0f 93       	push	r16
    4c7c:	1f 93       	push	r17
    4c7e:	cf 93       	push	r28
    4c80:	df 93       	push	r29
    4c82:	8c 01       	movw	r16, r24
    4c84:	eb 01       	movw	r28, r22
    4c86:	8b 81       	ldd	r24, Y+3	; 0x03
    4c88:	81 ff       	sbrs	r24, 1
    4c8a:	1b c0       	rjmp	.+54     	; 0x4cc2 <fputc+0x48>
    4c8c:	82 ff       	sbrs	r24, 2
    4c8e:	0d c0       	rjmp	.+26     	; 0x4caa <fputc+0x30>
    4c90:	2e 81       	ldd	r18, Y+6	; 0x06
    4c92:	3f 81       	ldd	r19, Y+7	; 0x07
    4c94:	8c 81       	ldd	r24, Y+4	; 0x04
    4c96:	9d 81       	ldd	r25, Y+5	; 0x05
    4c98:	28 17       	cp	r18, r24
    4c9a:	39 07       	cpc	r19, r25
    4c9c:	64 f4       	brge	.+24     	; 0x4cb6 <fputc+0x3c>
    4c9e:	e8 81       	ld	r30, Y
    4ca0:	f9 81       	ldd	r31, Y+1	; 0x01
    4ca2:	01 93       	st	Z+, r16
    4ca4:	f9 83       	std	Y+1, r31	; 0x01
    4ca6:	e8 83       	st	Y, r30
    4ca8:	06 c0       	rjmp	.+12     	; 0x4cb6 <fputc+0x3c>
    4caa:	e8 85       	ldd	r30, Y+8	; 0x08
    4cac:	f9 85       	ldd	r31, Y+9	; 0x09
    4cae:	80 2f       	mov	r24, r16
    4cb0:	09 95       	icall
    4cb2:	89 2b       	or	r24, r25
    4cb4:	31 f4       	brne	.+12     	; 0x4cc2 <fputc+0x48>
    4cb6:	8e 81       	ldd	r24, Y+6	; 0x06
    4cb8:	9f 81       	ldd	r25, Y+7	; 0x07
    4cba:	01 96       	adiw	r24, 0x01	; 1
    4cbc:	9f 83       	std	Y+7, r25	; 0x07
    4cbe:	8e 83       	std	Y+6, r24	; 0x06
    4cc0:	02 c0       	rjmp	.+4      	; 0x4cc6 <fputc+0x4c>
    4cc2:	0f ef       	ldi	r16, 0xFF	; 255
    4cc4:	1f ef       	ldi	r17, 0xFF	; 255
    4cc6:	c8 01       	movw	r24, r16
    4cc8:	df 91       	pop	r29
    4cca:	cf 91       	pop	r28
    4ccc:	1f 91       	pop	r17
    4cce:	0f 91       	pop	r16
    4cd0:	08 95       	ret

00004cd2 <printf_P>:
    4cd2:	a0 e0       	ldi	r26, 0x00	; 0
    4cd4:	b0 e0       	ldi	r27, 0x00	; 0
    4cd6:	ef e6       	ldi	r30, 0x6F	; 111
    4cd8:	f6 e2       	ldi	r31, 0x26	; 38
    4cda:	0c 94 f7 28 	jmp	0x51ee	; 0x51ee <__prologue_saves__+0x20>
    4cde:	fe 01       	movw	r30, r28
    4ce0:	35 96       	adiw	r30, 0x05	; 5
    4ce2:	61 91       	ld	r22, Z+
    4ce4:	71 91       	ld	r23, Z+
    4ce6:	a0 91 78 08 	lds	r26, 0x0878
    4cea:	b0 91 79 08 	lds	r27, 0x0879
    4cee:	13 96       	adiw	r26, 0x03	; 3
    4cf0:	8c 91       	ld	r24, X
    4cf2:	13 97       	sbiw	r26, 0x03	; 3
    4cf4:	88 60       	ori	r24, 0x08	; 8
    4cf6:	13 96       	adiw	r26, 0x03	; 3
    4cf8:	8c 93       	st	X, r24
    4cfa:	80 91 78 08 	lds	r24, 0x0878
    4cfe:	90 91 79 08 	lds	r25, 0x0879
    4d02:	af 01       	movw	r20, r30
    4d04:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <vfprintf>
    4d08:	e0 91 78 08 	lds	r30, 0x0878
    4d0c:	f0 91 79 08 	lds	r31, 0x0879
    4d10:	23 81       	ldd	r18, Z+3	; 0x03
    4d12:	27 7f       	andi	r18, 0xF7	; 247
    4d14:	23 83       	std	Z+3, r18	; 0x03
    4d16:	20 96       	adiw	r28, 0x00	; 0
    4d18:	e2 e0       	ldi	r30, 0x02	; 2
    4d1a:	0c 94 13 29 	jmp	0x5226	; 0x5226 <__epilogue_restores__+0x20>

00004d1e <putchar>:
    4d1e:	60 91 78 08 	lds	r22, 0x0878
    4d22:	70 91 79 08 	lds	r23, 0x0879
    4d26:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <fputc>
    4d2a:	08 95       	ret

00004d2c <vfprintf>:
    4d2c:	ab e0       	ldi	r26, 0x0B	; 11
    4d2e:	b0 e0       	ldi	r27, 0x00	; 0
    4d30:	ec e9       	ldi	r30, 0x9C	; 156
    4d32:	f6 e2       	ldi	r31, 0x26	; 38
    4d34:	0c 94 e7 28 	jmp	0x51ce	; 0x51ce <__prologue_saves__>
    4d38:	3c 01       	movw	r6, r24
    4d3a:	2b 01       	movw	r4, r22
    4d3c:	5a 01       	movw	r10, r20
    4d3e:	fc 01       	movw	r30, r24
    4d40:	17 82       	std	Z+7, r1	; 0x07
    4d42:	16 82       	std	Z+6, r1	; 0x06
    4d44:	83 81       	ldd	r24, Z+3	; 0x03
    4d46:	81 fd       	sbrc	r24, 1
    4d48:	03 c0       	rjmp	.+6      	; 0x4d50 <vfprintf+0x24>
    4d4a:	6f ef       	ldi	r22, 0xFF	; 255
    4d4c:	7f ef       	ldi	r23, 0xFF	; 255
    4d4e:	c6 c1       	rjmp	.+908    	; 0x50dc <vfprintf+0x3b0>
    4d50:	9a e0       	ldi	r25, 0x0A	; 10
    4d52:	89 2e       	mov	r8, r25
    4d54:	1e 01       	movw	r2, r28
    4d56:	08 94       	sec
    4d58:	21 1c       	adc	r2, r1
    4d5a:	31 1c       	adc	r3, r1
    4d5c:	f3 01       	movw	r30, r6
    4d5e:	23 81       	ldd	r18, Z+3	; 0x03
    4d60:	f2 01       	movw	r30, r4
    4d62:	23 fd       	sbrc	r18, 3
    4d64:	85 91       	lpm	r24, Z+
    4d66:	23 ff       	sbrs	r18, 3
    4d68:	81 91       	ld	r24, Z+
    4d6a:	2f 01       	movw	r4, r30
    4d6c:	88 23       	and	r24, r24
    4d6e:	09 f4       	brne	.+2      	; 0x4d72 <vfprintf+0x46>
    4d70:	b2 c1       	rjmp	.+868    	; 0x50d6 <vfprintf+0x3aa>
    4d72:	85 32       	cpi	r24, 0x25	; 37
    4d74:	39 f4       	brne	.+14     	; 0x4d84 <vfprintf+0x58>
    4d76:	23 fd       	sbrc	r18, 3
    4d78:	85 91       	lpm	r24, Z+
    4d7a:	23 ff       	sbrs	r18, 3
    4d7c:	81 91       	ld	r24, Z+
    4d7e:	2f 01       	movw	r4, r30
    4d80:	85 32       	cpi	r24, 0x25	; 37
    4d82:	29 f4       	brne	.+10     	; 0x4d8e <vfprintf+0x62>
    4d84:	90 e0       	ldi	r25, 0x00	; 0
    4d86:	b3 01       	movw	r22, r6
    4d88:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <fputc>
    4d8c:	e7 cf       	rjmp	.-50     	; 0x4d5c <vfprintf+0x30>
    4d8e:	98 2f       	mov	r25, r24
    4d90:	ff 24       	eor	r15, r15
    4d92:	ee 24       	eor	r14, r14
    4d94:	99 24       	eor	r9, r9
    4d96:	ff e1       	ldi	r31, 0x1F	; 31
    4d98:	ff 15       	cp	r31, r15
    4d9a:	d0 f0       	brcs	.+52     	; 0x4dd0 <vfprintf+0xa4>
    4d9c:	9b 32       	cpi	r25, 0x2B	; 43
    4d9e:	69 f0       	breq	.+26     	; 0x4dba <vfprintf+0x8e>
    4da0:	9c 32       	cpi	r25, 0x2C	; 44
    4da2:	28 f4       	brcc	.+10     	; 0x4dae <vfprintf+0x82>
    4da4:	90 32       	cpi	r25, 0x20	; 32
    4da6:	59 f0       	breq	.+22     	; 0x4dbe <vfprintf+0x92>
    4da8:	93 32       	cpi	r25, 0x23	; 35
    4daa:	91 f4       	brne	.+36     	; 0x4dd0 <vfprintf+0xa4>
    4dac:	0e c0       	rjmp	.+28     	; 0x4dca <vfprintf+0x9e>
    4dae:	9d 32       	cpi	r25, 0x2D	; 45
    4db0:	49 f0       	breq	.+18     	; 0x4dc4 <vfprintf+0x98>
    4db2:	90 33       	cpi	r25, 0x30	; 48
    4db4:	69 f4       	brne	.+26     	; 0x4dd0 <vfprintf+0xa4>
    4db6:	41 e0       	ldi	r20, 0x01	; 1
    4db8:	24 c0       	rjmp	.+72     	; 0x4e02 <vfprintf+0xd6>
    4dba:	52 e0       	ldi	r21, 0x02	; 2
    4dbc:	f5 2a       	or	r15, r21
    4dbe:	84 e0       	ldi	r24, 0x04	; 4
    4dc0:	f8 2a       	or	r15, r24
    4dc2:	28 c0       	rjmp	.+80     	; 0x4e14 <vfprintf+0xe8>
    4dc4:	98 e0       	ldi	r25, 0x08	; 8
    4dc6:	f9 2a       	or	r15, r25
    4dc8:	25 c0       	rjmp	.+74     	; 0x4e14 <vfprintf+0xe8>
    4dca:	e0 e1       	ldi	r30, 0x10	; 16
    4dcc:	fe 2a       	or	r15, r30
    4dce:	22 c0       	rjmp	.+68     	; 0x4e14 <vfprintf+0xe8>
    4dd0:	f7 fc       	sbrc	r15, 7
    4dd2:	29 c0       	rjmp	.+82     	; 0x4e26 <vfprintf+0xfa>
    4dd4:	89 2f       	mov	r24, r25
    4dd6:	80 53       	subi	r24, 0x30	; 48
    4dd8:	8a 30       	cpi	r24, 0x0A	; 10
    4dda:	70 f4       	brcc	.+28     	; 0x4df8 <vfprintf+0xcc>
    4ddc:	f6 fe       	sbrs	r15, 6
    4dde:	05 c0       	rjmp	.+10     	; 0x4dea <vfprintf+0xbe>
    4de0:	98 9c       	mul	r9, r8
    4de2:	90 2c       	mov	r9, r0
    4de4:	11 24       	eor	r1, r1
    4de6:	98 0e       	add	r9, r24
    4de8:	15 c0       	rjmp	.+42     	; 0x4e14 <vfprintf+0xe8>
    4dea:	e8 9c       	mul	r14, r8
    4dec:	e0 2c       	mov	r14, r0
    4dee:	11 24       	eor	r1, r1
    4df0:	e8 0e       	add	r14, r24
    4df2:	f0 e2       	ldi	r31, 0x20	; 32
    4df4:	ff 2a       	or	r15, r31
    4df6:	0e c0       	rjmp	.+28     	; 0x4e14 <vfprintf+0xe8>
    4df8:	9e 32       	cpi	r25, 0x2E	; 46
    4dfa:	29 f4       	brne	.+10     	; 0x4e06 <vfprintf+0xda>
    4dfc:	f6 fc       	sbrc	r15, 6
    4dfe:	6b c1       	rjmp	.+726    	; 0x50d6 <vfprintf+0x3aa>
    4e00:	40 e4       	ldi	r20, 0x40	; 64
    4e02:	f4 2a       	or	r15, r20
    4e04:	07 c0       	rjmp	.+14     	; 0x4e14 <vfprintf+0xe8>
    4e06:	9c 36       	cpi	r25, 0x6C	; 108
    4e08:	19 f4       	brne	.+6      	; 0x4e10 <vfprintf+0xe4>
    4e0a:	50 e8       	ldi	r21, 0x80	; 128
    4e0c:	f5 2a       	or	r15, r21
    4e0e:	02 c0       	rjmp	.+4      	; 0x4e14 <vfprintf+0xe8>
    4e10:	98 36       	cpi	r25, 0x68	; 104
    4e12:	49 f4       	brne	.+18     	; 0x4e26 <vfprintf+0xfa>
    4e14:	f2 01       	movw	r30, r4
    4e16:	23 fd       	sbrc	r18, 3
    4e18:	95 91       	lpm	r25, Z+
    4e1a:	23 ff       	sbrs	r18, 3
    4e1c:	91 91       	ld	r25, Z+
    4e1e:	2f 01       	movw	r4, r30
    4e20:	99 23       	and	r25, r25
    4e22:	09 f0       	breq	.+2      	; 0x4e26 <vfprintf+0xfa>
    4e24:	b8 cf       	rjmp	.-144    	; 0x4d96 <vfprintf+0x6a>
    4e26:	89 2f       	mov	r24, r25
    4e28:	85 54       	subi	r24, 0x45	; 69
    4e2a:	83 30       	cpi	r24, 0x03	; 3
    4e2c:	18 f0       	brcs	.+6      	; 0x4e34 <vfprintf+0x108>
    4e2e:	80 52       	subi	r24, 0x20	; 32
    4e30:	83 30       	cpi	r24, 0x03	; 3
    4e32:	38 f4       	brcc	.+14     	; 0x4e42 <vfprintf+0x116>
    4e34:	44 e0       	ldi	r20, 0x04	; 4
    4e36:	50 e0       	ldi	r21, 0x00	; 0
    4e38:	a4 0e       	add	r10, r20
    4e3a:	b5 1e       	adc	r11, r21
    4e3c:	5f e3       	ldi	r21, 0x3F	; 63
    4e3e:	59 83       	std	Y+1, r21	; 0x01
    4e40:	0f c0       	rjmp	.+30     	; 0x4e60 <vfprintf+0x134>
    4e42:	93 36       	cpi	r25, 0x63	; 99
    4e44:	31 f0       	breq	.+12     	; 0x4e52 <vfprintf+0x126>
    4e46:	93 37       	cpi	r25, 0x73	; 115
    4e48:	79 f0       	breq	.+30     	; 0x4e68 <vfprintf+0x13c>
    4e4a:	93 35       	cpi	r25, 0x53	; 83
    4e4c:	09 f0       	breq	.+2      	; 0x4e50 <vfprintf+0x124>
    4e4e:	56 c0       	rjmp	.+172    	; 0x4efc <vfprintf+0x1d0>
    4e50:	20 c0       	rjmp	.+64     	; 0x4e92 <vfprintf+0x166>
    4e52:	f5 01       	movw	r30, r10
    4e54:	80 81       	ld	r24, Z
    4e56:	89 83       	std	Y+1, r24	; 0x01
    4e58:	42 e0       	ldi	r20, 0x02	; 2
    4e5a:	50 e0       	ldi	r21, 0x00	; 0
    4e5c:	a4 0e       	add	r10, r20
    4e5e:	b5 1e       	adc	r11, r21
    4e60:	61 01       	movw	r12, r2
    4e62:	01 e0       	ldi	r16, 0x01	; 1
    4e64:	10 e0       	ldi	r17, 0x00	; 0
    4e66:	12 c0       	rjmp	.+36     	; 0x4e8c <vfprintf+0x160>
    4e68:	f5 01       	movw	r30, r10
    4e6a:	c0 80       	ld	r12, Z
    4e6c:	d1 80       	ldd	r13, Z+1	; 0x01
    4e6e:	f6 fc       	sbrc	r15, 6
    4e70:	03 c0       	rjmp	.+6      	; 0x4e78 <vfprintf+0x14c>
    4e72:	6f ef       	ldi	r22, 0xFF	; 255
    4e74:	7f ef       	ldi	r23, 0xFF	; 255
    4e76:	02 c0       	rjmp	.+4      	; 0x4e7c <vfprintf+0x150>
    4e78:	69 2d       	mov	r22, r9
    4e7a:	70 e0       	ldi	r23, 0x00	; 0
    4e7c:	42 e0       	ldi	r20, 0x02	; 2
    4e7e:	50 e0       	ldi	r21, 0x00	; 0
    4e80:	a4 0e       	add	r10, r20
    4e82:	b5 1e       	adc	r11, r21
    4e84:	c6 01       	movw	r24, r12
    4e86:	0e 94 7e 28 	call	0x50fc	; 0x50fc <strnlen>
    4e8a:	8c 01       	movw	r16, r24
    4e8c:	5f e7       	ldi	r21, 0x7F	; 127
    4e8e:	f5 22       	and	r15, r21
    4e90:	14 c0       	rjmp	.+40     	; 0x4eba <vfprintf+0x18e>
    4e92:	f5 01       	movw	r30, r10
    4e94:	c0 80       	ld	r12, Z
    4e96:	d1 80       	ldd	r13, Z+1	; 0x01
    4e98:	f6 fc       	sbrc	r15, 6
    4e9a:	03 c0       	rjmp	.+6      	; 0x4ea2 <vfprintf+0x176>
    4e9c:	6f ef       	ldi	r22, 0xFF	; 255
    4e9e:	7f ef       	ldi	r23, 0xFF	; 255
    4ea0:	02 c0       	rjmp	.+4      	; 0x4ea6 <vfprintf+0x17a>
    4ea2:	69 2d       	mov	r22, r9
    4ea4:	70 e0       	ldi	r23, 0x00	; 0
    4ea6:	42 e0       	ldi	r20, 0x02	; 2
    4ea8:	50 e0       	ldi	r21, 0x00	; 0
    4eaa:	a4 0e       	add	r10, r20
    4eac:	b5 1e       	adc	r11, r21
    4eae:	c6 01       	movw	r24, r12
    4eb0:	0e 94 73 28 	call	0x50e6	; 0x50e6 <strnlen_P>
    4eb4:	8c 01       	movw	r16, r24
    4eb6:	50 e8       	ldi	r21, 0x80	; 128
    4eb8:	f5 2a       	or	r15, r21
    4eba:	f3 fe       	sbrs	r15, 3
    4ebc:	07 c0       	rjmp	.+14     	; 0x4ecc <vfprintf+0x1a0>
    4ebe:	1a c0       	rjmp	.+52     	; 0x4ef4 <vfprintf+0x1c8>
    4ec0:	80 e2       	ldi	r24, 0x20	; 32
    4ec2:	90 e0       	ldi	r25, 0x00	; 0
    4ec4:	b3 01       	movw	r22, r6
    4ec6:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <fputc>
    4eca:	ea 94       	dec	r14
    4ecc:	8e 2d       	mov	r24, r14
    4ece:	90 e0       	ldi	r25, 0x00	; 0
    4ed0:	08 17       	cp	r16, r24
    4ed2:	19 07       	cpc	r17, r25
    4ed4:	a8 f3       	brcs	.-22     	; 0x4ec0 <vfprintf+0x194>
    4ed6:	0e c0       	rjmp	.+28     	; 0x4ef4 <vfprintf+0x1c8>
    4ed8:	f6 01       	movw	r30, r12
    4eda:	f7 fc       	sbrc	r15, 7
    4edc:	85 91       	lpm	r24, Z+
    4ede:	f7 fe       	sbrs	r15, 7
    4ee0:	81 91       	ld	r24, Z+
    4ee2:	6f 01       	movw	r12, r30
    4ee4:	90 e0       	ldi	r25, 0x00	; 0
    4ee6:	b3 01       	movw	r22, r6
    4ee8:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <fputc>
    4eec:	e1 10       	cpse	r14, r1
    4eee:	ea 94       	dec	r14
    4ef0:	01 50       	subi	r16, 0x01	; 1
    4ef2:	10 40       	sbci	r17, 0x00	; 0
    4ef4:	01 15       	cp	r16, r1
    4ef6:	11 05       	cpc	r17, r1
    4ef8:	79 f7       	brne	.-34     	; 0x4ed8 <vfprintf+0x1ac>
    4efa:	ea c0       	rjmp	.+468    	; 0x50d0 <vfprintf+0x3a4>
    4efc:	94 36       	cpi	r25, 0x64	; 100
    4efe:	11 f0       	breq	.+4      	; 0x4f04 <vfprintf+0x1d8>
    4f00:	99 36       	cpi	r25, 0x69	; 105
    4f02:	69 f5       	brne	.+90     	; 0x4f5e <vfprintf+0x232>
    4f04:	f7 fe       	sbrs	r15, 7
    4f06:	08 c0       	rjmp	.+16     	; 0x4f18 <vfprintf+0x1ec>
    4f08:	f5 01       	movw	r30, r10
    4f0a:	20 81       	ld	r18, Z
    4f0c:	31 81       	ldd	r19, Z+1	; 0x01
    4f0e:	42 81       	ldd	r20, Z+2	; 0x02
    4f10:	53 81       	ldd	r21, Z+3	; 0x03
    4f12:	84 e0       	ldi	r24, 0x04	; 4
    4f14:	90 e0       	ldi	r25, 0x00	; 0
    4f16:	0a c0       	rjmp	.+20     	; 0x4f2c <vfprintf+0x200>
    4f18:	f5 01       	movw	r30, r10
    4f1a:	80 81       	ld	r24, Z
    4f1c:	91 81       	ldd	r25, Z+1	; 0x01
    4f1e:	9c 01       	movw	r18, r24
    4f20:	44 27       	eor	r20, r20
    4f22:	37 fd       	sbrc	r19, 7
    4f24:	40 95       	com	r20
    4f26:	54 2f       	mov	r21, r20
    4f28:	82 e0       	ldi	r24, 0x02	; 2
    4f2a:	90 e0       	ldi	r25, 0x00	; 0
    4f2c:	a8 0e       	add	r10, r24
    4f2e:	b9 1e       	adc	r11, r25
    4f30:	9f e6       	ldi	r25, 0x6F	; 111
    4f32:	f9 22       	and	r15, r25
    4f34:	57 ff       	sbrs	r21, 7
    4f36:	09 c0       	rjmp	.+18     	; 0x4f4a <vfprintf+0x21e>
    4f38:	50 95       	com	r21
    4f3a:	40 95       	com	r20
    4f3c:	30 95       	com	r19
    4f3e:	21 95       	neg	r18
    4f40:	3f 4f       	sbci	r19, 0xFF	; 255
    4f42:	4f 4f       	sbci	r20, 0xFF	; 255
    4f44:	5f 4f       	sbci	r21, 0xFF	; 255
    4f46:	e0 e8       	ldi	r30, 0x80	; 128
    4f48:	fe 2a       	or	r15, r30
    4f4a:	ca 01       	movw	r24, r20
    4f4c:	b9 01       	movw	r22, r18
    4f4e:	a1 01       	movw	r20, r2
    4f50:	2a e0       	ldi	r18, 0x0A	; 10
    4f52:	30 e0       	ldi	r19, 0x00	; 0
    4f54:	0e 94 89 28 	call	0x5112	; 0x5112 <__ultoa_invert>
    4f58:	d8 2e       	mov	r13, r24
    4f5a:	d2 18       	sub	r13, r2
    4f5c:	40 c0       	rjmp	.+128    	; 0x4fde <vfprintf+0x2b2>
    4f5e:	95 37       	cpi	r25, 0x75	; 117
    4f60:	29 f4       	brne	.+10     	; 0x4f6c <vfprintf+0x240>
    4f62:	1f 2d       	mov	r17, r15
    4f64:	1f 7e       	andi	r17, 0xEF	; 239
    4f66:	2a e0       	ldi	r18, 0x0A	; 10
    4f68:	30 e0       	ldi	r19, 0x00	; 0
    4f6a:	1d c0       	rjmp	.+58     	; 0x4fa6 <vfprintf+0x27a>
    4f6c:	1f 2d       	mov	r17, r15
    4f6e:	19 7f       	andi	r17, 0xF9	; 249
    4f70:	9f 36       	cpi	r25, 0x6F	; 111
    4f72:	61 f0       	breq	.+24     	; 0x4f8c <vfprintf+0x260>
    4f74:	90 37       	cpi	r25, 0x70	; 112
    4f76:	20 f4       	brcc	.+8      	; 0x4f80 <vfprintf+0x254>
    4f78:	98 35       	cpi	r25, 0x58	; 88
    4f7a:	09 f0       	breq	.+2      	; 0x4f7e <vfprintf+0x252>
    4f7c:	ac c0       	rjmp	.+344    	; 0x50d6 <vfprintf+0x3aa>
    4f7e:	0f c0       	rjmp	.+30     	; 0x4f9e <vfprintf+0x272>
    4f80:	90 37       	cpi	r25, 0x70	; 112
    4f82:	39 f0       	breq	.+14     	; 0x4f92 <vfprintf+0x266>
    4f84:	98 37       	cpi	r25, 0x78	; 120
    4f86:	09 f0       	breq	.+2      	; 0x4f8a <vfprintf+0x25e>
    4f88:	a6 c0       	rjmp	.+332    	; 0x50d6 <vfprintf+0x3aa>
    4f8a:	04 c0       	rjmp	.+8      	; 0x4f94 <vfprintf+0x268>
    4f8c:	28 e0       	ldi	r18, 0x08	; 8
    4f8e:	30 e0       	ldi	r19, 0x00	; 0
    4f90:	0a c0       	rjmp	.+20     	; 0x4fa6 <vfprintf+0x27a>
    4f92:	10 61       	ori	r17, 0x10	; 16
    4f94:	14 fd       	sbrc	r17, 4
    4f96:	14 60       	ori	r17, 0x04	; 4
    4f98:	20 e1       	ldi	r18, 0x10	; 16
    4f9a:	30 e0       	ldi	r19, 0x00	; 0
    4f9c:	04 c0       	rjmp	.+8      	; 0x4fa6 <vfprintf+0x27a>
    4f9e:	14 fd       	sbrc	r17, 4
    4fa0:	16 60       	ori	r17, 0x06	; 6
    4fa2:	20 e1       	ldi	r18, 0x10	; 16
    4fa4:	32 e0       	ldi	r19, 0x02	; 2
    4fa6:	17 ff       	sbrs	r17, 7
    4fa8:	08 c0       	rjmp	.+16     	; 0x4fba <vfprintf+0x28e>
    4faa:	f5 01       	movw	r30, r10
    4fac:	60 81       	ld	r22, Z
    4fae:	71 81       	ldd	r23, Z+1	; 0x01
    4fb0:	82 81       	ldd	r24, Z+2	; 0x02
    4fb2:	93 81       	ldd	r25, Z+3	; 0x03
    4fb4:	44 e0       	ldi	r20, 0x04	; 4
    4fb6:	50 e0       	ldi	r21, 0x00	; 0
    4fb8:	08 c0       	rjmp	.+16     	; 0x4fca <vfprintf+0x29e>
    4fba:	f5 01       	movw	r30, r10
    4fbc:	80 81       	ld	r24, Z
    4fbe:	91 81       	ldd	r25, Z+1	; 0x01
    4fc0:	bc 01       	movw	r22, r24
    4fc2:	80 e0       	ldi	r24, 0x00	; 0
    4fc4:	90 e0       	ldi	r25, 0x00	; 0
    4fc6:	42 e0       	ldi	r20, 0x02	; 2
    4fc8:	50 e0       	ldi	r21, 0x00	; 0
    4fca:	a4 0e       	add	r10, r20
    4fcc:	b5 1e       	adc	r11, r21
    4fce:	a1 01       	movw	r20, r2
    4fd0:	0e 94 89 28 	call	0x5112	; 0x5112 <__ultoa_invert>
    4fd4:	d8 2e       	mov	r13, r24
    4fd6:	d2 18       	sub	r13, r2
    4fd8:	8f e7       	ldi	r24, 0x7F	; 127
    4fda:	f8 2e       	mov	r15, r24
    4fdc:	f1 22       	and	r15, r17
    4fde:	f6 fe       	sbrs	r15, 6
    4fe0:	0b c0       	rjmp	.+22     	; 0x4ff8 <vfprintf+0x2cc>
    4fe2:	5e ef       	ldi	r21, 0xFE	; 254
    4fe4:	f5 22       	and	r15, r21
    4fe6:	d9 14       	cp	r13, r9
    4fe8:	38 f4       	brcc	.+14     	; 0x4ff8 <vfprintf+0x2cc>
    4fea:	f4 fe       	sbrs	r15, 4
    4fec:	07 c0       	rjmp	.+14     	; 0x4ffc <vfprintf+0x2d0>
    4fee:	f2 fc       	sbrc	r15, 2
    4ff0:	05 c0       	rjmp	.+10     	; 0x4ffc <vfprintf+0x2d0>
    4ff2:	8f ee       	ldi	r24, 0xEF	; 239
    4ff4:	f8 22       	and	r15, r24
    4ff6:	02 c0       	rjmp	.+4      	; 0x4ffc <vfprintf+0x2d0>
    4ff8:	1d 2d       	mov	r17, r13
    4ffa:	01 c0       	rjmp	.+2      	; 0x4ffe <vfprintf+0x2d2>
    4ffc:	19 2d       	mov	r17, r9
    4ffe:	f4 fe       	sbrs	r15, 4
    5000:	0d c0       	rjmp	.+26     	; 0x501c <vfprintf+0x2f0>
    5002:	fe 01       	movw	r30, r28
    5004:	ed 0d       	add	r30, r13
    5006:	f1 1d       	adc	r31, r1
    5008:	80 81       	ld	r24, Z
    500a:	80 33       	cpi	r24, 0x30	; 48
    500c:	19 f4       	brne	.+6      	; 0x5014 <vfprintf+0x2e8>
    500e:	99 ee       	ldi	r25, 0xE9	; 233
    5010:	f9 22       	and	r15, r25
    5012:	08 c0       	rjmp	.+16     	; 0x5024 <vfprintf+0x2f8>
    5014:	1f 5f       	subi	r17, 0xFF	; 255
    5016:	f2 fe       	sbrs	r15, 2
    5018:	05 c0       	rjmp	.+10     	; 0x5024 <vfprintf+0x2f8>
    501a:	03 c0       	rjmp	.+6      	; 0x5022 <vfprintf+0x2f6>
    501c:	8f 2d       	mov	r24, r15
    501e:	86 78       	andi	r24, 0x86	; 134
    5020:	09 f0       	breq	.+2      	; 0x5024 <vfprintf+0x2f8>
    5022:	1f 5f       	subi	r17, 0xFF	; 255
    5024:	0f 2d       	mov	r16, r15
    5026:	f3 fc       	sbrc	r15, 3
    5028:	14 c0       	rjmp	.+40     	; 0x5052 <vfprintf+0x326>
    502a:	f0 fe       	sbrs	r15, 0
    502c:	0f c0       	rjmp	.+30     	; 0x504c <vfprintf+0x320>
    502e:	1e 15       	cp	r17, r14
    5030:	10 f0       	brcs	.+4      	; 0x5036 <vfprintf+0x30a>
    5032:	9d 2c       	mov	r9, r13
    5034:	0b c0       	rjmp	.+22     	; 0x504c <vfprintf+0x320>
    5036:	9d 2c       	mov	r9, r13
    5038:	9e 0c       	add	r9, r14
    503a:	91 1a       	sub	r9, r17
    503c:	1e 2d       	mov	r17, r14
    503e:	06 c0       	rjmp	.+12     	; 0x504c <vfprintf+0x320>
    5040:	80 e2       	ldi	r24, 0x20	; 32
    5042:	90 e0       	ldi	r25, 0x00	; 0
    5044:	b3 01       	movw	r22, r6
    5046:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <fputc>
    504a:	1f 5f       	subi	r17, 0xFF	; 255
    504c:	1e 15       	cp	r17, r14
    504e:	c0 f3       	brcs	.-16     	; 0x5040 <vfprintf+0x314>
    5050:	04 c0       	rjmp	.+8      	; 0x505a <vfprintf+0x32e>
    5052:	1e 15       	cp	r17, r14
    5054:	10 f4       	brcc	.+4      	; 0x505a <vfprintf+0x32e>
    5056:	e1 1a       	sub	r14, r17
    5058:	01 c0       	rjmp	.+2      	; 0x505c <vfprintf+0x330>
    505a:	ee 24       	eor	r14, r14
    505c:	04 ff       	sbrs	r16, 4
    505e:	0f c0       	rjmp	.+30     	; 0x507e <vfprintf+0x352>
    5060:	80 e3       	ldi	r24, 0x30	; 48
    5062:	90 e0       	ldi	r25, 0x00	; 0
    5064:	b3 01       	movw	r22, r6
    5066:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <fputc>
    506a:	02 ff       	sbrs	r16, 2
    506c:	1d c0       	rjmp	.+58     	; 0x50a8 <vfprintf+0x37c>
    506e:	01 fd       	sbrc	r16, 1
    5070:	03 c0       	rjmp	.+6      	; 0x5078 <vfprintf+0x34c>
    5072:	88 e7       	ldi	r24, 0x78	; 120
    5074:	90 e0       	ldi	r25, 0x00	; 0
    5076:	0e c0       	rjmp	.+28     	; 0x5094 <vfprintf+0x368>
    5078:	88 e5       	ldi	r24, 0x58	; 88
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	0b c0       	rjmp	.+22     	; 0x5094 <vfprintf+0x368>
    507e:	80 2f       	mov	r24, r16
    5080:	86 78       	andi	r24, 0x86	; 134
    5082:	91 f0       	breq	.+36     	; 0x50a8 <vfprintf+0x37c>
    5084:	01 ff       	sbrs	r16, 1
    5086:	02 c0       	rjmp	.+4      	; 0x508c <vfprintf+0x360>
    5088:	8b e2       	ldi	r24, 0x2B	; 43
    508a:	01 c0       	rjmp	.+2      	; 0x508e <vfprintf+0x362>
    508c:	80 e2       	ldi	r24, 0x20	; 32
    508e:	f7 fc       	sbrc	r15, 7
    5090:	8d e2       	ldi	r24, 0x2D	; 45
    5092:	90 e0       	ldi	r25, 0x00	; 0
    5094:	b3 01       	movw	r22, r6
    5096:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <fputc>
    509a:	06 c0       	rjmp	.+12     	; 0x50a8 <vfprintf+0x37c>
    509c:	80 e3       	ldi	r24, 0x30	; 48
    509e:	90 e0       	ldi	r25, 0x00	; 0
    50a0:	b3 01       	movw	r22, r6
    50a2:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <fputc>
    50a6:	9a 94       	dec	r9
    50a8:	d9 14       	cp	r13, r9
    50aa:	c0 f3       	brcs	.-16     	; 0x509c <vfprintf+0x370>
    50ac:	da 94       	dec	r13
    50ae:	f1 01       	movw	r30, r2
    50b0:	ed 0d       	add	r30, r13
    50b2:	f1 1d       	adc	r31, r1
    50b4:	80 81       	ld	r24, Z
    50b6:	90 e0       	ldi	r25, 0x00	; 0
    50b8:	b3 01       	movw	r22, r6
    50ba:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <fputc>
    50be:	dd 20       	and	r13, r13
    50c0:	a9 f7       	brne	.-22     	; 0x50ac <vfprintf+0x380>
    50c2:	06 c0       	rjmp	.+12     	; 0x50d0 <vfprintf+0x3a4>
    50c4:	80 e2       	ldi	r24, 0x20	; 32
    50c6:	90 e0       	ldi	r25, 0x00	; 0
    50c8:	b3 01       	movw	r22, r6
    50ca:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <fputc>
    50ce:	ea 94       	dec	r14
    50d0:	ee 20       	and	r14, r14
    50d2:	c1 f7       	brne	.-16     	; 0x50c4 <vfprintf+0x398>
    50d4:	43 ce       	rjmp	.-890    	; 0x4d5c <vfprintf+0x30>
    50d6:	f3 01       	movw	r30, r6
    50d8:	66 81       	ldd	r22, Z+6	; 0x06
    50da:	77 81       	ldd	r23, Z+7	; 0x07
    50dc:	cb 01       	movw	r24, r22
    50de:	2b 96       	adiw	r28, 0x0b	; 11
    50e0:	e2 e1       	ldi	r30, 0x12	; 18
    50e2:	0c 94 03 29 	jmp	0x5206	; 0x5206 <__epilogue_restores__>

000050e6 <strnlen_P>:
    50e6:	fc 01       	movw	r30, r24
    50e8:	05 90       	lpm	r0, Z+
    50ea:	61 50       	subi	r22, 0x01	; 1
    50ec:	70 40       	sbci	r23, 0x00	; 0
    50ee:	01 10       	cpse	r0, r1
    50f0:	d8 f7       	brcc	.-10     	; 0x50e8 <strnlen_P+0x2>
    50f2:	80 95       	com	r24
    50f4:	90 95       	com	r25
    50f6:	8e 0f       	add	r24, r30
    50f8:	9f 1f       	adc	r25, r31
    50fa:	08 95       	ret

000050fc <strnlen>:
    50fc:	fc 01       	movw	r30, r24
    50fe:	61 50       	subi	r22, 0x01	; 1
    5100:	70 40       	sbci	r23, 0x00	; 0
    5102:	01 90       	ld	r0, Z+
    5104:	01 10       	cpse	r0, r1
    5106:	d8 f7       	brcc	.-10     	; 0x50fe <strnlen+0x2>
    5108:	80 95       	com	r24
    510a:	90 95       	com	r25
    510c:	8e 0f       	add	r24, r30
    510e:	9f 1f       	adc	r25, r31
    5110:	08 95       	ret

00005112 <__ultoa_invert>:
    5112:	fa 01       	movw	r30, r20
    5114:	aa 27       	eor	r26, r26
    5116:	28 30       	cpi	r18, 0x08	; 8
    5118:	51 f1       	breq	.+84     	; 0x516e <__ultoa_invert+0x5c>
    511a:	20 31       	cpi	r18, 0x10	; 16
    511c:	81 f1       	breq	.+96     	; 0x517e <__ultoa_invert+0x6c>
    511e:	e8 94       	clt
    5120:	6f 93       	push	r22
    5122:	6e 7f       	andi	r22, 0xFE	; 254
    5124:	6e 5f       	subi	r22, 0xFE	; 254
    5126:	7f 4f       	sbci	r23, 0xFF	; 255
    5128:	8f 4f       	sbci	r24, 0xFF	; 255
    512a:	9f 4f       	sbci	r25, 0xFF	; 255
    512c:	af 4f       	sbci	r26, 0xFF	; 255
    512e:	b1 e0       	ldi	r27, 0x01	; 1
    5130:	3e d0       	rcall	.+124    	; 0x51ae <__ultoa_invert+0x9c>
    5132:	b4 e0       	ldi	r27, 0x04	; 4
    5134:	3c d0       	rcall	.+120    	; 0x51ae <__ultoa_invert+0x9c>
    5136:	67 0f       	add	r22, r23
    5138:	78 1f       	adc	r23, r24
    513a:	89 1f       	adc	r24, r25
    513c:	9a 1f       	adc	r25, r26
    513e:	a1 1d       	adc	r26, r1
    5140:	68 0f       	add	r22, r24
    5142:	79 1f       	adc	r23, r25
    5144:	8a 1f       	adc	r24, r26
    5146:	91 1d       	adc	r25, r1
    5148:	a1 1d       	adc	r26, r1
    514a:	6a 0f       	add	r22, r26
    514c:	71 1d       	adc	r23, r1
    514e:	81 1d       	adc	r24, r1
    5150:	91 1d       	adc	r25, r1
    5152:	a1 1d       	adc	r26, r1
    5154:	20 d0       	rcall	.+64     	; 0x5196 <__ultoa_invert+0x84>
    5156:	09 f4       	brne	.+2      	; 0x515a <__ultoa_invert+0x48>
    5158:	68 94       	set
    515a:	3f 91       	pop	r19
    515c:	2a e0       	ldi	r18, 0x0A	; 10
    515e:	26 9f       	mul	r18, r22
    5160:	11 24       	eor	r1, r1
    5162:	30 19       	sub	r19, r0
    5164:	30 5d       	subi	r19, 0xD0	; 208
    5166:	31 93       	st	Z+, r19
    5168:	de f6       	brtc	.-74     	; 0x5120 <__ultoa_invert+0xe>
    516a:	cf 01       	movw	r24, r30
    516c:	08 95       	ret
    516e:	46 2f       	mov	r20, r22
    5170:	47 70       	andi	r20, 0x07	; 7
    5172:	40 5d       	subi	r20, 0xD0	; 208
    5174:	41 93       	st	Z+, r20
    5176:	b3 e0       	ldi	r27, 0x03	; 3
    5178:	0f d0       	rcall	.+30     	; 0x5198 <__ultoa_invert+0x86>
    517a:	c9 f7       	brne	.-14     	; 0x516e <__ultoa_invert+0x5c>
    517c:	f6 cf       	rjmp	.-20     	; 0x516a <__ultoa_invert+0x58>
    517e:	46 2f       	mov	r20, r22
    5180:	4f 70       	andi	r20, 0x0F	; 15
    5182:	40 5d       	subi	r20, 0xD0	; 208
    5184:	4a 33       	cpi	r20, 0x3A	; 58
    5186:	18 f0       	brcs	.+6      	; 0x518e <__ultoa_invert+0x7c>
    5188:	49 5d       	subi	r20, 0xD9	; 217
    518a:	31 fd       	sbrc	r19, 1
    518c:	40 52       	subi	r20, 0x20	; 32
    518e:	41 93       	st	Z+, r20
    5190:	02 d0       	rcall	.+4      	; 0x5196 <__ultoa_invert+0x84>
    5192:	a9 f7       	brne	.-22     	; 0x517e <__ultoa_invert+0x6c>
    5194:	ea cf       	rjmp	.-44     	; 0x516a <__ultoa_invert+0x58>
    5196:	b4 e0       	ldi	r27, 0x04	; 4
    5198:	a6 95       	lsr	r26
    519a:	97 95       	ror	r25
    519c:	87 95       	ror	r24
    519e:	77 95       	ror	r23
    51a0:	67 95       	ror	r22
    51a2:	ba 95       	dec	r27
    51a4:	c9 f7       	brne	.-14     	; 0x5198 <__ultoa_invert+0x86>
    51a6:	00 97       	sbiw	r24, 0x00	; 0
    51a8:	61 05       	cpc	r22, r1
    51aa:	71 05       	cpc	r23, r1
    51ac:	08 95       	ret
    51ae:	9b 01       	movw	r18, r22
    51b0:	ac 01       	movw	r20, r24
    51b2:	0a 2e       	mov	r0, r26
    51b4:	06 94       	lsr	r0
    51b6:	57 95       	ror	r21
    51b8:	47 95       	ror	r20
    51ba:	37 95       	ror	r19
    51bc:	27 95       	ror	r18
    51be:	ba 95       	dec	r27
    51c0:	c9 f7       	brne	.-14     	; 0x51b4 <__ultoa_invert+0xa2>
    51c2:	62 0f       	add	r22, r18
    51c4:	73 1f       	adc	r23, r19
    51c6:	84 1f       	adc	r24, r20
    51c8:	95 1f       	adc	r25, r21
    51ca:	a0 1d       	adc	r26, r0
    51cc:	08 95       	ret

000051ce <__prologue_saves__>:
    51ce:	2f 92       	push	r2
    51d0:	3f 92       	push	r3
    51d2:	4f 92       	push	r4
    51d4:	5f 92       	push	r5
    51d6:	6f 92       	push	r6
    51d8:	7f 92       	push	r7
    51da:	8f 92       	push	r8
    51dc:	9f 92       	push	r9
    51de:	af 92       	push	r10
    51e0:	bf 92       	push	r11
    51e2:	cf 92       	push	r12
    51e4:	df 92       	push	r13
    51e6:	ef 92       	push	r14
    51e8:	ff 92       	push	r15
    51ea:	0f 93       	push	r16
    51ec:	1f 93       	push	r17
    51ee:	cf 93       	push	r28
    51f0:	df 93       	push	r29
    51f2:	cd b7       	in	r28, 0x3d	; 61
    51f4:	de b7       	in	r29, 0x3e	; 62
    51f6:	ca 1b       	sub	r28, r26
    51f8:	db 0b       	sbc	r29, r27
    51fa:	0f b6       	in	r0, 0x3f	; 63
    51fc:	f8 94       	cli
    51fe:	de bf       	out	0x3e, r29	; 62
    5200:	0f be       	out	0x3f, r0	; 63
    5202:	cd bf       	out	0x3d, r28	; 61
    5204:	09 94       	ijmp

00005206 <__epilogue_restores__>:
    5206:	2a 88       	ldd	r2, Y+18	; 0x12
    5208:	39 88       	ldd	r3, Y+17	; 0x11
    520a:	48 88       	ldd	r4, Y+16	; 0x10
    520c:	5f 84       	ldd	r5, Y+15	; 0x0f
    520e:	6e 84       	ldd	r6, Y+14	; 0x0e
    5210:	7d 84       	ldd	r7, Y+13	; 0x0d
    5212:	8c 84       	ldd	r8, Y+12	; 0x0c
    5214:	9b 84       	ldd	r9, Y+11	; 0x0b
    5216:	aa 84       	ldd	r10, Y+10	; 0x0a
    5218:	b9 84       	ldd	r11, Y+9	; 0x09
    521a:	c8 84       	ldd	r12, Y+8	; 0x08
    521c:	df 80       	ldd	r13, Y+7	; 0x07
    521e:	ee 80       	ldd	r14, Y+6	; 0x06
    5220:	fd 80       	ldd	r15, Y+5	; 0x05
    5222:	0c 81       	ldd	r16, Y+4	; 0x04
    5224:	1b 81       	ldd	r17, Y+3	; 0x03
    5226:	aa 81       	ldd	r26, Y+2	; 0x02
    5228:	b9 81       	ldd	r27, Y+1	; 0x01
    522a:	ce 0f       	add	r28, r30
    522c:	d1 1d       	adc	r29, r1
    522e:	0f b6       	in	r0, 0x3f	; 63
    5230:	f8 94       	cli
    5232:	de bf       	out	0x3e, r29	; 62
    5234:	0f be       	out	0x3f, r0	; 63
    5236:	cd bf       	out	0x3d, r28	; 61
    5238:	ed 01       	movw	r28, r26
    523a:	08 95       	ret

0000523c <_exit>:
    523c:	f8 94       	cli

0000523e <__stop_program>:
    523e:	ff cf       	rjmp	.-2      	; 0x523e <__stop_program>
