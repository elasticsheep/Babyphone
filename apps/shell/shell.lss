
shell.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00005018  000050ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005018  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000736  00800132  00800132  000050de  2**0
                  ALLOC
  3 .stab         000011e8  00000000  00000000  000050e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004e9  00000000  00000000  000062c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  000067b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000005c5  00000000  00000000  00006991  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004d4c  00000000  00000000  00006f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001696  00000000  00000000  0000bca2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003dbb  00000000  00000000  0000d338  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005f0  00000000  00000000  000110f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000134f  00000000  00000000  000116e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000041c5  00000000  00000000  00012a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002a8  00000000  00000000  00016bf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__ctors_end>
       4:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
       8:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
       c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      10:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      14:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      18:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      1c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      20:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      24:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      28:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      2c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      30:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      34:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      38:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      3c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      40:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      44:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      48:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      4c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      50:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      54:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__vector_21>
      58:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <__vector_22>
      5c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      60:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      64:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      68:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      6c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      70:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      74:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      78:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      7c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      80:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      84:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      88:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      8c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      90:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      94:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      98:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      9c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      a0:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      a4:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      a8:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>

000000ac <__c.2074>:
      ac:	75 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 3a     unknown command:
      bc:	20 00                                                .

000000be <__c.2072>:
      be:	70 6c 61 79 20 00                                   play .

000000c4 <__c.2070>:
      c4:	65 72 72 6f 72 20 73 79 6e 63 69 6e 67 20 64 69     error syncing di
      d4:	73 6b 0a 00                                         sk..

000000d8 <__c.2068>:
      d8:	73 79 6e 63 00                                      sync.

000000dd <__c.2066>:
      dd:	65 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20 64     error creating d
      ed:	69 72 65 63 74 6f 72 79 3a 20 00                    irectory: .

000000f8 <__c.2063>:
      f8:	6d 6b 64 69 72 20 00                                mkdir .

000000ff <__c.2060>:
      ff:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     10f:	20 66 69 6c 65 0a 00                                 file..

00000116 <__c.2056>:
     116:	65 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 6f 6e     error seeking on
     126:	20 00                                                .

00000128 <__c.2053>:
     128:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

00000137 <__c.2046>:
     137:	77 72 69 74 65 20 00                                write .

0000013e <__c.2044>:
     13e:	65 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20 66     error creating f
     14e:	69 6c 65 3a 20 00                                   ile: .

00000154 <__c.2041>:
     154:	74 6f 75 63 68 20 00                                touch .

0000015b <__c.2039>:
     15b:	65 72 72 6f 72 20 64 65 6c 65 74 69 6e 67 20 66     error deleting f
     16b:	69 6c 65 3a 20 00                                   ile: .

00000171 <__c.2036>:
     171:	72 6d 20 00                                         rm .

00000175 <__c.2034>:
     175:	65 72 72 6f 72 20 72 65 61 64 69 6e 67 20 64 69     error reading di
     185:	73 6b 20 69 6e 66 6f 0a 00                          sk info..

0000018e <__c.2032>:
     18e:	64 69 73 6b 00                                      disk.

00000193 <__c.2016>:
     193:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

000001a2 <__c.2013>:
     1a2:	63 61 74 20 00                                      cat .

000001a7 <__c.2003>:
     1a7:	6c 73 00                                            ls.

000001aa <__c.2001>:
     1aa:	64 69 72 65 63 74 6f 72 79 20 6e 6f 74 20 66 6f     directory not fo
     1ba:	75 6e 64 3a 20 00                                   und: .

000001c0 <__c.1997>:
     1c0:	63 64 20 00                                         cd .

000001c4 <__c.1994>:
     1c4:	69 6e 69 74 00                                      init.

000001c9 <__c.1989>:
     1c9:	6f 70 65 6e 69 6e 67 20 72 6f 6f 74 20 64 69 72     opening root dir
     1d9:	65 63 74 6f 72 79 20 66 61 69 6c 65 64 0a 00        ectory failed..

000001e8 <__c.1985>:
     1e8:	6f 70 65 6e 69 6e 67 20 66 69 6c 65 73 79 73 74     opening filesyst
     1f8:	65 6d 20 66 61 69 6c 65 64 0a 00                    em failed..

00000203 <__c.1982>:
     203:	6f 70 65 6e 69 6e 67 20 70 61 72 74 69 74 69 6f     opening partitio
     213:	6e 20 66 61 69 6c 65 64 0a 00                       n failed..

0000021d <__c.1978>:
     21d:	4d 4d 43 2f 53 44 20 69 6e 69 74 69 61 6c 69 7a     MMC/SD initializ
     22d:	61 74 69 6f 6e 20 66 61 69 6c 65 64 0a 00           ation failed..

0000023b <__c.2214>:
     23b:	66 72 65 65 3a 20 20 20 00                          free:   .

00000244 <__c.2212>:
     244:	66 6f 72 6d 61 74 3a 20 00                          format: .

0000024d <__c.2210>:
     24d:	77 72 2e 70 72 2e 3a 20 00                          wr.pr.: .

00000256 <__c.2208>:
     256:	63 6f 70 79 3a 20 20 20 00                          copy:   .

0000025f <__c.2206>:
     25f:	4d 42 0a 00                                         MB..

00000263 <__c.2204>:
     263:	73 69 7a 65 3a 20 20 20 00                          size:   .

0000026c <__c.2202>:
     26c:	64 61 74 65 3a 20 20 20 00                          date:   .

00000275 <__c.2200>:
     275:	73 65 72 69 61 6c 3a 20 30 78 00                    serial: 0x.

00000280 <__c.2198>:
     280:	72 65 76 3a 20 20 20 20 00                          rev:    .

00000289 <__c.2196>:
     289:	70 72 6f 64 3a 20 20 20 00                          prod:   .

00000292 <__c.2194>:
     292:	6f 65 6d 3a 20 20 20 20 00                          oem:    .

0000029b <__c.2192>:
     29b:	6d 61 6e 75 66 3a 20 20 30 78 00                    manuf:  0x.

000002a6 <__c.1971>:
     2a6:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 25 73     error opening %s
     2b6:	0d 0a 00                                            ...

000002b9 <__c.1963>:
     2b9:	45 6e 64 20 6f 66 20 66 69 6c 65 0d 0a 00           End of file...

000002c7 <__c.1847>:
     2c7:	42 75 66 66 65 72 69 6e 67 20 65 72 72 6f 72 20     Buffering error 
     2d7:	25 69 0d 0a 20 00 00                                %i.. ..

000002de <__ctors_end>:
     2de:	11 24       	eor	r1, r1
     2e0:	1f be       	out	0x3f, r1	; 63
     2e2:	cf ef       	ldi	r28, 0xFF	; 255
     2e4:	da e0       	ldi	r29, 0x0A	; 10
     2e6:	de bf       	out	0x3e, r29	; 62
     2e8:	cd bf       	out	0x3d, r28	; 61

000002ea <__do_copy_data>:
     2ea:	11 e0       	ldi	r17, 0x01	; 1
     2ec:	a0 e0       	ldi	r26, 0x00	; 0
     2ee:	b1 e0       	ldi	r27, 0x01	; 1
     2f0:	e8 e1       	ldi	r30, 0x18	; 24
     2f2:	f0 e5       	ldi	r31, 0x50	; 80
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <.do_copy_data_start>

000002f6 <.do_copy_data_loop>:
     2f6:	05 90       	lpm	r0, Z+
     2f8:	0d 92       	st	X+, r0

000002fa <.do_copy_data_start>:
     2fa:	a2 33       	cpi	r26, 0x32	; 50
     2fc:	b1 07       	cpc	r27, r17
     2fe:	d9 f7       	brne	.-10     	; 0x2f6 <.do_copy_data_loop>

00000300 <__do_clear_bss>:
     300:	18 e0       	ldi	r17, 0x08	; 8
     302:	a2 e3       	ldi	r26, 0x32	; 50
     304:	b1 e0       	ldi	r27, 0x01	; 1
     306:	01 c0       	rjmp	.+2      	; 0x30a <.do_clear_bss_start>

00000308 <.do_clear_bss_loop>:
     308:	1d 92       	st	X+, r1

0000030a <.do_clear_bss_start>:
     30a:	a8 36       	cpi	r26, 0x68	; 104
     30c:	b1 07       	cpc	r27, r17
     30e:	e1 f7       	brne	.-8      	; 0x308 <.do_clear_bss_loop>
     310:	0e 94 42 07 	call	0xe84	; 0xe84 <main>
     314:	0c 94 0a 28 	jmp	0x5014	; 0x5014 <_exit>

00000318 <__bad_interrupt>:
     318:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000031c <print_disk_info>:

    return fat_open_file(fs, &file_entry);
}

uint8_t print_disk_info(const struct fat_fs_struct* fs)
{
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	df 93       	push	r29
     322:	cf 93       	push	r28
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	69 97       	sbiw	r28, 0x19	; 25
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	f8 94       	cli
     32e:	de bf       	out	0x3e, r29	; 62
     330:	0f be       	out	0x3f, r0	; 63
     332:	cd bf       	out	0x3d, r28	; 61
     334:	8c 01       	movw	r16, r24
    if(!fs)
     336:	00 97       	sbiw	r24, 0x00	; 0
     338:	09 f4       	brne	.+2      	; 0x33c <print_disk_info+0x20>
     33a:	a3 c0       	rjmp	.+326    	; 0x482 <print_disk_info+0x166>
        return 0;

    struct sd_raw_info disk_info;
    if(!sd_raw_get_info(&disk_info))
     33c:	ce 01       	movw	r24, r28
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <sd_raw_get_info>
     344:	88 23       	and	r24, r24
     346:	09 f4       	brne	.+2      	; 0x34a <print_disk_info+0x2e>
     348:	9c c0       	rjmp	.+312    	; 0x482 <print_disk_info+0x166>
        return 0;

    uart_puts_p(PSTR("manuf:  0x")); uart_putc_hex(disk_info.manufacturer); uart_putc('\n');
     34a:	8b e9       	ldi	r24, 0x9B	; 155
     34c:	92 e0       	ldi	r25, 0x02	; 2
     34e:	0e 94 31 06 	call	0xc62	; 0xc62 <uart_puts_p>
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	0e 94 f3 06 	call	0xde6	; 0xde6 <uart_putc_hex>
     358:	8a e0       	ldi	r24, 0x0A	; 10
     35a:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
    uart_puts_p(PSTR("oem:    ")); uart_puts((char*) disk_info.oem); uart_putc('\n');
     35e:	82 e9       	ldi	r24, 0x92	; 146
     360:	92 e0       	ldi	r25, 0x02	; 2
     362:	0e 94 31 06 	call	0xc62	; 0xc62 <uart_puts_p>
     366:	ce 01       	movw	r24, r28
     368:	02 96       	adiw	r24, 0x02	; 2
     36a:	0e 94 3f 06 	call	0xc7e	; 0xc7e <uart_puts>
     36e:	8a e0       	ldi	r24, 0x0A	; 10
     370:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
    uart_puts_p(PSTR("prod:   ")); uart_puts((char*) disk_info.product); uart_putc('\n');
     374:	89 e8       	ldi	r24, 0x89	; 137
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	0e 94 31 06 	call	0xc62	; 0xc62 <uart_puts_p>
     37c:	ce 01       	movw	r24, r28
     37e:	05 96       	adiw	r24, 0x05	; 5
     380:	0e 94 3f 06 	call	0xc7e	; 0xc7e <uart_puts>
     384:	8a e0       	ldi	r24, 0x0A	; 10
     386:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
    uart_puts_p(PSTR("rev:    ")); uart_putc_hex(disk_info.revision); uart_putc('\n');
     38a:	80 e8       	ldi	r24, 0x80	; 128
     38c:	92 e0       	ldi	r25, 0x02	; 2
     38e:	0e 94 31 06 	call	0xc62	; 0xc62 <uart_puts_p>
     392:	8b 85       	ldd	r24, Y+11	; 0x0b
     394:	0e 94 f3 06 	call	0xde6	; 0xde6 <uart_putc_hex>
     398:	8a e0       	ldi	r24, 0x0A	; 10
     39a:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
    uart_puts_p(PSTR("serial: 0x")); uart_putdw_hex(disk_info.serial); uart_putc('\n');
     39e:	85 e7       	ldi	r24, 0x75	; 117
     3a0:	92 e0       	ldi	r25, 0x02	; 2
     3a2:	0e 94 31 06 	call	0xc62	; 0xc62 <uart_puts_p>
     3a6:	6c 85       	ldd	r22, Y+12	; 0x0c
     3a8:	7d 85       	ldd	r23, Y+13	; 0x0d
     3aa:	8e 85       	ldd	r24, Y+14	; 0x0e
     3ac:	9f 85       	ldd	r25, Y+15	; 0x0f
     3ae:	0e 94 19 07 	call	0xe32	; 0xe32 <uart_putdw_hex>
     3b2:	8a e0       	ldi	r24, 0x0A	; 10
     3b4:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
    uart_puts_p(PSTR("date:   ")); uart_putw_dec(disk_info.manufacturing_month); uart_putc('/');
     3b8:	8c e6       	ldi	r24, 0x6C	; 108
     3ba:	92 e0       	ldi	r25, 0x02	; 2
     3bc:	0e 94 31 06 	call	0xc62	; 0xc62 <uart_puts_p>
     3c0:	89 89       	ldd	r24, Y+17	; 0x11
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 b5 06 	call	0xd6a	; 0xd6a <uart_putw_dec>
     3c8:	8f e2       	ldi	r24, 0x2F	; 47
     3ca:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
                                   uart_putw_dec(disk_info.manufacturing_year); uart_putc('\n');
     3ce:	88 89       	ldd	r24, Y+16	; 0x10
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 b5 06 	call	0xd6a	; 0xd6a <uart_putw_dec>
     3d6:	8a e0       	ldi	r24, 0x0A	; 10
     3d8:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
    uart_puts_p(PSTR("size:   ")); uart_putdw_dec(disk_info.capacity / 1024 / 1024); uart_puts_p(PSTR("MB\n"));
     3dc:	83 e6       	ldi	r24, 0x63	; 99
     3de:	92 e0       	ldi	r25, 0x02	; 2
     3e0:	0e 94 31 06 	call	0xc62	; 0xc62 <uart_puts_p>
     3e4:	6a 89       	ldd	r22, Y+18	; 0x12
     3e6:	7b 89       	ldd	r23, Y+19	; 0x13
     3e8:	8c 89       	ldd	r24, Y+20	; 0x14
     3ea:	9d 89       	ldd	r25, Y+21	; 0x15
     3ec:	24 e1       	ldi	r18, 0x14	; 20
     3ee:	96 95       	lsr	r25
     3f0:	87 95       	ror	r24
     3f2:	77 95       	ror	r23
     3f4:	67 95       	ror	r22
     3f6:	2a 95       	dec	r18
     3f8:	d1 f7       	brne	.-12     	; 0x3ee <print_disk_info+0xd2>
     3fa:	0e 94 4c 06 	call	0xc98	; 0xc98 <uart_putdw_dec>
     3fe:	8f e5       	ldi	r24, 0x5F	; 95
     400:	92 e0       	ldi	r25, 0x02	; 2
     402:	0e 94 31 06 	call	0xc62	; 0xc62 <uart_puts_p>
    uart_puts_p(PSTR("copy:   ")); uart_putw_dec(disk_info.flag_copy); uart_putc('\n');
     406:	86 e5       	ldi	r24, 0x56	; 86
     408:	92 e0       	ldi	r25, 0x02	; 2
     40a:	0e 94 31 06 	call	0xc62	; 0xc62 <uart_puts_p>
     40e:	8e 89       	ldd	r24, Y+22	; 0x16
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 b5 06 	call	0xd6a	; 0xd6a <uart_putw_dec>
     416:	8a e0       	ldi	r24, 0x0A	; 10
     418:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
    uart_puts_p(PSTR("wr.pr.: ")); uart_putw_dec(disk_info.flag_write_protect_temp); uart_putc('/');
     41c:	8d e4       	ldi	r24, 0x4D	; 77
     41e:	92 e0       	ldi	r25, 0x02	; 2
     420:	0e 94 31 06 	call	0xc62	; 0xc62 <uart_puts_p>
     424:	88 8d       	ldd	r24, Y+24	; 0x18
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0e 94 b5 06 	call	0xd6a	; 0xd6a <uart_putw_dec>
     42c:	8f e2       	ldi	r24, 0x2F	; 47
     42e:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
                                   uart_putw_dec(disk_info.flag_write_protect); uart_putc('\n');
     432:	8f 89       	ldd	r24, Y+23	; 0x17
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	0e 94 b5 06 	call	0xd6a	; 0xd6a <uart_putw_dec>
     43a:	8a e0       	ldi	r24, 0x0A	; 10
     43c:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
    uart_puts_p(PSTR("format: ")); uart_putw_dec(disk_info.format); uart_putc('\n');
     440:	84 e4       	ldi	r24, 0x44	; 68
     442:	92 e0       	ldi	r25, 0x02	; 2
     444:	0e 94 31 06 	call	0xc62	; 0xc62 <uart_puts_p>
     448:	89 8d       	ldd	r24, Y+25	; 0x19
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 b5 06 	call	0xd6a	; 0xd6a <uart_putw_dec>
     450:	8a e0       	ldi	r24, 0x0A	; 10
     452:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
    uart_puts_p(PSTR("free:   ")); uart_putdw_dec(fat_get_fs_free(fs)); uart_putc('/');
     456:	8b e3       	ldi	r24, 0x3B	; 59
     458:	92 e0       	ldi	r25, 0x02	; 2
     45a:	0e 94 31 06 	call	0xc62	; 0xc62 <uart_puts_p>
     45e:	c8 01       	movw	r24, r16
     460:	0e 94 f5 11 	call	0x23ea	; 0x23ea <fat_get_fs_free>
     464:	0e 94 4c 06 	call	0xc98	; 0xc98 <uart_putdw_dec>
     468:	8f e2       	ldi	r24, 0x2F	; 47
     46a:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
                                   uart_putdw_dec(fat_get_fs_size(fs)); uart_putc('\n');
     46e:	c8 01       	movw	r24, r16
     470:	0e 94 b6 11 	call	0x236c	; 0x236c <fat_get_fs_size>
     474:	0e 94 4c 06 	call	0xc98	; 0xc98 <uart_putdw_dec>
     478:	8a e0       	ldi	r24, 0x0A	; 10
     47a:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	01 c0       	rjmp	.+2      	; 0x484 <print_disk_info+0x168>

    return 1;
     482:	80 e0       	ldi	r24, 0x00	; 0
}
     484:	69 96       	adiw	r28, 0x19	; 25
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
     490:	cf 91       	pop	r28
     492:	df 91       	pop	r29
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	08 95       	ret

0000049a <find_file_in_dir>:

    return l;
}

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
     49a:	ef 92       	push	r14
     49c:	ff 92       	push	r15
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	eb 01       	movw	r28, r22
     4a8:	8a 01       	movw	r16, r20
     4aa:	79 01       	movw	r14, r18
     4ac:	0b c0       	rjmp	.+22     	; 0x4c4 <find_file_in_dir+0x2a>
    while(fat_read_dir(dd, dir_entry))
     4ae:	c7 01       	movw	r24, r14
     4b0:	b8 01       	movw	r22, r16
     4b2:	0e 94 bd 24 	call	0x497a	; 0x497a <strcmp>
    {
        if(strcmp(dir_entry->long_name, name) == 0)
     4b6:	00 97       	sbiw	r24, 0x00	; 0
     4b8:	29 f4       	brne	.+10     	; 0x4c4 <find_file_in_dir+0x2a>
        {
            fat_reset_dir(dd);
     4ba:	ce 01       	movw	r24, r28
     4bc:	0e 94 3c 10 	call	0x2078	; 0x2078 <fat_reset_dir>
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	06 c0       	rjmp	.+12     	; 0x4d0 <find_file_in_dir+0x36>
    return l;
}

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
    while(fat_read_dir(dd, dir_entry))
     4c4:	ce 01       	movw	r24, r28
     4c6:	b7 01       	movw	r22, r14
     4c8:	0e 94 3e 13 	call	0x267c	; 0x267c <fat_read_dir>
     4cc:	88 23       	and	r24, r24
     4ce:	79 f7       	brne	.-34     	; 0x4ae <find_file_in_dir+0x14>
            return 1;
        }
    }

    return 0;
}
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	1f 91       	pop	r17
     4d6:	0f 91       	pop	r16
     4d8:	ff 90       	pop	r15
     4da:	ef 90       	pop	r14
     4dc:	08 95       	ret

000004de <open_file_in_dir>:

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
     4de:	ef 92       	push	r14
     4e0:	ff 92       	push	r15
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	df 93       	push	r29
     4e8:	cf 93       	push	r28
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	ad 97       	sbiw	r28, 0x2d	; 45
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	f8 94       	cli
     4f4:	de bf       	out	0x3e, r29	; 62
     4f6:	0f be       	out	0x3f, r0	; 63
     4f8:	cd bf       	out	0x3d, r28	; 61
     4fa:	8c 01       	movw	r16, r24
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
     4fc:	7e 01       	movw	r14, r28
     4fe:	08 94       	sec
     500:	e1 1c       	adc	r14, r1
     502:	f1 1c       	adc	r15, r1
     504:	97 01       	movw	r18, r14
     506:	0e 94 4d 02 	call	0x49a	; 0x49a <find_file_in_dir>
     50a:	88 23       	and	r24, r24
     50c:	19 f4       	brne	.+6      	; 0x514 <open_file_in_dir+0x36>
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	05 c0       	rjmp	.+10     	; 0x51e <open_file_in_dir+0x40>
        return 0;

    return fat_open_file(fs, &file_entry);
     514:	c8 01       	movw	r24, r16
     516:	b7 01       	movw	r22, r14
     518:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <fat_open_file>
     51c:	9c 01       	movw	r18, r24
}
     51e:	c9 01       	movw	r24, r18
     520:	ad 96       	adiw	r28, 0x2d	; 45
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
     52c:	cf 91       	pop	r28
     52e:	df 91       	pop	r29
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	ff 90       	pop	r15
     536:	ef 90       	pop	r14
     538:	08 95       	ret

0000053a <read_line>:
    
    return 0;
}

uint8_t read_line(char* buffer, uint8_t buffer_length)
{
     53a:	cf 92       	push	r12
     53c:	df 92       	push	r13
     53e:	ef 92       	push	r14
     540:	ff 92       	push	r15
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	ec 01       	movw	r28, r24
     54c:	16 2f       	mov	r17, r22
    memset(buffer, 0, buffer_length);
     54e:	60 e0       	ldi	r22, 0x00	; 0
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	41 2f       	mov	r20, r17
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	0e 94 ab 24 	call	0x4956	; 0x4956 <memset>
     55a:	00 e0       	ldi	r16, 0x00	; 0

    uint8_t read_length = 0;
    while(read_length < buffer_length - 1)
     55c:	c1 2e       	mov	r12, r17
     55e:	dd 24       	eor	r13, r13
     560:	08 94       	sec
     562:	c1 08       	sbc	r12, r1
     564:	d1 08       	sbc	r13, r1
     566:	23 c0       	rjmp	.+70     	; 0x5ae <read_line+0x74>
    {
        uint8_t c = uart_getc();
     568:	0e 94 16 06 	call	0xc2c	; 0xc2c <uart_getc>
     56c:	18 2f       	mov	r17, r24

        if(c == 0x08 || c == 0x7f)
     56e:	88 30       	cpi	r24, 0x08	; 8
     570:	11 f0       	breq	.+4      	; 0x576 <read_line+0x3c>
     572:	8f 37       	cpi	r24, 0x7F	; 127
     574:	89 f4       	brne	.+34     	; 0x598 <read_line+0x5e>
        {
            if(read_length < 1)
     576:	00 23       	and	r16, r16
     578:	d1 f0       	breq	.+52     	; 0x5ae <read_line+0x74>
                continue;

            --read_length;
     57a:	01 50       	subi	r16, 0x01	; 1
            buffer[read_length] = '\0';
     57c:	fe 01       	movw	r30, r28
     57e:	e0 0f       	add	r30, r16
     580:	f1 1d       	adc	r31, r1
     582:	10 82       	st	Z, r1

            uart_putc(0x08);
     584:	88 e0       	ldi	r24, 0x08	; 8
     586:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
            uart_putc(' ');
     58a:	80 e2       	ldi	r24, 0x20	; 32
     58c:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
            uart_putc(0x08);
     590:	88 e0       	ldi	r24, 0x08	; 8
     592:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
     596:	0b c0       	rjmp	.+22     	; 0x5ae <read_line+0x74>

            continue;
        }

        uart_putc(c);
     598:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
     59c:	fe 01       	movw	r30, r28
     59e:	ee 0d       	add	r30, r14
     5a0:	ff 1d       	adc	r31, r15

        if(c == '\n')
     5a2:	1a 30       	cpi	r17, 0x0A	; 10
     5a4:	11 f4       	brne	.+4      	; 0x5aa <read_line+0x70>
        {
            buffer[read_length] = '\0';
     5a6:	10 82       	st	Z, r1
     5a8:	07 c0       	rjmp	.+14     	; 0x5b8 <read_line+0x7e>
            break;
        }
        else
        {
            buffer[read_length] = c;
     5aa:	10 83       	st	Z, r17
            ++read_length;
     5ac:	0f 5f       	subi	r16, 0xFF	; 255
uint8_t read_line(char* buffer, uint8_t buffer_length)
{
    memset(buffer, 0, buffer_length);

    uint8_t read_length = 0;
    while(read_length < buffer_length - 1)
     5ae:	e0 2e       	mov	r14, r16
     5b0:	ff 24       	eor	r15, r15
     5b2:	ec 14       	cp	r14, r12
     5b4:	fd 04       	cpc	r15, r13
     5b6:	c4 f2       	brlt	.-80     	; 0x568 <read_line+0x2e>
            ++read_length;
        }
    }

    return read_length;
}
     5b8:	80 2f       	mov	r24, r16
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	ff 90       	pop	r15
     5c4:	ef 90       	pop	r14
     5c6:	df 90       	pop	r13
     5c8:	cf 90       	pop	r12
     5ca:	08 95       	ret

000005cc <shell_player_eof>:
static uint8_t IsPlaying = 0;
static struct fat_file_struct* player_fd = NULL;

void shell_player_eof(void)
{
  player_stop();
     5cc:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <player_stop>
  
  if (player_fd)
     5d0:	80 91 33 01 	lds	r24, 0x0133
     5d4:	90 91 34 01 	lds	r25, 0x0134
     5d8:	00 97       	sbiw	r24, 0x00	; 0
     5da:	11 f0       	breq	.+4      	; 0x5e0 <shell_player_eof+0x14>
    fat_close_file(player_fd);
     5dc:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <fat_close_file>
  
  IsPlaying = 0;
     5e0:	10 92 32 01 	sts	0x0132, r1
  
  printf_P(PSTR("End of file\r\n"));
     5e4:	00 d0       	rcall	.+0      	; 0x5e6 <shell_player_eof+0x1a>
     5e6:	89 eb       	ldi	r24, 0xB9	; 185
     5e8:	92 e0       	ldi	r25, 0x02	; 2
     5ea:	ed b7       	in	r30, 0x3d	; 61
     5ec:	fe b7       	in	r31, 0x3e	; 62
     5ee:	92 83       	std	Z+2, r25	; 0x02
     5f0:	81 83       	std	Z+1, r24	; 0x01
     5f2:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <printf_P>
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
}
     5fa:	08 95       	ret

000005fc <play_file>:

void play_file(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
     5fc:	ef 92       	push	r14
     5fe:	ff 92       	push	r15
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	ec 01       	movw	r28, r24
     60a:	8b 01       	movw	r16, r22
     60c:	7a 01       	movw	r14, r20
  if (IsPlaying)
     60e:	80 91 32 01 	lds	r24, 0x0132
     612:	88 23       	and	r24, r24
     614:	61 f0       	breq	.+24     	; 0x62e <play_file+0x32>
  {
    player_stop();
     616:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <player_stop>
    
    if (player_fd)
     61a:	80 91 33 01 	lds	r24, 0x0133
     61e:	90 91 34 01 	lds	r25, 0x0134
     622:	00 97       	sbiw	r24, 0x00	; 0
     624:	11 f0       	breq	.+4      	; 0x62a <play_file+0x2e>
      fat_close_file(player_fd);
     626:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <fat_close_file>
    
    IsPlaying = 0;
     62a:	10 92 32 01 	sts	0x0132, r1
  }
    
  /* search file in current directory and open it */
  player_fd = open_file_in_dir(fs, dd, name);
     62e:	ce 01       	movw	r24, r28
     630:	b8 01       	movw	r22, r16
     632:	a7 01       	movw	r20, r14
     634:	0e 94 6f 02 	call	0x4de	; 0x4de <open_file_in_dir>
     638:	9c 01       	movw	r18, r24
     63a:	90 93 34 01 	sts	0x0134, r25
     63e:	80 93 33 01 	sts	0x0133, r24
  if(!player_fd)
     642:	00 97       	sbiw	r24, 0x00	; 0
     644:	89 f4       	brne	.+34     	; 0x668 <play_file+0x6c>
  {
      printf_P(PSTR("error opening %s\r\n"), name);
     646:	00 d0       	rcall	.+0      	; 0x648 <play_file+0x4c>
     648:	00 d0       	rcall	.+0      	; 0x64a <play_file+0x4e>
     64a:	86 ea       	ldi	r24, 0xA6	; 166
     64c:	92 e0       	ldi	r25, 0x02	; 2
     64e:	ed b7       	in	r30, 0x3d	; 61
     650:	fe b7       	in	r31, 0x3e	; 62
     652:	92 83       	std	Z+2, r25	; 0x02
     654:	81 83       	std	Z+1, r24	; 0x01
     656:	f4 82       	std	Z+4, r15	; 0x04
     658:	e3 82       	std	Z+3, r14	; 0x03
     65a:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <printf_P>
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	08 c0       	rjmp	.+16     	; 0x678 <play_file+0x7c>
      return;
  }

  IsPlaying = 1;
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	80 93 32 01 	sts	0x0132, r24

  /* Start the playback */
  player_start(player_fd, &shell_player_eof);
     66e:	c9 01       	movw	r24, r18
     670:	66 ee       	ldi	r22, 0xE6	; 230
     672:	72 e0       	ldi	r23, 0x02	; 2
     674:	0e 94 7f 09 	call	0x12fe	; 0x12fe <player_start>
}
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	1f 91       	pop	r17
     67e:	0f 91       	pop	r16
     680:	ff 90       	pop	r15
     682:	ef 90       	pop	r14
     684:	08 95       	ret

00000686 <application_main>:

int application_main()
{
     686:	2f 92       	push	r2
     688:	3f 92       	push	r3
     68a:	4f 92       	push	r4
     68c:	5f 92       	push	r5
     68e:	6f 92       	push	r6
     690:	7f 92       	push	r7
     692:	8f 92       	push	r8
     694:	9f 92       	push	r9
     696:	af 92       	push	r10
     698:	bf 92       	push	r11
     69a:	cf 92       	push	r12
     69c:	df 92       	push	r13
     69e:	ef 92       	push	r14
     6a0:	ff 92       	push	r15
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
     6a6:	df 93       	push	r29
     6a8:	cf 93       	push	r28
     6aa:	cd b7       	in	r28, 0x3d	; 61
     6ac:	de b7       	in	r29, 0x3e	; 62
     6ae:	c4 58       	subi	r28, 0x84	; 132
     6b0:	d0 40       	sbci	r29, 0x00	; 0
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	f8 94       	cli
     6b6:	de bf       	out	0x3e, r29	; 62
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	cd bf       	out	0x3d, r28	; 61
    /* we will just use ordinary idle mode */
    set_sleep_mode(SLEEP_MODE_IDLE);
     6bc:	83 b7       	in	r24, 0x33	; 51
     6be:	81 7f       	andi	r24, 0xF1	; 241
     6c0:	83 bf       	out	0x33, r24	; 51
			 *  \param[in] BaudRate     Serial baud rate, in bits per second
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate
			 */
			static inline void Serial_Init(const uint32_t BaudRate, const bool DoubleSpeed)
			{
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     6c2:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     6c6:	88 e1       	ldi	r24, 0x18	; 24
     6c8:	80 93 c9 00 	sts	0x00C9, r24
				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     6cc:	86 e0       	ldi	r24, 0x06	; 6
     6ce:	80 93 ca 00 	sts	0x00CA, r24
				
				DDRD  |= (1 << 3);	
     6d2:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     6d4:	5a 9a       	sbi	0x0b, 2	; 11
				
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     6d6:	87 e6       	ldi	r24, 0x67	; 103
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	90 93 cd 00 	sts	0x00CD, r25
     6de:	80 93 cc 00 	sts	0x00CC, r24
			 */
			static inline void SerialStream_Init(const uint32_t BaudRate, const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);
				
				stdout = &USARTStream;
     6e2:	86 e1       	ldi	r24, 0x16	; 22
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	90 93 65 08 	sts	0x0865, r25
     6ea:	80 93 64 08 	sts	0x0864, r24
            uart_putc('>');
            uart_putc(' ');

            /* read command */
            char* command = buffer;
            if(read_line(command, sizeof(buffer)) < 1)
     6ee:	5d e0       	ldi	r21, 0x0D	; 13
     6f0:	45 2e       	mov	r4, r21
     6f2:	51 2c       	mov	r5, r1
     6f4:	4c 0e       	add	r4, r28
     6f6:	5d 1e       	adc	r5, r29
            }
            else if(strcmp_P(command, PSTR("ls")) == 0)
            {
                /* print directory listing */
                struct fat_dir_entry_struct dir_entry;
                while(fat_read_dir(dd, &dir_entry))
     6f8:	ce 01       	movw	r24, r28
     6fa:	8e 5a       	subi	r24, 0xAE	; 174
     6fc:	9f 4f       	sbci	r25, 0xFF	; 255
     6fe:	cf 57       	subi	r28, 0x7F	; 127
     700:	df 4f       	sbci	r29, 0xFF	; 255
     702:	99 83       	std	Y+1, r25	; 0x01
     704:	88 83       	st	Y, r24
     706:	c1 58       	subi	r28, 0x81	; 129
     708:	d0 40       	sbci	r29, 0x00	; 0

                /* print file contents */
                uint8_t buffer[8];
                uint8_t size;
                uint32_t offset = 0;
                while((size = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
     70a:	de 01       	movw	r26, r28
     70c:	15 96       	adiw	r26, 0x05	; 5
     70e:	cd 57       	subi	r28, 0x7D	; 125
     710:	df 4f       	sbci	r29, 0xFF	; 255
     712:	b9 83       	std	Y+1, r27	; 0x01
     714:	a8 83       	st	Y, r26
     716:	c3 58       	subi	r28, 0x83	; 131
     718:	d0 40       	sbci	r29, 0x00	; 0
    SerialStream_Init(9600, false);

    while(1)
    {
        /* setup sd card slot */
        if(!sd_raw_init())
     71a:	0e 94 2f 23 	call	0x465e	; 0x465e <sd_raw_init>
     71e:	88 23       	and	r24, r24
     720:	19 f4       	brne	.+6      	; 0x728 <application_main+0xa2>
        {
#if DEBUG
            uart_puts_p(PSTR("MMC/SD initialization failed\n"));
     722:	8d e1       	ldi	r24, 0x1D	; 29
     724:	92 e0       	ldi	r25, 0x02	; 2
     726:	48 c0       	rjmp	.+144    	; 0x7b8 <application_main+0x132>
#else
                                                            0,
                                                            0,
#endif
                                                            0
                                                           );
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	92 e2       	ldi	r25, 0x22	; 34
     72c:	6f eb       	ldi	r22, 0xBF	; 191
     72e:	72 e2       	ldi	r23, 0x22	; 34
     730:	41 e1       	ldi	r20, 0x11	; 17
     732:	51 e2       	ldi	r21, 0x21	; 33
     734:	28 ec       	ldi	r18, 0xC8	; 200
     736:	33 e2       	ldi	r19, 0x23	; 35
     738:	00 e0       	ldi	r16, 0x00	; 0
     73a:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <partition_open>
     73e:	c1 58       	subi	r28, 0x81	; 129
     740:	df 4f       	sbci	r29, 0xFF	; 255
     742:	99 83       	std	Y+1, r25	; 0x01
     744:	88 83       	st	Y, r24
     746:	cf 57       	subi	r28, 0x7F	; 127
     748:	d0 40       	sbci	r29, 0x00	; 0

        if(!partition)
     74a:	89 2b       	or	r24, r25
     74c:	b1 f4       	brne	.+44     	; 0x77a <application_main+0xf4>
        {
            /* If the partition did not open, assume the storage device
             * is a "superfloppy", i.e. has no MBR.
             */
            partition = partition_open(sd_raw_read,
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	92 e2       	ldi	r25, 0x22	; 34
     752:	6f eb       	ldi	r22, 0xBF	; 191
     754:	72 e2       	ldi	r23, 0x22	; 34
     756:	41 e1       	ldi	r20, 0x11	; 17
     758:	51 e2       	ldi	r21, 0x21	; 33
     75a:	28 ec       	ldi	r18, 0xC8	; 200
     75c:	33 e2       	ldi	r19, 0x23	; 35
     75e:	0f ef       	ldi	r16, 0xFF	; 255
     760:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <partition_open>
     764:	c1 58       	subi	r28, 0x81	; 129
     766:	df 4f       	sbci	r29, 0xFF	; 255
     768:	99 83       	std	Y+1, r25	; 0x01
     76a:	88 83       	st	Y, r24
     76c:	cf 57       	subi	r28, 0x7F	; 127
     76e:	d0 40       	sbci	r29, 0x00	; 0
                                       0,
                                       0,
#endif
                                       -1
                                      );
            if(!partition)
     770:	89 2b       	or	r24, r25
     772:	19 f4       	brne	.+6      	; 0x77a <application_main+0xf4>
            {
#if DEBUG
                uart_puts_p(PSTR("opening partition failed\n"));
     774:	83 e0       	ldi	r24, 0x03	; 3
     776:	92 e0       	ldi	r25, 0x02	; 2
     778:	1f c0       	rjmp	.+62     	; 0x7b8 <application_main+0x132>
                continue;
            }
        }

        /* open file system */
        struct fat_fs_struct* fs = fat_open(partition);
     77a:	c1 58       	subi	r28, 0x81	; 129
     77c:	df 4f       	sbci	r29, 0xFF	; 255
     77e:	88 81       	ld	r24, Y
     780:	99 81       	ldd	r25, Y+1	; 0x01
     782:	cf 57       	subi	r28, 0x7F	; 127
     784:	d0 40       	sbci	r29, 0x00	; 0
     786:	0e 94 4f 14 	call	0x289e	; 0x289e <fat_open>
     78a:	4c 01       	movw	r8, r24
        if(!fs)
     78c:	00 97       	sbiw	r24, 0x00	; 0
     78e:	19 f4       	brne	.+6      	; 0x796 <application_main+0x110>
        {
#if DEBUG
            uart_puts_p(PSTR("opening filesystem failed\n"));
     790:	88 ee       	ldi	r24, 0xE8	; 232
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	11 c0       	rjmp	.+34     	; 0x7b8 <application_main+0x132>
            continue;
        }

        /* open root directory */
        struct fat_dir_entry_struct directory;
        fat_get_dir_entry_of_path(fs, "/", &directory);
     796:	8e 01       	movw	r16, r28
     798:	0b 5d       	subi	r16, 0xDB	; 219
     79a:	1f 4f       	sbci	r17, 0xFF	; 255
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	71 e0       	ldi	r23, 0x01	; 1
     7a0:	a8 01       	movw	r20, r16
     7a2:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <fat_get_dir_entry_of_path>

        struct fat_dir_struct* dd = fat_open_dir(fs, &directory);
     7a6:	c4 01       	movw	r24, r8
     7a8:	b8 01       	movw	r22, r16
     7aa:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <fat_open_dir>
     7ae:	3c 01       	movw	r6, r24
        if(!dd)
     7b0:	00 97       	sbiw	r24, 0x00	; 0
     7b2:	29 f4       	brne	.+10     	; 0x7be <application_main+0x138>
        {
#if DEBUG
            uart_puts_p(PSTR("opening root directory failed\n"));
     7b4:	89 ec       	ldi	r24, 0xC9	; 201
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	0e 94 31 06 	call	0xc62	; 0xc62 <uart_puts_p>
     7bc:	ae cf       	rjmp	.-164    	; 0x71a <application_main+0x94>
#endif
            continue;
        }
        
        /* print some card information as a boot message */
        print_disk_info(fs);
     7be:	c4 01       	movw	r24, r8
     7c0:	0e 94 8e 01 	call	0x31c	; 0x31c <print_disk_info>
            {
                /* print directory listing */
                struct fat_dir_entry_struct dir_entry;
                while(fat_read_dir(dd, &dir_entry))
                {
                    uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;
     7c4:	44 e2       	ldi	r20, 0x24	; 36
     7c6:	24 2e       	mov	r2, r20
        /* provide a simple shell */
        char buffer[24];
        while(1)
        {
            /* print prompt */
            uart_putc('>');
     7c8:	8e e3       	ldi	r24, 0x3E	; 62
     7ca:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
            uart_putc(' ');
     7ce:	80 e2       	ldi	r24, 0x20	; 32
     7d0:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>

            /* read command */
            char* command = buffer;
            if(read_line(command, sizeof(buffer)) < 1)
     7d4:	c2 01       	movw	r24, r4
     7d6:	68 e1       	ldi	r22, 0x18	; 24
     7d8:	0e 94 9d 02 	call	0x53a	; 0x53a <read_line>
     7dc:	88 23       	and	r24, r24
     7de:	a1 f3       	breq	.-24     	; 0x7c8 <application_main+0x142>
                continue;

            /* execute command */
            if(strcmp_P(command, PSTR("init")) == 0)
     7e0:	c2 01       	movw	r24, r4
     7e2:	64 ec       	ldi	r22, 0xC4	; 196
     7e4:	71 e0       	ldi	r23, 0x01	; 1
     7e6:	0e 94 8b 24 	call	0x4916	; 0x4916 <strcmp_P>
     7ea:	89 2b       	or	r24, r25
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <application_main+0x16a>
     7ee:	11 c2       	rjmp	.+1058   	; 0xc12 <__stack+0x113>
            {
                break;
            }
            else if(strncmp_P(command, PSTR("cd "), 3) == 0)
     7f0:	c2 01       	movw	r24, r4
     7f2:	60 ec       	ldi	r22, 0xC0	; 192
     7f4:	71 e0       	ldi	r23, 0x01	; 1
     7f6:	43 e0       	ldi	r20, 0x03	; 3
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	0e 94 94 24 	call	0x4928	; 0x4928 <strncmp_P>
     7fe:	89 2b       	or	r24, r25
     800:	01 f5       	brne	.+64     	; 0x842 <application_main+0x1bc>
            {
                command += 3;
                if(command[0] == '\0')
     802:	88 89       	ldd	r24, Y+16	; 0x10
     804:	88 23       	and	r24, r24
     806:	01 f3       	breq	.-64     	; 0x7c8 <application_main+0x142>
                    continue;

                /* change directory */
                struct fat_dir_entry_struct subdir_entry;
                if(find_file_in_dir(fs, dd, command, &subdir_entry))
     808:	c4 01       	movw	r24, r8
     80a:	b3 01       	movw	r22, r6
     80c:	ae 01       	movw	r20, r28
     80e:	40 5f       	subi	r20, 0xF0	; 240
     810:	5f 4f       	sbci	r21, 0xFF	; 255
     812:	9e 01       	movw	r18, r28
     814:	2e 5a       	subi	r18, 0xAE	; 174
     816:	3f 4f       	sbci	r19, 0xFF	; 255
     818:	0e 94 4d 02 	call	0x49a	; 0x49a <find_file_in_dir>
     81c:	88 23       	and	r24, r24
     81e:	71 f0       	breq	.+28     	; 0x83c <application_main+0x1b6>
                {
                    struct fat_dir_struct* dd_new = fat_open_dir(fs, &subdir_entry);
     820:	c4 01       	movw	r24, r8
     822:	be 01       	movw	r22, r28
     824:	6e 5a       	subi	r22, 0xAE	; 174
     826:	7f 4f       	sbci	r23, 0xFF	; 255
     828:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <fat_open_dir>
     82c:	8c 01       	movw	r16, r24
                    if(dd_new)
     82e:	00 97       	sbiw	r24, 0x00	; 0
     830:	29 f0       	breq	.+10     	; 0x83c <application_main+0x1b6>
                    {
                        fat_close_dir(dd);
     832:	c3 01       	movw	r24, r6
     834:	0e 94 36 10 	call	0x206c	; 0x206c <fat_close_dir>
     838:	38 01       	movw	r6, r16
     83a:	c6 cf       	rjmp	.-116    	; 0x7c8 <application_main+0x142>
                        dd = dd_new;
                        continue;
                    }
                }

                uart_puts_p(PSTR("directory not found: "));
     83c:	8a ea       	ldi	r24, 0xAA	; 170
     83e:	91 e0       	ldi	r25, 0x01	; 1
     840:	ee c0       	rjmp	.+476    	; 0xa1e <application_main+0x398>
                uart_puts(command);
                uart_putc('\n');
            }
            else if(strcmp_P(command, PSTR("ls")) == 0)
     842:	c2 01       	movw	r24, r4
     844:	67 ea       	ldi	r22, 0xA7	; 167
     846:	71 e0       	ldi	r23, 0x01	; 1
     848:	0e 94 8b 24 	call	0x4916	; 0x4916 <strcmp_P>
     84c:	89 2b       	or	r24, r25
     84e:	c1 f1       	breq	.+112    	; 0x8c0 <application_main+0x23a>
     850:	40 c0       	rjmp	.+128    	; 0x8d2 <application_main+0x24c>
            {
                /* print directory listing */
                struct fat_dir_entry_struct dir_entry;
                while(fat_read_dir(dd, &dir_entry))
                {
                    uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;
     852:	cf 57       	subi	r28, 0x7F	; 127
     854:	df 4f       	sbci	r29, 0xFF	; 255
     856:	e8 81       	ld	r30, Y
     858:	f9 81       	ldd	r31, Y+1	; 0x01
     85a:	c1 58       	subi	r28, 0x81	; 129
     85c:	d0 40       	sbci	r29, 0x00	; 0
     85e:	01 90       	ld	r0, Z+
     860:	00 20       	and	r0, r0
     862:	e9 f7       	brne	.-6      	; 0x85e <application_main+0x1d8>
     864:	8f 01       	movw	r16, r30
     866:	01 50       	subi	r16, 0x01	; 1
     868:	10 40       	sbci	r17, 0x00	; 0
     86a:	cf 57       	subi	r28, 0x7F	; 127
     86c:	df 4f       	sbci	r29, 0xFF	; 255
     86e:	88 81       	ld	r24, Y
     870:	99 81       	ldd	r25, Y+1	; 0x01
     872:	c1 58       	subi	r28, 0x81	; 129
     874:	d0 40       	sbci	r29, 0x00	; 0
     876:	08 1b       	sub	r16, r24
     878:	19 0b       	sbc	r17, r25

                    uart_puts(dir_entry.long_name);
     87a:	ce 01       	movw	r24, r28
     87c:	8e 5a       	subi	r24, 0xAE	; 174
     87e:	9f 4f       	sbci	r25, 0xFF	; 255
     880:	0e 94 3f 06 	call	0xc7e	; 0xc7e <uart_puts>
                    uart_putc(dir_entry.attributes & FAT_ATTRIB_DIR ? '/' : ' ');
     884:	e3 96       	adiw	r28, 0x33	; 51
     886:	8f ad       	ldd	r24, Y+63	; 0x3f
     888:	e3 97       	sbiw	r28, 0x33	; 51
     88a:	84 fd       	sbrc	r24, 4
     88c:	02 c0       	rjmp	.+4      	; 0x892 <application_main+0x20c>
     88e:	80 e2       	ldi	r24, 0x20	; 32
     890:	01 c0       	rjmp	.+2      	; 0x894 <application_main+0x20e>
     892:	8f e2       	ldi	r24, 0x2F	; 47
            {
                /* print directory listing */
                struct fat_dir_entry_struct dir_entry;
                while(fat_read_dir(dd, &dir_entry))
                {
                    uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;
     894:	12 2d       	mov	r17, r2
     896:	10 1b       	sub	r17, r16

                    uart_puts(dir_entry.long_name);
                    uart_putc(dir_entry.attributes & FAT_ATTRIB_DIR ? '/' : ' ');
     898:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
     89c:	04 c0       	rjmp	.+8      	; 0x8a6 <application_main+0x220>
                    while(spaces--)
                        uart_putc(' ');
     89e:	80 e2       	ldi	r24, 0x20	; 32
     8a0:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
     8a4:	11 50       	subi	r17, 0x01	; 1
                {
                    uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;

                    uart_puts(dir_entry.long_name);
                    uart_putc(dir_entry.attributes & FAT_ATTRIB_DIR ? '/' : ' ');
                    while(spaces--)
     8a6:	11 23       	and	r17, r17
     8a8:	d1 f7       	brne	.-12     	; 0x89e <application_main+0x218>
                        uart_putc(' ');
                    uart_putdw_dec(dir_entry.file_size);
     8aa:	eb 96       	adiw	r28, 0x3b	; 59
     8ac:	6c ad       	ldd	r22, Y+60	; 0x3c
     8ae:	7d ad       	ldd	r23, Y+61	; 0x3d
     8b0:	8e ad       	ldd	r24, Y+62	; 0x3e
     8b2:	9f ad       	ldd	r25, Y+63	; 0x3f
     8b4:	eb 97       	sbiw	r28, 0x3b	; 59
     8b6:	0e 94 4c 06 	call	0xc98	; 0xc98 <uart_putdw_dec>
                    uart_putc('\n');
     8ba:	8a e0       	ldi	r24, 0x0A	; 10
     8bc:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
            }
            else if(strcmp_P(command, PSTR("ls")) == 0)
            {
                /* print directory listing */
                struct fat_dir_entry_struct dir_entry;
                while(fat_read_dir(dd, &dir_entry))
     8c0:	c3 01       	movw	r24, r6
     8c2:	be 01       	movw	r22, r28
     8c4:	6e 5a       	subi	r22, 0xAE	; 174
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 3e 13 	call	0x267c	; 0x267c <fat_read_dir>
     8cc:	88 23       	and	r24, r24
     8ce:	09 f6       	brne	.-126    	; 0x852 <application_main+0x1cc>
     8d0:	7b cf       	rjmp	.-266    	; 0x7c8 <application_main+0x142>
                        uart_putc(' ');
                    uart_putdw_dec(dir_entry.file_size);
                    uart_putc('\n');
                }
            }
            else if(strncmp_P(command, PSTR("cat "), 4) == 0)
     8d2:	c2 01       	movw	r24, r4
     8d4:	62 ea       	ldi	r22, 0xA2	; 162
     8d6:	71 e0       	ldi	r23, 0x01	; 1
     8d8:	44 e0       	ldi	r20, 0x04	; 4
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	0e 94 94 24 	call	0x4928	; 0x4928 <strncmp_P>
     8e0:	89 2b       	or	r24, r25
     8e2:	09 f0       	breq	.+2      	; 0x8e6 <application_main+0x260>
     8e4:	68 c0       	rjmp	.+208    	; 0x9b6 <application_main+0x330>
            {
                command += 4;
                if(command[0] == '\0')
     8e6:	89 89       	ldd	r24, Y+17	; 0x11
     8e8:	88 23       	and	r24, r24
     8ea:	09 f4       	brne	.+2      	; 0x8ee <application_main+0x268>
     8ec:	6d cf       	rjmp	.-294    	; 0x7c8 <application_main+0x142>
                    continue;
                
                /* search file in current directory and open it */
                struct fat_file_struct* fd = open_file_in_dir(fs, dd, command);
     8ee:	8e 01       	movw	r16, r28
     8f0:	0f 5e       	subi	r16, 0xEF	; 239
     8f2:	1f 4f       	sbci	r17, 0xFF	; 255
     8f4:	c4 01       	movw	r24, r8
     8f6:	b3 01       	movw	r22, r6
     8f8:	a8 01       	movw	r20, r16
     8fa:	0e 94 6f 02 	call	0x4de	; 0x4de <open_file_in_dir>
     8fe:	5c 01       	movw	r10, r24
                if(!fd)
     900:	00 97       	sbiw	r24, 0x00	; 0
     902:	21 f0       	breq	.+8      	; 0x90c <application_main+0x286>
     904:	cc 24       	eor	r12, r12
     906:	dd 24       	eor	r13, r13
     908:	76 01       	movw	r14, r12
     90a:	47 c0       	rjmp	.+142    	; 0x99a <application_main+0x314>
                {
                    uart_puts_p(PSTR("error opening "));
     90c:	83 e9       	ldi	r24, 0x93	; 147
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	0e 94 31 06 	call	0xc62	; 0xc62 <uart_puts_p>
                    uart_puts(command);
     914:	c8 01       	movw	r24, r16
     916:	0e 94 3f 06 	call	0xc7e	; 0xc7e <uart_puts>
                    uart_putc('\n');
     91a:	8a e0       	ldi	r24, 0x0A	; 10
     91c:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
     920:	53 cf       	rjmp	.-346    	; 0x7c8 <application_main+0x142>
                uint8_t buffer[8];
                uint8_t size;
                uint32_t offset = 0;
                while((size = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
                {
                    uart_putdw_hex(offset);
     922:	c7 01       	movw	r24, r14
     924:	b6 01       	movw	r22, r12
     926:	0e 94 19 07 	call	0xe32	; 0xe32 <uart_putdw_hex>
                    uart_putc(':');
     92a:	8a e3       	ldi	r24, 0x3A	; 58
     92c:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
     930:	8e 01       	movw	r16, r28
     932:	0b 5f       	subi	r16, 0xFB	; 251
     934:	1f 4f       	sbci	r17, 0xFF	; 255
                    for(uint8_t i = 0; i < 8; ++i)
                    {
                        uart_putc(' ');
     936:	80 e2       	ldi	r24, 0x20	; 32
     938:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
                        uart_putc_hex(buffer[i]);
     93c:	d8 01       	movw	r26, r16
     93e:	8d 91       	ld	r24, X+
     940:	8d 01       	movw	r16, r26
     942:	0e 94 f3 06 	call	0xde6	; 0xde6 <uart_putc_hex>
                uint32_t offset = 0;
                while((size = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
                {
                    uart_putdw_hex(offset);
                    uart_putc(':');
                    for(uint8_t i = 0; i < 8; ++i)
     946:	04 15       	cp	r16, r4
     948:	15 05       	cpc	r17, r5
     94a:	a9 f7       	brne	.-22     	; 0x936 <application_main+0x2b0>
                    {
                        uart_putc(' ');
                        uart_putc_hex(buffer[i]);
                    }
                    
                    uart_putc(' ');
     94c:	80 e2       	ldi	r24, 0x20	; 32
     94e:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
     952:	8e 01       	movw	r16, r28
     954:	0b 5f       	subi	r16, 0xFB	; 251
     956:	1f 4f       	sbci	r17, 0xFF	; 255
                    
                    /* Display printable characters */
                    for(uint8_t i = 0; i < size; ++i)
                    {
                        if ((buffer[i] >= 32) && (buffer[i] <= 126))
     958:	f8 01       	movw	r30, r16
     95a:	90 81       	ld	r25, Z
     95c:	89 2f       	mov	r24, r25
     95e:	80 52       	subi	r24, 0x20	; 32
     960:	8f 35       	cpi	r24, 0x5F	; 95
     962:	10 f4       	brcc	.+4      	; 0x968 <application_main+0x2e2>
                            uart_putc(buffer[i]);
     964:	89 2f       	mov	r24, r25
     966:	01 c0       	rjmp	.+2      	; 0x96a <application_main+0x2e4>
                        else
                            uart_putc('.');
     968:	8e e2       	ldi	r24, 0x2E	; 46
     96a:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
     96e:	0f 5f       	subi	r16, 0xFF	; 255
     970:	1f 4f       	sbci	r17, 0xFF	; 255
                    }
                    
                    uart_putc(' ');
                    
                    /* Display printable characters */
                    for(uint8_t i = 0; i < size; ++i)
     972:	80 2f       	mov	r24, r16
     974:	cd 57       	subi	r28, 0x7D	; 125
     976:	df 4f       	sbci	r29, 0xFF	; 255
     978:	f8 81       	ld	r31, Y
     97a:	c3 58       	subi	r28, 0x83	; 131
     97c:	d0 40       	sbci	r29, 0x00	; 0
     97e:	8f 1b       	sub	r24, r31
     980:	83 15       	cp	r24, r3
     982:	50 f3       	brcs	.-44     	; 0x958 <application_main+0x2d2>
                            uart_putc(buffer[i]);
                        else
                            uart_putc('.');
                    }
                    
                    uart_putc('\n');
     984:	8a e0       	ldi	r24, 0x0A	; 10
     986:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
                    offset += 8;
     98a:	88 e0       	ldi	r24, 0x08	; 8
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	a0 e0       	ldi	r26, 0x00	; 0
     990:	b0 e0       	ldi	r27, 0x00	; 0
     992:	c8 0e       	add	r12, r24
     994:	d9 1e       	adc	r13, r25
     996:	ea 1e       	adc	r14, r26
     998:	fb 1e       	adc	r15, r27

                /* print file contents */
                uint8_t buffer[8];
                uint8_t size;
                uint32_t offset = 0;
                while((size = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
     99a:	c5 01       	movw	r24, r10
     99c:	be 01       	movw	r22, r28
     99e:	6b 5f       	subi	r22, 0xFB	; 251
     9a0:	7f 4f       	sbci	r23, 0xFF	; 255
     9a2:	48 e0       	ldi	r20, 0x08	; 8
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fat_read_file>
     9aa:	38 2e       	mov	r3, r24
     9ac:	88 23       	and	r24, r24
     9ae:	09 f0       	breq	.+2      	; 0x9b2 <application_main+0x32c>
     9b0:	b8 cf       	rjmp	.-144    	; 0x922 <application_main+0x29c>
                    
                    uart_putc('\n');
                    offset += 8;
                }

                fat_close_file(fd);
     9b2:	c5 01       	movw	r24, r10
     9b4:	c5 c0       	rjmp	.+394    	; 0xb40 <__stack+0x41>
            }
            else if(strcmp_P(command, PSTR("disk")) == 0)
     9b6:	c2 01       	movw	r24, r4
     9b8:	6e e8       	ldi	r22, 0x8E	; 142
     9ba:	71 e0       	ldi	r23, 0x01	; 1
     9bc:	0e 94 8b 24 	call	0x4916	; 0x4916 <strcmp_P>
     9c0:	89 2b       	or	r24, r25
     9c2:	49 f4       	brne	.+18     	; 0x9d6 <application_main+0x350>
            {
                if(!print_disk_info(fs))
     9c4:	c4 01       	movw	r24, r8
     9c6:	0e 94 8e 01 	call	0x31c	; 0x31c <print_disk_info>
     9ca:	88 23       	and	r24, r24
     9cc:	09 f0       	breq	.+2      	; 0x9d0 <application_main+0x34a>
     9ce:	fc ce       	rjmp	.-520    	; 0x7c8 <application_main+0x142>
                    uart_puts_p(PSTR("error reading disk info\n"));
     9d0:	85 e7       	ldi	r24, 0x75	; 117
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	00 c1       	rjmp	.+512    	; 0xbd6 <__stack+0xd7>
            }
#if FAT_WRITE_SUPPORT
            else if(strncmp_P(command, PSTR("rm "), 3) == 0)
     9d6:	c2 01       	movw	r24, r4
     9d8:	61 e7       	ldi	r22, 0x71	; 113
     9da:	71 e0       	ldi	r23, 0x01	; 1
     9dc:	43 e0       	ldi	r20, 0x03	; 3
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	0e 94 94 24 	call	0x4928	; 0x4928 <strncmp_P>
     9e4:	89 2b       	or	r24, r25
     9e6:	01 f5       	brne	.+64     	; 0xa28 <application_main+0x3a2>
            {
                command += 3;
                if(command[0] == '\0')
     9e8:	88 89       	ldd	r24, Y+16	; 0x10
     9ea:	88 23       	and	r24, r24
     9ec:	09 f4       	brne	.+2      	; 0x9f0 <application_main+0x36a>
     9ee:	ec ce       	rjmp	.-552    	; 0x7c8 <application_main+0x142>
                    continue;
                
                struct fat_dir_entry_struct file_entry;
                if(find_file_in_dir(fs, dd, command, &file_entry))
     9f0:	c4 01       	movw	r24, r8
     9f2:	b3 01       	movw	r22, r6
     9f4:	ae 01       	movw	r20, r28
     9f6:	40 5f       	subi	r20, 0xF0	; 240
     9f8:	5f 4f       	sbci	r21, 0xFF	; 255
     9fa:	9e 01       	movw	r18, r28
     9fc:	2e 5a       	subi	r18, 0xAE	; 174
     9fe:	3f 4f       	sbci	r19, 0xFF	; 255
     a00:	0e 94 4d 02 	call	0x49a	; 0x49a <find_file_in_dir>
     a04:	88 23       	and	r24, r24
     a06:	49 f0       	breq	.+18     	; 0xa1a <application_main+0x394>
                {
                    if(fat_delete_file(fs, &file_entry))
     a08:	c4 01       	movw	r24, r8
     a0a:	be 01       	movw	r22, r28
     a0c:	6e 5a       	subi	r22, 0xAE	; 174
     a0e:	7f 4f       	sbci	r23, 0xFF	; 255
     a10:	0e 94 30 11 	call	0x2260	; 0x2260 <fat_delete_file>
     a14:	88 23       	and	r24, r24
     a16:	09 f0       	breq	.+2      	; 0xa1a <application_main+0x394>
     a18:	d7 ce       	rjmp	.-594    	; 0x7c8 <application_main+0x142>
                        continue;
                }

                uart_puts_p(PSTR("error deleting file: "));
     a1a:	8b e5       	ldi	r24, 0x5B	; 91
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	0e 94 31 06 	call	0xc62	; 0xc62 <uart_puts_p>
                uart_puts(command);
     a22:	ce 01       	movw	r24, r28
     a24:	40 96       	adiw	r24, 0x10	; 16
     a26:	77 cf       	rjmp	.-274    	; 0x916 <application_main+0x290>
                uart_putc('\n');
            }
            else if(strncmp_P(command, PSTR("touch "), 6) == 0)
     a28:	c2 01       	movw	r24, r4
     a2a:	64 e5       	ldi	r22, 0x54	; 84
     a2c:	71 e0       	ldi	r23, 0x01	; 1
     a2e:	46 e0       	ldi	r20, 0x06	; 6
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	0e 94 94 24 	call	0x4928	; 0x4928 <strncmp_P>
     a36:	89 2b       	or	r24, r25
     a38:	b9 f4       	brne	.+46     	; 0xa68 <application_main+0x3e2>
            {
                command += 6;
                if(command[0] == '\0')
     a3a:	8b 89       	ldd	r24, Y+19	; 0x13
     a3c:	88 23       	and	r24, r24
     a3e:	09 f4       	brne	.+2      	; 0xa42 <application_main+0x3bc>
     a40:	c3 ce       	rjmp	.-634    	; 0x7c8 <application_main+0x142>
                    continue;

                struct fat_dir_entry_struct file_entry;
                if(!fat_create_file(dd, command, &file_entry))
     a42:	c3 01       	movw	r24, r6
     a44:	be 01       	movw	r22, r28
     a46:	6d 5e       	subi	r22, 0xED	; 237
     a48:	7f 4f       	sbci	r23, 0xFF	; 255
     a4a:	ae 01       	movw	r20, r28
     a4c:	4e 5a       	subi	r20, 0xAE	; 174
     a4e:	5f 4f       	sbci	r21, 0xFF	; 255
     a50:	0e 94 ad 19 	call	0x335a	; 0x335a <fat_create_file>
     a54:	88 23       	and	r24, r24
     a56:	09 f0       	breq	.+2      	; 0xa5a <application_main+0x3d4>
     a58:	b7 ce       	rjmp	.-658    	; 0x7c8 <application_main+0x142>
                {
                    uart_puts_p(PSTR("error creating file: "));
     a5a:	8e e3       	ldi	r24, 0x3E	; 62
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	0e 94 31 06 	call	0xc62	; 0xc62 <uart_puts_p>
                    uart_puts(command);
     a62:	ce 01       	movw	r24, r28
     a64:	43 96       	adiw	r24, 0x13	; 19
     a66:	57 cf       	rjmp	.-338    	; 0x916 <application_main+0x290>
                    uart_putc('\n');
                }
            }
            else if(strncmp_P(command, PSTR("write "), 6) == 0)
     a68:	c2 01       	movw	r24, r4
     a6a:	67 e3       	ldi	r22, 0x37	; 55
     a6c:	71 e0       	ldi	r23, 0x01	; 1
     a6e:	46 e0       	ldi	r20, 0x06	; 6
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	0e 94 94 24 	call	0x4928	; 0x4928 <strncmp_P>
     a76:	89 2b       	or	r24, r25
     a78:	09 f0       	breq	.+2      	; 0xa7c <application_main+0x3f6>
     a7a:	82 c0       	rjmp	.+260    	; 0xb80 <__stack+0x81>
            {
                command += 6;
                if(command[0] == '\0')
     a7c:	8b 89       	ldd	r24, Y+19	; 0x13
     a7e:	88 23       	and	r24, r24
     a80:	09 f4       	brne	.+2      	; 0xa84 <application_main+0x3fe>
     a82:	a2 ce       	rjmp	.-700    	; 0x7c8 <application_main+0x142>
                    continue;
     a84:	8e 01       	movw	r16, r28
     a86:	0d 5e       	subi	r16, 0xED	; 237
     a88:	1f 4f       	sbci	r17, 0xFF	; 255
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <application_main+0x40a>

                char* offset_value = command;
                while(*offset_value != ' ' && *offset_value != '\0')
                    ++offset_value;
     a8c:	0f 5f       	subi	r16, 0xFF	; 255
     a8e:	1f 4f       	sbci	r17, 0xFF	; 255
                command += 6;
                if(command[0] == '\0')
                    continue;

                char* offset_value = command;
                while(*offset_value != ' ' && *offset_value != '\0')
     a90:	d8 01       	movw	r26, r16
     a92:	8c 91       	ld	r24, X
     a94:	80 32       	cpi	r24, 0x20	; 32
     a96:	19 f0       	breq	.+6      	; 0xa9e <application_main+0x418>
     a98:	88 23       	and	r24, r24
     a9a:	c1 f7       	brne	.-16     	; 0xa8c <application_main+0x406>
     a9c:	95 ce       	rjmp	.-726    	; 0x7c8 <application_main+0x142>
                    ++offset_value;

                if(*offset_value == ' ')
                    *offset_value++ = '\0';
     a9e:	f8 01       	movw	r30, r16
     aa0:	10 82       	st	Z, r1
                else
                    continue;

                /* search file in current directory and open it */
                struct fat_file_struct* fd = open_file_in_dir(fs, dd, command);
     aa2:	33 e1       	ldi	r19, 0x13	; 19
     aa4:	c3 2e       	mov	r12, r19
     aa6:	d1 2c       	mov	r13, r1
     aa8:	cc 0e       	add	r12, r28
     aaa:	dd 1e       	adc	r13, r29
     aac:	c4 01       	movw	r24, r8
     aae:	b3 01       	movw	r22, r6
     ab0:	a6 01       	movw	r20, r12
     ab2:	0e 94 6f 02 	call	0x4de	; 0x4de <open_file_in_dir>
     ab6:	7c 01       	movw	r14, r24
                if(!fd)
     ab8:	00 97       	sbiw	r24, 0x00	; 0
     aba:	29 f0       	breq	.+10     	; 0xac6 <application_main+0x440>
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	40 e0       	ldi	r20, 0x00	; 0
     ac2:	50 e0       	ldi	r21, 0x00	; 0
     ac4:	1b c0       	rjmp	.+54     	; 0xafc <application_main+0x476>
                {
                    uart_puts_p(PSTR("error opening "));
     ac6:	88 e2       	ldi	r24, 0x28	; 40
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	0e 94 31 06 	call	0xc62	; 0xc62 <uart_puts_p>
                    uart_puts(command);
     ace:	c6 01       	movw	r24, r12
     ad0:	22 cf       	rjmp	.-444    	; 0x916 <application_main+0x290>

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
        l = l * 10 + (*str++ - '0');
     ad2:	ca 01       	movw	r24, r20
     ad4:	b9 01       	movw	r22, r18
     ad6:	2a e0       	ldi	r18, 0x0A	; 10
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	40 e0       	ldi	r20, 0x00	; 0
     adc:	50 e0       	ldi	r21, 0x00	; 0
     ade:	0e 94 23 24 	call	0x4846	; 0x4846 <__mulsi3>
     ae2:	9b 01       	movw	r18, r22
     ae4:	ac 01       	movw	r20, r24
     ae6:	8d 2d       	mov	r24, r13
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	c0 97       	sbiw	r24, 0x30	; 48
     aec:	aa 27       	eor	r26, r26
     aee:	97 fd       	sbrc	r25, 7
     af0:	a0 95       	com	r26
     af2:	ba 2f       	mov	r27, r26
     af4:	28 0f       	add	r18, r24
     af6:	39 1f       	adc	r19, r25
     af8:	4a 1f       	adc	r20, r26
     afa:	5b 1f       	adc	r21, r27
}

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
     afc:	d8 01       	movw	r26, r16
     afe:	11 96       	adiw	r26, 0x01	; 1
     b00:	dc 90       	ld	r13, X
     b02:	0f 5f       	subi	r16, 0xFF	; 255
     b04:	1f 4f       	sbci	r17, 0xFF	; 255
     b06:	8d 2d       	mov	r24, r13
     b08:	80 53       	subi	r24, 0x30	; 48
     b0a:	8a 30       	cpi	r24, 0x0A	; 10
     b0c:	10 f3       	brcs	.-60     	; 0xad2 <application_main+0x44c>
                    uart_puts(command);
                    uart_putc('\n');
                    continue;
                }

                int32_t offset = strtolong(offset_value);
     b0e:	29 83       	std	Y+1, r18	; 0x01
     b10:	3a 83       	std	Y+2, r19	; 0x02
     b12:	4b 83       	std	Y+3, r20	; 0x03
     b14:	5c 83       	std	Y+4, r21	; 0x04
                if(!fat_seek_file(fd, &offset, FAT_SEEK_SET))
     b16:	c7 01       	movw	r24, r14
     b18:	be 01       	movw	r22, r28
     b1a:	6f 5f       	subi	r22, 0xFF	; 255
     b1c:	7f 4f       	sbci	r23, 0xFF	; 255
     b1e:	40 e0       	ldi	r20, 0x00	; 0
     b20:	0e 94 81 1b 	call	0x3702	; 0x3702 <fat_seek_file>
     b24:	88 23       	and	r24, r24
     b26:	79 f4       	brne	.+30     	; 0xb46 <__stack+0x47>
                {
                    uart_puts_p(PSTR("error seeking on "));
     b28:	86 e1       	ldi	r24, 0x16	; 22
     b2a:	91 e0       	ldi	r25, 0x01	; 1
     b2c:	0e 94 31 06 	call	0xc62	; 0xc62 <uart_puts_p>
                    uart_puts(command);
     b30:	ce 01       	movw	r24, r28
     b32:	43 96       	adiw	r24, 0x13	; 19
     b34:	0e 94 3f 06 	call	0xc7e	; 0xc7e <uart_puts>
                    uart_putc('\n');
     b38:	8a e0       	ldi	r24, 0x0A	; 10
     b3a:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>

                    fat_close_file(fd);
     b3e:	c7 01       	movw	r24, r14
     b40:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <fat_close_file>
     b44:	41 ce       	rjmp	.-894    	; 0x7c8 <application_main+0x142>
                /* read text from the shell and write it to the file */
                uint8_t data_len;
                while(1)
                {
                    /* give a different prompt */
                    uart_putc('<');
     b46:	8c e3       	ldi	r24, 0x3C	; 60
     b48:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
                    uart_putc(' ');
     b4c:	80 e2       	ldi	r24, 0x20	; 32
     b4e:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>

                    /* read one line of text */
                    data_len = read_line(buffer, sizeof(buffer));
     b52:	c2 01       	movw	r24, r4
     b54:	68 e1       	ldi	r22, 0x18	; 24
     b56:	0e 94 9d 02 	call	0x53a	; 0x53a <read_line>
     b5a:	18 2f       	mov	r17, r24
                    if(!data_len)
     b5c:	88 23       	and	r24, r24
     b5e:	79 f3       	breq	.-34     	; 0xb3e <__stack+0x3f>
                        break;

                    /* write text to file */
                    if(fat_write_file(fd, (uint8_t*) buffer, data_len) != data_len)
     b60:	c7 01       	movw	r24, r14
     b62:	b2 01       	movw	r22, r4
     b64:	41 2f       	mov	r20, r17
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	0e 94 df 1b 	call	0x37be	; 0x37be <fat_write_file>
     b6c:	21 2f       	mov	r18, r17
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	82 17       	cp	r24, r18
     b72:	93 07       	cpc	r25, r19
     b74:	41 f3       	breq	.-48     	; 0xb46 <__stack+0x47>
                    {
                        uart_puts_p(PSTR("error writing to file\n"));
     b76:	8f ef       	ldi	r24, 0xFF	; 255
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 31 06 	call	0xc62	; 0xc62 <uart_puts_p>
     b7e:	df cf       	rjmp	.-66     	; 0xb3e <__stack+0x3f>
                    }
                }

                fat_close_file(fd);
            }
            else if(strncmp_P(command, PSTR("mkdir "), 6) == 0)
     b80:	c2 01       	movw	r24, r4
     b82:	68 ef       	ldi	r22, 0xF8	; 248
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	46 e0       	ldi	r20, 0x06	; 6
     b88:	50 e0       	ldi	r21, 0x00	; 0
     b8a:	0e 94 94 24 	call	0x4928	; 0x4928 <strncmp_P>
     b8e:	89 2b       	or	r24, r25
     b90:	a1 f4       	brne	.+40     	; 0xbba <__stack+0xbb>
            {
                command += 6;
                if(command[0] == '\0')
     b92:	8b 89       	ldd	r24, Y+19	; 0x13
     b94:	88 23       	and	r24, r24
     b96:	09 f4       	brne	.+2      	; 0xb9a <__stack+0x9b>
     b98:	17 ce       	rjmp	.-978    	; 0x7c8 <application_main+0x142>
                    continue;

                struct fat_dir_entry_struct dir_entry;
                if(!fat_create_dir(dd, command, &dir_entry))
     b9a:	8e 01       	movw	r16, r28
     b9c:	0d 5e       	subi	r16, 0xED	; 237
     b9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ba0:	c3 01       	movw	r24, r6
     ba2:	b8 01       	movw	r22, r16
     ba4:	ae 01       	movw	r20, r28
     ba6:	4e 5a       	subi	r20, 0xAE	; 174
     ba8:	5f 4f       	sbci	r21, 0xFF	; 255
     baa:	0e 94 d5 18 	call	0x31aa	; 0x31aa <fat_create_dir>
     bae:	88 23       	and	r24, r24
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <__stack+0xb5>
     bb2:	0a ce       	rjmp	.-1004   	; 0x7c8 <application_main+0x142>
                {
                    uart_puts_p(PSTR("error creating directory: "));
     bb4:	8d ed       	ldi	r24, 0xDD	; 221
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	ab ce       	rjmp	.-682    	; 0x910 <application_main+0x28a>
                    uart_putc('\n');
                }
            }
#endif
#if SD_RAW_WRITE_BUFFERING
            else if(strcmp_P(command, PSTR("sync")) == 0)
     bba:	c2 01       	movw	r24, r4
     bbc:	68 ed       	ldi	r22, 0xD8	; 216
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	0e 94 8b 24 	call	0x4916	; 0x4916 <strcmp_P>
     bc4:	89 2b       	or	r24, r25
     bc6:	51 f4       	brne	.+20     	; 0xbdc <__stack+0xdd>
            {
                if(!sd_raw_sync())
     bc8:	0e 94 e7 21 	call	0x43ce	; 0x43ce <sd_raw_sync>
     bcc:	88 23       	and	r24, r24
     bce:	09 f0       	breq	.+2      	; 0xbd2 <__stack+0xd3>
     bd0:	fb cd       	rjmp	.-1034   	; 0x7c8 <application_main+0x142>
                    uart_puts_p(PSTR("error syncing disk\n"));
     bd2:	84 ec       	ldi	r24, 0xC4	; 196
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 31 06 	call	0xc62	; 0xc62 <uart_puts_p>
     bda:	f6 cd       	rjmp	.-1044   	; 0x7c8 <application_main+0x142>
            }
#endif
            else if(strncmp_P(command, PSTR("play "), 5) == 0)
     bdc:	c2 01       	movw	r24, r4
     bde:	6e eb       	ldi	r22, 0xBE	; 190
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	45 e0       	ldi	r20, 0x05	; 5
     be4:	50 e0       	ldi	r21, 0x00	; 0
     be6:	0e 94 94 24 	call	0x4928	; 0x4928 <strncmp_P>
     bea:	89 2b       	or	r24, r25
     bec:	61 f4       	brne	.+24     	; 0xc06 <__stack+0x107>
            {
                command += 5;
                if(command[0] == '\0')
     bee:	8a 89       	ldd	r24, Y+18	; 0x12
     bf0:	88 23       	and	r24, r24
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <__stack+0xf7>
     bf4:	e9 cd       	rjmp	.-1070   	; 0x7c8 <application_main+0x142>
                    continue;
                
                play_file(fs, dd, command);
     bf6:	c4 01       	movw	r24, r8
     bf8:	b3 01       	movw	r22, r6
     bfa:	ae 01       	movw	r20, r28
     bfc:	4e 5e       	subi	r20, 0xEE	; 238
     bfe:	5f 4f       	sbci	r21, 0xFF	; 255
     c00:	0e 94 fe 02 	call	0x5fc	; 0x5fc <play_file>
     c04:	e1 cd       	rjmp	.-1086   	; 0x7c8 <application_main+0x142>
            }
            else
            {
                uart_puts_p(PSTR("unknown command: "));
     c06:	8c ea       	ldi	r24, 0xAC	; 172
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 31 06 	call	0xc62	; 0xc62 <uart_puts_p>
                uart_puts(command);
     c0e:	c2 01       	movw	r24, r4
     c10:	82 ce       	rjmp	.-764    	; 0x916 <application_main+0x290>
                uart_putc('\n');
            }
        }

        /* close file system */
        fat_close(fs);
     c12:	c4 01       	movw	r24, r8
     c14:	0e 94 9f 0b 	call	0x173e	; 0x173e <fat_close>

        /* close partition */
        partition_close(partition);
     c18:	c1 58       	subi	r28, 0x81	; 129
     c1a:	df 4f       	sbci	r29, 0xFF	; 255
     c1c:	88 81       	ld	r24, Y
     c1e:	99 81       	ldd	r25, Y+1	; 0x01
     c20:	cf 57       	subi	r28, 0x7F	; 127
     c22:	d0 40       	sbci	r29, 0x00	; 0
     c24:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <partition_close>
     c28:	78 cd       	rjmp	.-1296   	; 0x71a <application_main+0x94>

00000c2a <uart_init>:

#include "uart.h"

void uart_init()
{
}
     c2a:	08 95       	ret

00000c2c <uart_getc>:
    }
}

uint8_t uart_getc()
{
    uint8_t b = fgetc(stdout);
     c2c:	80 91 64 08 	lds	r24, 0x0864
     c30:	90 91 65 08 	lds	r25, 0x0865
     c34:	0e 94 ee 24 	call	0x49dc	; 0x49dc <fgetc>
    if(b == '\r')
     c38:	8d 30       	cpi	r24, 0x0D	; 13
     c3a:	09 f4       	brne	.+2      	; 0xc3e <uart_getc+0x12>
     c3c:	8a e0       	ldi	r24, 0x0A	; 10
        b = '\n';

    return b;
}
     c3e:	08 95       	ret

00000c40 <uart_putc>:
void uart_init()
{
}

void uart_putc(uint8_t c)
{
     c40:	1f 93       	push	r17
     c42:	18 2f       	mov	r17, r24
    if(c == '\n')
     c44:	8a 30       	cpi	r24, 0x0A	; 10
     c46:	19 f4       	brne	.+6      	; 0xc4e <uart_putc+0xe>
        uart_putc('\r');
     c48:	8d e0       	ldi	r24, 0x0D	; 13
     c4a:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>

    fputc(c, stdout);
     c4e:	60 91 64 08 	lds	r22, 0x0864
     c52:	70 91 65 08 	lds	r23, 0x0865
     c56:	81 2f       	mov	r24, r17
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	0e 94 30 25 	call	0x4a60	; 0x4a60 <fputc>
}
     c5e:	1f 91       	pop	r17
     c60:	08 95       	ret

00000c62 <uart_puts_p>:
    while(*str)
        uart_putc(*str++);
}

void uart_puts_p(PGM_P str)
{
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	ec 01       	movw	r28, r24
     c68:	fe 01       	movw	r30, r28
    while(1)
    {
        uint8_t b = pgm_read_byte_near(str++);
     c6a:	21 96       	adiw	r28, 0x01	; 1
     c6c:	84 91       	lpm	r24, Z+
        if(!b)
     c6e:	88 23       	and	r24, r24
     c70:	19 f0       	breq	.+6      	; 0xc78 <uart_puts_p+0x16>
            break;

        uart_putc(b);
     c72:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
     c76:	f8 cf       	rjmp	.-16     	; 0xc68 <uart_puts_p+0x6>
    }
}
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	08 95       	ret

00000c7e <uart_puts>:
        num /= 10;
    }
}

void uart_puts(const char* str)
{
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	ec 01       	movw	r28, r24
     c84:	03 c0       	rjmp	.+6      	; 0xc8c <uart_puts+0xe>
    while(*str)
        uart_putc(*str++);
     c86:	21 96       	adiw	r28, 0x01	; 1
     c88:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
    }
}

void uart_puts(const char* str)
{
    while(*str)
     c8c:	88 81       	ld	r24, Y
     c8e:	88 23       	and	r24, r24
     c90:	d1 f7       	brne	.-12     	; 0xc86 <uart_puts+0x8>
        uart_putc(*str++);
}
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	08 95       	ret

00000c98 <uart_putdw_dec>:
        num /= 10;
    }
}

void uart_putdw_dec(uint32_t dw)
{
     c98:	4f 92       	push	r4
     c9a:	5f 92       	push	r5
     c9c:	6f 92       	push	r6
     c9e:	7f 92       	push	r7
     ca0:	8f 92       	push	r8
     ca2:	9f 92       	push	r9
     ca4:	af 92       	push	r10
     ca6:	bf 92       	push	r11
     ca8:	cf 92       	push	r12
     caa:	df 92       	push	r13
     cac:	ef 92       	push	r14
     cae:	ff 92       	push	r15
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	5b 01       	movw	r10, r22
     cba:	6c 01       	movw	r12, r24
     cbc:	e1 2c       	mov	r14, r1
     cbe:	8a ec       	ldi	r24, 0xCA	; 202
     cc0:	f8 2e       	mov	r15, r24
     cc2:	8a e9       	ldi	r24, 0x9A	; 154
     cc4:	08 2f       	mov	r16, r24
     cc6:	8b e3       	ldi	r24, 0x3B	; 59
     cc8:	18 2f       	mov	r17, r24
     cca:	44 24       	eor	r4, r4
     ccc:	c0 e0       	ldi	r28, 0x00	; 0
     cce:	d0 e0       	ldi	r29, 0x00	; 0
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = dw / num;
     cd0:	c6 01       	movw	r24, r12
     cd2:	b5 01       	movw	r22, r10
     cd4:	a8 01       	movw	r20, r16
     cd6:	97 01       	movw	r18, r14
     cd8:	0e 94 69 24 	call	0x48d2	; 0x48d2 <__udivmodsi4>
     cdc:	92 2e       	mov	r9, r18
        if(b > 0 || started || num == 1)
     cde:	22 23       	and	r18, r18
     ce0:	41 f4       	brne	.+16     	; 0xcf2 <uart_putdw_dec+0x5a>
     ce2:	44 20       	and	r4, r4
     ce4:	31 f4       	brne	.+12     	; 0xcf2 <uart_putdw_dec+0x5a>
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	e8 16       	cp	r14, r24
     cea:	f1 04       	cpc	r15, r1
     cec:	01 05       	cpc	r16, r1
     cee:	11 05       	cpc	r17, r1
     cf0:	31 f4       	brne	.+12     	; 0xcfe <uart_putdw_dec+0x66>
        {
            uart_putc('0' + b);
     cf2:	89 2d       	mov	r24, r9
     cf4:	80 5d       	subi	r24, 0xD0	; 208
     cf6:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
     cfa:	44 24       	eor	r4, r4
     cfc:	43 94       	inc	r4
            started = 1;
        }
        dw -= b * num;

        num /= 10;
     cfe:	c8 01       	movw	r24, r16
     d00:	b7 01       	movw	r22, r14
     d02:	2a e0       	ldi	r18, 0x0A	; 10
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	0e 94 69 24 	call	0x48d2	; 0x48d2 <__udivmodsi4>
     d0e:	82 2e       	mov	r8, r18
     d10:	73 2e       	mov	r7, r19
     d12:	64 2e       	mov	r6, r20
     d14:	55 2e       	mov	r5, r21
     d16:	21 96       	adiw	r28, 0x01	; 1
void uart_putdw_dec(uint32_t dw)
{
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
     d18:	ca 30       	cpi	r28, 0x0A	; 10
     d1a:	d1 05       	cpc	r29, r1
     d1c:	a9 f0       	breq	.+42     	; 0xd48 <uart_putdw_dec+0xb0>
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
        }
        dw -= b * num;
     d1e:	69 2d       	mov	r22, r9
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a8 01       	movw	r20, r16
     d28:	97 01       	movw	r18, r14
     d2a:	0e 94 23 24 	call	0x4846	; 0x4846 <__mulsi3>
     d2e:	a6 1a       	sub	r10, r22
     d30:	b7 0a       	sbc	r11, r23
     d32:	c8 0a       	sbc	r12, r24
     d34:	d9 0a       	sbc	r13, r25
     d36:	28 2d       	mov	r18, r8
     d38:	37 2d       	mov	r19, r7
     d3a:	46 2d       	mov	r20, r6
     d3c:	55 2d       	mov	r21, r5
     d3e:	c9 01       	movw	r24, r18
     d40:	da 01       	movw	r26, r20
     d42:	7c 01       	movw	r14, r24
     d44:	8d 01       	movw	r16, r26
     d46:	c4 cf       	rjmp	.-120    	; 0xcd0 <uart_putdw_dec+0x38>

        num /= 10;
    }
}
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	1f 91       	pop	r17
     d4e:	0f 91       	pop	r16
     d50:	ff 90       	pop	r15
     d52:	ef 90       	pop	r14
     d54:	df 90       	pop	r13
     d56:	cf 90       	pop	r12
     d58:	bf 90       	pop	r11
     d5a:	af 90       	pop	r10
     d5c:	9f 90       	pop	r9
     d5e:	8f 90       	pop	r8
     d60:	7f 90       	pop	r7
     d62:	6f 90       	pop	r6
     d64:	5f 90       	pop	r5
     d66:	4f 90       	pop	r4
     d68:	08 95       	ret

00000d6a <uart_putw_dec>:
    uart_putw_hex((uint16_t) (dw >> 16));
    uart_putw_hex((uint16_t) (dw & 0xffff));
}

void uart_putw_dec(uint16_t w)
{
     d6a:	cf 92       	push	r12
     d6c:	df 92       	push	r13
     d6e:	ff 92       	push	r15
     d70:	0f 93       	push	r16
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	6c 01       	movw	r12, r24
     d7a:	c0 e1       	ldi	r28, 0x10	; 16
     d7c:	d7 e2       	ldi	r29, 0x27	; 39
     d7e:	40 e0       	ldi	r20, 0x00	; 0
     d80:	00 e0       	ldi	r16, 0x00	; 0
     d82:	10 e0       	ldi	r17, 0x00	; 0
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = w / num;
     d84:	c6 01       	movw	r24, r12
     d86:	be 01       	movw	r22, r28
     d88:	0e 94 42 24 	call	0x4884	; 0x4884 <__udivmodhi4>
     d8c:	f6 2e       	mov	r15, r22
        if(b > 0 || started || num == 1)
     d8e:	66 23       	and	r22, r22
     d90:	29 f4       	brne	.+10     	; 0xd9c <uart_putw_dec+0x32>
     d92:	44 23       	and	r20, r20
     d94:	19 f4       	brne	.+6      	; 0xd9c <uart_putw_dec+0x32>
     d96:	c1 30       	cpi	r28, 0x01	; 1
     d98:	d1 05       	cpc	r29, r1
     d9a:	29 f4       	brne	.+10     	; 0xda6 <uart_putw_dec+0x3c>
        {
            uart_putc('0' + b);
     d9c:	8f 2d       	mov	r24, r15
     d9e:	80 5d       	subi	r24, 0xD0	; 208
     da0:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
     da4:	41 e0       	ldi	r20, 0x01	; 1
            started = 1;
        }
        w -= b * num;

        num /= 10;
     da6:	ce 01       	movw	r24, r28
     da8:	6a e0       	ldi	r22, 0x0A	; 10
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	0e 94 42 24 	call	0x4884	; 0x4884 <__udivmodhi4>
     db0:	0f 5f       	subi	r16, 0xFF	; 255
     db2:	1f 4f       	sbci	r17, 0xFF	; 255
void uart_putw_dec(uint16_t w)
{
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
     db4:	05 30       	cpi	r16, 0x05	; 5
     db6:	11 05       	cpc	r17, r1
     db8:	71 f0       	breq	.+28     	; 0xdd6 <uart_putw_dec+0x6c>
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
        }
        w -= b * num;
     dba:	8f 2d       	mov	r24, r15
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	9c 01       	movw	r18, r24
     dc0:	2c 9f       	mul	r18, r28
     dc2:	c0 01       	movw	r24, r0
     dc4:	2d 9f       	mul	r18, r29
     dc6:	90 0d       	add	r25, r0
     dc8:	3c 9f       	mul	r19, r28
     dca:	90 0d       	add	r25, r0
     dcc:	11 24       	eor	r1, r1
     dce:	c8 1a       	sub	r12, r24
     dd0:	d9 0a       	sbc	r13, r25
     dd2:	eb 01       	movw	r28, r22
     dd4:	d7 cf       	rjmp	.-82     	; 0xd84 <uart_putw_dec+0x1a>

        num /= 10;
    }
}
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	ff 90       	pop	r15
     de0:	df 90       	pop	r13
     de2:	cf 90       	pop	r12
     de4:	08 95       	ret

00000de6 <uart_putc_hex>:

    fputc(c, stdout);
}

void uart_putc_hex(uint8_t b)
{
     de6:	1f 93       	push	r17
     de8:	18 2f       	mov	r17, r24
    /* upper nibble */
    if((b >> 4) < 0x0a)
     dea:	82 95       	swap	r24
     dec:	8f 70       	andi	r24, 0x0F	; 15
     dee:	8a 30       	cpi	r24, 0x0A	; 10
     df0:	10 f4       	brcc	.+4      	; 0xdf6 <uart_putc_hex+0x10>
        uart_putc((b >> 4) + '0');
     df2:	80 5d       	subi	r24, 0xD0	; 208
     df4:	01 c0       	rjmp	.+2      	; 0xdf8 <uart_putc_hex+0x12>
    else
        uart_putc((b >> 4) - 0x0a + 'a');
     df6:	89 5a       	subi	r24, 0xA9	; 169
     df8:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>

    /* lower nibble */
    if((b & 0x0f) < 0x0a)
     dfc:	81 2f       	mov	r24, r17
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	8f 70       	andi	r24, 0x0F	; 15
     e02:	90 70       	andi	r25, 0x00	; 0
     e04:	21 2f       	mov	r18, r17
     e06:	2f 70       	andi	r18, 0x0F	; 15
     e08:	0a 97       	sbiw	r24, 0x0a	; 10
     e0a:	1c f4       	brge	.+6      	; 0xe12 <uart_putc_hex+0x2c>
        uart_putc((b & 0x0f) + '0');
     e0c:	82 2f       	mov	r24, r18
     e0e:	80 5d       	subi	r24, 0xD0	; 208
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <uart_putc_hex+0x30>
    else
        uart_putc((b & 0x0f) - 0x0a + 'a');
     e12:	82 2f       	mov	r24, r18
     e14:	89 5a       	subi	r24, 0xA9	; 169
     e16:	0e 94 20 06 	call	0xc40	; 0xc40 <uart_putc>
}
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <uart_putw_hex>:

void uart_putw_hex(uint16_t w)
{
     e1e:	1f 93       	push	r17
     e20:	18 2f       	mov	r17, r24
    uart_putc_hex((uint8_t) (w >> 8));
     e22:	89 2f       	mov	r24, r25
     e24:	0e 94 f3 06 	call	0xde6	; 0xde6 <uart_putc_hex>
    uart_putc_hex((uint8_t) (w & 0xff));
     e28:	81 2f       	mov	r24, r17
     e2a:	0e 94 f3 06 	call	0xde6	; 0xde6 <uart_putc_hex>
}
     e2e:	1f 91       	pop	r17
     e30:	08 95       	ret

00000e32 <uart_putdw_hex>:

void uart_putdw_hex(uint32_t dw)
{
     e32:	ef 92       	push	r14
     e34:	ff 92       	push	r15
     e36:	0f 93       	push	r16
     e38:	1f 93       	push	r17
     e3a:	7b 01       	movw	r14, r22
     e3c:	8c 01       	movw	r16, r24
    uart_putw_hex((uint16_t) (dw >> 16));
     e3e:	c8 01       	movw	r24, r16
     e40:	aa 27       	eor	r26, r26
     e42:	bb 27       	eor	r27, r27
     e44:	0e 94 0f 07 	call	0xe1e	; 0xe1e <uart_putw_hex>
    uart_putw_hex((uint16_t) (dw & 0xffff));
     e48:	c7 01       	movw	r24, r14
     e4a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <uart_putw_hex>
}
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	ff 90       	pop	r15
     e54:	ef 90       	pop	r14
     e56:	08 95       	ret

00000e58 <basic_setup>:
******************************************************************************/

void basic_setup(void)
{
  /* Disable watchdog if enabled by bootloader/fuses */
  MCUSR &= ~(1 << WDRF);
     e58:	84 b7       	in	r24, 0x34	; 52
     e5a:	87 7f       	andi	r24, 0xF7	; 247
     e5c:	84 bf       	out	0x34, r24	; 52
  wdt_disable();
     e5e:	88 e1       	ldi	r24, 0x18	; 24
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	80 93 60 00 	sts	0x0060, r24
     e68:	10 92 60 00 	sts	0x0060, r1
     e6c:	0f be       	out	0x3f, r0	; 63

#if (BOARD == BOARD_USER)
#if (F_CPU == 16000000UL)
  /* Set the clock prescaler */
  clock_prescale_set(clock_div_1);
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	20 e8       	ldi	r18, 0x80	; 128
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	20 93 61 00 	sts	0x0061, r18
     e7c:	80 93 61 00 	sts	0x0061, r24
     e80:	0f be       	out	0x3f, r0	; 63
  clock_prescale_set(clock_div_2);
#else
#error Unsupported F_CPU
#endif
#endif
}
     e82:	08 95       	ret

00000e84 <main>:
******************************************************************************/

void basic_setup(void)
{
  /* Disable watchdog if enabled by bootloader/fuses */
  MCUSR &= ~(1 << WDRF);
     e84:	84 b7       	in	r24, 0x34	; 52
     e86:	87 7f       	andi	r24, 0xF7	; 247
     e88:	84 bf       	out	0x34, r24	; 52
  wdt_disable();
     e8a:	88 e1       	ldi	r24, 0x18	; 24
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	80 93 60 00 	sts	0x0060, r24
     e94:	10 92 60 00 	sts	0x0060, r1
     e98:	0f be       	out	0x3f, r0	; 63

#if (BOARD == BOARD_USER)
#if (F_CPU == 16000000UL)
  /* Set the clock prescaler */
  clock_prescale_set(clock_div_1);
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	20 e8       	ldi	r18, 0x80	; 128
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	20 93 61 00 	sts	0x0061, r18
     ea8:	80 93 61 00 	sts	0x0061, r24
     eac:	0f be       	out	0x3f, r0	; 63
}

int main()
{
  basic_setup();
  application_main();
     eae:	0e 94 43 03 	call	0x686	; 0x686 <application_main>
  return 0;
}
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	08 95       	ret

00000eb8 <delay_ms>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     eb8:	20 ea       	ldi	r18, 0xA0	; 160
     eba:	3f e0       	ldi	r19, 0x0F	; 15
     ebc:	04 c0       	rjmp	.+8      	; 0xec6 <delay_ms+0xe>
     ebe:	f9 01       	movw	r30, r18
     ec0:	31 97       	sbiw	r30, 0x01	; 1
     ec2:	f1 f7       	brne	.-4      	; 0xec0 <delay_ms+0x8>
     ec4:	01 97       	sbiw	r24, 0x01	; 1
* Functions
******************************************************************************/

void delay_ms(uint16_t t)
{
  while (t--)
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	d1 f7       	brne	.-12     	; 0xebe <delay_ms+0x6>
    _delay_ms(1);
}
     eca:	08 95       	ret

00000ecc <delay_us>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ecc:	35 e0       	ldi	r19, 0x05	; 5
     ece:	04 c0       	rjmp	.+8      	; 0xed8 <delay_us+0xc>
     ed0:	23 2f       	mov	r18, r19
     ed2:	2a 95       	dec	r18
     ed4:	f1 f7       	brne	.-4      	; 0xed2 <delay_us+0x6>
     ed6:	01 97       	sbiw	r24, 0x01	; 1

void delay_us(uint16_t t)
{
  while (t--)
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	d1 f7       	brne	.-12     	; 0xed0 <delay_us+0x4>
    _delay_us(1);
}
     edc:	08 95       	ret

00000ede <dac_start>:
}

void dac_start(uint8_t* buffer0, uint8_t* buffer1, uint16_t size)
{
  /* Store the buffer params */
  dac_buffer_pool[0].start = buffer0;
     ede:	90 93 14 04 	sts	0x0414, r25
     ee2:	80 93 13 04 	sts	0x0413, r24
  dac_buffer_pool[0].end = buffer0 + size;
     ee6:	9c 01       	movw	r18, r24
     ee8:	24 0f       	add	r18, r20
     eea:	35 1f       	adc	r19, r21
     eec:	30 93 16 04 	sts	0x0416, r19
     ef0:	20 93 15 04 	sts	0x0415, r18
  dac_buffer_pool[1].start = buffer1;
     ef4:	70 93 18 04 	sts	0x0418, r23
     ef8:	60 93 17 04 	sts	0x0417, r22
  dac_buffer_pool[1].end = buffer1 + size;
     efc:	64 0f       	add	r22, r20
     efe:	75 1f       	adc	r23, r21
     f00:	70 93 1a 04 	sts	0x041A, r23
     f04:	60 93 19 04 	sts	0x0419, r22
  
  /* Init the read pointer */
  dac.current_buffer = 0;
     f08:	10 92 38 01 	sts	0x0138, r1
  dac.read_ptr = dac_buffer_pool[0].start;
     f0c:	90 93 3a 01 	sts	0x013A, r25
     f10:	80 93 39 01 	sts	0x0139, r24
  dac.end_ptr = dac_buffer_pool[0].end;
     f14:	30 93 3c 01 	sts	0x013C, r19
     f18:	20 93 3b 01 	sts	0x013B, r18
  
  empty_buffer_flag = 0;
     f1c:	10 92 1b 04 	sts	0x041B, r1
  
  /* Setup a periodic interrupt to update the sample value */
  TCCR0A = _BV(WGM01); /* CTC mode */
     f20:	22 e0       	ldi	r18, 0x02	; 2
     f22:	24 bd       	out	0x24, r18	; 36
#if (F_CPU == 16000000)
  switch(dac.rate)
     f24:	80 91 35 01 	lds	r24, 0x0135
     f28:	90 91 36 01 	lds	r25, 0x0136
     f2c:	36 e5       	ldi	r19, 0x56	; 86
     f2e:	82 32       	cpi	r24, 0x22	; 34
     f30:	93 07       	cpc	r25, r19
     f32:	59 f0       	breq	.+22     	; 0xf4a <dac_start+0x6c>
     f34:	3c ea       	ldi	r19, 0xAC	; 172
     f36:	84 34       	cpi	r24, 0x44	; 68
     f38:	93 07       	cpc	r25, r19
     f3a:	21 f0       	breq	.+8      	; 0xf44 <dac_start+0x66>
     f3c:	80 58       	subi	r24, 0x80	; 128
     f3e:	9e 43       	sbci	r25, 0x3E	; 62
     f40:	51 f4       	brne	.+20     	; 0xf56 <dac_start+0x78>
     f42:	06 c0       	rjmp	.+12     	; 0xf50 <dac_start+0x72>
  {
    case 44100:
      TCCR0B = _BV(CS01); /* Fclk / 8 */
     f44:	25 bd       	out	0x25, r18	; 37
      OCR0A = 45 - 1; /* 44444 Hz */
     f46:	8c e2       	ldi	r24, 0x2C	; 44
     f48:	08 c0       	rjmp	.+16     	; 0xf5a <dac_start+0x7c>
      break;
    
    case 22050:
      TCCR0B = _BV(CS01); /* Fclk / 8 */
     f4a:	25 bd       	out	0x25, r18	; 37
      OCR0A = 91 - 1; /* 21978 Hz */
     f4c:	8a e5       	ldi	r24, 0x5A	; 90
     f4e:	05 c0       	rjmp	.+10     	; 0xf5a <dac_start+0x7c>
      break;
    
    case 16000:
      TCCR0B = _BV(CS01); /* Fclk / 8 */
     f50:	25 bd       	out	0x25, r18	; 37
      OCR0A = 125 - 1; /* 16000 Hz */
     f52:	8c e7       	ldi	r24, 0x7C	; 124
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <dac_start+0x7c>
      break;
      
    case 8000:
    default:
      TCCR0B = _BV(CS01); /* Fclk / 8 */
     f56:	25 bd       	out	0x25, r18	; 37
      OCR0A = 250 - 1; /* 8000 Hz */
     f58:	89 ef       	ldi	r24, 0xF9	; 249
     f5a:	87 bd       	out	0x27, r24	; 39
#else
#error F_CPU not supported
#endif
  
  /* Setup the buffer empty interrupt */
  OCR0B = 1;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	88 bd       	out	0x28, r24	; 40
  
  /* Enable the sample timer interrupt */
  TIMSK0 |= _BV(OCIE0A) | _BV(OCIE0B);
     f60:	80 91 6e 00 	lds	r24, 0x006E
     f64:	86 60       	ori	r24, 0x06	; 6
     f66:	80 93 6e 00 	sts	0x006E, r24
  
  /* Enable interrupts */
  sei();
     f6a:	78 94       	sei
}
     f6c:	08 95       	ret

00000f6e <dac_pause>:

void dac_pause(void)
{
  TIMSK0 &= ~_BV(OCIE0A);
     f6e:	ee e6       	ldi	r30, 0x6E	; 110
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	8d 7f       	andi	r24, 0xFD	; 253
     f76:	80 83       	st	Z, r24
}
     f78:	08 95       	ret

00000f7a <dac_resume>:

void dac_resume(void)
{
  TIMSK0 |= _BV(OCIE0A);
     f7a:	ee e6       	ldi	r30, 0x6E	; 110
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	82 60       	ori	r24, 0x02	; 2
     f82:	80 83       	st	Z, r24
}
     f84:	08 95       	ret

00000f86 <dac_stop>:

void dac_stop(void)
{
  /* Stop the sample timer interrupt */
  TCCR0A = TCCR0B = OCR0A = TIMSK0 = 0;
     f86:	ee e6       	ldi	r30, 0x6E	; 110
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	10 82       	st	Z, r1
     f8c:	80 81       	ld	r24, Z
     f8e:	87 bd       	out	0x27, r24	; 39
     f90:	87 b5       	in	r24, 0x27	; 39
     f92:	85 bd       	out	0x25, r24	; 37
     f94:	85 b5       	in	r24, 0x25	; 37
     f96:	84 bd       	out	0x24, r24	; 36
}
     f98:	08 95       	ret

00000f9a <__vector_21>:

/* Sample timer interrupt */
ISR(TIMER0_COMPA_vect)
{
     f9a:	1f 92       	push	r1
     f9c:	0f 92       	push	r0
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	0f 92       	push	r0
     fa2:	11 24       	eor	r1, r1
     fa4:	2f 93       	push	r18
     fa6:	3f 93       	push	r19
     fa8:	8f 93       	push	r24
     faa:	9f 93       	push	r25
     fac:	af 93       	push	r26
     fae:	bf 93       	push	r27
     fb0:	ef 93       	push	r30
     fb2:	ff 93       	push	r31
  uint8_t l_sample = *dac.read_ptr++;
     fb4:	a0 91 39 01 	lds	r26, 0x0139
     fb8:	b0 91 3a 01 	lds	r27, 0x013A
     fbc:	fd 01       	movw	r30, r26
     fbe:	91 91       	ld	r25, Z+
     fc0:	f0 93 3a 01 	sts	0x013A, r31
     fc4:	e0 93 39 01 	sts	0x0139, r30
  OCR4A = l_sample;
     fc8:	90 93 cf 00 	sts	0x00CF, r25
  if (dac.channels == CHANNELS_STEREO)
     fcc:	80 91 37 01 	lds	r24, 0x0137
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	51 f4       	brne	.+20     	; 0xfe8 <__vector_21+0x4e>
  {
    OCR4B = *dac.read_ptr++;
     fd4:	11 96       	adiw	r26, 0x01	; 1
     fd6:	8c 91       	ld	r24, X
     fd8:	80 93 d0 00 	sts	0x00D0, r24
     fdc:	31 96       	adiw	r30, 0x01	; 1
     fde:	f0 93 3a 01 	sts	0x013A, r31
     fe2:	e0 93 39 01 	sts	0x0139, r30
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <__vector_21+0x52>
  }
  else
  {
    OCR4B = l_sample;
     fe8:	90 93 d0 00 	sts	0x00D0, r25
  }

  /* Check the buffer end */
  if (dac.read_ptr >= dac.end_ptr)
     fec:	20 91 39 01 	lds	r18, 0x0139
     ff0:	30 91 3a 01 	lds	r19, 0x013A
     ff4:	80 91 3b 01 	lds	r24, 0x013B
     ff8:	90 91 3c 01 	lds	r25, 0x013C
     ffc:	28 17       	cp	r18, r24
     ffe:	39 07       	cpc	r19, r25
    1000:	70 f1       	brcs	.+92     	; 0x105e <__vector_21+0xc4>
  {
    /* Notify the client */
    empty_buffer_flag = dac.current_buffer + (1 << 4);
    1002:	80 91 38 01 	lds	r24, 0x0138
    1006:	80 5f       	subi	r24, 0xF0	; 240
    1008:	80 93 1b 04 	sts	0x041B, r24
    100c:	80 51       	subi	r24, 0x10	; 16

    /* Raise a buffer empty interrupt */
    TIMSK0 |= _BV(OCIE0B);
    100e:	90 91 6e 00 	lds	r25, 0x006E
    1012:	94 60       	ori	r25, 0x04	; 4
    1014:	90 93 6e 00 	sts	0x006E, r25
  
    /* Switch the current buffer */
    dac.current_buffer ^= 1;
    1018:	91 e0       	ldi	r25, 0x01	; 1
    101a:	89 27       	eor	r24, r25
    101c:	80 93 38 01 	sts	0x0138, r24
    if (dac.current_buffer)
    1020:	88 23       	and	r24, r24
    1022:	69 f0       	breq	.+26     	; 0x103e <__vector_21+0xa4>
    {
      dac.read_ptr = dac_buffer_pool[1].start;
    1024:	80 91 17 04 	lds	r24, 0x0417
    1028:	90 91 18 04 	lds	r25, 0x0418
    102c:	90 93 3a 01 	sts	0x013A, r25
    1030:	80 93 39 01 	sts	0x0139, r24
      dac.end_ptr = dac_buffer_pool[1].end;
    1034:	80 91 19 04 	lds	r24, 0x0419
    1038:	90 91 1a 04 	lds	r25, 0x041A
    103c:	0c c0       	rjmp	.+24     	; 0x1056 <__vector_21+0xbc>
    }
    else
    {
      dac.read_ptr = dac_buffer_pool[0].start;
    103e:	80 91 13 04 	lds	r24, 0x0413
    1042:	90 91 14 04 	lds	r25, 0x0414
    1046:	90 93 3a 01 	sts	0x013A, r25
    104a:	80 93 39 01 	sts	0x0139, r24
      dac.end_ptr = dac_buffer_pool[0].end;
    104e:	80 91 15 04 	lds	r24, 0x0415
    1052:	90 91 16 04 	lds	r25, 0x0416
    1056:	90 93 3c 01 	sts	0x013C, r25
    105a:	80 93 3b 01 	sts	0x013B, r24
    }
  }
}
    105e:	ff 91       	pop	r31
    1060:	ef 91       	pop	r30
    1062:	bf 91       	pop	r27
    1064:	af 91       	pop	r26
    1066:	9f 91       	pop	r25
    1068:	8f 91       	pop	r24
    106a:	3f 91       	pop	r19
    106c:	2f 91       	pop	r18
    106e:	0f 90       	pop	r0
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	0f 90       	pop	r0
    1074:	1f 90       	pop	r1
    1076:	18 95       	reti

00001078 <dac_init>:
* Functions
******************************************************************************/

void dac_init(uint16_t rate, uint8_t channels)
{
  dac.rate = rate;
    1078:	90 93 36 01 	sts	0x0136, r25
    107c:	80 93 35 01 	sts	0x0135, r24
  dac.channels = channels;
    1080:	60 93 37 01 	sts	0x0137, r22
  
  /* Init the internal PLL */
  PLLFRQ = _BV(PDIV2);
    1084:	84 e0       	ldi	r24, 0x04	; 4
    1086:	82 bf       	out	0x32, r24	; 50
  PLLCSR = _BV(PLLE);
    1088:	82 e0       	ldi	r24, 0x02	; 2
    108a:	89 bd       	out	0x29, r24	; 41
  while(!(PLLCSR & _BV(PLOCK)));
    108c:	09 b4       	in	r0, 0x29	; 41
    108e:	00 fe       	sbrs	r0, 0
    1090:	fd cf       	rjmp	.-6      	; 0x108c <dac_init+0x14>
  PLLFRQ |= _BV(PLLTM0); /* PCK 48MHz */
    1092:	82 b7       	in	r24, 0x32	; 50
    1094:	80 61       	ori	r24, 0x10	; 16
    1096:	82 bf       	out	0x32, r24	; 50
  
  /* Init a fast PWM on Timer4 */
  TCCR4A = _BV(COM4A0) | _BV(PWM4A); /* Clear OC4A on Compare Match */
    1098:	82 e4       	ldi	r24, 0x42	; 66
    109a:	80 93 c0 00 	sts	0x00C0, r24
  TCCR4B = _BV(CS40); /* No prescaling => f = PCK/256 = 187500Hz */
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	80 93 c1 00 	sts	0x00C1, r24
  OCR4A = 0;
    10a4:	10 92 cf 00 	sts	0x00CF, r1
  
  /* Enable the OC4A output */
  DDRC |= _BV(PORTC7);
    10a8:	3f 9a       	sbi	0x07, 7	; 7
  
  /* Enable a second PWM channel */
  TCCR4A |= _BV(COM4B1) | _BV(PWM4B);
    10aa:	80 91 c0 00 	lds	r24, 0x00C0
    10ae:	81 62       	ori	r24, 0x21	; 33
    10b0:	80 93 c0 00 	sts	0x00C0, r24
  OCR4B = 0;
    10b4:	10 92 d0 00 	sts	0x00D0, r1
  
  /* Enable the OC4B output */
  DDRB |= _BV(PORTB6);
    10b8:	26 9a       	sbi	0x04, 6	; 4
  
  /* Init the buffer pool */
  memset(dac_buffer_pool, 0x00, sizeof(dac_buffer_pool));
    10ba:	88 e0       	ldi	r24, 0x08	; 8
    10bc:	e3 e1       	ldi	r30, 0x13	; 19
    10be:	f4 e0       	ldi	r31, 0x04	; 4
    10c0:	df 01       	movw	r26, r30
    10c2:	1d 92       	st	X+, r1
    10c4:	8a 95       	dec	r24
    10c6:	e9 f7       	brne	.-6      	; 0x10c2 <dac_init+0x4a>
  dac.current_buffer = 0;
    10c8:	10 92 38 01 	sts	0x0138, r1
  dac.read_ptr = NULL;
    10cc:	10 92 3a 01 	sts	0x013A, r1
    10d0:	10 92 39 01 	sts	0x0139, r1
}
    10d4:	08 95       	ret

000010d6 <player_stop>:
  dac_start(pcm_buffer, pcm_buffer + PCM_BUFFER_SIZE, PCM_BUFFER_SIZE);
}

void player_stop(void)
{
  dac_stop();
    10d6:	0e 94 c3 07 	call	0xf86	; 0xf86 <dac_stop>
  
  /* Reset the context */
  player.fd = NULL;
    10da:	10 92 5d 04 	sts	0x045D, r1
    10de:	10 92 5c 04 	sts	0x045C, r1
}
    10e2:	08 95       	ret

000010e4 <__vector_22>:
  dac_resume();
}

/* Buffer refill interrupt */
ISR(TIMER0_COMPB_vect)
{
    10e4:	1f 92       	push	r1
    10e6:	0f 92       	push	r0
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	0f 92       	push	r0
    10ec:	11 24       	eor	r1, r1
    10ee:	cf 92       	push	r12
    10f0:	df 92       	push	r13
    10f2:	ef 92       	push	r14
    10f4:	ff 92       	push	r15
    10f6:	0f 93       	push	r16
    10f8:	1f 93       	push	r17
    10fa:	2f 93       	push	r18
    10fc:	3f 93       	push	r19
    10fe:	4f 93       	push	r20
    1100:	5f 93       	push	r21
    1102:	6f 93       	push	r22
    1104:	7f 93       	push	r23
    1106:	8f 93       	push	r24
    1108:	9f 93       	push	r25
    110a:	af 93       	push	r26
    110c:	bf 93       	push	r27
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	ef 93       	push	r30
    1114:	ff 93       	push	r31
  uint16_t size;
  uint8_t* p;

  /* Disable the interrupt */
  TIMSK0 &= ~_BV(OCIE0B);
    1116:	80 91 6e 00 	lds	r24, 0x006E
    111a:	8b 7f       	andi	r24, 0xFB	; 251
    111c:	80 93 6e 00 	sts	0x006E, r24
  
  /* Re-enable the interrupts to allow the execution of TIMER0_COMPA_vect */
  sei();
    1120:	78 94       	sei
  
  if (empty_buffer_flag)
    1122:	80 91 1b 04 	lds	r24, 0x041B
    1126:	88 23       	and	r24, r24
    1128:	09 f4       	brne	.+2      	; 0x112c <__vector_22+0x48>
    112a:	ca c0       	rjmp	.+404    	; 0x12c0 <__vector_22+0x1dc>
  {
    if (player.fd)
    112c:	c0 90 5c 04 	lds	r12, 0x045C
    1130:	d0 90 5d 04 	lds	r13, 0x045D
    1134:	c1 14       	cp	r12, r1
    1136:	d1 04       	cpc	r13, r1
    1138:	09 f4       	brne	.+2      	; 0x113c <__vector_22+0x58>
    113a:	c2 c0       	rjmp	.+388    	; 0x12c0 <__vector_22+0x1dc>
    {
      p = (uint8_t*)pcm_buffer + (empty_buffer_flag & 0x1) * PCM_BUFFER_SIZE;
    113c:	80 91 1b 04 	lds	r24, 0x041B
    1140:	08 2f       	mov	r16, r24
    1142:	10 e0       	ldi	r17, 0x00	; 0
    1144:	01 70       	andi	r16, 0x01	; 1
    1146:	10 70       	andi	r17, 0x00	; 0
    1148:	10 2f       	mov	r17, r16
    114a:	00 27       	eor	r16, r16
    114c:	11 0f       	add	r17, r17
    114e:	0e 59       	subi	r16, 0x9E	; 158
    1150:	1b 4f       	sbci	r17, 0xFB	; 251
* Functions
******************************************************************************/

inline intptr_t read_samples(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len, uint8_t format)
{
  if (format == FORMAT_16_BITS_LE)
    1152:	80 91 5e 04 	lds	r24, 0x045E
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	09 f0       	breq	.+2      	; 0x115c <__vector_22+0x78>
    115a:	9b c0       	rjmp	.+310    	; 0x1292 <__vector_22+0x1ae>
    115c:	e8 01       	movw	r28, r16
    115e:	80 e1       	ldi	r24, 0x10	; 16
    1160:	e8 2e       	mov	r14, r24
    1162:	f1 2c       	mov	r15, r1
    uint8_t* p = buffer;
    
    i = buffer_len / 32;
    do
    {
      if (fat_read_file(fd, (uint8_t*)&scratch, 64) < 64)
    1164:	c6 01       	movw	r24, r12
    1166:	6c e1       	ldi	r22, 0x1C	; 28
    1168:	74 e0       	ldi	r23, 0x04	; 4
    116a:	40 e4       	ldi	r20, 0x40	; 64
    116c:	50 e0       	ldi	r21, 0x00	; 0
    116e:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fat_read_file>
    1172:	80 34       	cpi	r24, 0x40	; 64
    1174:	91 05       	cpc	r25, r1
    1176:	0c f4       	brge	.+2      	; 0x117a <__vector_22+0x96>
    1178:	88 c0       	rjmp	.+272    	; 0x128a <__vector_22+0x1a6>
        break;

      *p++ = scratch[1] + 128;
    117a:	80 91 1d 04 	lds	r24, 0x041D
    117e:	80 58       	subi	r24, 0x80	; 128
    1180:	88 83       	st	Y, r24
      *p++ = scratch[3] + 128;
    1182:	80 91 1f 04 	lds	r24, 0x041F
    1186:	80 58       	subi	r24, 0x80	; 128
    1188:	89 83       	std	Y+1, r24	; 0x01
      *p++ = scratch[5] + 128;
    118a:	80 91 21 04 	lds	r24, 0x0421
    118e:	80 58       	subi	r24, 0x80	; 128
    1190:	8a 83       	std	Y+2, r24	; 0x02
      *p++ = scratch[7] + 128;
    1192:	80 91 23 04 	lds	r24, 0x0423
    1196:	80 58       	subi	r24, 0x80	; 128
    1198:	8b 83       	std	Y+3, r24	; 0x03
      *p++ = scratch[9] + 128;
    119a:	80 91 25 04 	lds	r24, 0x0425
    119e:	80 58       	subi	r24, 0x80	; 128
    11a0:	8c 83       	std	Y+4, r24	; 0x04
      *p++ = scratch[11] + 128;
    11a2:	80 91 27 04 	lds	r24, 0x0427
    11a6:	80 58       	subi	r24, 0x80	; 128
    11a8:	8d 83       	std	Y+5, r24	; 0x05
      *p++ = scratch[13] + 128;
    11aa:	80 91 29 04 	lds	r24, 0x0429
    11ae:	80 58       	subi	r24, 0x80	; 128
    11b0:	8e 83       	std	Y+6, r24	; 0x06
      *p++ = scratch[15] + 128;
    11b2:	80 91 2b 04 	lds	r24, 0x042B
    11b6:	80 58       	subi	r24, 0x80	; 128
    11b8:	8f 83       	std	Y+7, r24	; 0x07
      *p++ = scratch[17] + 128;
    11ba:	80 91 2d 04 	lds	r24, 0x042D
    11be:	80 58       	subi	r24, 0x80	; 128
    11c0:	88 87       	std	Y+8, r24	; 0x08
      *p++ = scratch[19] + 128;
    11c2:	80 91 2f 04 	lds	r24, 0x042F
    11c6:	80 58       	subi	r24, 0x80	; 128
    11c8:	89 87       	std	Y+9, r24	; 0x09
      *p++ = scratch[21] + 128;
    11ca:	80 91 31 04 	lds	r24, 0x0431
    11ce:	80 58       	subi	r24, 0x80	; 128
    11d0:	8a 87       	std	Y+10, r24	; 0x0a
      *p++ = scratch[23] + 128;
    11d2:	80 91 33 04 	lds	r24, 0x0433
    11d6:	80 58       	subi	r24, 0x80	; 128
    11d8:	8b 87       	std	Y+11, r24	; 0x0b
      *p++ = scratch[25] + 128;
    11da:	80 91 35 04 	lds	r24, 0x0435
    11de:	80 58       	subi	r24, 0x80	; 128
    11e0:	8c 87       	std	Y+12, r24	; 0x0c
      *p++ = scratch[27] + 128;
    11e2:	80 91 37 04 	lds	r24, 0x0437
    11e6:	80 58       	subi	r24, 0x80	; 128
    11e8:	8d 87       	std	Y+13, r24	; 0x0d
      *p++ = scratch[29] + 128;
    11ea:	80 91 39 04 	lds	r24, 0x0439
    11ee:	80 58       	subi	r24, 0x80	; 128
    11f0:	8e 87       	std	Y+14, r24	; 0x0e
      *p++ = scratch[31] + 128;
    11f2:	80 91 3b 04 	lds	r24, 0x043B
    11f6:	80 58       	subi	r24, 0x80	; 128
    11f8:	8f 87       	std	Y+15, r24	; 0x0f
      
      *p++ = scratch[33] + 128;
    11fa:	80 91 3d 04 	lds	r24, 0x043D
    11fe:	80 58       	subi	r24, 0x80	; 128
    1200:	88 8b       	std	Y+16, r24	; 0x10
      *p++ = scratch[35] + 128;
    1202:	80 91 3f 04 	lds	r24, 0x043F
    1206:	80 58       	subi	r24, 0x80	; 128
    1208:	89 8b       	std	Y+17, r24	; 0x11
      *p++ = scratch[37] + 128;
    120a:	80 91 41 04 	lds	r24, 0x0441
    120e:	80 58       	subi	r24, 0x80	; 128
    1210:	8a 8b       	std	Y+18, r24	; 0x12
      *p++ = scratch[39] + 128;
    1212:	80 91 43 04 	lds	r24, 0x0443
    1216:	80 58       	subi	r24, 0x80	; 128
    1218:	8b 8b       	std	Y+19, r24	; 0x13
      *p++ = scratch[41] + 128;
    121a:	80 91 45 04 	lds	r24, 0x0445
    121e:	80 58       	subi	r24, 0x80	; 128
    1220:	8c 8b       	std	Y+20, r24	; 0x14
      *p++ = scratch[43] + 128;
    1222:	80 91 47 04 	lds	r24, 0x0447
    1226:	80 58       	subi	r24, 0x80	; 128
    1228:	8d 8b       	std	Y+21, r24	; 0x15
      *p++ = scratch[45] + 128;
    122a:	80 91 49 04 	lds	r24, 0x0449
    122e:	80 58       	subi	r24, 0x80	; 128
    1230:	8e 8b       	std	Y+22, r24	; 0x16
      *p++ = scratch[47] + 128;
    1232:	80 91 4b 04 	lds	r24, 0x044B
    1236:	80 58       	subi	r24, 0x80	; 128
    1238:	8f 8b       	std	Y+23, r24	; 0x17
      *p++ = scratch[49] + 128;
    123a:	80 91 4d 04 	lds	r24, 0x044D
    123e:	80 58       	subi	r24, 0x80	; 128
    1240:	88 8f       	std	Y+24, r24	; 0x18
      *p++ = scratch[51] + 128;
    1242:	80 91 4f 04 	lds	r24, 0x044F
    1246:	80 58       	subi	r24, 0x80	; 128
    1248:	89 8f       	std	Y+25, r24	; 0x19
      *p++ = scratch[53] + 128;
    124a:	80 91 51 04 	lds	r24, 0x0451
    124e:	80 58       	subi	r24, 0x80	; 128
    1250:	8a 8f       	std	Y+26, r24	; 0x1a
      *p++ = scratch[55] + 128;
    1252:	80 91 53 04 	lds	r24, 0x0453
    1256:	80 58       	subi	r24, 0x80	; 128
    1258:	8b 8f       	std	Y+27, r24	; 0x1b
      *p++ = scratch[57] + 128;
    125a:	80 91 55 04 	lds	r24, 0x0455
    125e:	80 58       	subi	r24, 0x80	; 128
    1260:	8c 8f       	std	Y+28, r24	; 0x1c
      *p++ = scratch[59] + 128;
    1262:	80 91 57 04 	lds	r24, 0x0457
    1266:	80 58       	subi	r24, 0x80	; 128
    1268:	8d 8f       	std	Y+29, r24	; 0x1d
      *p++ = scratch[61] + 128;
    126a:	80 91 59 04 	lds	r24, 0x0459
    126e:	80 58       	subi	r24, 0x80	; 128
    1270:	8e 8f       	std	Y+30, r24	; 0x1e
      *p++ = scratch[63] + 128;
    1272:	80 91 5b 04 	lds	r24, 0x045B
    1276:	80 58       	subi	r24, 0x80	; 128
    1278:	8f 8f       	std	Y+31, r24	; 0x1f
  dac_resume();
}

/* Buffer refill interrupt */
ISR(TIMER0_COMPB_vect)
{
    127a:	a0 96       	adiw	r28, 0x20	; 32
      *p++ = scratch[55] + 128;
      *p++ = scratch[57] + 128;
      *p++ = scratch[59] + 128;
      *p++ = scratch[61] + 128;
      *p++ = scratch[63] + 128;
    } while (--i);
    127c:	08 94       	sec
    127e:	e1 08       	sbc	r14, r1
    1280:	f1 08       	sbc	r15, r1
    1282:	e1 14       	cp	r14, r1
    1284:	f1 04       	cpc	r15, r1
    1286:	09 f0       	breq	.+2      	; 0x128a <__vector_22+0x1a6>
    1288:	6d cf       	rjmp	.-294    	; 0x1164 <__vector_22+0x80>
    
    return (p - buffer);
    128a:	ce 01       	movw	r24, r28
    128c:	80 1b       	sub	r24, r16
    128e:	91 0b       	sbc	r25, r17
    1290:	06 c0       	rjmp	.+12     	; 0x129e <__vector_22+0x1ba>
  }
  else
  {
    return fat_read_file(fd, buffer, buffer_len);
    1292:	c6 01       	movw	r24, r12
    1294:	b8 01       	movw	r22, r16
    1296:	40 e0       	ldi	r20, 0x00	; 0
    1298:	52 e0       	ldi	r21, 0x02	; 2
    129a:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fat_read_file>
  {
    if (player.fd)
    {
      p = (uint8_t*)pcm_buffer + (empty_buffer_flag & 0x1) * PCM_BUFFER_SIZE;

      if ((size = read_samples(player.fd, p, PCM_BUFFER_SIZE, player.format)) < PCM_BUFFER_SIZE)
    129e:	80 50       	subi	r24, 0x00	; 0
    12a0:	92 40       	sbci	r25, 0x02	; 2
    12a2:	60 f4       	brcc	.+24     	; 0x12bc <__vector_22+0x1d8>
      {
        /* Stop the dac */
        dac_stop();
    12a4:	0e 94 c3 07 	call	0xf86	; 0xf86 <dac_stop>
        
        /* Notify the client */
        player.eof = 1;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	80 93 5f 04 	sts	0x045F, r24
        if (player.notify_eof)
    12ae:	e0 91 60 04 	lds	r30, 0x0460
    12b2:	f0 91 61 04 	lds	r31, 0x0461
    12b6:	30 97       	sbiw	r30, 0x00	; 0
    12b8:	09 f0       	breq	.+2      	; 0x12bc <__vector_22+0x1d8>
          player.notify_eof();
    12ba:	09 95       	icall
      }

      empty_buffer_flag = 0;
    12bc:	10 92 1b 04 	sts	0x041B, r1
    }
  }
    12c0:	ff 91       	pop	r31
    12c2:	ef 91       	pop	r30
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	bf 91       	pop	r27
    12ca:	af 91       	pop	r26
    12cc:	9f 91       	pop	r25
    12ce:	8f 91       	pop	r24
    12d0:	7f 91       	pop	r23
    12d2:	6f 91       	pop	r22
    12d4:	5f 91       	pop	r21
    12d6:	4f 91       	pop	r20
    12d8:	3f 91       	pop	r19
    12da:	2f 91       	pop	r18
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	ff 90       	pop	r15
    12e2:	ef 90       	pop	r14
    12e4:	df 90       	pop	r13
    12e6:	cf 90       	pop	r12
    12e8:	0f 90       	pop	r0
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	0f 90       	pop	r0
    12ee:	1f 90       	pop	r1
    12f0:	18 95       	reti

000012f2 <player_resume>:
  dac_pause();
}

void player_resume(void)
{
  dac_resume();
    12f2:	0e 94 bd 07 	call	0xf7a	; 0xf7a <dac_resume>
}
    12f6:	08 95       	ret

000012f8 <player_pause>:
  player.fd = NULL;
}

void player_pause(void)
{
  dac_pause();
    12f8:	0e 94 b7 07 	call	0xf6e	; 0xf6e <dac_pause>
}
    12fc:	08 95       	ret

000012fe <player_start>:
  
  return 0;
}

void player_start(struct fat_file_struct* fd, t_notify_eof notify_eof)
{
    12fe:	ef 92       	push	r14
    1300:	ff 92       	push	r15
    1302:	0f 93       	push	r16
    1304:	1f 93       	push	r17
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	60 97       	sbiw	r28, 0x10	; 16
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	8c 01       	movw	r16, r24
  uint16_t size;

  /* Init the player context */
  player.fd = fd;
    131c:	90 93 5d 04 	sts	0x045D, r25
    1320:	80 93 5c 04 	sts	0x045C, r24
  player.eof = 0;
    1324:	10 92 5f 04 	sts	0x045F, r1
  player.notify_eof = notify_eof;
    1328:	70 93 61 04 	sts	0x0461, r23
    132c:	60 93 60 04 	sts	0x0460, r22

  /* Parse the file header */
  t_wavparser_status status;
  t_wavparser_header header;
  status = wavparser_parse_header(fd, &header);
    1330:	be 01       	movw	r22, r28
    1332:	6b 5f       	subi	r22, 0xFB	; 251
    1334:	7f 4f       	sbci	r23, 0xFF	; 255
    1336:	0e 94 aa 0a 	call	0x1554	; 0x1554 <wavparser_parse_header>

  /* Init the DAC */
  uint16_t rate;
  uint8_t channels;
  
  switch(header.sample_rate)
    133a:	2d 85       	ldd	r18, Y+13	; 0x0d
    133c:	3e 85       	ldd	r19, Y+14	; 0x0e
    133e:	8e e3       	ldi	r24, 0x3E	; 62
    1340:	20 38       	cpi	r18, 0x80	; 128
    1342:	38 07       	cpc	r19, r24
    1344:	99 f0       	breq	.+38     	; 0x136c <player_start+0x6e>
    1346:	ee e3       	ldi	r30, 0x3E	; 62
    1348:	21 38       	cpi	r18, 0x81	; 129
    134a:	3e 07       	cpc	r19, r30
    134c:	28 f4       	brcc	.+10     	; 0x1358 <player_start+0x5a>
    134e:	ff e1       	ldi	r31, 0x1F	; 31
    1350:	20 34       	cpi	r18, 0x40	; 64
    1352:	3f 07       	cpc	r19, r31
    1354:	49 f4       	brne	.+18     	; 0x1368 <player_start+0x6a>
    1356:	0a c0       	rjmp	.+20     	; 0x136c <player_start+0x6e>
    1358:	86 e5       	ldi	r24, 0x56	; 86
    135a:	22 32       	cpi	r18, 0x22	; 34
    135c:	38 07       	cpc	r19, r24
    135e:	31 f0       	breq	.+12     	; 0x136c <player_start+0x6e>
    1360:	ec ea       	ldi	r30, 0xAC	; 172
    1362:	24 34       	cpi	r18, 0x44	; 68
    1364:	3e 07       	cpc	r19, r30
    1366:	11 f0       	breq	.+4      	; 0x136c <player_start+0x6e>
    1368:	20 e4       	ldi	r18, 0x40	; 64
    136a:	3f e1       	ldi	r19, 0x1F	; 31
    default:
      rate = 8000;
      break;
  }
  
  if (header.num_channels == 2)
    136c:	9f 85       	ldd	r25, Y+15	; 0x0f
    channels = CHANNELS_STEREO;
  else
    channels = CHANNELS_MONO;

  if (header.bits_per_sample == 16)
    136e:	88 89       	ldd	r24, Y+16	; 0x10
    1370:	80 31       	cpi	r24, 0x10	; 16
    1372:	21 f4       	brne	.+8      	; 0x137c <player_start+0x7e>
    player.format = FORMAT_16_BITS_LE;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	80 93 5e 04 	sts	0x045E, r24
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <player_start+0x82>
  else
    player.format = FORMAT_8_BITS;
    137c:	10 92 5e 04 	sts	0x045E, r1

  dac_init(rate, channels);
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	92 30       	cpi	r25, 0x02	; 2
    1384:	09 f4       	brne	.+2      	; 0x1388 <player_start+0x8a>
    1386:	61 e0       	ldi	r22, 0x01	; 1
    1388:	c9 01       	movw	r24, r18
    138a:	0e 94 3c 08 	call	0x1078	; 0x1078 <dac_init>

  /* Go to the start of the data */
  int32_t offset = header.data_start;
    138e:	8d 81       	ldd	r24, Y+5	; 0x05
    1390:	9e 81       	ldd	r25, Y+6	; 0x06
    1392:	af 81       	ldd	r26, Y+7	; 0x07
    1394:	b8 85       	ldd	r27, Y+8	; 0x08
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	9a 83       	std	Y+2, r25	; 0x02
    139a:	ab 83       	std	Y+3, r26	; 0x03
    139c:	bc 83       	std	Y+4, r27	; 0x04
  fat_seek_file(fd, &offset, FAT_SEEK_SET);
    139e:	c8 01       	movw	r24, r16
    13a0:	be 01       	movw	r22, r28
    13a2:	6f 5f       	subi	r22, 0xFF	; 255
    13a4:	7f 4f       	sbci	r23, 0xFF	; 255
    13a6:	40 e0       	ldi	r20, 0x00	; 0
    13a8:	0e 94 81 1b 	call	0x3702	; 0x3702 <fat_seek_file>

  /* Do some pre-buffering */
  if ((size = read_samples(player.fd, (uint8_t*)pcm_buffer, 2 * PCM_BUFFER_SIZE, player.format)) < (2 * PCM_BUFFER_SIZE))
    13ac:	e0 90 5c 04 	lds	r14, 0x045C
    13b0:	f0 90 5d 04 	lds	r15, 0x045D
* Functions
******************************************************************************/

inline intptr_t read_samples(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len, uint8_t format)
{
  if (format == FORMAT_16_BITS_LE)
    13b4:	80 91 5e 04 	lds	r24, 0x045E
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	09 f0       	breq	.+2      	; 0x13be <player_start+0xc0>
    13bc:	99 c0       	rjmp	.+306    	; 0x14f0 <player_start+0x1f2>
    13be:	02 e6       	ldi	r16, 0x62	; 98
    13c0:	14 e0       	ldi	r17, 0x04	; 4
    uint8_t* p = buffer;
    
    i = buffer_len / 32;
    do
    {
      if (fat_read_file(fd, (uint8_t*)&scratch, 64) < 64)
    13c2:	c7 01       	movw	r24, r14
    13c4:	6c e1       	ldi	r22, 0x1C	; 28
    13c6:	74 e0       	ldi	r23, 0x04	; 4
    13c8:	40 e4       	ldi	r20, 0x40	; 64
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fat_read_file>
    13d0:	80 34       	cpi	r24, 0x40	; 64
    13d2:	91 05       	cpc	r25, r1
    13d4:	0c f4       	brge	.+2      	; 0x13d8 <player_start+0xda>
    13d6:	88 c0       	rjmp	.+272    	; 0x14e8 <player_start+0x1ea>
        break;

      *p++ = scratch[1] + 128;
    13d8:	80 91 1d 04 	lds	r24, 0x041D
    13dc:	80 58       	subi	r24, 0x80	; 128
    13de:	f8 01       	movw	r30, r16
    13e0:	80 83       	st	Z, r24
      *p++ = scratch[3] + 128;
    13e2:	80 91 1f 04 	lds	r24, 0x041F
    13e6:	80 58       	subi	r24, 0x80	; 128
    13e8:	81 83       	std	Z+1, r24	; 0x01
      *p++ = scratch[5] + 128;
    13ea:	80 91 21 04 	lds	r24, 0x0421
    13ee:	80 58       	subi	r24, 0x80	; 128
    13f0:	82 83       	std	Z+2, r24	; 0x02
      *p++ = scratch[7] + 128;
    13f2:	80 91 23 04 	lds	r24, 0x0423
    13f6:	80 58       	subi	r24, 0x80	; 128
    13f8:	83 83       	std	Z+3, r24	; 0x03
      *p++ = scratch[9] + 128;
    13fa:	80 91 25 04 	lds	r24, 0x0425
    13fe:	80 58       	subi	r24, 0x80	; 128
    1400:	84 83       	std	Z+4, r24	; 0x04
      *p++ = scratch[11] + 128;
    1402:	80 91 27 04 	lds	r24, 0x0427
    1406:	80 58       	subi	r24, 0x80	; 128
    1408:	85 83       	std	Z+5, r24	; 0x05
      *p++ = scratch[13] + 128;
    140a:	80 91 29 04 	lds	r24, 0x0429
    140e:	80 58       	subi	r24, 0x80	; 128
    1410:	86 83       	std	Z+6, r24	; 0x06
      *p++ = scratch[15] + 128;
    1412:	80 91 2b 04 	lds	r24, 0x042B
    1416:	80 58       	subi	r24, 0x80	; 128
    1418:	87 83       	std	Z+7, r24	; 0x07
      *p++ = scratch[17] + 128;
    141a:	80 91 2d 04 	lds	r24, 0x042D
    141e:	80 58       	subi	r24, 0x80	; 128
    1420:	80 87       	std	Z+8, r24	; 0x08
      *p++ = scratch[19] + 128;
    1422:	80 91 2f 04 	lds	r24, 0x042F
    1426:	80 58       	subi	r24, 0x80	; 128
    1428:	81 87       	std	Z+9, r24	; 0x09
      *p++ = scratch[21] + 128;
    142a:	80 91 31 04 	lds	r24, 0x0431
    142e:	80 58       	subi	r24, 0x80	; 128
    1430:	82 87       	std	Z+10, r24	; 0x0a
      *p++ = scratch[23] + 128;
    1432:	80 91 33 04 	lds	r24, 0x0433
    1436:	80 58       	subi	r24, 0x80	; 128
    1438:	83 87       	std	Z+11, r24	; 0x0b
      *p++ = scratch[25] + 128;
    143a:	80 91 35 04 	lds	r24, 0x0435
    143e:	80 58       	subi	r24, 0x80	; 128
    1440:	84 87       	std	Z+12, r24	; 0x0c
      *p++ = scratch[27] + 128;
    1442:	80 91 37 04 	lds	r24, 0x0437
    1446:	80 58       	subi	r24, 0x80	; 128
    1448:	85 87       	std	Z+13, r24	; 0x0d
      *p++ = scratch[29] + 128;
    144a:	80 91 39 04 	lds	r24, 0x0439
    144e:	80 58       	subi	r24, 0x80	; 128
    1450:	86 87       	std	Z+14, r24	; 0x0e
      *p++ = scratch[31] + 128;
    1452:	80 91 3b 04 	lds	r24, 0x043B
    1456:	80 58       	subi	r24, 0x80	; 128
    1458:	87 87       	std	Z+15, r24	; 0x0f
      
      *p++ = scratch[33] + 128;
    145a:	80 91 3d 04 	lds	r24, 0x043D
    145e:	80 58       	subi	r24, 0x80	; 128
    1460:	80 8b       	std	Z+16, r24	; 0x10
      *p++ = scratch[35] + 128;
    1462:	80 91 3f 04 	lds	r24, 0x043F
    1466:	80 58       	subi	r24, 0x80	; 128
    1468:	81 8b       	std	Z+17, r24	; 0x11
      *p++ = scratch[37] + 128;
    146a:	80 91 41 04 	lds	r24, 0x0441
    146e:	80 58       	subi	r24, 0x80	; 128
    1470:	82 8b       	std	Z+18, r24	; 0x12
      *p++ = scratch[39] + 128;
    1472:	80 91 43 04 	lds	r24, 0x0443
    1476:	80 58       	subi	r24, 0x80	; 128
    1478:	83 8b       	std	Z+19, r24	; 0x13
      *p++ = scratch[41] + 128;
    147a:	80 91 45 04 	lds	r24, 0x0445
    147e:	80 58       	subi	r24, 0x80	; 128
    1480:	84 8b       	std	Z+20, r24	; 0x14
      *p++ = scratch[43] + 128;
    1482:	80 91 47 04 	lds	r24, 0x0447
    1486:	80 58       	subi	r24, 0x80	; 128
    1488:	85 8b       	std	Z+21, r24	; 0x15
      *p++ = scratch[45] + 128;
    148a:	80 91 49 04 	lds	r24, 0x0449
    148e:	80 58       	subi	r24, 0x80	; 128
    1490:	86 8b       	std	Z+22, r24	; 0x16
      *p++ = scratch[47] + 128;
    1492:	80 91 4b 04 	lds	r24, 0x044B
    1496:	80 58       	subi	r24, 0x80	; 128
    1498:	87 8b       	std	Z+23, r24	; 0x17
      *p++ = scratch[49] + 128;
    149a:	80 91 4d 04 	lds	r24, 0x044D
    149e:	80 58       	subi	r24, 0x80	; 128
    14a0:	80 8f       	std	Z+24, r24	; 0x18
      *p++ = scratch[51] + 128;
    14a2:	80 91 4f 04 	lds	r24, 0x044F
    14a6:	80 58       	subi	r24, 0x80	; 128
    14a8:	81 8f       	std	Z+25, r24	; 0x19
      *p++ = scratch[53] + 128;
    14aa:	80 91 51 04 	lds	r24, 0x0451
    14ae:	80 58       	subi	r24, 0x80	; 128
    14b0:	82 8f       	std	Z+26, r24	; 0x1a
      *p++ = scratch[55] + 128;
    14b2:	80 91 53 04 	lds	r24, 0x0453
    14b6:	80 58       	subi	r24, 0x80	; 128
    14b8:	83 8f       	std	Z+27, r24	; 0x1b
      *p++ = scratch[57] + 128;
    14ba:	80 91 55 04 	lds	r24, 0x0455
    14be:	80 58       	subi	r24, 0x80	; 128
    14c0:	84 8f       	std	Z+28, r24	; 0x1c
      *p++ = scratch[59] + 128;
    14c2:	80 91 57 04 	lds	r24, 0x0457
    14c6:	80 58       	subi	r24, 0x80	; 128
    14c8:	85 8f       	std	Z+29, r24	; 0x1d
      *p++ = scratch[61] + 128;
    14ca:	80 91 59 04 	lds	r24, 0x0459
    14ce:	80 58       	subi	r24, 0x80	; 128
    14d0:	86 8f       	std	Z+30, r24	; 0x1e
      *p++ = scratch[63] + 128;
    14d2:	80 91 5b 04 	lds	r24, 0x045B
    14d6:	80 58       	subi	r24, 0x80	; 128
    14d8:	87 8f       	std	Z+31, r24	; 0x1f
  
  return 0;
}

void player_start(struct fat_file_struct* fd, t_notify_eof notify_eof)
{
    14da:	00 5e       	subi	r16, 0xE0	; 224
    14dc:	1f 4f       	sbci	r17, 0xFF	; 255
      *p++ = scratch[55] + 128;
      *p++ = scratch[57] + 128;
      *p++ = scratch[59] + 128;
      *p++ = scratch[61] + 128;
      *p++ = scratch[63] + 128;
    } while (--i);
    14de:	f8 e0       	ldi	r31, 0x08	; 8
    14e0:	02 36       	cpi	r16, 0x62	; 98
    14e2:	1f 07       	cpc	r17, r31
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <player_start+0x1ea>
    14e6:	6d cf       	rjmp	.-294    	; 0x13c2 <player_start+0xc4>
    
    return (p - buffer);
    14e8:	98 01       	movw	r18, r16
    14ea:	22 56       	subi	r18, 0x62	; 98
    14ec:	34 40       	sbci	r19, 0x04	; 4
    14ee:	08 c0       	rjmp	.+16     	; 0x1500 <player_start+0x202>
  }
  else
  {
    return fat_read_file(fd, buffer, buffer_len);
    14f0:	c7 01       	movw	r24, r14
    14f2:	62 e6       	ldi	r22, 0x62	; 98
    14f4:	74 e0       	ldi	r23, 0x04	; 4
    14f6:	40 e0       	ldi	r20, 0x00	; 0
    14f8:	54 e0       	ldi	r21, 0x04	; 4
    14fa:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fat_read_file>
    14fe:	9c 01       	movw	r18, r24
  /* Go to the start of the data */
  int32_t offset = header.data_start;
  fat_seek_file(fd, &offset, FAT_SEEK_SET);

  /* Do some pre-buffering */
  if ((size = read_samples(player.fd, (uint8_t*)pcm_buffer, 2 * PCM_BUFFER_SIZE, player.format)) < (2 * PCM_BUFFER_SIZE))
    1500:	84 e0       	ldi	r24, 0x04	; 4
    1502:	20 30       	cpi	r18, 0x00	; 0
    1504:	38 07       	cpc	r19, r24
    1506:	88 f4       	brcc	.+34     	; 0x152a <player_start+0x22c>
  {
    printf_P(PSTR("Buffering error %i\r\n "), size);
    1508:	00 d0       	rcall	.+0      	; 0x150a <player_start+0x20c>
    150a:	00 d0       	rcall	.+0      	; 0x150c <player_start+0x20e>
    150c:	87 ec       	ldi	r24, 0xC7	; 199
    150e:	92 e0       	ldi	r25, 0x02	; 2
    1510:	ed b7       	in	r30, 0x3d	; 61
    1512:	fe b7       	in	r31, 0x3e	; 62
    1514:	92 83       	std	Z+2, r25	; 0x02
    1516:	81 83       	std	Z+1, r24	; 0x01
    1518:	34 83       	std	Z+4, r19	; 0x04
    151a:	23 83       	std	Z+3, r18	; 0x03
    151c:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <printf_P>
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	08 c0       	rjmp	.+16     	; 0x153a <player_start+0x23c>
    return; 
  }

  /* Start the DAC */
  dac_start(pcm_buffer, pcm_buffer + PCM_BUFFER_SIZE, PCM_BUFFER_SIZE);
    152a:	82 e6       	ldi	r24, 0x62	; 98
    152c:	94 e0       	ldi	r25, 0x04	; 4
    152e:	62 e6       	ldi	r22, 0x62	; 98
    1530:	76 e0       	ldi	r23, 0x06	; 6
    1532:	40 e0       	ldi	r20, 0x00	; 0
    1534:	52 e0       	ldi	r21, 0x02	; 2
    1536:	0e 94 6f 07 	call	0xede	; 0xede <dac_start>
}
    153a:	60 96       	adiw	r28, 0x10	; 16
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	f8 94       	cli
    1540:	de bf       	out	0x3e, r29	; 62
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	cd bf       	out	0x3d, r28	; 61
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	1f 91       	pop	r17
    154c:	0f 91       	pop	r16
    154e:	ff 90       	pop	r15
    1550:	ef 90       	pop	r14
    1552:	08 95       	ret

00001554 <wavparser_parse_header>:
#else
#define DEBUG_TRACE(sTRING, pARAM)
#endif

t_wavparser_status wavparser_parse_header(struct fat_file_struct* fd, t_wavparser_header* header)
{
    1554:	8f 92       	push	r8
    1556:	9f 92       	push	r9
    1558:	af 92       	push	r10
    155a:	bf 92       	push	r11
    155c:	cf 92       	push	r12
    155e:	df 92       	push	r13
    1560:	ef 92       	push	r14
    1562:	ff 92       	push	r15
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	2f 97       	sbiw	r28, 0x0f	; 15
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	8c 01       	movw	r16, r24
    157e:	5b 01       	movw	r10, r22
  char buffer[5] = { 0, 0, 0, 0, 0};
  uint32_t dword;
  uint16_t word;

  /* Check the header pointer */
  if (header == NULL)
    1580:	61 15       	cp	r22, r1
    1582:	71 05       	cpc	r23, r1
    1584:	11 f4       	brne	.+4      	; 0x158a <wavparser_parse_header+0x36>
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	b5 c0       	rjmp	.+362    	; 0x16f4 <wavparser_parse_header+0x1a0>
  {
    return WAVPARSER_INVALID_PARAMETER;
  }

  /* Go the start of the file */
  int32_t offset = 0;
    158a:	1f 82       	std	Y+7, r1	; 0x07
    158c:	18 86       	std	Y+8, r1	; 0x08
    158e:	19 86       	std	Y+9, r1	; 0x09
    1590:	1a 86       	std	Y+10, r1	; 0x0a
#define DEBUG_TRACE(sTRING, pARAM)
#endif

t_wavparser_status wavparser_parse_header(struct fat_file_struct* fd, t_wavparser_header* header)
{
  char buffer[5] = { 0, 0, 0, 0, 0};
    1592:	9b e0       	ldi	r25, 0x0B	; 11
    1594:	c9 2e       	mov	r12, r25
    1596:	d1 2c       	mov	r13, r1
    1598:	cc 0e       	add	r12, r28
    159a:	dd 1e       	adc	r13, r29
    159c:	85 e0       	ldi	r24, 0x05	; 5
    159e:	f6 01       	movw	r30, r12
    15a0:	11 92       	st	Z+, r1
    15a2:	8a 95       	dec	r24
    15a4:	e9 f7       	brne	.-6      	; 0x15a0 <wavparser_parse_header+0x4c>
    return WAVPARSER_INVALID_PARAMETER;
  }

  /* Go the start of the file */
  int32_t offset = 0;
  fat_seek_file(fd, &offset, FAT_SEEK_SET);
    15a6:	c8 01       	movw	r24, r16
    15a8:	be 01       	movw	r22, r28
    15aa:	69 5f       	subi	r22, 0xF9	; 249
    15ac:	7f 4f       	sbci	r23, 0xFF	; 255
    15ae:	40 e0       	ldi	r20, 0x00	; 0
    15b0:	0e 94 81 1b 	call	0x3702	; 0x3702 <fat_seek_file>

  /* Read the chunk id */
  fat_read_file(fd, (uint8_t*)buffer, 4 * sizeof(char));
    15b4:	c8 01       	movw	r24, r16
    15b6:	b6 01       	movw	r22, r12
    15b8:	44 e0       	ldi	r20, 0x04	; 4
    15ba:	50 e0       	ldi	r21, 0x00	; 0
    15bc:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fat_read_file>
  DEBUG_TRACE("chunk_id = %s\n", buffer);
  if (strncmp(buffer, "RIFF", 4) != 0)
    15c0:	c6 01       	movw	r24, r12
    15c2:	62 e0       	ldi	r22, 0x02	; 2
    15c4:	71 e0       	ldi	r23, 0x01	; 1
    15c6:	44 e0       	ldi	r20, 0x04	; 4
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	0e 94 c6 24 	call	0x498c	; 0x498c <strncmp>
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <wavparser_parse_header+0x80>
    15d2:	8f c0       	rjmp	.+286    	; 0x16f2 <wavparser_parse_header+0x19e>
  {
    return WAVPARSER_INVALID_CHUNK_ID;
  }

  /* Read the chunk size */
  fat_read_file(fd, (uint8_t*)&dword, sizeof(dword));
    15d4:	83 e0       	ldi	r24, 0x03	; 3
    15d6:	88 2e       	mov	r8, r24
    15d8:	91 2c       	mov	r9, r1
    15da:	8c 0e       	add	r8, r28
    15dc:	9d 1e       	adc	r9, r29
    15de:	c8 01       	movw	r24, r16
    15e0:	b4 01       	movw	r22, r8
    15e2:	44 e0       	ldi	r20, 0x04	; 4
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fat_read_file>
  DEBUG_TRACE("chunk_size = %li\n", dword);

  /* Read the format */
  fat_read_file(fd, (uint8_t*)buffer, 4 * sizeof(char));
    15ea:	c8 01       	movw	r24, r16
    15ec:	b6 01       	movw	r22, r12
    15ee:	44 e0       	ldi	r20, 0x04	; 4
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fat_read_file>
  DEBUG_TRACE("format = %s\n", buffer);
  if (strncmp(buffer, "WAVE", 4) != 0)
    15f6:	c6 01       	movw	r24, r12
    15f8:	67 e0       	ldi	r22, 0x07	; 7
    15fa:	71 e0       	ldi	r23, 0x01	; 1
    15fc:	44 e0       	ldi	r20, 0x04	; 4
    15fe:	50 e0       	ldi	r21, 0x00	; 0
    1600:	0e 94 c6 24 	call	0x498c	; 0x498c <strncmp>
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	11 f0       	breq	.+4      	; 0x160c <wavparser_parse_header+0xb8>
    1608:	83 e0       	ldi	r24, 0x03	; 3
    160a:	74 c0       	rjmp	.+232    	; 0x16f4 <wavparser_parse_header+0x1a0>
  {
    return WAVPARSER_INVALID_FORMAT;
  }

  /* Read the sub chunk id 1 */
  fat_read_file(fd, (uint8_t*)buffer, 4 * sizeof(char));
    160c:	c8 01       	movw	r24, r16
    160e:	b6 01       	movw	r22, r12
    1610:	44 e0       	ldi	r20, 0x04	; 4
    1612:	50 e0       	ldi	r21, 0x00	; 0
    1614:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fat_read_file>
  DEBUG_TRACE("subchunk_id 1 = %s\n", buffer);
  if (strncmp(buffer, "fmt ", 4) != 0)
    1618:	c6 01       	movw	r24, r12
    161a:	6c e0       	ldi	r22, 0x0C	; 12
    161c:	71 e0       	ldi	r23, 0x01	; 1
    161e:	44 e0       	ldi	r20, 0x04	; 4
    1620:	50 e0       	ldi	r21, 0x00	; 0
    1622:	0e 94 c6 24 	call	0x498c	; 0x498c <strncmp>
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	09 f0       	breq	.+2      	; 0x162c <wavparser_parse_header+0xd8>
    162a:	63 c0       	rjmp	.+198    	; 0x16f2 <wavparser_parse_header+0x19e>
  {
    return WAVPARSER_INVALID_CHUNK_ID;
  }

  /* Read the sub chunk size */
  fat_read_file(fd, (uint8_t*)&dword, sizeof(dword));
    162c:	c8 01       	movw	r24, r16
    162e:	b4 01       	movw	r22, r8
    1630:	44 e0       	ldi	r20, 0x04	; 4
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fat_read_file>
  DEBUG_TRACE("subchunk_size = %li\n", dword);

  /* Read the audio parameters */
  fat_read_file(fd, (uint8_t*)&word, sizeof(word));
    1638:	7e 01       	movw	r14, r28
    163a:	08 94       	sec
    163c:	e1 1c       	adc	r14, r1
    163e:	f1 1c       	adc	r15, r1
    1640:	c8 01       	movw	r24, r16
    1642:	b7 01       	movw	r22, r14
    1644:	42 e0       	ldi	r20, 0x02	; 2
    1646:	50 e0       	ldi	r21, 0x00	; 0
    1648:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fat_read_file>
  DEBUG_TRACE("audio_format = %i\n", word);
  if (word != 1)
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	9a 81       	ldd	r25, Y+2	; 0x02
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	11 f0       	breq	.+4      	; 0x1658 <wavparser_parse_header+0x104>
    1654:	84 e0       	ldi	r24, 0x04	; 4
    1656:	4e c0       	rjmp	.+156    	; 0x16f4 <wavparser_parse_header+0x1a0>
  {
    /* Only support PCM format */
    return WAVPARSER_UNSUPPORTED_AUDIO_FORMAT;
  }

  fat_read_file(fd, (uint8_t*)&word, sizeof(word));
    1658:	c8 01       	movw	r24, r16
    165a:	b7 01       	movw	r22, r14
    165c:	42 e0       	ldi	r20, 0x02	; 2
    165e:	50 e0       	ldi	r21, 0x00	; 0
    1660:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fat_read_file>
  DEBUG_TRACE("num_channels = %i\n", word);
  header->num_channels = (uint8_t)word;
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	f5 01       	movw	r30, r10
    1668:	82 87       	std	Z+10, r24	; 0x0a

  fat_read_file(fd, (uint8_t*)&dword, sizeof(dword));
    166a:	c8 01       	movw	r24, r16
    166c:	b4 01       	movw	r22, r8
    166e:	44 e0       	ldi	r20, 0x04	; 4
    1670:	50 e0       	ldi	r21, 0x00	; 0
    1672:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fat_read_file>
  DEBUG_TRACE("sample_rate = %li\n", dword);
  header->sample_rate = (uint16_t)dword;
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	9c 81       	ldd	r25, Y+4	; 0x04
    167a:	f5 01       	movw	r30, r10
    167c:	91 87       	std	Z+9, r25	; 0x09
    167e:	80 87       	std	Z+8, r24	; 0x08

  fat_read_file(fd, (uint8_t*)&dword, sizeof(dword));
    1680:	c8 01       	movw	r24, r16
    1682:	b4 01       	movw	r22, r8
    1684:	44 e0       	ldi	r20, 0x04	; 4
    1686:	50 e0       	ldi	r21, 0x00	; 0
    1688:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fat_read_file>
  DEBUG_TRACE("byte_rate = %li\n", dword);

  fat_read_file(fd, (uint8_t*)&word, sizeof(word));
    168c:	c8 01       	movw	r24, r16
    168e:	b7 01       	movw	r22, r14
    1690:	42 e0       	ldi	r20, 0x02	; 2
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fat_read_file>
  DEBUG_TRACE("block_align = %i\n", word);

  fat_read_file(fd, (uint8_t*)&word, sizeof(word));
    1698:	c8 01       	movw	r24, r16
    169a:	b7 01       	movw	r22, r14
    169c:	42 e0       	ldi	r20, 0x02	; 2
    169e:	50 e0       	ldi	r21, 0x00	; 0
    16a0:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fat_read_file>
  DEBUG_TRACE("bits_per_sample = %i\n", word);
  header->bits_per_sample = (uint8_t)word;
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	f5 01       	movw	r30, r10
    16a8:	83 87       	std	Z+11, r24	; 0x0b

  /* Read the sub chunk id 2 */
  fat_read_file(fd, (uint8_t*)buffer, 4 * sizeof(char));
    16aa:	c8 01       	movw	r24, r16
    16ac:	b6 01       	movw	r22, r12
    16ae:	44 e0       	ldi	r20, 0x04	; 4
    16b0:	50 e0       	ldi	r21, 0x00	; 0
    16b2:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fat_read_file>
  DEBUG_TRACE("subchunk_id 2 = %s\n", buffer);
  if (strncmp(buffer, "data", 4) != 0)
    16b6:	c6 01       	movw	r24, r12
    16b8:	61 e1       	ldi	r22, 0x11	; 17
    16ba:	71 e0       	ldi	r23, 0x01	; 1
    16bc:	44 e0       	ldi	r20, 0x04	; 4
    16be:	50 e0       	ldi	r21, 0x00	; 0
    16c0:	0e 94 c6 24 	call	0x498c	; 0x498c <strncmp>
    16c4:	00 97       	sbiw	r24, 0x00	; 0
    16c6:	a9 f4       	brne	.+42     	; 0x16f2 <wavparser_parse_header+0x19e>
  {
    return WAVPARSER_INVALID_CHUNK_ID;
  }

  /* Read the sub chunk size */
  fat_read_file(fd, (uint8_t*)&dword, sizeof(dword));
    16c8:	c8 01       	movw	r24, r16
    16ca:	b4 01       	movw	r22, r8
    16cc:	44 e0       	ldi	r20, 0x04	; 4
    16ce:	50 e0       	ldi	r21, 0x00	; 0
    16d0:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fat_read_file>
  DEBUG_TRACE("subchunk_size = %li\n", dword);

  header->data_size = dword;
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	9c 81       	ldd	r25, Y+4	; 0x04
    16d8:	ad 81       	ldd	r26, Y+5	; 0x05
    16da:	be 81       	ldd	r27, Y+6	; 0x06
    16dc:	f5 01       	movw	r30, r10
    16de:	84 83       	std	Z+4, r24	; 0x04
    16e0:	95 83       	std	Z+5, r25	; 0x05
    16e2:	a6 83       	std	Z+6, r26	; 0x06
    16e4:	b7 83       	std	Z+7, r27	; 0x07
  fat_tell_file(fd, &header->data_start);
    16e6:	c8 01       	movw	r24, r16
    16e8:	b5 01       	movw	r22, r10
    16ea:	0e 94 25 10 	call	0x204a	; 0x204a <fat_tell_file>
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	01 c0       	rjmp	.+2      	; 0x16f4 <wavparser_parse_header+0x1a0>

  return WAVPARSER_OK;
    16f2:	82 e0       	ldi	r24, 0x02	; 2
    16f4:	2f 96       	adiw	r28, 0x0f	; 15
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	1f 91       	pop	r17
    1706:	0f 91       	pop	r16
    1708:	ff 90       	pop	r15
    170a:	ef 90       	pop	r14
    170c:	df 90       	pop	r13
    170e:	cf 90       	pop	r12
    1710:	bf 90       	pop	r11
    1712:	af 90       	pop	r10
    1714:	9f 90       	pop	r9
    1716:	8f 90       	pop	r8
    1718:	08 95       	ret

0000171a <SerialStream_TxByte>:
#include "SerialStream.h"

FILE USARTStream = FDEV_SETUP_STREAM(SerialStream_TxByte, SerialStream_RxByte, _FDEV_SETUP_RW);

static int SerialStream_TxByte(char DataByte, FILE *Stream)
{
    171a:	98 2f       	mov	r25, r24
			 *
			 *  \param[in] DataByte  Byte to transmit through the USART
			 */
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    171c:	80 91 c8 00 	lds	r24, 0x00C8
    1720:	85 ff       	sbrs	r24, 5
    1722:	fc cf       	rjmp	.-8      	; 0x171c <SerialStream_TxByte+0x2>
				UDR1 = DataByte;
    1724:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;
	
	Serial_TxByte(DataByte);
	return 0;
}
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	08 95       	ret

0000172e <SerialStream_RxByte>:
			 *
			 *  \return Byte received from the USART
			 */
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
    172e:	80 91 c8 00 	lds	r24, 0x00C8
    1732:	87 ff       	sbrs	r24, 7
    1734:	fc cf       	rjmp	.-8      	; 0x172e <SerialStream_RxByte>
				return UDR1; 
    1736:	80 91 ce 00 	lds	r24, 0x00CE
static int SerialStream_RxByte(FILE *Stream)
{
	(void)Stream;

	return Serial_RxByte();
}
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	08 95       	ret

0000173e <fat_close>:
 *
 * \param[in] fs The filesystem to close.
 * \see fat_open
 */
void fat_close(struct fat_fs_struct* fs)
{
    173e:	fc 01       	movw	r30, r24
    if(!fs)
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	11 f0       	breq	.+4      	; 0x1748 <fat_close+0xa>
        return;

#if USE_DYNAMIC_MEMORY
    free(fs);
#else
    fs->partition = 0;
    1744:	11 82       	std	Z+1, r1	; 0x01
    1746:	10 82       	st	Z, r1
    1748:	08 95       	ret

0000174a <fat_get_next_cluster>:
 * \param[in] fs The filesystem for which to determine the next cluster.
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    174a:	0f 93       	push	r16
    174c:	1f 93       	push	r17
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	00 d0       	rcall	.+0      	; 0x1754 <fat_get_next_cluster+0xa>
    1754:	00 d0       	rcall	.+0      	; 0x1756 <fat_get_next_cluster+0xc>
    1756:	00 d0       	rcall	.+0      	; 0x1758 <fat_get_next_cluster+0xe>
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	dc 01       	movw	r26, r24
    if(!fs || cluster_num < 2)
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	09 f4       	brne	.+2      	; 0x1764 <fat_get_next_cluster+0x1a>
    1762:	88 c0       	rjmp	.+272    	; 0x1874 <fat_get_next_cluster+0x12a>
    1764:	42 30       	cpi	r20, 0x02	; 2
    1766:	51 05       	cpc	r21, r1
    1768:	61 05       	cpc	r22, r1
    176a:	71 05       	cpc	r23, r1
    176c:	08 f4       	brcc	.+2      	; 0x1770 <fat_get_next_cluster+0x26>
    176e:	82 c0       	rjmp	.+260    	; 0x1874 <fat_get_next_cluster+0x12a>
        return 0;

#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    1770:	ed 91       	ld	r30, X+
    1772:	fc 91       	ld	r31, X
    1774:	11 97       	sbiw	r26, 0x01	; 1
    1776:	80 85       	ldd	r24, Z+8	; 0x08
    1778:	16 96       	adiw	r26, 0x06	; 6
    177a:	0d 91       	ld	r16, X+
    177c:	1d 91       	ld	r17, X+
    177e:	2d 91       	ld	r18, X+
    1780:	3c 91       	ld	r19, X
    1782:	19 97       	sbiw	r26, 0x09	; 9
    1784:	01 90       	ld	r0, Z+
    1786:	f0 81       	ld	r31, Z
    1788:	e0 2d       	mov	r30, r0
    178a:	8b 30       	cpi	r24, 0x0B	; 11
    178c:	d9 f5       	brne	.+118    	; 0x1804 <fat_get_next_cluster+0xba>
    {
        /* read appropriate fat entry */
        uint32_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    178e:	92 e0       	ldi	r25, 0x02	; 2
    1790:	44 0f       	add	r20, r20
    1792:	55 1f       	adc	r21, r21
    1794:	66 1f       	adc	r22, r22
    1796:	77 1f       	adc	r23, r23
    1798:	9a 95       	dec	r25
    179a:	d1 f7       	brne	.-12     	; 0x1790 <fat_get_next_cluster+0x46>
    179c:	04 0f       	add	r16, r20
    179e:	15 1f       	adc	r17, r21
    17a0:	26 1f       	adc	r18, r22
    17a2:	37 1f       	adc	r19, r23
    17a4:	c9 01       	movw	r24, r18
    17a6:	b8 01       	movw	r22, r16
    17a8:	ae 01       	movw	r20, r28
    17aa:	4d 5f       	subi	r20, 0xFD	; 253
    17ac:	5f 4f       	sbci	r21, 0xFF	; 255
    17ae:	24 e0       	ldi	r18, 0x04	; 4
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	09 95       	icall
    17b4:	88 23       	and	r24, r24
    17b6:	09 f4       	brne	.+2      	; 0x17ba <fat_get_next_cluster+0x70>
    17b8:	5d c0       	rjmp	.+186    	; 0x1874 <fat_get_next_cluster+0x12a>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh32(fat_entry);
    17ba:	2b 81       	ldd	r18, Y+3	; 0x03
    17bc:	3c 81       	ldd	r19, Y+4	; 0x04
    17be:	4d 81       	ldd	r20, Y+5	; 0x05
    17c0:	5e 81       	ldd	r21, Y+6	; 0x06
        
        if(cluster_num == FAT32_CLUSTER_FREE ||
    17c2:	21 15       	cp	r18, r1
    17c4:	31 05       	cpc	r19, r1
    17c6:	41 05       	cpc	r20, r1
    17c8:	51 05       	cpc	r21, r1
    17ca:	09 f4       	brne	.+2      	; 0x17ce <fat_get_next_cluster+0x84>
    17cc:	57 c0       	rjmp	.+174    	; 0x187c <fat_get_next_cluster+0x132>
    17ce:	27 3f       	cpi	r18, 0xF7	; 247
    17d0:	8f ef       	ldi	r24, 0xFF	; 255
    17d2:	38 07       	cpc	r19, r24
    17d4:	8f ef       	ldi	r24, 0xFF	; 255
    17d6:	48 07       	cpc	r20, r24
    17d8:	8f e0       	ldi	r24, 0x0F	; 15
    17da:	58 07       	cpc	r21, r24
    17dc:	09 f4       	brne	.+2      	; 0x17e0 <fat_get_next_cluster+0x96>
    17de:	4a c0       	rjmp	.+148    	; 0x1874 <fat_get_next_cluster+0x12a>
    17e0:	da 01       	movw	r26, r20
    17e2:	c9 01       	movw	r24, r18
    17e4:	80 5f       	subi	r24, 0xF0	; 240
    17e6:	9f 4f       	sbci	r25, 0xFF	; 255
    17e8:	af 4f       	sbci	r26, 0xFF	; 255
    17ea:	bf 40       	sbci	r27, 0x0F	; 15
    17ec:	07 97       	sbiw	r24, 0x07	; 7
    17ee:	a1 05       	cpc	r26, r1
    17f0:	b1 05       	cpc	r27, r1
    17f2:	08 f4       	brcc	.+2      	; 0x17f6 <fat_get_next_cluster+0xac>
    17f4:	3f c0       	rjmp	.+126    	; 0x1874 <fat_get_next_cluster+0x12a>
    17f6:	da 01       	movw	r26, r20
    17f8:	c9 01       	movw	r24, r18
    17fa:	88 5f       	subi	r24, 0xF8	; 248
    17fc:	9f 4f       	sbci	r25, 0xFF	; 255
    17fe:	af 4f       	sbci	r26, 0xFF	; 255
    1800:	bf 40       	sbci	r27, 0x0F	; 15
    1802:	34 c0       	rjmp	.+104    	; 0x186c <fat_get_next_cluster+0x122>
    else
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    1804:	44 0f       	add	r20, r20
    1806:	55 1f       	adc	r21, r21
    1808:	66 1f       	adc	r22, r22
    180a:	77 1f       	adc	r23, r23
    180c:	04 0f       	add	r16, r20
    180e:	15 1f       	adc	r17, r21
    1810:	26 1f       	adc	r18, r22
    1812:	37 1f       	adc	r19, r23
    1814:	c9 01       	movw	r24, r18
    1816:	b8 01       	movw	r22, r16
    1818:	ae 01       	movw	r20, r28
    181a:	4f 5f       	subi	r20, 0xFF	; 255
    181c:	5f 4f       	sbci	r21, 0xFF	; 255
    181e:	22 e0       	ldi	r18, 0x02	; 2
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	09 95       	icall
    1824:	88 23       	and	r24, r24
    1826:	31 f1       	breq	.+76     	; 0x1874 <fat_get_next_cluster+0x12a>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	9a 81       	ldd	r25, Y+2	; 0x02
    182c:	9c 01       	movw	r18, r24
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	50 e0       	ldi	r21, 0x00	; 0
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
    1832:	21 15       	cp	r18, r1
    1834:	31 05       	cpc	r19, r1
    1836:	41 05       	cpc	r20, r1
    1838:	51 05       	cpc	r21, r1
    183a:	01 f1       	breq	.+64     	; 0x187c <fat_get_next_cluster+0x132>
    183c:	27 3f       	cpi	r18, 0xF7	; 247
    183e:	8f ef       	ldi	r24, 0xFF	; 255
    1840:	38 07       	cpc	r19, r24
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	48 07       	cpc	r20, r24
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	58 07       	cpc	r21, r24
    184a:	a1 f0       	breq	.+40     	; 0x1874 <fat_get_next_cluster+0x12a>
    184c:	da 01       	movw	r26, r20
    184e:	c9 01       	movw	r24, r18
    1850:	80 5f       	subi	r24, 0xF0	; 240
    1852:	9f 4f       	sbci	r25, 0xFF	; 255
    1854:	a0 40       	sbci	r26, 0x00	; 0
    1856:	b0 40       	sbci	r27, 0x00	; 0
    1858:	07 97       	sbiw	r24, 0x07	; 7
    185a:	a1 05       	cpc	r26, r1
    185c:	b1 05       	cpc	r27, r1
    185e:	50 f0       	brcs	.+20     	; 0x1874 <fat_get_next_cluster+0x12a>
    1860:	da 01       	movw	r26, r20
    1862:	c9 01       	movw	r24, r18
    1864:	88 5f       	subi	r24, 0xF8	; 248
    1866:	9f 4f       	sbci	r25, 0xFF	; 255
    1868:	a0 40       	sbci	r26, 0x00	; 0
    186a:	b0 40       	sbci	r27, 0x00	; 0
    186c:	08 97       	sbiw	r24, 0x08	; 8
    186e:	a1 05       	cpc	r26, r1
    1870:	b1 05       	cpc	r27, r1
    1872:	20 f4       	brcc	.+8      	; 0x187c <fat_get_next_cluster+0x132>
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e0       	ldi	r20, 0x00	; 0
    187a:	50 e0       	ldi	r21, 0x00	; 0
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
            return 0;
    }

    return cluster_num;
}
    187c:	b9 01       	movw	r22, r18
    187e:	ca 01       	movw	r24, r20
    1880:	26 96       	adiw	r28, 0x06	; 6
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	f8 94       	cli
    1886:	de bf       	out	0x3e, r29	; 62
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	cd bf       	out	0x3d, r28	; 61
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	1f 91       	pop	r17
    1892:	0f 91       	pop	r16
    1894:	08 95       	ret

00001896 <fat_free_clusters>:
 * \param[in] cluster_num The starting cluster of the chain which to free.
 * \returns 0 on failure, 1 on success.
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    1896:	2f 92       	push	r2
    1898:	3f 92       	push	r3
    189a:	4f 92       	push	r4
    189c:	5f 92       	push	r5
    189e:	6f 92       	push	r6
    18a0:	7f 92       	push	r7
    18a2:	8f 92       	push	r8
    18a4:	9f 92       	push	r9
    18a6:	af 92       	push	r10
    18a8:	bf 92       	push	r11
    18aa:	cf 92       	push	r12
    18ac:	df 92       	push	r13
    18ae:	ef 92       	push	r14
    18b0:	ff 92       	push	r15
    18b2:	0f 93       	push	r16
    18b4:	1f 93       	push	r17
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <fat_free_clusters+0x26>
    18bc:	00 d0       	rcall	.+0      	; 0x18be <fat_free_clusters+0x28>
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <fat_free_clusters+0x2a>
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	4c 01       	movw	r8, r24
    if(!fs || cluster_num < 2)
    18c6:	00 97       	sbiw	r24, 0x00	; 0
    18c8:	09 f4       	brne	.+2      	; 0x18cc <fat_free_clusters+0x36>
    18ca:	b2 c0       	rjmp	.+356    	; 0x1a30 <fat_free_clusters+0x19a>
    18cc:	42 30       	cpi	r20, 0x02	; 2
    18ce:	51 05       	cpc	r21, r1
    18d0:	61 05       	cpc	r22, r1
    18d2:	71 05       	cpc	r23, r1
    18d4:	08 f4       	brcc	.+2      	; 0x18d8 <fat_free_clusters+0x42>
    18d6:	ac c0       	rjmp	.+344    	; 0x1a30 <fat_free_clusters+0x19a>
        return 0;

    offset_t fat_offset = fs->header.fat_offset;
    18d8:	dc 01       	movw	r26, r24
    18da:	16 96       	adiw	r26, 0x06	; 6
    18dc:	4d 90       	ld	r4, X+
    18de:	5d 90       	ld	r5, X+
    18e0:	6d 90       	ld	r6, X+
    18e2:	7c 90       	ld	r7, X
    18e4:	19 97       	sbiw	r26, 0x09	; 9
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    18e6:	ed 91       	ld	r30, X+
    18e8:	fc 91       	ld	r31, X
    18ea:	80 85       	ldd	r24, Z+8	; 0x08
    18ec:	8b 30       	cpi	r24, 0x0B	; 11
    18ee:	09 f0       	breq	.+2      	; 0x18f2 <fat_free_clusters+0x5c>
    18f0:	5c c0       	rjmp	.+184    	; 0x19aa <fat_free_clusters+0x114>
    {
        uint32_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    18f2:	e3 e0       	ldi	r30, 0x03	; 3
    18f4:	2e 2e       	mov	r2, r30
    18f6:	31 2c       	mov	r3, r1
    18f8:	2c 0e       	add	r2, r28
    18fa:	3d 1e       	adc	r3, r29
    18fc:	5a 01       	movw	r10, r20
    18fe:	6b 01       	movw	r12, r22
    1900:	32 e0       	ldi	r19, 0x02	; 2
    1902:	aa 0c       	add	r10, r10
    1904:	bb 1c       	adc	r11, r11
    1906:	cc 1c       	adc	r12, r12
    1908:	dd 1c       	adc	r13, r13
    190a:	3a 95       	dec	r19
    190c:	d1 f7       	brne	.-12     	; 0x1902 <fat_free_clusters+0x6c>
    190e:	a4 0c       	add	r10, r4
    1910:	b5 1c       	adc	r11, r5
    1912:	c6 1c       	adc	r12, r6
    1914:	d7 1c       	adc	r13, r7
    1916:	d4 01       	movw	r26, r8
    1918:	ed 91       	ld	r30, X+
    191a:	fc 91       	ld	r31, X
    191c:	01 90       	ld	r0, Z+
    191e:	f0 81       	ld	r31, Z
    1920:	e0 2d       	mov	r30, r0
    1922:	c6 01       	movw	r24, r12
    1924:	b5 01       	movw	r22, r10
    1926:	a1 01       	movw	r20, r2
    1928:	24 e0       	ldi	r18, 0x04	; 4
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	09 95       	icall
    192e:	88 23       	and	r24, r24
    1930:	09 f4       	brne	.+2      	; 0x1934 <fat_free_clusters+0x9e>
    1932:	7e c0       	rjmp	.+252    	; 0x1a30 <fat_free_clusters+0x19a>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint32_t cluster_num_next = ltoh32(fat_entry);
    1934:	eb 80       	ldd	r14, Y+3	; 0x03
    1936:	fc 80       	ldd	r15, Y+4	; 0x04
    1938:	0d 81       	ldd	r16, Y+5	; 0x05
    193a:	1e 81       	ldd	r17, Y+6	; 0x06

            if(cluster_num_next == FAT32_CLUSTER_FREE)
    193c:	e1 14       	cp	r14, r1
    193e:	f1 04       	cpc	r15, r1
    1940:	01 05       	cpc	r16, r1
    1942:	11 05       	cpc	r17, r1
    1944:	09 f4       	brne	.+2      	; 0x1948 <fat_free_clusters+0xb2>
    1946:	76 c0       	rjmp	.+236    	; 0x1a34 <fat_free_clusters+0x19e>
                return 1;
            if(cluster_num_next == FAT32_CLUSTER_BAD ||
    1948:	d8 01       	movw	r26, r16
    194a:	c7 01       	movw	r24, r14
    194c:	80 5f       	subi	r24, 0xF0	; 240
    194e:	9f 4f       	sbci	r25, 0xFF	; 255
    1950:	af 4f       	sbci	r26, 0xFF	; 255
    1952:	bf 40       	sbci	r27, 0x0F	; 15
    1954:	08 97       	sbiw	r24, 0x08	; 8
    1956:	a1 05       	cpc	r26, r1
    1958:	b1 05       	cpc	r27, r1
    195a:	08 f4       	brcc	.+2      	; 0x195e <fat_free_clusters+0xc8>
    195c:	69 c0       	rjmp	.+210    	; 0x1a30 <fat_free_clusters+0x19a>
               (cluster_num_next >= FAT32_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT32_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT32_CLUSTER_LAST_MIN && cluster_num_next <= FAT32_CLUSTER_LAST_MAX)
    195e:	d8 01       	movw	r26, r16
    1960:	c7 01       	movw	r24, r14
    1962:	88 5f       	subi	r24, 0xF8	; 248
    1964:	9f 4f       	sbci	r25, 0xFF	; 255
    1966:	af 4f       	sbci	r26, 0xFF	; 255
    1968:	bf 40       	sbci	r27, 0x0F	; 15
    196a:	08 97       	sbiw	r24, 0x08	; 8
    196c:	a1 05       	cpc	r26, r1
    196e:	b1 05       	cpc	r27, r1
    1970:	18 f4       	brcc	.+6      	; 0x1978 <fat_free_clusters+0xe2>
    1972:	ee 24       	eor	r14, r14
    1974:	ff 24       	eor	r15, r15
    1976:	87 01       	movw	r16, r14
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL32(FAT32_CLUSTER_FREE);
    1978:	1b 82       	std	Y+3, r1	; 0x03
    197a:	1c 82       	std	Y+4, r1	; 0x04
    197c:	1d 82       	std	Y+5, r1	; 0x05
    197e:	1e 82       	std	Y+6, r1	; 0x06
            fs->partition->device_write(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
    1980:	d4 01       	movw	r26, r8
    1982:	ed 91       	ld	r30, X+
    1984:	fc 91       	ld	r31, X
    1986:	04 80       	ldd	r0, Z+4	; 0x04
    1988:	f5 81       	ldd	r31, Z+5	; 0x05
    198a:	e0 2d       	mov	r30, r0
    198c:	c6 01       	movw	r24, r12
    198e:	b5 01       	movw	r22, r10
    1990:	a1 01       	movw	r20, r2
    1992:	24 e0       	ldi	r18, 0x04	; 4
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	09 95       	icall
    1998:	b8 01       	movw	r22, r16
    199a:	a7 01       	movw	r20, r14
    offset_t fat_offset = fs->header.fat_offset;
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    {
        uint32_t fat_entry;
        while(cluster_num)
    199c:	e1 14       	cp	r14, r1
    199e:	f1 04       	cpc	r15, r1
    19a0:	01 05       	cpc	r16, r1
    19a2:	11 05       	cpc	r17, r1
    19a4:	09 f0       	breq	.+2      	; 0x19a8 <fat_free_clusters+0x112>
    19a6:	aa cf       	rjmp	.-172    	; 0x18fc <fat_free_clusters+0x66>
    19a8:	45 c0       	rjmp	.+138    	; 0x1a34 <fat_free_clusters+0x19e>
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    19aa:	5e 01       	movw	r10, r28
    19ac:	08 94       	sec
    19ae:	a1 1c       	adc	r10, r1
    19b0:	b1 1c       	adc	r11, r1
    19b2:	7a 01       	movw	r14, r20
    19b4:	8b 01       	movw	r16, r22
    19b6:	ee 0c       	add	r14, r14
    19b8:	ff 1c       	adc	r15, r15
    19ba:	00 1f       	adc	r16, r16
    19bc:	11 1f       	adc	r17, r17
    19be:	e4 0c       	add	r14, r4
    19c0:	f5 1c       	adc	r15, r5
    19c2:	06 1d       	adc	r16, r6
    19c4:	17 1d       	adc	r17, r7
    19c6:	d4 01       	movw	r26, r8
    19c8:	ed 91       	ld	r30, X+
    19ca:	fc 91       	ld	r31, X
    19cc:	01 90       	ld	r0, Z+
    19ce:	f0 81       	ld	r31, Z
    19d0:	e0 2d       	mov	r30, r0
    19d2:	c8 01       	movw	r24, r16
    19d4:	b7 01       	movw	r22, r14
    19d6:	a5 01       	movw	r20, r10
    19d8:	22 e0       	ldi	r18, 0x02	; 2
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	09 95       	icall
    19de:	88 23       	and	r24, r24
    19e0:	39 f1       	breq	.+78     	; 0x1a30 <fat_free_clusters+0x19a>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ltoh16(fat_entry);
    19e2:	c9 80       	ldd	r12, Y+1	; 0x01
    19e4:	da 80       	ldd	r13, Y+2	; 0x02

            if(cluster_num_next == FAT16_CLUSTER_FREE)
    19e6:	c1 14       	cp	r12, r1
    19e8:	d1 04       	cpc	r13, r1
    19ea:	21 f1       	breq	.+72     	; 0x1a34 <fat_free_clusters+0x19e>
                return 1;
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
    19ec:	c6 01       	movw	r24, r12
    19ee:	40 96       	adiw	r24, 0x10	; 16
    19f0:	08 97       	sbiw	r24, 0x08	; 8
    19f2:	f0 f0       	brcs	.+60     	; 0x1a30 <fat_free_clusters+0x19a>
               (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
    19f4:	b8 ef       	ldi	r27, 0xF8	; 248
    19f6:	cb 16       	cp	r12, r27
    19f8:	bf ef       	ldi	r27, 0xFF	; 255
    19fa:	db 06       	cpc	r13, r27
    19fc:	10 f0       	brcs	.+4      	; 0x1a02 <fat_free_clusters+0x16c>
    19fe:	cc 24       	eor	r12, r12
    1a00:	dd 24       	eor	r13, r13
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
    1a02:	1a 82       	std	Y+2, r1	; 0x02
    1a04:	19 82       	std	Y+1, r1	; 0x01
            fs->partition->device_write(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
    1a06:	d4 01       	movw	r26, r8
    1a08:	ed 91       	ld	r30, X+
    1a0a:	fc 91       	ld	r31, X
    1a0c:	04 80       	ldd	r0, Z+4	; 0x04
    1a0e:	f5 81       	ldd	r31, Z+5	; 0x05
    1a10:	e0 2d       	mov	r30, r0
    1a12:	c8 01       	movw	r24, r16
    1a14:	b7 01       	movw	r22, r14
    1a16:	a5 01       	movw	r20, r10
    1a18:	22 e0       	ldi	r18, 0x02	; 2
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	09 95       	icall

            /* We continue in any case here, even if freeing the cluster failed.
             * The cluster is lost, but maybe we can still free up some later ones.
             */

            cluster_num = cluster_num_next;
    1a1e:	a6 01       	movw	r20, r12
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    }
    else
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
    1a24:	41 15       	cp	r20, r1
    1a26:	51 05       	cpc	r21, r1
    1a28:	61 05       	cpc	r22, r1
    1a2a:	71 05       	cpc	r23, r1
    1a2c:	11 f6       	brne	.-124    	; 0x19b2 <fat_free_clusters+0x11c>
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <fat_free_clusters+0x19e>
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	01 c0       	rjmp	.+2      	; 0x1a36 <fat_free_clusters+0x1a0>
    1a34:	81 e0       	ldi	r24, 0x01	; 1
            cluster_num = cluster_num_next;
        }
    }

    return 1;
}
    1a36:	26 96       	adiw	r28, 0x06	; 6
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	1f 91       	pop	r17
    1a48:	0f 91       	pop	r16
    1a4a:	ff 90       	pop	r15
    1a4c:	ef 90       	pop	r14
    1a4e:	df 90       	pop	r13
    1a50:	cf 90       	pop	r12
    1a52:	bf 90       	pop	r11
    1a54:	af 90       	pop	r10
    1a56:	9f 90       	pop	r9
    1a58:	8f 90       	pop	r8
    1a5a:	7f 90       	pop	r7
    1a5c:	6f 90       	pop	r6
    1a5e:	5f 90       	pop	r5
    1a60:	4f 90       	pop	r4
    1a62:	3f 90       	pop	r3
    1a64:	2f 90       	pop	r2
    1a66:	08 95       	ret

00001a68 <fat_append_clusters>:
 * \param[in] cluster_num The cluster to which to append the new chain.
 * \param[in] count The number of clusters to allocate.
 * \returns 0 on failure, the number of the first new cluster on success.
 */
cluster_t fat_append_clusters(const struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
    1a68:	2f 92       	push	r2
    1a6a:	3f 92       	push	r3
    1a6c:	4f 92       	push	r4
    1a6e:	5f 92       	push	r5
    1a70:	6f 92       	push	r6
    1a72:	7f 92       	push	r7
    1a74:	8f 92       	push	r8
    1a76:	9f 92       	push	r9
    1a78:	af 92       	push	r10
    1a7a:	bf 92       	push	r11
    1a7c:	cf 92       	push	r12
    1a7e:	df 92       	push	r13
    1a80:	ef 92       	push	r14
    1a82:	ff 92       	push	r15
    1a84:	0f 93       	push	r16
    1a86:	1f 93       	push	r17
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
    1a90:	6d 97       	sbiw	r28, 0x1d	; 29
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	f8 94       	cli
    1a96:	de bf       	out	0x3e, r29	; 62
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	cd bf       	out	0x3d, r28	; 61
    1a9c:	9d 8f       	std	Y+29, r25	; 0x1d
    1a9e:	8c 8f       	std	Y+28, r24	; 0x1c
    1aa0:	3a 01       	movw	r6, r20
    1aa2:	4b 01       	movw	r8, r22
    1aa4:	b9 01       	movw	r22, r18
    if(!fs)
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	09 f4       	brne	.+2      	; 0x1aac <fat_append_clusters+0x44>
    1aaa:	44 c1       	rjmp	.+648    	; 0x1d34 <fat_append_clusters+0x2cc>
        return 0;

    device_read_t device_read = fs->partition->device_read;
    1aac:	dc 01       	movw	r26, r24
    1aae:	ed 91       	ld	r30, X+
    1ab0:	fc 91       	ld	r31, X
    1ab2:	11 97       	sbiw	r26, 0x01	; 1
    1ab4:	20 81       	ld	r18, Z
    1ab6:	31 81       	ldd	r19, Z+1	; 0x01
    1ab8:	3b 8f       	std	Y+27, r19	; 0x1b
    1aba:	2a 8f       	std	Y+26, r18	; 0x1a
    device_write_t device_write = fs->partition->device_write;
    1abc:	44 81       	ldd	r20, Z+4	; 0x04
    1abe:	55 81       	ldd	r21, Z+5	; 0x05
    1ac0:	59 8f       	std	Y+25, r21	; 0x19
    1ac2:	48 8f       	std	Y+24, r20	; 0x18
    offset_t fat_offset = fs->header.fat_offset;
    1ac4:	16 96       	adiw	r26, 0x06	; 6
    1ac6:	ad 90       	ld	r10, X+
    1ac8:	bd 90       	ld	r11, X+
    1aca:	cd 90       	ld	r12, X+
    1acc:	dc 90       	ld	r13, X
    1ace:	19 97       	sbiw	r26, 0x09	; 9
    cluster_t cluster_next = 0;
    cluster_t cluster_max;
    uint16_t fat_entry16;
#if FAT_FAT32_SUPPORT
    uint32_t fat_entry32;
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
    1ad0:	1f 86       	std	Y+15, r1	; 0x0f
    1ad2:	80 85       	ldd	r24, Z+8	; 0x08
    1ad4:	8b 30       	cpi	r24, 0x0B	; 11
    1ad6:	11 f4       	brne	.+4      	; 0x1adc <fat_append_clusters+0x74>
    1ad8:	51 e0       	ldi	r21, 0x01	; 1
    1ada:	5f 87       	std	Y+15, r21	; 0x0f
    1adc:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1ade:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1ae0:	82 85       	ldd	r24, Z+10	; 0x0a
    1ae2:	93 85       	ldd	r25, Z+11	; 0x0b
    1ae4:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ae6:	b5 85       	ldd	r27, Z+13	; 0x0d

    if(is_fat32)
    1ae8:	ff 85       	ldd	r31, Y+15	; 0x0f
    1aea:	ff 23       	and	r31, r31
    1aec:	51 f0       	breq	.+20     	; 0x1b02 <fat_append_clusters+0x9a>
        cluster_max = fs->header.fat_size / sizeof(fat_entry32);
    1aee:	9c 01       	movw	r18, r24
    1af0:	ad 01       	movw	r20, r26
    1af2:	92 e0       	ldi	r25, 0x02	; 2
    1af4:	56 95       	lsr	r21
    1af6:	47 95       	ror	r20
    1af8:	37 95       	ror	r19
    1afa:	27 95       	ror	r18
    1afc:	9a 95       	dec	r25
    1afe:	d1 f7       	brne	.-12     	; 0x1af4 <fat_append_clusters+0x8c>
    1b00:	06 c0       	rjmp	.+12     	; 0x1b0e <fat_append_clusters+0xa6>
    else
#endif
        cluster_max = fs->header.fat_size / sizeof(fat_entry16);
    1b02:	9c 01       	movw	r18, r24
    1b04:	ad 01       	movw	r20, r26
    1b06:	56 95       	lsr	r21
    1b08:	47 95       	ror	r20
    1b0a:	37 95       	ror	r19
    1b0c:	27 95       	ror	r18
    1b0e:	28 8b       	std	Y+16, r18	; 0x10
    1b10:	39 8b       	std	Y+17, r19	; 0x11
    1b12:	4a 8b       	std	Y+18, r20	; 0x12
    1b14:	5b 8b       	std	Y+19, r21	; 0x13
    1b16:	d6 01       	movw	r26, r12
    1b18:	c5 01       	movw	r24, r10
    1b1a:	08 96       	adiw	r24, 0x08	; 8
    1b1c:	a1 1d       	adc	r26, r1
    1b1e:	b1 1d       	adc	r27, r1
    1b20:	8b 87       	std	Y+11, r24	; 0x0b
    1b22:	9c 87       	std	Y+12, r25	; 0x0c
    1b24:	ad 87       	std	Y+13, r26	; 0x0d
    1b26:	be 87       	std	Y+14, r27	; 0x0e
    1b28:	a6 01       	movw	r20, r12
    1b2a:	95 01       	movw	r18, r10
    1b2c:	2c 5f       	subi	r18, 0xFC	; 252
    1b2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b30:	4f 4f       	sbci	r20, 0xFF	; 255
    1b32:	5f 4f       	sbci	r21, 0xFF	; 255
    1b34:	2f 83       	std	Y+7, r18	; 0x07
    1b36:	38 87       	std	Y+8, r19	; 0x08
    1b38:	49 87       	std	Y+9, r20	; 0x09
    1b3a:	5a 87       	std	Y+10, r21	; 0x0a
    1b3c:	c8 01       	movw	r24, r16
    1b3e:	db 01       	movw	r26, r22
    1b40:	8c 8b       	std	Y+20, r24	; 0x14
    1b42:	9d 8b       	std	Y+21, r25	; 0x15
    1b44:	ae 8b       	std	Y+22, r26	; 0x16
    1b46:	bf 8b       	std	Y+23, r27	; 0x17
    1b48:	ee 24       	eor	r14, r14
    1b4a:	ff 24       	eor	r15, r15
    1b4c:	87 01       	movw	r16, r14
    1b4e:	b2 e0       	ldi	r27, 0x02	; 2
    1b50:	2b 2e       	mov	r2, r27
    1b52:	31 2c       	mov	r3, r1
    1b54:	41 2c       	mov	r4, r1
    1b56:	51 2c       	mov	r5, r1
    1b58:	9a c0       	rjmp	.+308    	; 0x1c8e <fat_append_clusters+0x226>

    for(cluster_t cluster_new = 2; cluster_new < cluster_max; ++cluster_new)
    {
#if FAT_FAT32_SUPPORT
        if(is_fat32)
    1b5a:	3f 85       	ldd	r19, Y+15	; 0x0f
    1b5c:	33 23       	and	r19, r19
    1b5e:	81 f0       	breq	.+32     	; 0x1b80 <fat_append_clusters+0x118>
        {
            if(!device_read(fat_offset + cluster_new * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
    1b60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b68:	ae 01       	movw	r20, r28
    1b6a:	4d 5f       	subi	r20, 0xFD	; 253
    1b6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b6e:	24 e0       	ldi	r18, 0x04	; 4
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1b74:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1b76:	fd 01       	movw	r30, r26
    1b78:	09 95       	icall
    1b7a:	88 23       	and	r24, r24
    1b7c:	b1 f4       	brne	.+44     	; 0x1baa <fat_append_clusters+0x142>
    1b7e:	da c0       	rjmp	.+436    	; 0x1d34 <fat_append_clusters+0x2cc>
                return 0;
        }
        else
#endif
        {
            if(!device_read(fat_offset + cluster_new * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    1b80:	6f 81       	ldd	r22, Y+7	; 0x07
    1b82:	78 85       	ldd	r23, Y+8	; 0x08
    1b84:	89 85       	ldd	r24, Y+9	; 0x09
    1b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b88:	ae 01       	movw	r20, r28
    1b8a:	4f 5f       	subi	r20, 0xFF	; 255
    1b8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b8e:	22 e0       	ldi	r18, 0x02	; 2
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1b94:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1b96:	09 95       	icall
    1b98:	88 23       	and	r24, r24
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <fat_append_clusters+0x136>
    1b9c:	cb c0       	rjmp	.+406    	; 0x1d34 <fat_append_clusters+0x2cc>
        }
        else
#endif
        {
            /* check if this is a free cluster */
            if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba2:	89 2b       	or	r24, r25
    1ba4:	09 f0       	breq	.+2      	; 0x1ba8 <fat_append_clusters+0x140>
    1ba6:	57 c0       	rjmp	.+174    	; 0x1c56 <fat_append_clusters+0x1ee>
    1ba8:	25 c0       	rjmp	.+74     	; 0x1bf4 <fat_append_clusters+0x18c>

#if FAT_FAT32_SUPPORT
        if(is_fat32)
        {
            /* check if this is a free cluster */
            if(fat_entry32 != HTOL32(FAT32_CLUSTER_FREE))
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	9c 81       	ldd	r25, Y+4	; 0x04
    1bae:	ad 81       	ldd	r26, Y+5	; 0x05
    1bb0:	be 81       	ldd	r27, Y+6	; 0x06
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	a1 05       	cpc	r26, r1
    1bb6:	b1 05       	cpc	r27, r1
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <fat_append_clusters+0x154>
    1bba:	4d c0       	rjmp	.+154    	; 0x1c56 <fat_append_clusters+0x1ee>
                continue;

            /* allocate cluster */
            if(cluster_next == 0)
    1bbc:	e1 14       	cp	r14, r1
    1bbe:	f1 04       	cpc	r15, r1
    1bc0:	01 05       	cpc	r16, r1
    1bc2:	11 05       	cpc	r17, r1
    1bc4:	49 f4       	brne	.+18     	; 0x1bd8 <fat_append_clusters+0x170>
                fat_entry32 = HTOL32(FAT32_CLUSTER_LAST_MAX);
    1bc6:	2f ef       	ldi	r18, 0xFF	; 255
    1bc8:	3f ef       	ldi	r19, 0xFF	; 255
    1bca:	4f ef       	ldi	r20, 0xFF	; 255
    1bcc:	5f e0       	ldi	r21, 0x0F	; 15
    1bce:	2b 83       	std	Y+3, r18	; 0x03
    1bd0:	3c 83       	std	Y+4, r19	; 0x04
    1bd2:	4d 83       	std	Y+5, r20	; 0x05
    1bd4:	5e 83       	std	Y+6, r21	; 0x06
    1bd6:	04 c0       	rjmp	.+8      	; 0x1be0 <fat_append_clusters+0x178>
            else
                fat_entry32 = htol32(cluster_next);
    1bd8:	eb 82       	std	Y+3, r14	; 0x03
    1bda:	fc 82       	std	Y+4, r15	; 0x04
    1bdc:	0d 83       	std	Y+5, r16	; 0x05
    1bde:	1e 83       	std	Y+6, r17	; 0x06

            if(!device_write(fat_offset + cluster_new * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
    1be0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1be4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1be6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be8:	ae 01       	movw	r20, r28
    1bea:	4d 5f       	subi	r20, 0xFD	; 253
    1bec:	5f 4f       	sbci	r21, 0xFF	; 255
    1bee:	24 e0       	ldi	r18, 0x04	; 4
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	15 c0       	rjmp	.+42     	; 0x1c1e <fat_append_clusters+0x1b6>
            /* check if this is a free cluster */
            if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
                continue;

            /* allocate cluster */
            if(cluster_next == 0)
    1bf4:	e1 14       	cp	r14, r1
    1bf6:	f1 04       	cpc	r15, r1
    1bf8:	01 05       	cpc	r16, r1
    1bfa:	11 05       	cpc	r17, r1
    1bfc:	29 f4       	brne	.+10     	; 0x1c08 <fat_append_clusters+0x1a0>
                fat_entry16 = HTOL16(FAT16_CLUSTER_LAST_MAX);
    1bfe:	ef ef       	ldi	r30, 0xFF	; 255
    1c00:	ff ef       	ldi	r31, 0xFF	; 255
    1c02:	fa 83       	std	Y+2, r31	; 0x02
    1c04:	e9 83       	std	Y+1, r30	; 0x01
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <fat_append_clusters+0x1a4>
            else
                fat_entry16 = htol16((uint16_t) cluster_next);
    1c08:	fa 82       	std	Y+2, r15	; 0x02
    1c0a:	e9 82       	std	Y+1, r14	; 0x01

            if(!device_write(fat_offset + cluster_new * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    1c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0e:	78 85       	ldd	r23, Y+8	; 0x08
    1c10:	89 85       	ldd	r24, Y+9	; 0x09
    1c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c14:	ae 01       	movw	r20, r28
    1c16:	4f 5f       	subi	r20, 0xFF	; 255
    1c18:	5f 4f       	sbci	r21, 0xFF	; 255
    1c1a:	22 e0       	ldi	r18, 0x02	; 2
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	a8 8d       	ldd	r26, Y+24	; 0x18
    1c20:	b9 8d       	ldd	r27, Y+25	; 0x19
    1c22:	fd 01       	movw	r30, r26
    1c24:	09 95       	icall
    1c26:	88 23       	and	r24, r24
    1c28:	e1 f1       	breq	.+120    	; 0x1ca2 <fat_append_clusters+0x23a>
                break;
        }

        cluster_next = cluster_new;
        if(--count_left == 0)
    1c2a:	2c 89       	ldd	r18, Y+20	; 0x14
    1c2c:	3d 89       	ldd	r19, Y+21	; 0x15
    1c2e:	4e 89       	ldd	r20, Y+22	; 0x16
    1c30:	5f 89       	ldd	r21, Y+23	; 0x17
    1c32:	21 50       	subi	r18, 0x01	; 1
    1c34:	30 40       	sbci	r19, 0x00	; 0
    1c36:	40 40       	sbci	r20, 0x00	; 0
    1c38:	50 40       	sbci	r21, 0x00	; 0
    1c3a:	2c 8b       	std	Y+20, r18	; 0x14
    1c3c:	3d 8b       	std	Y+21, r19	; 0x15
    1c3e:	4e 8b       	std	Y+22, r20	; 0x16
    1c40:	5f 8b       	std	Y+23, r21	; 0x17
    1c42:	21 15       	cp	r18, r1
    1c44:	31 05       	cpc	r19, r1
    1c46:	41 05       	cpc	r20, r1
    1c48:	51 05       	cpc	r21, r1
    1c4a:	19 f4       	brne	.+6      	; 0x1c52 <fat_append_clusters+0x1ea>
    1c4c:	82 01       	movw	r16, r4
    1c4e:	71 01       	movw	r14, r2
    1c50:	31 c0       	rjmp	.+98     	; 0x1cb4 <fat_append_clusters+0x24c>
    1c52:	82 01       	movw	r16, r4
    1c54:	71 01       	movw	r14, r2
        cluster_max = fs->header.fat_size / sizeof(fat_entry32);
    else
#endif
        cluster_max = fs->header.fat_size / sizeof(fat_entry16);

    for(cluster_t cluster_new = 2; cluster_new < cluster_max; ++cluster_new)
    1c56:	08 94       	sec
    1c58:	21 1c       	adc	r2, r1
    1c5a:	31 1c       	adc	r3, r1
    1c5c:	41 1c       	adc	r4, r1
    1c5e:	51 1c       	adc	r5, r1
    1c60:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c62:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c64:	ad 85       	ldd	r26, Y+13	; 0x0d
    1c66:	be 85       	ldd	r27, Y+14	; 0x0e
    1c68:	04 96       	adiw	r24, 0x04	; 4
    1c6a:	a1 1d       	adc	r26, r1
    1c6c:	b1 1d       	adc	r27, r1
    1c6e:	8b 87       	std	Y+11, r24	; 0x0b
    1c70:	9c 87       	std	Y+12, r25	; 0x0c
    1c72:	ad 87       	std	Y+13, r26	; 0x0d
    1c74:	be 87       	std	Y+14, r27	; 0x0e
    1c76:	2f 81       	ldd	r18, Y+7	; 0x07
    1c78:	38 85       	ldd	r19, Y+8	; 0x08
    1c7a:	49 85       	ldd	r20, Y+9	; 0x09
    1c7c:	5a 85       	ldd	r21, Y+10	; 0x0a
    1c7e:	2e 5f       	subi	r18, 0xFE	; 254
    1c80:	3f 4f       	sbci	r19, 0xFF	; 255
    1c82:	4f 4f       	sbci	r20, 0xFF	; 255
    1c84:	5f 4f       	sbci	r21, 0xFF	; 255
    1c86:	2f 83       	std	Y+7, r18	; 0x07
    1c88:	38 87       	std	Y+8, r19	; 0x08
    1c8a:	49 87       	std	Y+9, r20	; 0x09
    1c8c:	5a 87       	std	Y+10, r21	; 0x0a
    1c8e:	88 89       	ldd	r24, Y+16	; 0x10
    1c90:	99 89       	ldd	r25, Y+17	; 0x11
    1c92:	aa 89       	ldd	r26, Y+18	; 0x12
    1c94:	bb 89       	ldd	r27, Y+19	; 0x13
    1c96:	28 16       	cp	r2, r24
    1c98:	39 06       	cpc	r3, r25
    1c9a:	4a 06       	cpc	r4, r26
    1c9c:	5b 06       	cpc	r5, r27
    1c9e:	08 f4       	brcc	.+2      	; 0x1ca2 <fat_append_clusters+0x23a>
    1ca0:	5c cf       	rjmp	.-328    	; 0x1b5a <fat_append_clusters+0xf2>
            break;
    }

    do
    {
        if(count_left > 0)
    1ca2:	2c 89       	ldd	r18, Y+20	; 0x14
    1ca4:	3d 89       	ldd	r19, Y+21	; 0x15
    1ca6:	4e 89       	ldd	r20, Y+22	; 0x16
    1ca8:	5f 89       	ldd	r21, Y+23	; 0x17
    1caa:	21 15       	cp	r18, r1
    1cac:	31 05       	cpc	r19, r1
    1cae:	41 05       	cpc	r20, r1
    1cb0:	51 05       	cpc	r21, r1
    1cb2:	d1 f5       	brne	.+116    	; 0x1d28 <fat_append_clusters+0x2c0>
            break;

        /* We allocated a new cluster chain. Now join
         * it with the existing one (if any).
         */
        if(cluster_num >= 2)
    1cb4:	32 e0       	ldi	r19, 0x02	; 2
    1cb6:	63 16       	cp	r6, r19
    1cb8:	71 04       	cpc	r7, r1
    1cba:	81 04       	cpc	r8, r1
    1cbc:	91 04       	cpc	r9, r1
    1cbe:	e8 f1       	brcs	.+122    	; 0x1d3a <fat_append_clusters+0x2d2>
        {
#if FAT_FAT32_SUPPORT
            if(is_fat32)
    1cc0:	4f 85       	ldd	r20, Y+15	; 0x0f
    1cc2:	44 23       	and	r20, r20
    1cc4:	d9 f0       	breq	.+54     	; 0x1cfc <fat_append_clusters+0x294>
            {
                fat_entry32 = htol32(cluster_next);
    1cc6:	eb 82       	std	Y+3, r14	; 0x03
    1cc8:	fc 82       	std	Y+4, r15	; 0x04
    1cca:	0d 83       	std	Y+5, r16	; 0x05
    1ccc:	1e 83       	std	Y+6, r17	; 0x06

                if(!device_write(fat_offset + cluster_num * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
    1cce:	a2 e0       	ldi	r26, 0x02	; 2
    1cd0:	66 0c       	add	r6, r6
    1cd2:	77 1c       	adc	r7, r7
    1cd4:	88 1c       	adc	r8, r8
    1cd6:	99 1c       	adc	r9, r9
    1cd8:	aa 95       	dec	r26
    1cda:	d1 f7       	brne	.-12     	; 0x1cd0 <fat_append_clusters+0x268>
    1cdc:	a6 0c       	add	r10, r6
    1cde:	b7 1c       	adc	r11, r7
    1ce0:	c8 1c       	adc	r12, r8
    1ce2:	d9 1c       	adc	r13, r9
    1ce4:	c6 01       	movw	r24, r12
    1ce6:	b5 01       	movw	r22, r10
    1ce8:	ae 01       	movw	r20, r28
    1cea:	4d 5f       	subi	r20, 0xFD	; 253
    1cec:	5f 4f       	sbci	r21, 0xFF	; 255
    1cee:	24 e0       	ldi	r18, 0x04	; 4
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	a8 8d       	ldd	r26, Y+24	; 0x18
    1cf4:	b9 8d       	ldd	r27, Y+25	; 0x19
    1cf6:	fd 01       	movw	r30, r26
    1cf8:	09 95       	icall
    1cfa:	14 c0       	rjmp	.+40     	; 0x1d24 <fat_append_clusters+0x2bc>
                    break;
            }
            else
#endif
            {
                fat_entry16 = htol16((uint16_t) cluster_next);
    1cfc:	fa 82       	std	Y+2, r15	; 0x02
    1cfe:	e9 82       	std	Y+1, r14	; 0x01

                if(!device_write(fat_offset + cluster_num * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    1d00:	66 0c       	add	r6, r6
    1d02:	77 1c       	adc	r7, r7
    1d04:	88 1c       	adc	r8, r8
    1d06:	99 1c       	adc	r9, r9
    1d08:	a6 0c       	add	r10, r6
    1d0a:	b7 1c       	adc	r11, r7
    1d0c:	c8 1c       	adc	r12, r8
    1d0e:	d9 1c       	adc	r13, r9
    1d10:	c6 01       	movw	r24, r12
    1d12:	b5 01       	movw	r22, r10
    1d14:	ae 01       	movw	r20, r28
    1d16:	4f 5f       	subi	r20, 0xFF	; 255
    1d18:	5f 4f       	sbci	r21, 0xFF	; 255
    1d1a:	22 e0       	ldi	r18, 0x02	; 2
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	e8 8d       	ldd	r30, Y+24	; 0x18
    1d20:	f9 8d       	ldd	r31, Y+25	; 0x19
    1d22:	09 95       	icall
    1d24:	88 23       	and	r24, r24
    1d26:	49 f4       	brne	.+18     	; 0x1d3a <fat_append_clusters+0x2d2>
    } while(0);

    /* No space left on device or writing error.
     * Free up all clusters already allocated.
     */
    fat_free_clusters(fs, cluster_next);
    1d28:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d2a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d2c:	b8 01       	movw	r22, r16
    1d2e:	a7 01       	movw	r20, r14
    1d30:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fat_free_clusters>

    return 0;
    1d34:	ee 24       	eor	r14, r14
    1d36:	ff 24       	eor	r15, r15
    1d38:	87 01       	movw	r16, r14
}
    1d3a:	b7 01       	movw	r22, r14
    1d3c:	c8 01       	movw	r24, r16
    1d3e:	6d 96       	adiw	r28, 0x1d	; 29
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	1f 91       	pop	r17
    1d50:	0f 91       	pop	r16
    1d52:	ff 90       	pop	r15
    1d54:	ef 90       	pop	r14
    1d56:	df 90       	pop	r13
    1d58:	cf 90       	pop	r12
    1d5a:	bf 90       	pop	r11
    1d5c:	af 90       	pop	r10
    1d5e:	9f 90       	pop	r9
    1d60:	8f 90       	pop	r8
    1d62:	7f 90       	pop	r7
    1d64:	6f 90       	pop	r6
    1d66:	5f 90       	pop	r5
    1d68:	4f 90       	pop	r4
    1d6a:	3f 90       	pop	r3
    1d6c:	2f 90       	pop	r2
    1d6e:	08 95       	ret

00001d70 <fat_clear_cluster_callback>:
 * Callback function for clearing a cluster.
 */
uintptr_t fat_clear_cluster_callback(uint8_t* buffer, offset_t offset, void* p)
{
    return 16;
}
    1d70:	80 e1       	ldi	r24, 0x10	; 16
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	08 95       	ret

00001d76 <fat_close_file>:
 *
 * \param[in] fd The file handle of the file to close.
 * \see fat_open_file
 */
void fat_close_file(struct fat_file_struct* fd)
{
    1d76:	fc 01       	movw	r30, r24
    if(fd)
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	11 f0       	breq	.+4      	; 0x1d80 <fat_close_file+0xa>
#if USE_DYNAMIC_MEMORY
        free(fd);
#else
        fd->fs = 0;
    1d7c:	11 82       	std	Z+1, r1	; 0x01
    1d7e:	10 82       	st	Z, r1
    1d80:	08 95       	ret

00001d82 <fat_read_file>:
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat_write_file
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
{
    1d82:	2f 92       	push	r2
    1d84:	3f 92       	push	r3
    1d86:	4f 92       	push	r4
    1d88:	5f 92       	push	r5
    1d8a:	6f 92       	push	r6
    1d8c:	7f 92       	push	r7
    1d8e:	8f 92       	push	r8
    1d90:	9f 92       	push	r9
    1d92:	af 92       	push	r10
    1d94:	bf 92       	push	r11
    1d96:	cf 92       	push	r12
    1d98:	df 92       	push	r13
    1d9a:	ef 92       	push	r14
    1d9c:	ff 92       	push	r15
    1d9e:	0f 93       	push	r16
    1da0:	1f 93       	push	r17
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
    1daa:	2c 97       	sbiw	r28, 0x0c	; 12
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	de bf       	out	0x3e, r29	; 62
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	cd bf       	out	0x3d, r28	; 61
    1db6:	9c 83       	std	Y+4, r25	; 0x04
    1db8:	8b 83       	std	Y+3, r24	; 0x03
    1dba:	7e 83       	std	Y+6, r23	; 0x06
    1dbc:	6d 83       	std	Y+5, r22	; 0x05
    1dbe:	58 87       	std	Y+8, r21	; 0x08
    1dc0:	4f 83       	std	Y+7, r20	; 0x07
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <fat_read_file+0x46>
    1dc6:	22 c1       	rjmp	.+580    	; 0x200c <fat_read_file+0x28a>
    1dc8:	67 2b       	or	r22, r23
    1dca:	09 f4       	brne	.+2      	; 0x1dce <fat_read_file+0x4c>
    1dcc:	1f c1       	rjmp	.+574    	; 0x200c <fat_read_file+0x28a>
    1dce:	45 2b       	or	r20, r21
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <fat_read_file+0x52>
    1dd2:	1c c1       	rjmp	.+568    	; 0x200c <fat_read_file+0x28a>
        return -1;

    /* determine number of bytes to read */
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	9f 96       	adiw	r26, 0x2f	; 47
    1dd8:	6d 90       	ld	r6, X+
    1dda:	7d 90       	ld	r7, X+
    1ddc:	8d 90       	ld	r8, X+
    1dde:	9c 90       	ld	r9, X
    1de0:	d2 97       	sbiw	r26, 0x32	; 50
    1de2:	97 96       	adiw	r26, 0x27	; 39
    1de4:	2d 91       	ld	r18, X+
    1de6:	3d 91       	ld	r19, X+
    1de8:	4d 91       	ld	r20, X+
    1dea:	5c 91       	ld	r21, X
    1dec:	9a 97       	sbiw	r26, 0x2a	; 42
    1dee:	ef 81       	ldd	r30, Y+7	; 0x07
    1df0:	f8 85       	ldd	r31, Y+8	; 0x08
    1df2:	cf 01       	movw	r24, r30
    1df4:	a0 e0       	ldi	r26, 0x00	; 0
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	86 0d       	add	r24, r6
    1dfa:	97 1d       	adc	r25, r7
    1dfc:	a8 1d       	adc	r26, r8
    1dfe:	b9 1d       	adc	r27, r9
    1e00:	28 17       	cp	r18, r24
    1e02:	39 07       	cpc	r19, r25
    1e04:	4a 07       	cpc	r20, r26
    1e06:	5b 07       	cpc	r21, r27
    1e08:	40 f4       	brcc	.+16     	; 0x1e1a <fat_read_file+0x98>
        buffer_len = fd->dir_entry.file_size - fd->pos;
    1e0a:	b9 01       	movw	r22, r18
    1e0c:	66 19       	sub	r22, r6
    1e0e:	77 09       	sbc	r23, r7
    1e10:	78 87       	std	Y+8, r23	; 0x08
    1e12:	6f 83       	std	Y+7, r22	; 0x07
    if(buffer_len == 0)
    1e14:	67 2b       	or	r22, r23
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <fat_read_file+0x98>
    1e18:	fc c0       	rjmp	.+504    	; 0x2012 <fat_read_file+0x290>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    1e1a:	ab 81       	ldd	r26, Y+3	; 0x03
    1e1c:	bc 81       	ldd	r27, Y+4	; 0x04
    1e1e:	ed 91       	ld	r30, X+
    1e20:	fc 91       	ld	r31, X
    1e22:	11 97       	sbiw	r26, 0x01	; 1
    1e24:	20 89       	ldd	r18, Z+16	; 0x10
    1e26:	31 89       	ldd	r19, Z+17	; 0x11
    1e28:	3a 83       	std	Y+2, r19	; 0x02
    1e2a:	29 83       	std	Y+1, r18	; 0x01
    cluster_t cluster_num = fd->pos_cluster;
    1e2c:	d3 96       	adiw	r26, 0x33	; 51
    1e2e:	ad 90       	ld	r10, X+
    1e30:	bd 90       	ld	r11, X+
    1e32:	cd 90       	ld	r12, X+
    1e34:	dc 90       	ld	r13, X
    1e36:	d6 97       	sbiw	r26, 0x36	; 54
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start reading */
    if(!cluster_num)
    1e38:	a1 14       	cp	r10, r1
    1e3a:	b1 04       	cpc	r11, r1
    1e3c:	c1 04       	cpc	r12, r1
    1e3e:	d1 04       	cpc	r13, r1
    1e40:	09 f0       	breq	.+2      	; 0x1e44 <fat_read_file+0xc2>
    1e42:	47 c0       	rjmp	.+142    	; 0x1ed2 <fat_read_file+0x150>
    {
        cluster_num = fd->dir_entry.cluster;
    1e44:	93 96       	adiw	r26, 0x23	; 35
    1e46:	ad 90       	ld	r10, X+
    1e48:	bd 90       	ld	r11, X+
    1e4a:	cd 90       	ld	r12, X+
    1e4c:	dc 90       	ld	r13, X
    1e4e:	96 97       	sbiw	r26, 0x26	; 38
        
        if(!cluster_num)
    1e50:	a1 14       	cp	r10, r1
    1e52:	b1 04       	cpc	r11, r1
    1e54:	c1 04       	cpc	r12, r1
    1e56:	d1 04       	cpc	r13, r1
    1e58:	39 f4       	brne	.+14     	; 0x1e68 <fat_read_file+0xe6>
        {
            if(!fd->pos)
    1e5a:	61 14       	cp	r6, r1
    1e5c:	71 04       	cpc	r7, r1
    1e5e:	81 04       	cpc	r8, r1
    1e60:	91 04       	cpc	r9, r1
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <fat_read_file+0xe4>
    1e64:	d6 c0       	rjmp	.+428    	; 0x2012 <fat_read_file+0x290>
    1e66:	d2 c0       	rjmp	.+420    	; 0x200c <fat_read_file+0x28a>
                return 0;
            else
                return -1;
        }

        if(fd->pos)
    1e68:	61 14       	cp	r6, r1
    1e6a:	71 04       	cpc	r7, r1
    1e6c:	81 04       	cpc	r8, r1
    1e6e:	91 04       	cpc	r9, r1
    1e70:	81 f1       	breq	.+96     	; 0x1ed2 <fat_read_file+0x150>
    1e72:	84 01       	movw	r16, r8
    1e74:	73 01       	movw	r14, r6
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
    1e76:	69 81       	ldd	r22, Y+1	; 0x01
    1e78:	7a 81       	ldd	r23, Y+2	; 0x02
    1e7a:	1b 01       	movw	r2, r22
    1e7c:	44 24       	eor	r4, r4
    1e7e:	55 24       	eor	r5, r5
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num)
    1e80:	88 27       	eor	r24, r24
    1e82:	99 27       	eor	r25, r25
    1e84:	dc 01       	movw	r26, r24
    1e86:	82 19       	sub	r24, r2
    1e88:	93 09       	sbc	r25, r3
    1e8a:	a4 09       	sbc	r26, r4
    1e8c:	b5 09       	sbc	r27, r5
    1e8e:	89 87       	std	Y+9, r24	; 0x09
    1e90:	9a 87       	std	Y+10, r25	; 0x0a
    1e92:	ab 87       	std	Y+11, r26	; 0x0b
    1e94:	bc 87       	std	Y+12, r27	; 0x0c
    1e96:	18 c0       	rjmp	.+48     	; 0x1ec8 <fat_read_file+0x146>
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
    1e98:	ab 81       	ldd	r26, Y+3	; 0x03
    1e9a:	bc 81       	ldd	r27, Y+4	; 0x04
    1e9c:	8d 91       	ld	r24, X+
    1e9e:	9c 91       	ld	r25, X
    1ea0:	b6 01       	movw	r22, r12
    1ea2:	a5 01       	movw	r20, r10
    1ea4:	0e 94 a5 0b 	call	0x174a	; 0x174a <fat_get_next_cluster>
    1ea8:	5b 01       	movw	r10, r22
    1eaa:	6c 01       	movw	r12, r24
                if(!cluster_num)
    1eac:	61 15       	cp	r22, r1
    1eae:	71 05       	cpc	r23, r1
    1eb0:	81 05       	cpc	r24, r1
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	09 f4       	brne	.+2      	; 0x1eb8 <fat_read_file+0x136>
    1eb6:	aa c0       	rjmp	.+340    	; 0x200c <fat_read_file+0x28a>
    1eb8:	69 85       	ldd	r22, Y+9	; 0x09
    1eba:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ebc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ebe:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ec0:	e6 0e       	add	r14, r22
    1ec2:	f7 1e       	adc	r15, r23
    1ec4:	08 1f       	adc	r16, r24
    1ec6:	19 1f       	adc	r17, r25
        }

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
    1ec8:	e2 14       	cp	r14, r2
    1eca:	f3 04       	cpc	r15, r3
    1ecc:	04 05       	cpc	r16, r4
    1ece:	15 05       	cpc	r17, r5
    1ed0:	18 f7       	brcc	.-58     	; 0x1e98 <fat_read_file+0x116>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	4c 01       	movw	r8, r24
    1eda:	86 20       	and	r8, r6
    1edc:	97 20       	and	r9, r7
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	9a 83       	std	Y+2, r25	; 0x02
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	ef 80       	ldd	r14, Y+7	; 0x07
    1ee6:	f8 84       	ldd	r15, Y+8	; 0x08
    
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    1ee8:	ab 81       	ldd	r26, Y+3	; 0x03
    1eea:	bc 81       	ldd	r27, Y+4	; 0x04
    1eec:	6d 90       	ld	r6, X+
    1eee:	7c 90       	ld	r7, X
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    1ef0:	61 14       	cp	r6, r1
    1ef2:	71 04       	cpc	r7, r1
    1ef4:	f9 f0       	breq	.+62     	; 0x1f34 <fat_read_file+0x1b2>
    1ef6:	b2 e0       	ldi	r27, 0x02	; 2
    1ef8:	ab 16       	cp	r10, r27
    1efa:	b1 04       	cpc	r11, r1
    1efc:	c1 04       	cpc	r12, r1
    1efe:	d1 04       	cpc	r13, r1
    1f00:	c8 f0       	brcs	.+50     	; 0x1f34 <fat_read_file+0x1b2>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    1f02:	c6 01       	movw	r24, r12
    1f04:	b5 01       	movw	r22, r10
    1f06:	62 50       	subi	r22, 0x02	; 2
    1f08:	70 40       	sbci	r23, 0x00	; 0
    1f0a:	80 40       	sbci	r24, 0x00	; 0
    1f0c:	90 40       	sbci	r25, 0x00	; 0
    1f0e:	f3 01       	movw	r30, r6
    1f10:	20 89       	ldd	r18, Z+16	; 0x10
    1f12:	31 89       	ldd	r19, Z+17	; 0x11
    1f14:	40 e0       	ldi	r20, 0x00	; 0
    1f16:	50 e0       	ldi	r21, 0x00	; 0
    1f18:	0e 94 23 24 	call	0x4846	; 0x4846 <__mulsi3>
    1f1c:	9b 01       	movw	r18, r22
    1f1e:	ac 01       	movw	r20, r24
    1f20:	f3 01       	movw	r30, r6
    1f22:	82 89       	ldd	r24, Z+18	; 0x12
    1f24:	93 89       	ldd	r25, Z+19	; 0x13
    1f26:	a4 89       	ldd	r26, Z+20	; 0x14
    1f28:	b5 89       	ldd	r27, Z+21	; 0x15
    1f2a:	28 0f       	add	r18, r24
    1f2c:	39 1f       	adc	r19, r25
    1f2e:	4a 1f       	adc	r20, r26
    1f30:	5b 1f       	adc	r21, r27
    1f32:	04 c0       	rjmp	.+8      	; 0x1f3c <fat_read_file+0x1ba>
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e0       	ldi	r20, 0x00	; 0
    1f3a:	50 e0       	ldi	r21, 0x00	; 0
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
        uint16_t copy_length = cluster_size - first_cluster_offset;
    1f3c:	09 81       	ldd	r16, Y+1	; 0x01
    1f3e:	1a 81       	ldd	r17, Y+2	; 0x02
    1f40:	08 19       	sub	r16, r8
    1f42:	19 09       	sbc	r17, r9
    1f44:	e0 16       	cp	r14, r16
    1f46:	f1 06       	cpc	r15, r17
    1f48:	08 f4       	brcc	.+2      	; 0x1f4c <fat_read_file+0x1ca>
    1f4a:	87 01       	movw	r16, r14
        if(copy_length > buffer_left)
            copy_length = buffer_left;

        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
    1f4c:	d3 01       	movw	r26, r6
    1f4e:	ed 91       	ld	r30, X+
    1f50:	fc 91       	ld	r31, X
    1f52:	c4 01       	movw	r24, r8
    1f54:	a0 e0       	ldi	r26, 0x00	; 0
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	28 0f       	add	r18, r24
    1f5a:	39 1f       	adc	r19, r25
    1f5c:	4a 1f       	adc	r20, r26
    1f5e:	5b 1f       	adc	r21, r27
    1f60:	01 90       	ld	r0, Z+
    1f62:	f0 81       	ld	r31, Z
    1f64:	e0 2d       	mov	r30, r0
    1f66:	ca 01       	movw	r24, r20
    1f68:	b9 01       	movw	r22, r18
    1f6a:	4d 81       	ldd	r20, Y+5	; 0x05
    1f6c:	5e 81       	ldd	r21, Y+6	; 0x06
    1f6e:	98 01       	movw	r18, r16
    1f70:	09 95       	icall
    1f72:	88 23       	and	r24, r24
    1f74:	89 f1       	breq	.+98     	; 0x1fd8 <fat_read_file+0x256>
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
        buffer_left -= copy_length;
    1f76:	e0 1a       	sub	r14, r16
    1f78:	f1 0a       	sbc	r15, r17
        fd->pos += copy_length;
    1f7a:	c8 01       	movw	r24, r16
    1f7c:	a0 e0       	ldi	r26, 0x00	; 0
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	eb 81       	ldd	r30, Y+3	; 0x03
    1f82:	fc 81       	ldd	r31, Y+4	; 0x04
    1f84:	27 a5       	ldd	r18, Z+47	; 0x2f
    1f86:	30 a9       	ldd	r19, Z+48	; 0x30
    1f88:	41 a9       	ldd	r20, Z+49	; 0x31
    1f8a:	52 a9       	ldd	r21, Z+50	; 0x32
    1f8c:	28 0f       	add	r18, r24
    1f8e:	39 1f       	adc	r19, r25
    1f90:	4a 1f       	adc	r20, r26
    1f92:	5b 1f       	adc	r21, r27
    1f94:	df 01       	movw	r26, r30
    1f96:	27 a7       	std	Z+47, r18	; 0x2f
    1f98:	30 ab       	std	Z+48, r19	; 0x30
    1f9a:	41 ab       	std	Z+49, r20	; 0x31
    1f9c:	52 ab       	std	Z+50, r21	; 0x32

        if(first_cluster_offset + copy_length >= cluster_size)
    1f9e:	c8 01       	movw	r24, r16
    1fa0:	88 0d       	add	r24, r8
    1fa2:	99 1d       	adc	r25, r9
    1fa4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa8:	8e 17       	cp	r24, r30
    1faa:	9f 07       	cpc	r25, r31
    1fac:	e0 f0       	brcs	.+56     	; 0x1fe6 <fat_read_file+0x264>
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
    1fae:	8d 91       	ld	r24, X+
    1fb0:	9c 91       	ld	r25, X
    1fb2:	b6 01       	movw	r22, r12
    1fb4:	a5 01       	movw	r20, r10
    1fb6:	0e 94 a5 0b 	call	0x174a	; 0x174a <fat_get_next_cluster>
    1fba:	5b 01       	movw	r10, r22
    1fbc:	6c 01       	movw	r12, r24
    1fbe:	61 15       	cp	r22, r1
    1fc0:	71 05       	cpc	r23, r1
    1fc2:	81 05       	cpc	r24, r1
    1fc4:	91 05       	cpc	r25, r1
    1fc6:	69 f4       	brne	.+26     	; 0x1fe2 <fat_read_file+0x260>
            {
                first_cluster_offset = 0;
            }
            else
            {
                fd->pos_cluster = 0;
    1fc8:	ab 81       	ldd	r26, Y+3	; 0x03
    1fca:	bc 81       	ldd	r27, Y+4	; 0x04
    1fcc:	d3 96       	adiw	r26, 0x33	; 51
    1fce:	1d 92       	st	X+, r1
    1fd0:	1d 92       	st	X+, r1
    1fd2:	1d 92       	st	X+, r1
    1fd4:	1c 92       	st	X, r1
    1fd6:	d6 97       	sbiw	r26, 0x36	; 54
                return buffer_len - buffer_left;
    1fd8:	4f 81       	ldd	r20, Y+7	; 0x07
    1fda:	58 85       	ldd	r21, Y+8	; 0x08
    1fdc:	4e 19       	sub	r20, r14
    1fde:	5f 09       	sbc	r21, r15
    1fe0:	1a c0       	rjmp	.+52     	; 0x2016 <fat_read_file+0x294>
    1fe2:	88 24       	eor	r8, r8
    1fe4:	99 24       	eor	r9, r9
            }
        }

        fd->pos_cluster = cluster_num;
    1fe6:	eb 81       	ldd	r30, Y+3	; 0x03
    1fe8:	fc 81       	ldd	r31, Y+4	; 0x04
    1fea:	a3 aa       	std	Z+51, r10	; 0x33
    1fec:	b4 aa       	std	Z+52, r11	; 0x34
    1fee:	c5 aa       	std	Z+53, r12	; 0x35
    1ff0:	d6 aa       	std	Z+54, r13	; 0x36

    } while(buffer_left > 0); /* check if we are done */
    1ff2:	e1 14       	cp	r14, r1
    1ff4:	f1 04       	cpc	r15, r1
    1ff6:	39 f0       	breq	.+14     	; 0x2006 <fat_read_file+0x284>
        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
    1ff8:	2d 81       	ldd	r18, Y+5	; 0x05
    1ffa:	3e 81       	ldd	r19, Y+6	; 0x06
    1ffc:	20 0f       	add	r18, r16
    1ffe:	31 1f       	adc	r19, r17
    2000:	3e 83       	std	Y+6, r19	; 0x06
    2002:	2d 83       	std	Y+5, r18	; 0x05
    2004:	71 cf       	rjmp	.-286    	; 0x1ee8 <fat_read_file+0x166>

        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    return buffer_len;
    2006:	4f 81       	ldd	r20, Y+7	; 0x07
    2008:	58 85       	ldd	r21, Y+8	; 0x08
    200a:	05 c0       	rjmp	.+10     	; 0x2016 <fat_read_file+0x294>
    200c:	4f ef       	ldi	r20, 0xFF	; 255
    200e:	5f ef       	ldi	r21, 0xFF	; 255
    2010:	02 c0       	rjmp	.+4      	; 0x2016 <fat_read_file+0x294>
    2012:	40 e0       	ldi	r20, 0x00	; 0
    2014:	50 e0       	ldi	r21, 0x00	; 0
}
    2016:	ca 01       	movw	r24, r20
    2018:	2c 96       	adiw	r28, 0x0c	; 12
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	1f 91       	pop	r17
    202a:	0f 91       	pop	r16
    202c:	ff 90       	pop	r15
    202e:	ef 90       	pop	r14
    2030:	df 90       	pop	r13
    2032:	cf 90       	pop	r12
    2034:	bf 90       	pop	r11
    2036:	af 90       	pop	r10
    2038:	9f 90       	pop	r9
    203a:	8f 90       	pop	r8
    203c:	7f 90       	pop	r7
    203e:	6f 90       	pop	r6
    2040:	5f 90       	pop	r5
    2042:	4f 90       	pop	r4
    2044:	3f 90       	pop	r3
    2046:	2f 90       	pop	r2
    2048:	08 95       	ret

0000204a <fat_tell_file>:
    return 1;
}

/* +ELASTICSHEEP */
uint8_t fat_tell_file(struct fat_file_struct* fd, uint32_t* offset)
{
    204a:	dc 01       	movw	r26, r24
    204c:	fb 01       	movw	r30, r22
  if (offset != NULL)
    204e:	61 15       	cp	r22, r1
    2050:	71 05       	cpc	r23, r1
    2052:	51 f0       	breq	.+20     	; 0x2068 <fat_tell_file+0x1e>
    *offset = (uint32_t)fd->pos;
    2054:	9f 96       	adiw	r26, 0x2f	; 47
    2056:	8d 91       	ld	r24, X+
    2058:	9d 91       	ld	r25, X+
    205a:	0d 90       	ld	r0, X+
    205c:	bc 91       	ld	r27, X
    205e:	a0 2d       	mov	r26, r0
    2060:	80 83       	st	Z, r24
    2062:	91 83       	std	Z+1, r25	; 0x01
    2064:	a2 83       	std	Z+2, r26	; 0x02
    2066:	b3 83       	std	Z+3, r27	; 0x03
  
  return 1;
}
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	08 95       	ret

0000206c <fat_close_dir>:
 *
 * \param[in] dd The directory descriptor to close.
 * \see fat_open_dir
 */
void fat_close_dir(struct fat_dir_struct* dd)
{
    206c:	fc 01       	movw	r30, r24
    if(dd)
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	11 f0       	breq	.+4      	; 0x2076 <fat_close_dir+0xa>
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    2072:	11 82       	std	Z+1, r1	; 0x01
    2074:	10 82       	st	Z, r1
    2076:	08 95       	ret

00002078 <fat_reset_dir>:
 * \param[in] dd The directory handle to reset.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    2078:	fc 01       	movw	r30, r24
    if(!dd)
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	11 f4       	brne	.+4      	; 0x2082 <fat_reset_dir+0xa>
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	08 95       	ret
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    2082:	83 a1       	ldd	r24, Z+35	; 0x23
    2084:	94 a1       	ldd	r25, Z+36	; 0x24
    2086:	a5 a1       	ldd	r26, Z+37	; 0x25
    2088:	b6 a1       	ldd	r27, Z+38	; 0x26
    208a:	87 a7       	std	Z+47, r24	; 0x2f
    208c:	90 ab       	std	Z+48, r25	; 0x30
    208e:	a1 ab       	std	Z+49, r26	; 0x31
    2090:	b2 ab       	std	Z+50, r27	; 0x32
    dd->entry_offset = 0;
    2092:	14 aa       	std	Z+52, r1	; 0x34
    2094:	13 aa       	std	Z+51, r1	; 0x33
    2096:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
}
    2098:	08 95       	ret

0000209a <fat_dir_entry_read_callback>:
/**
 * \ingroup fat_fs
 * Callback function for reading a directory entry.
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
{
    209a:	cf 92       	push	r12
    209c:	df 92       	push	r13
    209e:	ef 92       	push	r14
    20a0:	ff 92       	push	r15
    20a2:	0f 93       	push	r16
    20a4:	1f 93       	push	r17
    20a6:	cf 93       	push	r28
    20a8:	df 93       	push	r29
    20aa:	8c 01       	movw	r16, r24
    20ac:	6a 01       	movw	r12, r20
    20ae:	7b 01       	movw	r14, r22
    struct fat_read_dir_callback_arg* arg = p;
    20b0:	b9 01       	movw	r22, r18
    struct fat_dir_entry_struct* dir_entry = arg->dir_entry;
    20b2:	d9 01       	movw	r26, r18
    20b4:	cd 91       	ld	r28, X+
    20b6:	dc 91       	ld	r29, X
    20b8:	11 97       	sbiw	r26, 0x01	; 1

    arg->bytes_read += 32;
    20ba:	12 96       	adiw	r26, 0x02	; 2
    20bc:	8d 91       	ld	r24, X+
    20be:	9c 91       	ld	r25, X
    20c0:	13 97       	sbiw	r26, 0x03	; 3
    20c2:	80 96       	adiw	r24, 0x20	; 32
    20c4:	13 96       	adiw	r26, 0x03	; 3
    20c6:	9c 93       	st	X, r25
    20c8:	8e 93       	st	-X, r24
    20ca:	12 97       	sbiw	r26, 0x02	; 2

    /* skip deleted or empty entries */
    if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
    20cc:	f8 01       	movw	r30, r16
    20ce:	80 81       	ld	r24, Z
    20d0:	85 3e       	cpi	r24, 0xE5	; 229
    20d2:	09 f4       	brne	.+2      	; 0x20d6 <fat_dir_entry_read_callback+0x3c>
    20d4:	b9 c0       	rjmp	.+370    	; 0x2248 <fat_dir_entry_read_callback+0x1ae>
    20d6:	88 23       	and	r24, r24
    20d8:	09 f4       	brne	.+2      	; 0x20dc <fat_dir_entry_read_callback+0x42>
    20da:	b6 c0       	rjmp	.+364    	; 0x2248 <fat_dir_entry_read_callback+0x1ae>
        return 1;

    if(!dir_entry->entry_offset)
    20dc:	89 a5       	ldd	r24, Y+41	; 0x29
    20de:	9a a5       	ldd	r25, Y+42	; 0x2a
    20e0:	ab a5       	ldd	r26, Y+43	; 0x2b
    20e2:	bc a5       	ldd	r27, Y+44	; 0x2c
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	a1 05       	cpc	r26, r1
    20e8:	b1 05       	cpc	r27, r1
    20ea:	21 f4       	brne	.+8      	; 0x20f4 <fat_dir_entry_read_callback+0x5a>
        dir_entry->entry_offset = offset;
    20ec:	c9 a6       	std	Y+41, r12	; 0x29
    20ee:	da a6       	std	Y+42, r13	; 0x2a
    20f0:	eb a6       	std	Y+43, r14	; 0x2b
    20f2:	fc a6       	std	Y+44, r15	; 0x2c
 * \returns 0 on failure, 1 on success and 2 if the
 *          directory entry is complete.
 */
uint8_t fat_interpret_dir_entry(struct fat_dir_entry_struct* dir_entry, const uint8_t* raw_entry)
{
    if(!dir_entry || !raw_entry || !raw_entry[0])
    20f4:	20 97       	sbiw	r28, 0x00	; 0
    20f6:	09 f4       	brne	.+2      	; 0x20fa <fat_dir_entry_read_callback+0x60>
    20f8:	a9 c0       	rjmp	.+338    	; 0x224c <fat_dir_entry_read_callback+0x1b2>
    20fa:	01 15       	cp	r16, r1
    20fc:	11 05       	cpc	r17, r1
    20fe:	09 f4       	brne	.+2      	; 0x2102 <fat_dir_entry_read_callback+0x68>
    2100:	a5 c0       	rjmp	.+330    	; 0x224c <fat_dir_entry_read_callback+0x1b2>
    2102:	d8 01       	movw	r26, r16
    2104:	9c 91       	ld	r25, X
    2106:	99 23       	and	r25, r25
    2108:	09 f4       	brne	.+2      	; 0x210c <fat_dir_entry_read_callback+0x72>
    210a:	a0 c0       	rjmp	.+320    	; 0x224c <fat_dir_entry_read_callback+0x1b2>
        return 0;

    char* long_name = dir_entry->long_name;
    if(raw_entry[11] == 0x0f)
    210c:	1b 96       	adiw	r26, 0x0b	; 11
    210e:	8c 91       	ld	r24, X
    2110:	8f 30       	cpi	r24, 0x0F	; 15
    2112:	29 f5       	brne	.+74     	; 0x215e <fat_dir_entry_read_callback+0xc4>
    {
        /* Lfn supports unicode, but we do not, for now.
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((raw_entry[0] & 0x3f) - 1) * 13;
    2114:	89 2f       	mov	r24, r25
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	8f 73       	andi	r24, 0x3F	; 63
    211a:	90 70       	andi	r25, 0x00	; 0
    211c:	2d e0       	ldi	r18, 0x0D	; 13
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	82 9f       	mul	r24, r18
    2122:	a0 01       	movw	r20, r0
    2124:	83 9f       	mul	r24, r19
    2126:	50 0d       	add	r21, r0
    2128:	92 9f       	mul	r25, r18
    212a:	50 0d       	add	r21, r0
    212c:	11 24       	eor	r1, r1
    212e:	4d 50       	subi	r20, 0x0D	; 13
    2130:	50 40       	sbci	r21, 0x00	; 0
    2132:	a4 e2       	ldi	r26, 0x24	; 36
    2134:	b1 e0       	ldi	r27, 0x01	; 1
    2136:	c4 0f       	add	r28, r20
    2138:	d5 1f       	adc	r29, r21
    213a:	0d c0       	rjmp	.+26     	; 0x2156 <fat_dir_entry_read_callback+0xbc>
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
            long_name[char_offset + i] = raw_entry[char_mapping[i]];
    213c:	8d 91       	ld	r24, X+
    213e:	f8 01       	movw	r30, r16
    2140:	e8 0f       	add	r30, r24
    2142:	f1 1d       	adc	r31, r1
    2144:	80 81       	ld	r24, Z
    2146:	89 93       	st	Y+, r24
    2148:	4f 5f       	subi	r20, 0xFF	; 255
    214a:	5f 4f       	sbci	r21, 0xFF	; 255
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((raw_entry[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
    214c:	e1 e0       	ldi	r30, 0x01	; 1
    214e:	a1 33       	cpi	r26, 0x31	; 49
    2150:	be 07       	cpc	r27, r30
    2152:	09 f4       	brne	.+2      	; 0x2156 <fat_dir_entry_read_callback+0xbc>
    2154:	79 c0       	rjmp	.+242    	; 0x2248 <fat_dir_entry_read_callback+0x1ae>
    2156:	4f 31       	cpi	r20, 0x1F	; 31
    2158:	51 05       	cpc	r21, r1
    215a:	80 f3       	brcs	.-32     	; 0x213c <fat_dir_entry_read_callback+0xa2>
    215c:	75 c0       	rjmp	.+234    	; 0x2248 <fat_dir_entry_read_callback+0x1ae>
        return 1;
    }
    else
    {
        /* if we do not have a long name, take the short one */
        if(long_name[0] == '\0')
    215e:	88 81       	ld	r24, Y
    2160:	88 23       	and	r24, r24
    2162:	09 f0       	breq	.+2      	; 0x2166 <fat_dir_entry_read_callback+0xcc>
    2164:	4e c0       	rjmp	.+156    	; 0x2202 <fat_dir_entry_read_callback+0x168>
    2166:	a8 01       	movw	r20, r16
    2168:	de 01       	movw	r26, r28
    216a:	78 01       	movw	r14, r16
    216c:	20 e0       	ldi	r18, 0x00	; 0
        {
            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(raw_entry[i] == ' ')
    216e:	f7 01       	movw	r30, r14
    2170:	90 81       	ld	r25, Z
    2172:	90 32       	cpi	r25, 0x20	; 32
    2174:	a1 f0       	breq	.+40     	; 0x219e <fat_dir_entry_read_callback+0x104>
                    break;
                long_name[i] = raw_entry[i];
    2176:	9c 93       	st	X, r25
                /* Windows NT and later versions do not store LFN entries
                 * for 8.3 names which have a lowercase basename, extension
                 * or both when everything else is uppercase. They use two
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((raw_entry[12] & 0x08) && raw_entry[i] >= 'A' && raw_entry[i] <= 'Z')
    2178:	f8 01       	movw	r30, r16
    217a:	84 85       	ldd	r24, Z+12	; 0x0c
    217c:	83 ff       	sbrs	r24, 3
    217e:	08 c0       	rjmp	.+16     	; 0x2190 <fat_dir_entry_read_callback+0xf6>
    2180:	f7 01       	movw	r30, r14
    2182:	80 81       	ld	r24, Z
    2184:	81 34       	cpi	r24, 0x41	; 65
    2186:	20 f0       	brcs	.+8      	; 0x2190 <fat_dir_entry_read_callback+0xf6>
    2188:	8b 35       	cpi	r24, 0x5B	; 91
    218a:	10 f4       	brcc	.+4      	; 0x2190 <fat_dir_entry_read_callback+0xf6>
                    long_name[i] += 'a' - 'A';
    218c:	90 5e       	subi	r25, 0xE0	; 224
    218e:	9c 93       	st	X, r25
    {
        /* if we do not have a long name, take the short one */
        if(long_name[0] == '\0')
        {
            uint8_t i;
            for(i = 0; i < 8; ++i)
    2190:	2f 5f       	subi	r18, 0xFF	; 255
    2192:	08 94       	sec
    2194:	e1 1c       	adc	r14, r1
    2196:	f1 1c       	adc	r15, r1
    2198:	11 96       	adiw	r26, 0x01	; 1
    219a:	28 30       	cpi	r18, 0x08	; 8
    219c:	41 f7       	brne	.-48     	; 0x216e <fat_dir_entry_read_callback+0xd4>
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((raw_entry[12] & 0x08) && raw_entry[i] >= 'A' && raw_entry[i] <= 'Z')
                    long_name[i] += 'a' - 'A';
            }
            if(long_name[0] == 0x05)
    219e:	88 81       	ld	r24, Y
    21a0:	85 30       	cpi	r24, 0x05	; 5
    21a2:	11 f4       	brne	.+4      	; 0x21a8 <fat_dir_entry_read_callback+0x10e>
                long_name[0] = (char) FAT_DIRENTRY_DELETED;
    21a4:	85 ee       	ldi	r24, 0xE5	; 229
    21a6:	88 83       	st	Y, r24

            if(raw_entry[8] != ' ')
    21a8:	d8 01       	movw	r26, r16
    21aa:	18 96       	adiw	r26, 0x08	; 8
    21ac:	8c 91       	ld	r24, X
    21ae:	80 32       	cpi	r24, 0x20	; 32
    21b0:	21 f1       	breq	.+72     	; 0x21fa <fat_dir_entry_read_callback+0x160>
            {
                long_name[i++] = '.';
    21b2:	fe 01       	movw	r30, r28
    21b4:	e2 0f       	add	r30, r18
    21b6:	f1 1d       	adc	r31, r1
    21b8:	8e e2       	ldi	r24, 0x2E	; 46
    21ba:	80 83       	st	Z, r24
    21bc:	32 2f       	mov	r19, r18
    21be:	3f 5f       	subi	r19, 0xFF	; 255

                uint8_t j = 8;
                for(; j < 11; ++j)
    21c0:	2c 5f       	subi	r18, 0xFC	; 252
                {
                    if(raw_entry[j] == ' ')
    21c2:	fa 01       	movw	r30, r20
    21c4:	90 85       	ldd	r25, Z+8	; 0x08
    21c6:	90 32       	cpi	r25, 0x20	; 32
    21c8:	b9 f0       	breq	.+46     	; 0x21f8 <fat_dir_entry_read_callback+0x15e>
                        break;
                    long_name[i] = raw_entry[j];
    21ca:	fe 01       	movw	r30, r28
    21cc:	e3 0f       	add	r30, r19
    21ce:	f1 1d       	adc	r31, r1
    21d0:	90 83       	st	Z, r25

                    /* See above for the lowercase 8.3 name handling of
                     * Windows NT and later.
                     */
                    if((raw_entry[12] & 0x10) && raw_entry[j] >= 'A' && raw_entry[j] <= 'Z')
    21d2:	d8 01       	movw	r26, r16
    21d4:	1c 96       	adiw	r26, 0x0c	; 12
    21d6:	8c 91       	ld	r24, X
    21d8:	84 ff       	sbrs	r24, 4
    21da:	09 c0       	rjmp	.+18     	; 0x21ee <fat_dir_entry_read_callback+0x154>
    21dc:	da 01       	movw	r26, r20
    21de:	18 96       	adiw	r26, 0x08	; 8
    21e0:	8c 91       	ld	r24, X
    21e2:	81 34       	cpi	r24, 0x41	; 65
    21e4:	20 f0       	brcs	.+8      	; 0x21ee <fat_dir_entry_read_callback+0x154>
    21e6:	8b 35       	cpi	r24, 0x5B	; 91
    21e8:	10 f4       	brcc	.+4      	; 0x21ee <fat_dir_entry_read_callback+0x154>
                        long_name[i] += 'a' - 'A';
    21ea:	90 5e       	subi	r25, 0xE0	; 224
    21ec:	90 83       	st	Z, r25

                    ++i;
    21ee:	3f 5f       	subi	r19, 0xFF	; 255
    21f0:	4f 5f       	subi	r20, 0xFF	; 255
    21f2:	5f 4f       	sbci	r21, 0xFF	; 255
            if(raw_entry[8] != ' ')
            {
                long_name[i++] = '.';

                uint8_t j = 8;
                for(; j < 11; ++j)
    21f4:	32 17       	cp	r19, r18
    21f6:	29 f7       	brne	.-54     	; 0x21c2 <fat_dir_entry_read_callback+0x128>
    21f8:	23 2f       	mov	r18, r19

                    ++i;
                }
            } 

            long_name[i] = '\0';
    21fa:	fe 01       	movw	r30, r28
    21fc:	e2 0f       	add	r30, r18
    21fe:	f1 1d       	adc	r31, r1
    2200:	10 82       	st	Z, r1
        }
        
        /* extract properties of file and store them within the structure */
        dir_entry->attributes = raw_entry[11];
    2202:	f8 01       	movw	r30, r16
    2204:	83 85       	ldd	r24, Z+11	; 0x0b
    2206:	88 a3       	std	Y+32, r24	; 0x20
        dir_entry->cluster = ltoh16(*((uint16_t*) &raw_entry[26]));
    2208:	22 8d       	ldd	r18, Z+26	; 0x1a
    220a:	33 8d       	ldd	r19, Z+27	; 0x1b
    220c:	40 e0       	ldi	r20, 0x00	; 0
    220e:	50 e0       	ldi	r21, 0x00	; 0
#if FAT_FAT32_SUPPORT
        dir_entry->cluster |= ((cluster_t) ltoh16(*((uint16_t*) &raw_entry[20]))) << 16;
    2210:	84 89       	ldd	r24, Z+20	; 0x14
    2212:	95 89       	ldd	r25, Z+21	; 0x15
    2214:	a0 e0       	ldi	r26, 0x00	; 0
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	dc 01       	movw	r26, r24
    221a:	99 27       	eor	r25, r25
    221c:	88 27       	eor	r24, r24
    221e:	82 2b       	or	r24, r18
    2220:	93 2b       	or	r25, r19
    2222:	a4 2b       	or	r26, r20
    2224:	b5 2b       	or	r27, r21
    2226:	89 a3       	std	Y+33, r24	; 0x21
    2228:	9a a3       	std	Y+34, r25	; 0x22
    222a:	ab a3       	std	Y+35, r26	; 0x23
    222c:	bc a3       	std	Y+36, r27	; 0x24
#endif
        dir_entry->file_size = ltoh32(*((uint32_t*) &raw_entry[28]));
    222e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2230:	95 8d       	ldd	r25, Z+29	; 0x1d
    2232:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2234:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2236:	8d a3       	std	Y+37, r24	; 0x25
    2238:	9e a3       	std	Y+38, r25	; 0x26
    223a:	af a3       	std	Y+39, r26	; 0x27
    223c:	b8 a7       	std	Y+40, r27	; 0x28
        {
            return 1;
        }
        case 2: /* directory entry complete, finish */
        {
            arg->finished = 1;
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	db 01       	movw	r26, r22
    2242:	14 96       	adiw	r26, 0x04	; 4
    2244:	8c 93       	st	X, r24
    2246:	02 c0       	rjmp	.+4      	; 0x224c <fat_dir_entry_read_callback+0x1b2>
            return 0;
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	01 c0       	rjmp	.+2      	; 0x224e <fat_dir_entry_read_callback+0x1b4>
    224c:	80 e0       	ldi	r24, 0x00	; 0
        }
    }

    return 0;
}
    224e:	df 91       	pop	r29
    2250:	cf 91       	pop	r28
    2252:	1f 91       	pop	r17
    2254:	0f 91       	pop	r16
    2256:	ff 90       	pop	r15
    2258:	ef 90       	pop	r14
    225a:	df 90       	pop	r13
    225c:	cf 90       	pop	r12
    225e:	08 95       	ret

00002260 <fat_delete_file>:
 * \param[in] dir_entry The directory entry of the file to delete.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    2260:	7f 92       	push	r7
    2262:	8f 92       	push	r8
    2264:	9f 92       	push	r9
    2266:	af 92       	push	r10
    2268:	bf 92       	push	r11
    226a:	cf 92       	push	r12
    226c:	df 92       	push	r13
    226e:	ef 92       	push	r14
    2270:	ff 92       	push	r15
    2272:	0f 93       	push	r16
    2274:	1f 93       	push	r17
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	2c 97       	sbiw	r28, 0x0c	; 12
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	f8 94       	cli
    2284:	de bf       	out	0x3e, r29	; 62
    2286:	0f be       	out	0x3f, r0	; 63
    2288:	cd bf       	out	0x3d, r28	; 61
    228a:	6c 01       	movw	r12, r24
    228c:	5b 01       	movw	r10, r22
    if(!fs || !dir_entry)
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	09 f4       	brne	.+2      	; 0x2294 <fat_delete_file+0x34>
    2292:	57 c0       	rjmp	.+174    	; 0x2342 <fat_delete_file+0xe2>
    2294:	61 15       	cp	r22, r1
    2296:	71 05       	cpc	r23, r1
    2298:	09 f4       	brne	.+2      	; 0x229c <fat_delete_file+0x3c>
    229a:	53 c0       	rjmp	.+166    	; 0x2342 <fat_delete_file+0xe2>
        return 0;

    /* get offset of the file's directory entry */
    offset_t dir_entry_offset = dir_entry->entry_offset;
    229c:	db 01       	movw	r26, r22
    229e:	99 96       	adiw	r26, 0x29	; 41
    22a0:	ed 90       	ld	r14, X+
    22a2:	fd 90       	ld	r15, X+
    22a4:	0d 91       	ld	r16, X+
    22a6:	1c 91       	ld	r17, X
    22a8:	9c 97       	sbiw	r26, 0x2c	; 44
    if(!dir_entry_offset)
    22aa:	e1 14       	cp	r14, r1
    22ac:	f1 04       	cpc	r15, r1
    22ae:	01 05       	cpc	r16, r1
    22b0:	11 05       	cpc	r17, r1
    22b2:	09 f4       	brne	.+2      	; 0x22b6 <fat_delete_file+0x56>
    22b4:	46 c0       	rjmp	.+140    	; 0x2342 <fat_delete_file+0xe2>

    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
    22b6:	4e 01       	movw	r8, r28
    22b8:	08 94       	sec
    22ba:	81 1c       	adc	r8, r1
    22bc:	91 1c       	adc	r9, r1
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
    22be:	85 ee       	ldi	r24, 0xE5	; 229
    22c0:	78 2e       	mov	r7, r24

    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
    22c2:	d6 01       	movw	r26, r12
    22c4:	ed 91       	ld	r30, X+
    22c6:	fc 91       	ld	r31, X
    22c8:	01 90       	ld	r0, Z+
    22ca:	f0 81       	ld	r31, Z
    22cc:	e0 2d       	mov	r30, r0
    22ce:	c8 01       	movw	r24, r16
    22d0:	b7 01       	movw	r22, r14
    22d2:	a4 01       	movw	r20, r8
    22d4:	2c e0       	ldi	r18, 0x0C	; 12
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	09 95       	icall
    22da:	88 23       	and	r24, r24
    22dc:	91 f1       	breq	.+100    	; 0x2342 <fat_delete_file+0xe2>
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
    22de:	79 82       	std	Y+1, r7	; 0x01
        
        /* write back entry */
        if(!fs->partition->device_write(dir_entry_offset, buffer, sizeof(buffer)))
    22e0:	d6 01       	movw	r26, r12
    22e2:	ed 91       	ld	r30, X+
    22e4:	fc 91       	ld	r31, X
    22e6:	04 80       	ldd	r0, Z+4	; 0x04
    22e8:	f5 81       	ldd	r31, Z+5	; 0x05
    22ea:	e0 2d       	mov	r30, r0
    22ec:	c8 01       	movw	r24, r16
    22ee:	b7 01       	movw	r22, r14
    22f0:	a4 01       	movw	r20, r8
    22f2:	2c e0       	ldi	r18, 0x0C	; 12
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	09 95       	icall
    22f8:	88 23       	and	r24, r24
    22fa:	19 f1       	breq	.+70     	; 0x2342 <fat_delete_file+0xe2>
            return 0;

        /* check if we deleted the whole entry */
        if(buffer[11] != 0x0f)
    22fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    22fe:	8f 30       	cpi	r24, 0x0F	; 15
    2300:	49 f4       	brne	.+18     	; 0x2314 <fat_delete_file+0xb4>
            break;

        dir_entry_offset += 32;
    2302:	80 e2       	ldi	r24, 0x20	; 32
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	a0 e0       	ldi	r26, 0x00	; 0
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	e8 0e       	add	r14, r24
    230c:	f9 1e       	adc	r15, r25
    230e:	0a 1f       	adc	r16, r26
    2310:	1b 1f       	adc	r17, r27
    2312:	d7 cf       	rjmp	.-82     	; 0x22c2 <fat_delete_file+0x62>
    }

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
    2314:	d5 01       	movw	r26, r10
    2316:	91 96       	adiw	r26, 0x21	; 33
    2318:	4d 91       	ld	r20, X+
    231a:	5d 91       	ld	r21, X+
    231c:	6d 91       	ld	r22, X+
    231e:	7c 91       	ld	r23, X
    2320:	94 97       	sbiw	r26, 0x24	; 36
    2322:	41 15       	cp	r20, r1
    2324:	51 05       	cpc	r21, r1
    2326:	61 05       	cpc	r22, r1
    2328:	71 05       	cpc	r23, r1
    232a:	39 f0       	breq	.+14     	; 0x233a <fat_delete_file+0xda>
    232c:	c6 01       	movw	r24, r12
    232e:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fat_free_clusters>
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	88 23       	and	r24, r24
    2338:	11 f0       	breq	.+4      	; 0x233e <fat_delete_file+0xde>
    233a:	21 e0       	ldi	r18, 0x01	; 1
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	82 2f       	mov	r24, r18
    2340:	01 c0       	rjmp	.+2      	; 0x2344 <fat_delete_file+0xe4>
    2342:	80 e0       	ldi	r24, 0x00	; 0
}
    2344:	2c 96       	adiw	r28, 0x0c	; 12
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	cd bf       	out	0x3d, r28	; 61
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	1f 91       	pop	r17
    2356:	0f 91       	pop	r16
    2358:	ff 90       	pop	r15
    235a:	ef 90       	pop	r14
    235c:	df 90       	pop	r13
    235e:	cf 90       	pop	r12
    2360:	bf 90       	pop	r11
    2362:	af 90       	pop	r10
    2364:	9f 90       	pop	r9
    2366:	8f 90       	pop	r8
    2368:	7f 90       	pop	r7
    236a:	08 95       	ret

0000236c <fat_get_fs_size>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
    236c:	ef 92       	push	r14
    236e:	ff 92       	push	r15
    2370:	0f 93       	push	r16
    2372:	1f 93       	push	r17
    2374:	dc 01       	movw	r26, r24
    if(!fs)
    2376:	00 97       	sbiw	r24, 0x00	; 0
    2378:	29 f4       	brne	.+10     	; 0x2384 <fat_get_fs_size+0x18>
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e0       	ldi	r20, 0x00	; 0
    2380:	50 e0       	ldi	r21, 0x00	; 0
    2382:	2c c0       	rjmp	.+88     	; 0x23dc <fat_get_fs_size+0x70>
        return 0;

#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    2384:	ed 91       	ld	r30, X+
    2386:	fc 91       	ld	r31, X
    2388:	11 97       	sbiw	r26, 0x01	; 1
    238a:	80 85       	ldd	r24, Z+8	; 0x08
    238c:	1a 96       	adiw	r26, 0x0a	; 10
    238e:	ed 90       	ld	r14, X+
    2390:	fd 90       	ld	r15, X+
    2392:	0d 91       	ld	r16, X+
    2394:	1c 91       	ld	r17, X
    2396:	1d 97       	sbiw	r26, 0x0d	; 13
    2398:	50 96       	adiw	r26, 0x10	; 16
    239a:	2d 91       	ld	r18, X+
    239c:	3c 91       	ld	r19, X
    239e:	51 97       	sbiw	r26, 0x11	; 17
    23a0:	8b 30       	cpi	r24, 0x0B	; 11
    23a2:	41 f4       	brne	.+16     	; 0x23b4 <fat_get_fs_size+0x48>
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
    23a4:	42 e0       	ldi	r20, 0x02	; 2
    23a6:	16 95       	lsr	r17
    23a8:	07 95       	ror	r16
    23aa:	f7 94       	ror	r15
    23ac:	e7 94       	ror	r14
    23ae:	4a 95       	dec	r20
    23b0:	d1 f7       	brne	.-12     	; 0x23a6 <fat_get_fs_size+0x3a>
    23b2:	04 c0       	rjmp	.+8      	; 0x23bc <fat_get_fs_size+0x50>
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
    23b4:	16 95       	lsr	r17
    23b6:	07 95       	ror	r16
    23b8:	f7 94       	ror	r15
    23ba:	e7 94       	ror	r14
    23bc:	8e ef       	ldi	r24, 0xFE	; 254
    23be:	9f ef       	ldi	r25, 0xFF	; 255
    23c0:	af ef       	ldi	r26, 0xFF	; 255
    23c2:	bf ef       	ldi	r27, 0xFF	; 255
    23c4:	e8 0e       	add	r14, r24
    23c6:	f9 1e       	adc	r15, r25
    23c8:	0a 1f       	adc	r16, r26
    23ca:	1b 1f       	adc	r17, r27
    23cc:	40 e0       	ldi	r20, 0x00	; 0
    23ce:	50 e0       	ldi	r21, 0x00	; 0
    23d0:	c8 01       	movw	r24, r16
    23d2:	b7 01       	movw	r22, r14
    23d4:	0e 94 23 24 	call	0x4846	; 0x4846 <__mulsi3>
    23d8:	9b 01       	movw	r18, r22
    23da:	ac 01       	movw	r20, r24
}
    23dc:	b9 01       	movw	r22, r18
    23de:	ca 01       	movw	r24, r20
    23e0:	1f 91       	pop	r17
    23e2:	0f 91       	pop	r16
    23e4:	ff 90       	pop	r15
    23e6:	ef 90       	pop	r14
    23e8:	08 95       	ret

000023ea <fat_get_fs_free>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
offset_t fat_get_fs_free(const struct fat_fs_struct* fs)
{
    23ea:	2f 92       	push	r2
    23ec:	3f 92       	push	r3
    23ee:	4f 92       	push	r4
    23f0:	5f 92       	push	r5
    23f2:	6f 92       	push	r6
    23f4:	7f 92       	push	r7
    23f6:	8f 92       	push	r8
    23f8:	9f 92       	push	r9
    23fa:	af 92       	push	r10
    23fc:	bf 92       	push	r11
    23fe:	cf 92       	push	r12
    2400:	df 92       	push	r13
    2402:	ef 92       	push	r14
    2404:	ff 92       	push	r15
    2406:	0f 93       	push	r16
    2408:	1f 93       	push	r17
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	a8 97       	sbiw	r28, 0x28	; 40
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	cd bf       	out	0x3d, r28	; 61
    241e:	98 a7       	std	Y+40, r25	; 0x28
    2420:	8f a3       	std	Y+39, r24	; 0x27
    if(!fs)
    2422:	89 2b       	or	r24, r25
    2424:	09 f4       	brne	.+2      	; 0x2428 <fat_get_fs_free+0x3e>
    2426:	64 c0       	rjmp	.+200    	; 0x24f0 <fat_get_fs_free+0x106>
        return 0;

    uint8_t fat[32];
    struct fat_usage_count_callback_arg count_arg;
    count_arg.cluster_count = 0;
    2428:	19 82       	std	Y+1, r1	; 0x01
    242a:	1a 82       	std	Y+2, r1	; 0x02
    242c:	1b 82       	std	Y+3, r1	; 0x03
    242e:	1c 82       	std	Y+4, r1	; 0x04
    count_arg.buffer_size = sizeof(fat);
    2430:	80 e2       	ldi	r24, 0x20	; 32
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	9e 83       	std	Y+6, r25	; 0x06
    2436:	8d 83       	std	Y+5, r24	; 0x05

    offset_t fat_offset = fs->header.fat_offset;
    2438:	af a1       	ldd	r26, Y+39	; 0x27
    243a:	b8 a5       	ldd	r27, Y+40	; 0x28
    243c:	16 96       	adiw	r26, 0x06	; 6
    243e:	4d 90       	ld	r4, X+
    2440:	5d 90       	ld	r5, X+
    2442:	6d 90       	ld	r6, X+
    2444:	7c 90       	ld	r7, X
    2446:	19 97       	sbiw	r26, 0x09	; 9
    uint32_t fat_size = fs->header.fat_size;
    2448:	1a 96       	adiw	r26, 0x0a	; 10
    244a:	8d 90       	ld	r8, X+
    244c:	9d 90       	ld	r9, X+
    244e:	ad 90       	ld	r10, X+
    2450:	bc 90       	ld	r11, X
    2452:	1d 97       	sbiw	r26, 0x0d	; 13
    2454:	39 c0       	rjmp	.+114    	; 0x24c8 <fat_get_fs_free+0xde>
    while(fat_size > 0)
    {
        uintptr_t length = UINTPTR_MAX - 1;
        if(fat_size < length)
    2456:	be ef       	ldi	r27, 0xFE	; 254
    2458:	8b 16       	cp	r8, r27
    245a:	bf ef       	ldi	r27, 0xFF	; 255
    245c:	9b 06       	cpc	r9, r27
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	ab 06       	cpc	r10, r27
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	bb 06       	cpc	r11, r27
    2466:	28 f0       	brcs	.+10     	; 0x2472 <fat_get_fs_free+0x88>
    2468:	5e ef       	ldi	r21, 0xFE	; 254
    246a:	25 2e       	mov	r2, r21
    246c:	5f ef       	ldi	r21, 0xFF	; 255
    246e:	35 2e       	mov	r3, r21
    2470:	01 c0       	rjmp	.+2      	; 0x2474 <fat_get_fs_free+0x8a>
            length = fat_size;
    2472:	14 01       	movw	r2, r8

        if(!fs->partition->device_read_interval(fat_offset,
    2474:	af a1       	ldd	r26, Y+39	; 0x27
    2476:	b8 a5       	ldd	r27, Y+40	; 0x28
    2478:	ed 91       	ld	r30, X+
    247a:	fc 91       	ld	r31, X
    247c:	a2 81       	ldd	r26, Z+2	; 0x02
    247e:	b3 81       	ldd	r27, Z+3	; 0x03
    2480:	80 85       	ldd	r24, Z+8	; 0x08
    2482:	86 30       	cpi	r24, 0x06	; 6
    2484:	19 f0       	breq	.+6      	; 0x248c <fat_get_fs_free+0xa2>
    2486:	e9 eb       	ldi	r30, 0xB9	; 185
    2488:	f2 e1       	ldi	r31, 0x12	; 18
    248a:	02 c0       	rjmp	.+4      	; 0x2490 <fat_get_fs_free+0xa6>
    248c:	e7 e9       	ldi	r30, 0x97	; 151
    248e:	f2 e1       	ldi	r31, 0x12	; 18
    2490:	c3 01       	movw	r24, r6
    2492:	b2 01       	movw	r22, r4
    2494:	ae 01       	movw	r20, r28
    2496:	49 5f       	subi	r20, 0xF9	; 249
    2498:	5f 4f       	sbci	r21, 0xFF	; 255
    249a:	20 e2       	ldi	r18, 0x20	; 32
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	81 01       	movw	r16, r2
    24a0:	7f 01       	movw	r14, r30
    24a2:	6e 01       	movw	r12, r28
    24a4:	08 94       	sec
    24a6:	c1 1c       	adc	r12, r1
    24a8:	d1 1c       	adc	r13, r1
    24aa:	fd 01       	movw	r30, r26
    24ac:	09 95       	icall
    24ae:	88 23       	and	r24, r24
    24b0:	f9 f0       	breq	.+62     	; 0x24f0 <fat_get_fs_free+0x106>
                                                &count_arg
                                               )
          )
            return 0;

        fat_offset += length;
    24b2:	c1 01       	movw	r24, r2
    24b4:	a0 e0       	ldi	r26, 0x00	; 0
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	48 0e       	add	r4, r24
    24ba:	59 1e       	adc	r5, r25
    24bc:	6a 1e       	adc	r6, r26
    24be:	7b 1e       	adc	r7, r27
        fat_size -= length;
    24c0:	88 1a       	sub	r8, r24
    24c2:	99 0a       	sbc	r9, r25
    24c4:	aa 0a       	sbc	r10, r26
    24c6:	bb 0a       	sbc	r11, r27
    count_arg.cluster_count = 0;
    count_arg.buffer_size = sizeof(fat);

    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
    24c8:	81 14       	cp	r8, r1
    24ca:	91 04       	cpc	r9, r1
    24cc:	a1 04       	cpc	r10, r1
    24ce:	b1 04       	cpc	r11, r1
    24d0:	11 f6       	brne	.-124    	; 0x2456 <fat_get_fs_free+0x6c>

        fat_offset += length;
        fat_size -= length;
    }

    return (offset_t) count_arg.cluster_count * fs->header.cluster_size;
    24d2:	ef a1       	ldd	r30, Y+39	; 0x27
    24d4:	f8 a5       	ldd	r31, Y+40	; 0x28
    24d6:	60 89       	ldd	r22, Z+16	; 0x10
    24d8:	71 89       	ldd	r23, Z+17	; 0x11
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	29 81       	ldd	r18, Y+1	; 0x01
    24e0:	3a 81       	ldd	r19, Y+2	; 0x02
    24e2:	4b 81       	ldd	r20, Y+3	; 0x03
    24e4:	5c 81       	ldd	r21, Y+4	; 0x04
    24e6:	0e 94 23 24 	call	0x4846	; 0x4846 <__mulsi3>
    24ea:	9b 01       	movw	r18, r22
    24ec:	ac 01       	movw	r20, r24
    24ee:	04 c0       	rjmp	.+8      	; 0x24f8 <fat_get_fs_free+0x10e>
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	40 e0       	ldi	r20, 0x00	; 0
    24f6:	50 e0       	ldi	r21, 0x00	; 0
}
    24f8:	b9 01       	movw	r22, r18
    24fa:	ca 01       	movw	r24, r20
    24fc:	a8 96       	adiw	r28, 0x28	; 40
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	f8 94       	cli
    2502:	de bf       	out	0x3e, r29	; 62
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	cd bf       	out	0x3d, r28	; 61
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	1f 91       	pop	r17
    250e:	0f 91       	pop	r16
    2510:	ff 90       	pop	r15
    2512:	ef 90       	pop	r14
    2514:	df 90       	pop	r13
    2516:	cf 90       	pop	r12
    2518:	bf 90       	pop	r11
    251a:	af 90       	pop	r10
    251c:	9f 90       	pop	r9
    251e:	8f 90       	pop	r8
    2520:	7f 90       	pop	r7
    2522:	6f 90       	pop	r6
    2524:	5f 90       	pop	r5
    2526:	4f 90       	pop	r4
    2528:	3f 90       	pop	r3
    252a:	2f 90       	pop	r2
    252c:	08 95       	ret

0000252e <fat_get_fs_free_16_callback>:
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT.
 */
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
    252e:	cf 93       	push	r28
    2530:	df 93       	push	r29
    2532:	ec 01       	movw	r28, r24
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    2534:	f9 01       	movw	r30, r18
    uintptr_t buffer_size = count_arg->buffer_size;
    2536:	44 81       	ldd	r20, Z+4	; 0x04
    2538:	55 81       	ldd	r21, Z+5	; 0x05
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	12 c0       	rjmp	.+36     	; 0x2564 <fat_get_fs_free_16_callback+0x36>

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
    {
        uint16_t cluster = *((uint16_t*) &buffer[0]);
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
    2540:	88 81       	ld	r24, Y
    2542:	99 81       	ldd	r25, Y+1	; 0x01
    2544:	89 2b       	or	r24, r25
    2546:	59 f4       	brne	.+22     	; 0x255e <fat_get_fs_free_16_callback+0x30>
            ++(count_arg->cluster_count);
    2548:	80 81       	ld	r24, Z
    254a:	91 81       	ldd	r25, Z+1	; 0x01
    254c:	a2 81       	ldd	r26, Z+2	; 0x02
    254e:	b3 81       	ldd	r27, Z+3	; 0x03
    2550:	01 96       	adiw	r24, 0x01	; 1
    2552:	a1 1d       	adc	r26, r1
    2554:	b1 1d       	adc	r27, r1
    2556:	80 83       	st	Z, r24
    2558:	91 83       	std	Z+1, r25	; 0x01
    255a:	a2 83       	std	Z+2, r26	; 0x02
    255c:	b3 83       	std	Z+3, r27	; 0x03
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
    255e:	2e 5f       	subi	r18, 0xFE	; 254
    2560:	3f 4f       	sbci	r19, 0xFF	; 255
    2562:	22 96       	adiw	r28, 0x02	; 2
    2564:	24 17       	cp	r18, r20
    2566:	35 07       	cpc	r19, r21
    2568:	58 f3       	brcs	.-42     	; 0x2540 <fat_get_fs_free_16_callback+0x12>
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	df 91       	pop	r29
    256e:	cf 91       	pop	r28
    2570:	08 95       	ret

00002572 <fat_get_fs_free_32_callback>:
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT32.
 */
uint8_t fat_get_fs_free_32_callback(uint8_t* buffer, offset_t offset, void* p)
{
    2572:	cf 93       	push	r28
    2574:	df 93       	push	r29
    2576:	ec 01       	movw	r28, r24
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    2578:	f9 01       	movw	r30, r18
    uintptr_t buffer_size = count_arg->buffer_size;
    257a:	44 81       	ldd	r20, Z+4	; 0x04
    257c:	55 81       	ldd	r21, Z+5	; 0x05
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	16 c0       	rjmp	.+44     	; 0x25b0 <fat_get_fs_free_32_callback+0x3e>

    for(uintptr_t i = 0; i < buffer_size; i += 4, buffer += 4)
    {
        uint32_t cluster = *((uint32_t*) &buffer[0]);
        if(cluster == HTOL32(FAT32_CLUSTER_FREE))
    2584:	88 81       	ld	r24, Y
    2586:	99 81       	ldd	r25, Y+1	; 0x01
    2588:	aa 81       	ldd	r26, Y+2	; 0x02
    258a:	bb 81       	ldd	r27, Y+3	; 0x03
    258c:	00 97       	sbiw	r24, 0x00	; 0
    258e:	a1 05       	cpc	r26, r1
    2590:	b1 05       	cpc	r27, r1
    2592:	59 f4       	brne	.+22     	; 0x25aa <fat_get_fs_free_32_callback+0x38>
            ++(count_arg->cluster_count);
    2594:	80 81       	ld	r24, Z
    2596:	91 81       	ldd	r25, Z+1	; 0x01
    2598:	a2 81       	ldd	r26, Z+2	; 0x02
    259a:	b3 81       	ldd	r27, Z+3	; 0x03
    259c:	01 96       	adiw	r24, 0x01	; 1
    259e:	a1 1d       	adc	r26, r1
    25a0:	b1 1d       	adc	r27, r1
    25a2:	80 83       	st	Z, r24
    25a4:	91 83       	std	Z+1, r25	; 0x01
    25a6:	a2 83       	std	Z+2, r26	; 0x02
    25a8:	b3 83       	std	Z+3, r27	; 0x03
uint8_t fat_get_fs_free_32_callback(uint8_t* buffer, offset_t offset, void* p)
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 4, buffer += 4)
    25aa:	2c 5f       	subi	r18, 0xFC	; 252
    25ac:	3f 4f       	sbci	r19, 0xFF	; 255
    25ae:	24 96       	adiw	r28, 0x04	; 4
    25b0:	24 17       	cp	r18, r20
    25b2:	35 07       	cpc	r19, r21
    25b4:	38 f3       	brcs	.-50     	; 0x2584 <fat_get_fs_free_32_callback+0x12>
        if(cluster == HTOL32(FAT32_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	df 91       	pop	r29
    25ba:	cf 91       	pop	r28
    25bc:	08 95       	ret

000025be <fat_clear_cluster>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    25be:	cf 92       	push	r12
    25c0:	df 92       	push	r13
    25c2:	ef 92       	push	r14
    25c4:	ff 92       	push	r15
    25c6:	0f 93       	push	r16
    25c8:	1f 93       	push	r17
    25ca:	df 93       	push	r29
    25cc:	cf 93       	push	r28
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
    25d2:	60 97       	sbiw	r28, 0x10	; 16
    25d4:	0f b6       	in	r0, 0x3f	; 63
    25d6:	f8 94       	cli
    25d8:	de bf       	out	0x3e, r29	; 62
    25da:	0f be       	out	0x3f, r0	; 63
    25dc:	cd bf       	out	0x3d, r28	; 61
    25de:	8c 01       	movw	r16, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	ba 01       	movw	r22, r20
    if(cluster_num < 2)
    25e4:	62 30       	cpi	r22, 0x02	; 2
    25e6:	71 05       	cpc	r23, r1
    25e8:	81 05       	cpc	r24, r1
    25ea:	91 05       	cpc	r25, r1
    25ec:	10 f4       	brcc	.+4      	; 0x25f2 <fat_clear_cluster+0x34>
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	36 c0       	rjmp	.+108    	; 0x265e <fat_clear_cluster+0xa0>
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    25f2:	01 15       	cp	r16, r1
    25f4:	11 05       	cpc	r17, r1
    25f6:	29 f4       	brne	.+10     	; 0x2602 <fat_clear_cluster+0x44>
    25f8:	40 e0       	ldi	r20, 0x00	; 0
    25fa:	50 e0       	ldi	r21, 0x00	; 0
    25fc:	60 e0       	ldi	r22, 0x00	; 0
    25fe:	70 e0       	ldi	r23, 0x00	; 0
    2600:	16 c0       	rjmp	.+44     	; 0x262e <fat_clear_cluster+0x70>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    2602:	62 50       	subi	r22, 0x02	; 2
    2604:	70 40       	sbci	r23, 0x00	; 0
    2606:	80 40       	sbci	r24, 0x00	; 0
    2608:	90 40       	sbci	r25, 0x00	; 0
    260a:	f8 01       	movw	r30, r16
    260c:	20 89       	ldd	r18, Z+16	; 0x10
    260e:	31 89       	ldd	r19, Z+17	; 0x11
    2610:	40 e0       	ldi	r20, 0x00	; 0
    2612:	50 e0       	ldi	r21, 0x00	; 0
    2614:	0e 94 23 24 	call	0x4846	; 0x4846 <__mulsi3>
    2618:	ab 01       	movw	r20, r22
    261a:	bc 01       	movw	r22, r24
    261c:	f8 01       	movw	r30, r16
    261e:	82 89       	ldd	r24, Z+18	; 0x12
    2620:	93 89       	ldd	r25, Z+19	; 0x13
    2622:	a4 89       	ldd	r26, Z+20	; 0x14
    2624:	b5 89       	ldd	r27, Z+21	; 0x15
    2626:	48 0f       	add	r20, r24
    2628:	59 1f       	adc	r21, r25
    262a:	6a 1f       	adc	r22, r26
    262c:	7b 1f       	adc	r23, r27
        return 0;

    offset_t cluster_offset = fat_cluster_offset(fs, cluster_num);

    uint8_t zero[16];
    memset(zero, 0, sizeof(zero));
    262e:	de 01       	movw	r26, r28
    2630:	11 96       	adiw	r26, 0x01	; 1
    2632:	80 e1       	ldi	r24, 0x10	; 16
    2634:	fd 01       	movw	r30, r26
    2636:	11 92       	st	Z+, r1
    2638:	8a 95       	dec	r24
    263a:	e9 f7       	brne	.-6      	; 0x2636 <fat_clear_cluster+0x78>
    return fs->partition->device_write_interval(cluster_offset,
    263c:	f8 01       	movw	r30, r16
    263e:	80 81       	ld	r24, Z
    2640:	91 81       	ldd	r25, Z+1	; 0x01
    2642:	20 89       	ldd	r18, Z+16	; 0x10
    2644:	31 89       	ldd	r19, Z+17	; 0x11
    2646:	fc 01       	movw	r30, r24
    2648:	c6 80       	ldd	r12, Z+6	; 0x06
    264a:	d7 80       	ldd	r13, Z+7	; 0x07
    264c:	cb 01       	movw	r24, r22
    264e:	ba 01       	movw	r22, r20
    2650:	ad 01       	movw	r20, r26
    2652:	08 eb       	ldi	r16, 0xB8	; 184
    2654:	1e e0       	ldi	r17, 0x0E	; 14
    2656:	ee 24       	eor	r14, r14
    2658:	ff 24       	eor	r15, r15
    265a:	f6 01       	movw	r30, r12
    265c:	09 95       	icall
                                                zero,
                                                fs->header.cluster_size,
                                                fat_clear_cluster_callback,
                                                0
                                               );
}
    265e:	60 96       	adiw	r28, 0x10	; 16
    2660:	0f b6       	in	r0, 0x3f	; 63
    2662:	f8 94       	cli
    2664:	de bf       	out	0x3e, r29	; 62
    2666:	0f be       	out	0x3f, r0	; 63
    2668:	cd bf       	out	0x3d, r28	; 61
    266a:	cf 91       	pop	r28
    266c:	df 91       	pop	r29
    266e:	1f 91       	pop	r17
    2670:	0f 91       	pop	r16
    2672:	ff 90       	pop	r15
    2674:	ef 90       	pop	r14
    2676:	df 90       	pop	r13
    2678:	cf 90       	pop	r12
    267a:	08 95       	ret

0000267c <fat_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    267c:	2f 92       	push	r2
    267e:	3f 92       	push	r3
    2680:	4f 92       	push	r4
    2682:	5f 92       	push	r5
    2684:	6f 92       	push	r6
    2686:	7f 92       	push	r7
    2688:	8f 92       	push	r8
    268a:	9f 92       	push	r9
    268c:	af 92       	push	r10
    268e:	bf 92       	push	r11
    2690:	cf 92       	push	r12
    2692:	df 92       	push	r13
    2694:	ef 92       	push	r14
    2696:	ff 92       	push	r15
    2698:	0f 93       	push	r16
    269a:	1f 93       	push	r17
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	a9 97       	sbiw	r28, 0x29	; 41
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cd bf       	out	0x3d, r28	; 61
    26b0:	1c 01       	movw	r2, r24
    26b2:	79 a7       	std	Y+41, r23	; 0x29
    26b4:	68 a7       	std	Y+40, r22	; 0x28
    if(!dd || !dir_entry)
    26b6:	00 97       	sbiw	r24, 0x00	; 0
    26b8:	09 f4       	brne	.+2      	; 0x26bc <fat_read_dir+0x40>
    26ba:	d7 c0       	rjmp	.+430    	; 0x286a <fat_read_dir+0x1ee>
    26bc:	61 15       	cp	r22, r1
    26be:	71 05       	cpc	r23, r1
    26c0:	09 f4       	brne	.+2      	; 0x26c4 <fat_read_dir+0x48>
    26c2:	d3 c0       	rjmp	.+422    	; 0x286a <fat_read_dir+0x1ee>
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    26c4:	dc 01       	movw	r26, r24
    26c6:	6d 90       	ld	r6, X+
    26c8:	7c 90       	ld	r7, X
    26ca:	11 97       	sbiw	r26, 0x01	; 1
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    26cc:	f3 01       	movw	r30, r6
    26ce:	00 88       	ldd	r0, Z+16	; 0x10
    26d0:	f1 89       	ldd	r31, Z+17	; 0x11
    26d2:	e0 2d       	mov	r30, r0
    26d4:	ff a3       	std	Y+39, r31	; 0x27
    26d6:	ee a3       	std	Y+38, r30	; 0x26
    cluster_t cluster_num = dd->entry_cluster;
    26d8:	9f 96       	adiw	r26, 0x2f	; 47
    26da:	8d 90       	ld	r8, X+
    26dc:	9d 90       	ld	r9, X+
    26de:	ad 90       	ld	r10, X+
    26e0:	bc 90       	ld	r11, X
    26e2:	d2 97       	sbiw	r26, 0x32	; 50
    uint16_t cluster_offset = dd->entry_offset;
    26e4:	d3 96       	adiw	r26, 0x33	; 51
    26e6:	4d 90       	ld	r4, X+
    26e8:	5c 90       	ld	r5, X
    26ea:	d4 97       	sbiw	r26, 0x34	; 52
    struct fat_read_dir_callback_arg arg;

    /* reset directory entry */
    memset(dir_entry, 0, sizeof(*dir_entry));
    26ec:	8d e2       	ldi	r24, 0x2D	; 45
    26ee:	db 01       	movw	r26, r22
    26f0:	1d 92       	st	X+, r1
    26f2:	8a 95       	dec	r24
    26f4:	e9 f7       	brne	.-6      	; 0x26f0 <fat_read_dir+0x74>

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    26f6:	fe 01       	movw	r30, r28
    26f8:	31 96       	adiw	r30, 0x01	; 1
    26fa:	85 e0       	ldi	r24, 0x05	; 5
    26fc:	df 01       	movw	r26, r30
    26fe:	1d 92       	st	X+, r1
    2700:	8a 95       	dec	r24
    2702:	e9 f7       	brne	.-6      	; 0x26fe <fat_read_dir+0x82>
    arg.dir_entry = dir_entry;

    /* check if we read from the root directory */
    if(cluster_num == 0)
    2704:	81 14       	cp	r8, r1
    2706:	91 04       	cpc	r9, r1
    2708:	a1 04       	cpc	r10, r1
    270a:	b1 04       	cpc	r11, r1
    270c:	09 f0       	breq	.+2      	; 0x2710 <fat_read_dir+0x94>
    270e:	93 c0       	rjmp	.+294    	; 0x2836 <fat_read_dir+0x1ba>
    {
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
    2710:	d3 01       	movw	r26, r6
    2712:	ed 91       	ld	r30, X+
    2714:	fc 91       	ld	r31, X
    2716:	11 97       	sbiw	r26, 0x01	; 1
    2718:	80 85       	ldd	r24, Z+8	; 0x08
    271a:	8b 30       	cpi	r24, 0x0B	; 11
    271c:	39 f4       	brne	.+14     	; 0x272c <fat_read_dir+0xb0>
            cluster_num = header->root_dir_cluster;
    271e:	5a 96       	adiw	r26, 0x1a	; 26
    2720:	8d 90       	ld	r8, X+
    2722:	9d 90       	ld	r9, X+
    2724:	ad 90       	ld	r10, X+
    2726:	bc 90       	ld	r11, X
    2728:	5d 97       	sbiw	r26, 0x1d	; 29
    272a:	85 c0       	rjmp	.+266    	; 0x2836 <fat_read_dir+0x1ba>
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    272c:	f3 01       	movw	r30, r6
    272e:	02 88       	ldd	r0, Z+18	; 0x12
    2730:	f3 89       	ldd	r31, Z+19	; 0x13
    2732:	e0 2d       	mov	r30, r0
    2734:	d3 01       	movw	r26, r6
    2736:	56 96       	adiw	r26, 0x16	; 22
    2738:	8d 91       	ld	r24, X+
    273a:	9c 91       	ld	r25, X
    273c:	57 97       	sbiw	r26, 0x17	; 23
    273e:	e8 1b       	sub	r30, r24
    2740:	f9 0b       	sbc	r31, r25
    2742:	ff a3       	std	Y+39, r31	; 0x27
    2744:	ee a3       	std	Y+38, r30	; 0x26
    2746:	77 c0       	rjmp	.+238    	; 0x2836 <fat_read_dir+0x1ba>
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
        uint32_t pos = cluster_offset;
    2748:	72 01       	movw	r14, r4
    274a:	00 e0       	ldi	r16, 0x00	; 0
    274c:	10 e0       	ldi	r17, 0x00	; 0
        if(cluster_num == 0)
    274e:	81 14       	cp	r8, r1
    2750:	91 04       	cpc	r9, r1
    2752:	a1 04       	cpc	r10, r1
    2754:	b1 04       	cpc	r11, r1
    2756:	31 f4       	brne	.+12     	; 0x2764 <fat_read_dir+0xe8>
            pos += header->root_dir_offset;
    2758:	f3 01       	movw	r30, r6
    275a:	66 89       	ldd	r22, Z+22	; 0x16
    275c:	77 89       	ldd	r23, Z+23	; 0x17
    275e:	80 8d       	ldd	r24, Z+24	; 0x18
    2760:	91 8d       	ldd	r25, Z+25	; 0x19
    2762:	2a c0       	rjmp	.+84     	; 0x27b8 <fat_read_dir+0x13c>
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    2764:	61 14       	cp	r6, r1
    2766:	71 04       	cpc	r7, r1
    2768:	09 f1       	breq	.+66     	; 0x27ac <fat_read_dir+0x130>
    276a:	f2 e0       	ldi	r31, 0x02	; 2
    276c:	8f 16       	cp	r8, r31
    276e:	91 04       	cpc	r9, r1
    2770:	a1 04       	cpc	r10, r1
    2772:	b1 04       	cpc	r11, r1
    2774:	d8 f0       	brcs	.+54     	; 0x27ac <fat_read_dir+0x130>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    2776:	c5 01       	movw	r24, r10
    2778:	b4 01       	movw	r22, r8
    277a:	62 50       	subi	r22, 0x02	; 2
    277c:	70 40       	sbci	r23, 0x00	; 0
    277e:	80 40       	sbci	r24, 0x00	; 0
    2780:	90 40       	sbci	r25, 0x00	; 0
    2782:	d3 01       	movw	r26, r6
    2784:	50 96       	adiw	r26, 0x10	; 16
    2786:	2d 91       	ld	r18, X+
    2788:	3c 91       	ld	r19, X
    278a:	51 97       	sbiw	r26, 0x11	; 17
    278c:	40 e0       	ldi	r20, 0x00	; 0
    278e:	50 e0       	ldi	r21, 0x00	; 0
    2790:	0e 94 23 24 	call	0x4846	; 0x4846 <__mulsi3>
    2794:	9b 01       	movw	r18, r22
    2796:	ac 01       	movw	r20, r24
    2798:	f3 01       	movw	r30, r6
    279a:	82 89       	ldd	r24, Z+18	; 0x12
    279c:	93 89       	ldd	r25, Z+19	; 0x13
    279e:	a4 89       	ldd	r26, Z+20	; 0x14
    27a0:	b5 89       	ldd	r27, Z+21	; 0x15
    27a2:	28 0f       	add	r18, r24
    27a4:	39 1f       	adc	r19, r25
    27a6:	4a 1f       	adc	r20, r26
    27a8:	5b 1f       	adc	r21, r27
    27aa:	04 c0       	rjmp	.+8      	; 0x27b4 <fat_read_dir+0x138>
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e0       	ldi	r20, 0x00	; 0
    27b2:	50 e0       	ldi	r21, 0x00	; 0
        uint16_t cluster_left = cluster_size - cluster_offset;
        uint32_t pos = cluster_offset;
        if(cluster_num == 0)
            pos += header->root_dir_offset;
        else
            pos += fat_cluster_offset(fs, cluster_num);
    27b4:	ca 01       	movw	r24, r20
    27b6:	b9 01       	movw	r22, r18
    27b8:	6e 0d       	add	r22, r14
    27ba:	7f 1d       	adc	r23, r15
    27bc:	80 1f       	adc	r24, r16
    27be:	91 1f       	adc	r25, r17

        arg.bytes_read = 0;
    27c0:	1c 82       	std	Y+4, r1	; 0x04
    27c2:	1b 82       	std	Y+3, r1	; 0x03
        if(!fs->partition->device_read_interval(pos,
    27c4:	d3 01       	movw	r26, r6
    27c6:	ed 91       	ld	r30, X+
    27c8:	fc 91       	ld	r31, X
    27ca:	0e a1       	ldd	r16, Y+38	; 0x26
    27cc:	1f a1       	ldd	r17, Y+39	; 0x27
    27ce:	04 19       	sub	r16, r4
    27d0:	15 09       	sbc	r17, r5
    27d2:	02 80       	ldd	r0, Z+2	; 0x02
    27d4:	f3 81       	ldd	r31, Z+3	; 0x03
    27d6:	e0 2d       	mov	r30, r0
    27d8:	ae 01       	movw	r20, r28
    27da:	4a 5f       	subi	r20, 0xFA	; 250
    27dc:	5f 4f       	sbci	r21, 0xFF	; 255
    27de:	20 e2       	ldi	r18, 0x20	; 32
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	ad e4       	ldi	r26, 0x4D	; 77
    27e4:	ea 2e       	mov	r14, r26
    27e6:	a0 e1       	ldi	r26, 0x10	; 16
    27e8:	fa 2e       	mov	r15, r26
    27ea:	6e 01       	movw	r12, r28
    27ec:	08 94       	sec
    27ee:	c1 1c       	adc	r12, r1
    27f0:	d1 1c       	adc	r13, r1
    27f2:	09 95       	icall
    27f4:	88 23       	and	r24, r24
    27f6:	c9 f1       	breq	.+114    	; 0x286a <fat_read_dir+0x1ee>
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;

        cluster_offset += arg.bytes_read;
    27f8:	8b 81       	ldd	r24, Y+3	; 0x03
    27fa:	9c 81       	ldd	r25, Y+4	; 0x04
    27fc:	48 0e       	add	r4, r24
    27fe:	59 1e       	adc	r5, r25

        if(cluster_offset >= cluster_size)
    2800:	ee a1       	ldd	r30, Y+38	; 0x26
    2802:	ff a1       	ldd	r31, Y+39	; 0x27
    2804:	4e 16       	cp	r4, r30
    2806:	5f 06       	cpc	r5, r31
    2808:	d0 f0       	brcs	.+52     	; 0x283e <fat_read_dir+0x1c2>
        {
            /* we reached the cluster border and switch to the next cluster */
            cluster_offset = 0;

            /* get number of next cluster */
            if(!(cluster_num = fat_get_next_cluster(fs, cluster_num)))
    280a:	c3 01       	movw	r24, r6
    280c:	b5 01       	movw	r22, r10
    280e:	a4 01       	movw	r20, r8
    2810:	0e 94 a5 0b 	call	0x174a	; 0x174a <fat_get_next_cluster>
    2814:	4b 01       	movw	r8, r22
    2816:	5c 01       	movw	r10, r24
    2818:	44 24       	eor	r4, r4
    281a:	55 24       	eor	r5, r5
    281c:	61 15       	cp	r22, r1
    281e:	71 05       	cpc	r23, r1
    2820:	81 05       	cpc	r24, r1
    2822:	91 05       	cpc	r25, r1
    2824:	61 f4       	brne	.+24     	; 0x283e <fat_read_dir+0x1c2>
            {
                /* directory entry not found, reset directory handle */
                cluster_num = dd->dir_entry.cluster;
    2826:	d1 01       	movw	r26, r2
    2828:	93 96       	adiw	r26, 0x23	; 35
    282a:	8d 90       	ld	r8, X+
    282c:	9d 90       	ld	r9, X+
    282e:	ad 90       	ld	r10, X+
    2830:	bc 90       	ld	r11, X
    2832:	96 97       	sbiw	r26, 0x26	; 38
    2834:	08 c0       	rjmp	.+16     	; 0x2846 <fat_read_dir+0x1ca>
    /* reset directory entry */
    memset(dir_entry, 0, sizeof(*dir_entry));

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    arg.dir_entry = dir_entry;
    2836:	e8 a5       	ldd	r30, Y+40	; 0x28
    2838:	f9 a5       	ldd	r31, Y+41	; 0x29
    283a:	fa 83       	std	Y+2, r31	; 0x02
    283c:	e9 83       	std	Y+1, r30	; 0x01
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    }

    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    283e:	8d 81       	ldd	r24, Y+5	; 0x05
    2840:	88 23       	and	r24, r24
    2842:	09 f4       	brne	.+2      	; 0x2846 <fat_read_dir+0x1ca>
    2844:	81 cf       	rjmp	.-254    	; 0x2748 <fat_read_dir+0xcc>
                break;
            }
        }
    }

    dd->entry_cluster = cluster_num;
    2846:	d1 01       	movw	r26, r2
    2848:	9f 96       	adiw	r26, 0x2f	; 47
    284a:	8d 92       	st	X+, r8
    284c:	9d 92       	st	X+, r9
    284e:	ad 92       	st	X+, r10
    2850:	bc 92       	st	X, r11
    2852:	d2 97       	sbiw	r26, 0x32	; 50
    dd->entry_offset = cluster_offset;
    2854:	d4 96       	adiw	r26, 0x34	; 52
    2856:	5c 92       	st	X, r5
    2858:	4e 92       	st	-X, r4
    285a:	d3 97       	sbiw	r26, 0x33	; 51

    return dir_entry->long_name[0] != '\0' ? 1 : 0;
    285c:	e8 a5       	ldd	r30, Y+40	; 0x28
    285e:	f9 a5       	ldd	r31, Y+41	; 0x29
    2860:	80 81       	ld	r24, Z
    2862:	88 23       	and	r24, r24
    2864:	19 f0       	breq	.+6      	; 0x286c <fat_read_dir+0x1f0>
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	01 c0       	rjmp	.+2      	; 0x286c <fat_read_dir+0x1f0>
    286a:	80 e0       	ldi	r24, 0x00	; 0
}
    286c:	a9 96       	adiw	r28, 0x29	; 41
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	f8 94       	cli
    2872:	de bf       	out	0x3e, r29	; 62
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	cd bf       	out	0x3d, r28	; 61
    2878:	cf 91       	pop	r28
    287a:	df 91       	pop	r29
    287c:	1f 91       	pop	r17
    287e:	0f 91       	pop	r16
    2880:	ff 90       	pop	r15
    2882:	ef 90       	pop	r14
    2884:	df 90       	pop	r13
    2886:	cf 90       	pop	r12
    2888:	bf 90       	pop	r11
    288a:	af 90       	pop	r10
    288c:	9f 90       	pop	r9
    288e:	8f 90       	pop	r8
    2890:	7f 90       	pop	r7
    2892:	6f 90       	pop	r6
    2894:	5f 90       	pop	r5
    2896:	4f 90       	pop	r4
    2898:	3f 90       	pop	r3
    289a:	2f 90       	pop	r2
    289c:	08 95       	ret

0000289e <fat_open>:
 * \param[in] partition Discriptor of partition on which the filesystem resides.
 * \returns 0 on error, a FAT filesystem descriptor on success.
 * \see fat_close
 */
struct fat_fs_struct* fat_open(struct partition_struct* partition)
{
    289e:	2f 92       	push	r2
    28a0:	3f 92       	push	r3
    28a2:	4f 92       	push	r4
    28a4:	5f 92       	push	r5
    28a6:	6f 92       	push	r6
    28a8:	7f 92       	push	r7
    28aa:	8f 92       	push	r8
    28ac:	9f 92       	push	r9
    28ae:	af 92       	push	r10
    28b0:	bf 92       	push	r11
    28b2:	cf 92       	push	r12
    28b4:	df 92       	push	r13
    28b6:	ef 92       	push	r14
    28b8:	ff 92       	push	r15
    28ba:	0f 93       	push	r16
    28bc:	1f 93       	push	r17
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62
    28c6:	ee 97       	sbiw	r28, 0x3e	; 62
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	f8 94       	cli
    28cc:	de bf       	out	0x3e, r29	; 62
    28ce:	0f be       	out	0x3f, r0	; 63
    28d0:	cd bf       	out	0x3d, r28	; 61
    28d2:	9e af       	std	Y+62, r25	; 0x3e
    28d4:	8d af       	std	Y+61, r24	; 0x3d
    if(!partition ||
    28d6:	00 97       	sbiw	r24, 0x00	; 0
    28d8:	09 f4       	brne	.+2      	; 0x28dc <fat_open+0x3e>
    28da:	89 c1       	rjmp	.+786    	; 0x2bee <fat_open+0x350>
    28dc:	dc 01       	movw	r26, r24
    28de:	14 96       	adiw	r26, 0x04	; 4
    28e0:	8d 91       	ld	r24, X+
    28e2:	9c 91       	ld	r25, X
    28e4:	15 97       	sbiw	r26, 0x05	; 5
    28e6:	89 2b       	or	r24, r25
    28e8:	09 f4       	brne	.+2      	; 0x28ec <fat_open+0x4e>
    28ea:	81 c1       	rjmp	.+770    	; 0x2bee <fat_open+0x350>
    28ec:	16 96       	adiw	r26, 0x06	; 6
    28ee:	8d 91       	ld	r24, X+
    28f0:	9c 91       	ld	r25, X
    28f2:	17 97       	sbiw	r26, 0x07	; 7
    28f4:	89 2b       	or	r24, r25
    28f6:	09 f4       	brne	.+2      	; 0x28fa <fat_open+0x5c>
    28f8:	7a c1       	rjmp	.+756    	; 0x2bee <fat_open+0x350>
    28fa:	c0 c1       	rjmp	.+896    	; 0x2c7c <fat_open+0x3de>
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
        return 0;

    uint16_t bytes_per_sector = ltoh16(*((uint16_t*) &buffer[0x00]));
    28fc:	e9 81       	ldd	r30, Y+1	; 0x01
    28fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2900:	fb ab       	std	Y+51, r31	; 0x33
    2902:	ea ab       	std	Y+50, r30	; 0x32
    uint16_t reserved_sectors = ltoh16(*((uint16_t*) &buffer[0x03]));
    2904:	2c 81       	ldd	r18, Y+4	; 0x04
    2906:	3d 81       	ldd	r19, Y+5	; 0x05
    uint8_t sectors_per_cluster = buffer[0x02];
    2908:	fb 81       	ldd	r31, Y+3	; 0x03
    290a:	fc ab       	std	Y+52, r31	; 0x34
    uint8_t fat_copies = buffer[0x05];
    290c:	4e 81       	ldd	r20, Y+6	; 0x06
    uint16_t max_root_entries = ltoh16(*((uint16_t*) &buffer[0x06]));
    290e:	ef 80       	ldd	r14, Y+7	; 0x07
    2910:	f8 84       	ldd	r15, Y+8	; 0x08
    2912:	fe aa       	std	Y+54, r15	; 0x36
    2914:	ed aa       	std	Y+53, r14	; 0x35
    uint16_t sector_count_16 = ltoh16(*((uint16_t*) &buffer[0x08]));
    2916:	e9 85       	ldd	r30, Y+9	; 0x09
    2918:	fa 85       	ldd	r31, Y+10	; 0x0a
    uint16_t sectors_per_fat = ltoh16(*((uint16_t*) &buffer[0x0b]));
    291a:	0c 85       	ldd	r16, Y+12	; 0x0c
    291c:	1d 85       	ldd	r17, Y+13	; 0x0d
    291e:	18 af       	std	Y+56, r17	; 0x38
    2920:	0f ab       	std	Y+55, r16	; 0x37
    uint32_t sector_count = ltoh32(*((uint32_t*) &buffer[0x15]));
    2922:	6e 88       	ldd	r6, Y+22	; 0x16
    2924:	7f 88       	ldd	r7, Y+23	; 0x17
    2926:	88 8c       	ldd	r8, Y+24	; 0x18
    2928:	99 8c       	ldd	r9, Y+25	; 0x19
#if FAT_FAT32_SUPPORT
    uint32_t sectors_per_fat32 = ltoh32(*((uint32_t*) &buffer[0x19]));
    292a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    292c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    292e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2930:	9d 8d       	ldd	r25, Y+29	; 0x1d
    uint32_t cluster_root_dir = ltoh32(*((uint32_t*) &buffer[0x21]));
    2932:	ea a0       	ldd	r14, Y+34	; 0x22
    2934:	fb a0       	ldd	r15, Y+35	; 0x23
    2936:	0c a1       	ldd	r16, Y+36	; 0x24
    2938:	1d a1       	ldd	r17, Y+37	; 0x25
    293a:	e9 ae       	std	Y+57, r14	; 0x39
    293c:	fa ae       	std	Y+58, r15	; 0x3a
    293e:	0b af       	std	Y+59, r16	; 0x3b
    2940:	1c af       	std	Y+60, r17	; 0x3c
#endif

    if(sector_count == 0)
    2942:	61 14       	cp	r6, r1
    2944:	71 04       	cpc	r7, r1
    2946:	81 04       	cpc	r8, r1
    2948:	91 04       	cpc	r9, r1
    294a:	31 f4       	brne	.+12     	; 0x2958 <fat_open+0xba>
    {
        if(sector_count_16 == 0)
    294c:	30 97       	sbiw	r30, 0x00	; 0
    294e:	09 f4       	brne	.+2      	; 0x2952 <fat_open+0xb4>
    2950:	4a c1       	rjmp	.+660    	; 0x2be6 <fat_open+0x348>
            /* illegal volume size */
            return 0;
        else
            sector_count = sector_count_16;
    2952:	3f 01       	movw	r6, r30
    2954:	88 24       	eor	r8, r8
    2956:	99 24       	eor	r9, r9
    }
#if FAT_FAT32_SUPPORT
    if(sectors_per_fat != 0)
    2958:	0f a9       	ldd	r16, Y+55	; 0x37
    295a:	18 ad       	ldd	r17, Y+56	; 0x38
    295c:	01 15       	cp	r16, r1
    295e:	11 05       	cpc	r17, r1
    2960:	21 f0       	breq	.+8      	; 0x296a <fat_open+0xcc>
        sectors_per_fat32 = sectors_per_fat;
    2962:	b8 01       	movw	r22, r16
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	06 c0       	rjmp	.+12     	; 0x2976 <fat_open+0xd8>
    else if(sectors_per_fat32 == 0)
    296a:	61 15       	cp	r22, r1
    296c:	71 05       	cpc	r23, r1
    296e:	81 05       	cpc	r24, r1
    2970:	91 05       	cpc	r25, r1
    2972:	09 f4       	brne	.+2      	; 0x2976 <fat_open+0xd8>
    2974:	38 c1       	rjmp	.+624    	; 0x2be6 <fat_open+0x348>
#if FAT_FAT32_SUPPORT
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    2976:	79 01       	movw	r14, r18
    2978:	00 e0       	ldi	r16, 0x00	; 0
    297a:	10 e0       	ldi	r17, 0x00	; 0
    297c:	ee a2       	std	Y+38, r14	; 0x26
    297e:	ff a2       	std	Y+39, r15	; 0x27
    2980:	08 a7       	std	Y+40, r16	; 0x28
    2982:	19 a7       	std	Y+41, r17	; 0x29
    2984:	04 2f       	mov	r16, r20
    2986:	10 e0       	ldi	r17, 0x00	; 0
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	0a a7       	std	Y+42, r16	; 0x2a
    298e:	1b a7       	std	Y+43, r17	; 0x2b
    2990:	2c a7       	std	Y+44, r18	; 0x2c
    2992:	3d a7       	std	Y+45, r19	; 0x2d
    2994:	a9 01       	movw	r20, r18
    2996:	98 01       	movw	r18, r16
    2998:	0e 94 23 24 	call	0x4846	; 0x4846 <__mulsi3>
    299c:	6e a7       	std	Y+46, r22	; 0x2e
    299e:	7f a7       	std	Y+47, r23	; 0x2f
    29a0:	88 ab       	std	Y+48, r24	; 0x30
    29a2:	99 ab       	std	Y+49, r25	; 0x31
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
    29a4:	84 01       	movw	r16, r8
    29a6:	73 01       	movw	r14, r6
    29a8:	2e a1       	ldd	r18, Y+38	; 0x26
    29aa:	3f a1       	ldd	r19, Y+39	; 0x27
    29ac:	48 a5       	ldd	r20, Y+40	; 0x28
    29ae:	59 a5       	ldd	r21, Y+41	; 0x29
    29b0:	e2 1a       	sub	r14, r18
    29b2:	f3 0a       	sbc	r15, r19
    29b4:	04 0b       	sbc	r16, r20
    29b6:	15 0b       	sbc	r17, r21
    29b8:	e6 1a       	sub	r14, r22
    29ba:	f7 0a       	sbc	r15, r23
    29bc:	08 0b       	sbc	r16, r24
    29be:	19 0b       	sbc	r17, r25
    29c0:	8a a9       	ldd	r24, Y+50	; 0x32
    29c2:	9b a9       	ldd	r25, Y+51	; 0x33
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	2d a9       	ldd	r18, Y+53	; 0x35
    29c8:	3e a9       	ldd	r19, Y+54	; 0x36
    29ca:	45 e0       	ldi	r20, 0x05	; 5
    29cc:	22 0f       	add	r18, r18
    29ce:	33 1f       	adc	r19, r19
    29d0:	4a 95       	dec	r20
    29d2:	e1 f7       	brne	.-8      	; 0x29cc <fat_open+0x12e>
    29d4:	82 0f       	add	r24, r18
    29d6:	93 1f       	adc	r25, r19
    29d8:	6a a9       	ldd	r22, Y+50	; 0x32
    29da:	7b a9       	ldd	r23, Y+51	; 0x33
    29dc:	0e 94 42 24 	call	0x4884	; 0x4884 <__udivmodhi4>
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	e6 1a       	sub	r14, r22
    29e6:	f7 0a       	sbc	r15, r23
    29e8:	08 0b       	sbc	r16, r24
    29ea:	19 0b       	sbc	r17, r25
    29ec:	8c a9       	ldd	r24, Y+52	; 0x34
    29ee:	28 2f       	mov	r18, r24
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	40 e0       	ldi	r20, 0x00	; 0
    29f4:	50 e0       	ldi	r21, 0x00	; 0
    29f6:	c8 01       	movw	r24, r16
    29f8:	b7 01       	movw	r22, r14
    29fa:	0e 94 69 24 	call	0x48d2	; 0x48d2 <__udivmodsi4>
    29fe:	79 01       	movw	r14, r18
    2a00:	8a 01       	movw	r16, r20
    if(data_cluster_count < 4085)
    2a02:	95 ef       	ldi	r25, 0xF5	; 245
    2a04:	e9 16       	cp	r14, r25
    2a06:	9f e0       	ldi	r25, 0x0F	; 15
    2a08:	f9 06       	cpc	r15, r25
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	09 07       	cpc	r16, r25
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	19 07       	cpc	r17, r25
    2a12:	08 f4       	brcc	.+2      	; 0x2a16 <fat_open+0x178>
    2a14:	e8 c0       	rjmp	.+464    	; 0x2be6 <fat_open+0x348>
        /* this is a FAT12, not supported */
        return 0;
    else if(data_cluster_count < 65525)
    2a16:	a5 ef       	ldi	r26, 0xF5	; 245
    2a18:	ea 16       	cp	r14, r26
    2a1a:	af ef       	ldi	r26, 0xFF	; 255
    2a1c:	fa 06       	cpc	r15, r26
    2a1e:	a0 e0       	ldi	r26, 0x00	; 0
    2a20:	0a 07       	cpc	r16, r26
    2a22:	a0 e0       	ldi	r26, 0x00	; 0
    2a24:	1a 07       	cpc	r17, r26
    2a26:	28 f4       	brcc	.+10     	; 0x2a32 <fat_open+0x194>
        /* this is a FAT16 */
        partition->type = PARTITION_TYPE_FAT16;
    2a28:	86 e0       	ldi	r24, 0x06	; 6
    2a2a:	ed ad       	ldd	r30, Y+61	; 0x3d
    2a2c:	fe ad       	ldd	r31, Y+62	; 0x3e
    2a2e:	80 87       	std	Z+8, r24	; 0x08
    2a30:	05 c0       	rjmp	.+10     	; 0x2a3c <fat_open+0x19e>
    else
        /* this is a FAT32 */
        partition->type = PARTITION_TYPE_FAT32;
    2a32:	8b e0       	ldi	r24, 0x0B	; 11
    2a34:	ad ad       	ldd	r26, Y+61	; 0x3d
    2a36:	be ad       	ldd	r27, Y+62	; 0x3e
    2a38:	18 96       	adiw	r26, 0x08	; 8
    2a3a:	8c 93       	st	X, r24

    /* fill header information */
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
    2a3c:	8c e1       	ldi	r24, 0x1C	; 28
    2a3e:	ef e3       	ldi	r30, 0x3F	; 63
    2a40:	f1 e0       	ldi	r31, 0x01	; 1
    2a42:	df 01       	movw	r26, r30
    2a44:	1d 92       	st	X+, r1
    2a46:	8a 95       	dec	r24
    2a48:	e9 f7       	brne	.-6      	; 0x2a44 <fat_open+0x1a6>
    
    header->size = (offset_t) sector_count * bytes_per_sector;
    2a4a:	ea a9       	ldd	r30, Y+50	; 0x32
    2a4c:	fb a9       	ldd	r31, Y+51	; 0x33
    2a4e:	5f 01       	movw	r10, r30
    2a50:	cc 24       	eor	r12, r12
    2a52:	dd 24       	eor	r13, r13
    2a54:	c4 01       	movw	r24, r8
    2a56:	b3 01       	movw	r22, r6
    2a58:	a6 01       	movw	r20, r12
    2a5a:	95 01       	movw	r18, r10
    2a5c:	0e 94 23 24 	call	0x4846	; 0x4846 <__mulsi3>
    2a60:	60 93 3f 01 	sts	0x013F, r22
    2a64:	70 93 40 01 	sts	0x0140, r23
    2a68:	80 93 41 01 	sts	0x0141, r24
    2a6c:	90 93 42 01 	sts	0x0142, r25

    header->fat_offset = /* jump to partition */
    2a70:	c6 01       	movw	r24, r12
    2a72:	b5 01       	movw	r22, r10
    2a74:	2e a1       	ldd	r18, Y+38	; 0x26
    2a76:	3f a1       	ldd	r19, Y+39	; 0x27
    2a78:	48 a5       	ldd	r20, Y+40	; 0x28
    2a7a:	59 a5       	ldd	r21, Y+41	; 0x29
    2a7c:	0e 94 23 24 	call	0x4846	; 0x4846 <__mulsi3>
    2a80:	26 0e       	add	r2, r22
    2a82:	37 1e       	adc	r3, r23
    2a84:	48 1e       	adc	r4, r24
    2a86:	59 1e       	adc	r5, r25
    2a88:	20 92 43 01 	sts	0x0143, r2
    2a8c:	30 92 44 01 	sts	0x0144, r3
    2a90:	40 92 45 01 	sts	0x0145, r4
    2a94:	50 92 46 01 	sts	0x0146, r5
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);
    2a98:	ad ad       	ldd	r26, Y+61	; 0x3d
    2a9a:	be ad       	ldd	r27, Y+62	; 0x3e
    2a9c:	18 96       	adiw	r26, 0x08	; 8
    2a9e:	8c 91       	ld	r24, X
    2aa0:	86 30       	cpi	r24, 0x06	; 6
    2aa2:	29 f0       	breq	.+10     	; 0x2aae <fat_open+0x210>
    2aa4:	64 e0       	ldi	r22, 0x04	; 4
    2aa6:	70 e0       	ldi	r23, 0x00	; 0
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	04 c0       	rjmp	.+8      	; 0x2ab6 <fat_open+0x218>
    2aae:	62 e0       	ldi	r22, 0x02	; 2
    2ab0:	70 e0       	ldi	r23, 0x00	; 0
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	22 e0       	ldi	r18, 0x02	; 2
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e0       	ldi	r20, 0x00	; 0
    2abc:	50 e0       	ldi	r21, 0x00	; 0
    2abe:	e2 0e       	add	r14, r18
    2ac0:	f3 1e       	adc	r15, r19
    2ac2:	04 1f       	adc	r16, r20
    2ac4:	15 1f       	adc	r17, r21
    2ac6:	a8 01       	movw	r20, r16
    2ac8:	97 01       	movw	r18, r14
    2aca:	0e 94 23 24 	call	0x4846	; 0x4846 <__mulsi3>
    2ace:	60 93 47 01 	sts	0x0147, r22
    2ad2:	70 93 48 01 	sts	0x0148, r23
    2ad6:	80 93 49 01 	sts	0x0149, r24
    2ada:	90 93 4a 01 	sts	0x014A, r25

    header->sector_size = bytes_per_sector;
    2ade:	4a a9       	ldd	r20, Y+50	; 0x32
    2ae0:	5b a9       	ldd	r21, Y+51	; 0x33
    2ae2:	50 93 4c 01 	sts	0x014C, r21
    2ae6:	40 93 4b 01 	sts	0x014B, r20
    header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
    2aea:	5c a9       	ldd	r21, Y+52	; 0x34
    2aec:	85 2f       	mov	r24, r21
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	dc 01       	movw	r26, r24
    2af2:	ea a9       	ldd	r30, Y+50	; 0x32
    2af4:	fb a9       	ldd	r31, Y+51	; 0x33
    2af6:	ae 9f       	mul	r26, r30
    2af8:	c0 01       	movw	r24, r0
    2afa:	af 9f       	mul	r26, r31
    2afc:	90 0d       	add	r25, r0
    2afe:	be 9f       	mul	r27, r30
    2b00:	90 0d       	add	r25, r0
    2b02:	11 24       	eor	r1, r1
    2b04:	90 93 4e 01 	sts	0x014E, r25
    2b08:	80 93 4d 01 	sts	0x014D, r24

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
    2b0c:	ad ad       	ldd	r26, Y+61	; 0x3d
    2b0e:	be ad       	ldd	r27, Y+62	; 0x3e
    2b10:	18 96       	adiw	r26, 0x08	; 8
    2b12:	8c 91       	ld	r24, X
    2b14:	86 30       	cpi	r24, 0x06	; 6
    2b16:	e1 f5       	brne	.+120    	; 0x2b90 <fat_open+0x2f2>
#endif
    {
        header->root_dir_offset = /* jump to fats */
    2b18:	ef a9       	ldd	r30, Y+55	; 0x37
    2b1a:	f8 ad       	ldd	r31, Y+56	; 0x38
    2b1c:	9f 01       	movw	r18, r30
    2b1e:	40 e0       	ldi	r20, 0x00	; 0
    2b20:	50 e0       	ldi	r21, 0x00	; 0
    2b22:	c6 01       	movw	r24, r12
    2b24:	b5 01       	movw	r22, r10
    2b26:	0e 94 23 24 	call	0x4846	; 0x4846 <__mulsi3>
    2b2a:	2a a5       	ldd	r18, Y+42	; 0x2a
    2b2c:	3b a5       	ldd	r19, Y+43	; 0x2b
    2b2e:	4c a5       	ldd	r20, Y+44	; 0x2c
    2b30:	5d a5       	ldd	r21, Y+45	; 0x2d
    2b32:	0e 94 23 24 	call	0x4846	; 0x4846 <__mulsi3>
    2b36:	20 91 43 01 	lds	r18, 0x0143
    2b3a:	30 91 44 01 	lds	r19, 0x0144
    2b3e:	40 91 45 01 	lds	r20, 0x0145
    2b42:	50 91 46 01 	lds	r21, 0x0146
    2b46:	62 0f       	add	r22, r18
    2b48:	73 1f       	adc	r23, r19
    2b4a:	84 1f       	adc	r24, r20
    2b4c:	95 1f       	adc	r25, r21
    2b4e:	60 93 53 01 	sts	0x0153, r22
    2b52:	70 93 54 01 	sts	0x0154, r23
    2b56:	80 93 55 01 	sts	0x0155, r24
    2b5a:	90 93 56 01 	sts	0x0156, r25
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
    2b5e:	ed a8       	ldd	r14, Y+53	; 0x35
    2b60:	fe a8       	ldd	r15, Y+54	; 0x36
    2b62:	97 01       	movw	r18, r14
    2b64:	40 e0       	ldi	r20, 0x00	; 0
    2b66:	50 e0       	ldi	r21, 0x00	; 0
    2b68:	15 e0       	ldi	r17, 0x05	; 5
    2b6a:	22 0f       	add	r18, r18
    2b6c:	33 1f       	adc	r19, r19
    2b6e:	44 1f       	adc	r20, r20
    2b70:	55 1f       	adc	r21, r21
    2b72:	1a 95       	dec	r17
    2b74:	d1 f7       	brne	.-12     	; 0x2b6a <fat_open+0x2cc>
    2b76:	62 0f       	add	r22, r18
    2b78:	73 1f       	adc	r23, r19
    2b7a:	84 1f       	adc	r24, r20
    2b7c:	95 1f       	adc	r25, r21
    2b7e:	60 93 4f 01 	sts	0x014F, r22
    2b82:	70 93 50 01 	sts	0x0150, r23
    2b86:	80 93 51 01 	sts	0x0151, r24
    2b8a:	90 93 52 01 	sts	0x0152, r25
    2b8e:	28 c0       	rjmp	.+80     	; 0x2be0 <fat_open+0x342>
                                      (offset_t) max_root_entries * 32;
    }
#if FAT_FAT32_SUPPORT
    else
    {
        header->cluster_zero_offset = /* jump to fats */
    2b90:	6e a5       	ldd	r22, Y+46	; 0x2e
    2b92:	7f a5       	ldd	r23, Y+47	; 0x2f
    2b94:	88 a9       	ldd	r24, Y+48	; 0x30
    2b96:	99 a9       	ldd	r25, Y+49	; 0x31
    2b98:	a6 01       	movw	r20, r12
    2b9a:	95 01       	movw	r18, r10
    2b9c:	0e 94 23 24 	call	0x4846	; 0x4846 <__mulsi3>
    2ba0:	20 91 43 01 	lds	r18, 0x0143
    2ba4:	30 91 44 01 	lds	r19, 0x0144
    2ba8:	40 91 45 01 	lds	r20, 0x0145
    2bac:	50 91 46 01 	lds	r21, 0x0146
    2bb0:	26 0f       	add	r18, r22
    2bb2:	37 1f       	adc	r19, r23
    2bb4:	48 1f       	adc	r20, r24
    2bb6:	59 1f       	adc	r21, r25
    2bb8:	20 93 4f 01 	sts	0x014F, r18
    2bbc:	30 93 50 01 	sts	0x0150, r19
    2bc0:	40 93 51 01 	sts	0x0151, r20
    2bc4:	50 93 52 01 	sts	0x0152, r21
                                      header->fat_offset +
                                      /* skip fats */
                                      (offset_t) fat_copies * sectors_per_fat32 * bytes_per_sector;

        header->root_dir_cluster = cluster_root_dir;
    2bc8:	09 ad       	ldd	r16, Y+57	; 0x39
    2bca:	1a ad       	ldd	r17, Y+58	; 0x3a
    2bcc:	2b ad       	ldd	r18, Y+59	; 0x3b
    2bce:	3c ad       	ldd	r19, Y+60	; 0x3c
    2bd0:	00 93 57 01 	sts	0x0157, r16
    2bd4:	10 93 58 01 	sts	0x0158, r17
    2bd8:	20 93 59 01 	sts	0x0159, r18
    2bdc:	30 93 5a 01 	sts	0x015A, r19
    2be0:	2d e3       	ldi	r18, 0x3D	; 61
    2be2:	31 e0       	ldi	r19, 0x01	; 1
    2be4:	06 c0       	rjmp	.+12     	; 0x2bf2 <fat_open+0x354>
    if(!fat_read_header(fs))
    {
#if USE_DYNAMIC_MEMORY
        free(fs);
#else
        fs->partition = 0;
    2be6:	10 92 3e 01 	sts	0x013E, r1
    2bea:	10 92 3d 01 	sts	0x013D, r1
#endif
        return 0;
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    }
    
    return fs;
}
    2bf2:	c9 01       	movw	r24, r18
    2bf4:	ee 96       	adiw	r28, 0x3e	; 62
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	f8 94       	cli
    2bfa:	de bf       	out	0x3e, r29	; 62
    2bfc:	0f be       	out	0x3f, r0	; 63
    2bfe:	cd bf       	out	0x3d, r28	; 61
    2c00:	cf 91       	pop	r28
    2c02:	df 91       	pop	r29
    2c04:	1f 91       	pop	r17
    2c06:	0f 91       	pop	r16
    2c08:	ff 90       	pop	r15
    2c0a:	ef 90       	pop	r14
    2c0c:	df 90       	pop	r13
    2c0e:	cf 90       	pop	r12
    2c10:	bf 90       	pop	r11
    2c12:	af 90       	pop	r10
    2c14:	9f 90       	pop	r9
    2c16:	8f 90       	pop	r8
    2c18:	7f 90       	pop	r7
    2c1a:	6f 90       	pop	r6
    2c1c:	5f 90       	pop	r5
    2c1e:	4f 90       	pop	r4
    2c20:	3f 90       	pop	r3
    2c22:	2f 90       	pop	r2
    2c24:	08 95       	ret
    }
    if(i >= FAT_FS_COUNT)
        return 0;
#endif

    memset(fs, 0, sizeof(*fs));
    2c26:	ed e3       	ldi	r30, 0x3D	; 61
    2c28:	f1 e0       	ldi	r31, 0x01	; 1
    2c2a:	8e e1       	ldi	r24, 0x1E	; 30
    2c2c:	df 01       	movw	r26, r30
    2c2e:	1d 92       	st	X+, r1
    2c30:	8a 95       	dec	r24
    2c32:	e9 f7       	brne	.-6      	; 0x2c2e <fat_open+0x390>

    fs->partition = partition;
    2c34:	ed ad       	ldd	r30, Y+61	; 0x3d
    2c36:	fe ad       	ldd	r31, Y+62	; 0x3e
    2c38:	f0 93 3e 01 	sts	0x013E, r31
    2c3c:	e0 93 3d 01 	sts	0x013D, r30
#if FAT_FAT32_SUPPORT
    uint8_t buffer[37];
#else
    uint8_t buffer[25];
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
    2c40:	21 84       	ldd	r2, Z+9	; 0x09
    2c42:	32 84       	ldd	r3, Z+10	; 0x0a
    2c44:	43 84       	ldd	r4, Z+11	; 0x0b
    2c46:	54 84       	ldd	r5, Z+12	; 0x0c
    2c48:	b9 e0       	ldi	r27, 0x09	; 9
    2c4a:	22 0c       	add	r2, r2
    2c4c:	33 1c       	adc	r3, r3
    2c4e:	44 1c       	adc	r4, r4
    2c50:	55 1c       	adc	r5, r5
    2c52:	ba 95       	dec	r27
    2c54:	d1 f7       	brne	.-12     	; 0x2c4a <fat_open+0x3ac>
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
    2c56:	c2 01       	movw	r24, r4
    2c58:	b1 01       	movw	r22, r2
    2c5a:	65 5f       	subi	r22, 0xF5	; 245
    2c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c5e:	8f 4f       	sbci	r24, 0xFF	; 255
    2c60:	9f 4f       	sbci	r25, 0xFF	; 255
    2c62:	01 90       	ld	r0, Z+
    2c64:	f0 81       	ld	r31, Z
    2c66:	e0 2d       	mov	r30, r0
    2c68:	ae 01       	movw	r20, r28
    2c6a:	4f 5f       	subi	r20, 0xFF	; 255
    2c6c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c6e:	25 e2       	ldi	r18, 0x25	; 37
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	09 95       	icall
    2c74:	88 23       	and	r24, r24
    2c76:	09 f4       	brne	.+2      	; 0x2c7a <fat_open+0x3dc>
    2c78:	b6 cf       	rjmp	.-148    	; 0x2be6 <fat_open+0x348>
    2c7a:	40 ce       	rjmp	.-896    	; 0x28fc <fat_open+0x5e>
#else
    struct fat_fs_struct* fs = fat_fs_handles;
    uint8_t i;
    for(i = 0; i < FAT_FS_COUNT; ++i)
    {
        if(!fs->partition)
    2c7c:	80 91 3d 01 	lds	r24, 0x013D
    2c80:	90 91 3e 01 	lds	r25, 0x013E
    2c84:	89 2b       	or	r24, r25
    2c86:	09 f0       	breq	.+2      	; 0x2c8a <fat_open+0x3ec>
    2c88:	b2 cf       	rjmp	.-156    	; 0x2bee <fat_open+0x350>
    2c8a:	cd cf       	rjmp	.-102    	; 0x2c26 <fat_open+0x388>

00002c8c <fat_find_offset_for_dir_entry>:
 * \param[in] parent The directory in which to search.
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(const struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
{
    2c8c:	2f 92       	push	r2
    2c8e:	3f 92       	push	r3
    2c90:	4f 92       	push	r4
    2c92:	5f 92       	push	r5
    2c94:	6f 92       	push	r6
    2c96:	7f 92       	push	r7
    2c98:	8f 92       	push	r8
    2c9a:	9f 92       	push	r9
    2c9c:	af 92       	push	r10
    2c9e:	bf 92       	push	r11
    2ca0:	cf 92       	push	r12
    2ca2:	df 92       	push	r13
    2ca4:	ef 92       	push	r14
    2ca6:	ff 92       	push	r15
    2ca8:	0f 93       	push	r16
    2caa:	1f 93       	push	r17
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	00 d0       	rcall	.+0      	; 0x2cb2 <fat_find_offset_for_dir_entry+0x26>
    2cb2:	00 d0       	rcall	.+0      	; 0x2cb4 <fat_find_offset_for_dir_entry+0x28>
    2cb4:	0f 92       	push	r0
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
    2cba:	9d 83       	std	Y+5, r25	; 0x05
    2cbc:	8c 83       	std	Y+4, r24	; 0x04
    2cbe:	9b 01       	movw	r18, r22
    if(!fs || !dir_entry)
    2cc0:	89 2b       	or	r24, r25
    2cc2:	09 f4       	brne	.+2      	; 0x2cc6 <fat_find_offset_for_dir_entry+0x3a>
    2cc4:	f9 c0       	rjmp	.+498    	; 0x2eb8 <fat_find_offset_for_dir_entry+0x22c>
    2cc6:	41 15       	cp	r20, r1
    2cc8:	51 05       	cpc	r21, r1
    2cca:	09 f4       	brne	.+2      	; 0x2cce <fat_find_offset_for_dir_entry+0x42>
    2ccc:	f5 c0       	rjmp	.+490    	; 0x2eb8 <fat_find_offset_for_dir_entry+0x22c>
        return 0;

    /* search for a place where to write the directory entry to disk */
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
    2cce:	da 01       	movw	r26, r20
    2cd0:	0d 90       	ld	r0, X+
    2cd2:	00 20       	and	r0, r0
    2cd4:	e9 f7       	brne	.-6      	; 0x2cd0 <fat_find_offset_for_dir_entry+0x44>
    2cd6:	a4 1b       	sub	r26, r20
    2cd8:	b5 0b       	sbc	r27, r21
    2cda:	cd 01       	movw	r24, r26
    2cdc:	0b 96       	adiw	r24, 0x0b	; 11
    2cde:	6d e0       	ldi	r22, 0x0D	; 13
    2ce0:	70 e0       	ldi	r23, 0x00	; 0
    2ce2:	0e 94 42 24 	call	0x4884	; 0x4884 <__udivmodhi4>
    2ce6:	86 2f       	mov	r24, r22
    2ce8:	8f 5f       	subi	r24, 0xFF	; 255
    2cea:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t free_dir_entries_found = 0;
    cluster_t cluster_num = parent->dir_entry.cluster;
    2cec:	d9 01       	movw	r26, r18
    2cee:	93 96       	adiw	r26, 0x23	; 35
    2cf0:	2d 90       	ld	r2, X+
    2cf2:	3d 90       	ld	r3, X+
    2cf4:	4d 90       	ld	r4, X+
    2cf6:	5c 90       	ld	r5, X
    2cf8:	96 97       	sbiw	r26, 0x26	; 38
    offset_t dir_entry_offset = 0;
    offset_t offset = 0;
    offset_t offset_to = 0;
#if FAT_FAT32_SUPPORT
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
    2cfa:	ac 81       	ldd	r26, Y+4	; 0x04
    2cfc:	bd 81       	ldd	r27, Y+5	; 0x05
    2cfe:	ed 91       	ld	r30, X+
    2d00:	fc 91       	ld	r31, X
    2d02:	80 85       	ldd	r24, Z+8	; 0x08
#endif

    if(cluster_num == 0)
    2d04:	21 14       	cp	r2, r1
    2d06:	31 04       	cpc	r3, r1
    2d08:	41 04       	cpc	r4, r1
    2d0a:	51 04       	cpc	r5, r1
    2d0c:	41 f4       	brne	.+16     	; 0x2d1e <fat_find_offset_for_dir_entry+0x92>
    {
#if FAT_FAT32_SUPPORT
        if(is_fat32)
    2d0e:	8b 30       	cpi	r24, 0x0B	; 11
    2d10:	81 f4       	brne	.+32     	; 0x2d32 <fat_find_offset_for_dir_entry+0xa6>
        {
            cluster_num = fs->header.root_dir_cluster;
    2d12:	ec 81       	ldd	r30, Y+4	; 0x04
    2d14:	fd 81       	ldd	r31, Y+5	; 0x05
    2d16:	22 8c       	ldd	r2, Z+26	; 0x1a
    2d18:	33 8c       	ldd	r3, Z+27	; 0x1b
    2d1a:	44 8c       	ldd	r4, Z+28	; 0x1c
    2d1c:	55 8c       	ldd	r5, Z+29	; 0x1d
    2d1e:	aa 24       	eor	r10, r10
    2d20:	bb 24       	eor	r11, r11
    2d22:	65 01       	movw	r12, r10
    2d24:	ee 24       	eor	r14, r14
    2d26:	ff 24       	eor	r15, r15
    2d28:	87 01       	movw	r16, r14
    2d2a:	66 24       	eor	r6, r6
    2d2c:	77 24       	eor	r7, r7
    2d2e:	43 01       	movw	r8, r6
    2d30:	10 c0       	rjmp	.+32     	; 0x2d52 <fat_find_offset_for_dir_entry+0xc6>
        }
        else
#endif
        {
            /* we read/write from the root directory entry */
            offset = fs->header.root_dir_offset;
    2d32:	ac 81       	ldd	r26, Y+4	; 0x04
    2d34:	bd 81       	ldd	r27, Y+5	; 0x05
    2d36:	56 96       	adiw	r26, 0x16	; 22
    2d38:	ed 90       	ld	r14, X+
    2d3a:	fd 90       	ld	r15, X+
    2d3c:	0d 91       	ld	r16, X+
    2d3e:	1c 91       	ld	r17, X
    2d40:	59 97       	sbiw	r26, 0x19	; 25
            offset_to = fs->header.cluster_zero_offset;
    2d42:	52 96       	adiw	r26, 0x12	; 18
    2d44:	6d 90       	ld	r6, X+
    2d46:	7d 90       	ld	r7, X+
    2d48:	8d 90       	ld	r8, X+
    2d4a:	9c 90       	ld	r9, X
    2d4c:	55 97       	sbiw	r26, 0x15	; 21
    2d4e:	57 01       	movw	r10, r14
    2d50:	68 01       	movw	r12, r16
    2d52:	1a 82       	std	Y+2, r1	; 0x02
        }
    }
    
    while(1)
    {
        if(offset == offset_to)
    2d54:	e6 14       	cp	r14, r6
    2d56:	f7 04       	cpc	r15, r7
    2d58:	08 05       	cpc	r16, r8
    2d5a:	19 05       	cpc	r17, r9
    2d5c:	09 f0       	breq	.+2      	; 0x2d60 <fat_find_offset_for_dir_entry+0xd4>
    2d5e:	7e c0       	rjmp	.+252    	; 0x2e5c <fat_find_offset_for_dir_entry+0x1d0>
        {
            if(cluster_num == 0)
    2d60:	21 14       	cp	r2, r1
    2d62:	31 04       	cpc	r3, r1
    2d64:	41 04       	cpc	r4, r1
    2d66:	51 04       	cpc	r5, r1
    2d68:	09 f4       	brne	.+2      	; 0x2d6c <fat_find_offset_for_dir_entry+0xe0>
    2d6a:	a6 c0       	rjmp	.+332    	; 0x2eb8 <fat_find_offset_for_dir_entry+0x22c>
                /* We iterated through the whole root directory and
                 * could not find enough space for the directory entry.
                 */
                return 0;

            if(offset)
    2d6c:	e1 14       	cp	r14, r1
    2d6e:	f1 04       	cpc	r15, r1
    2d70:	01 05       	cpc	r16, r1
    2d72:	11 05       	cpc	r17, r1
    2d74:	e9 f1       	breq	.+122    	; 0x2df0 <fat_find_offset_for_dir_entry+0x164>
            {
                /* We reached a cluster boundary and have to
                 * switch to the next cluster.
                 */

                cluster_t cluster_next = fat_get_next_cluster(fs, cluster_num);
    2d76:	8c 81       	ldd	r24, Y+4	; 0x04
    2d78:	9d 81       	ldd	r25, Y+5	; 0x05
    2d7a:	b2 01       	movw	r22, r4
    2d7c:	a1 01       	movw	r20, r2
    2d7e:	0e 94 a5 0b 	call	0x174a	; 0x174a <fat_get_next_cluster>
                if(!cluster_next)
    2d82:	61 15       	cp	r22, r1
    2d84:	71 05       	cpc	r23, r1
    2d86:	81 05       	cpc	r24, r1
    2d88:	91 05       	cpc	r25, r1
    2d8a:	81 f5       	brne	.+96     	; 0x2dec <fat_find_offset_for_dir_entry+0x160>
                {
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
    2d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d90:	b2 01       	movw	r22, r4
    2d92:	a1 01       	movw	r20, r2
    2d94:	01 e0       	ldi	r16, 0x01	; 1
    2d96:	10 e0       	ldi	r17, 0x00	; 0
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <fat_append_clusters>
    2da0:	7b 01       	movw	r14, r22
    2da2:	8c 01       	movw	r16, r24
                    if(!cluster_next)
    2da4:	61 15       	cp	r22, r1
    2da6:	71 05       	cpc	r23, r1
    2da8:	81 05       	cpc	r24, r1
    2daa:	91 05       	cpc	r25, r1
    2dac:	09 f4       	brne	.+2      	; 0x2db0 <fat_find_offset_for_dir_entry+0x124>
    2dae:	84 c0       	rjmp	.+264    	; 0x2eb8 <fat_find_offset_for_dir_entry+0x22c>
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
    2db0:	62 50       	subi	r22, 0x02	; 2
    2db2:	70 40       	sbci	r23, 0x00	; 0
    2db4:	80 40       	sbci	r24, 0x00	; 0
    2db6:	90 40       	sbci	r25, 0x00	; 0
    2db8:	ec 81       	ldd	r30, Y+4	; 0x04
    2dba:	fd 81       	ldd	r31, Y+5	; 0x05
    2dbc:	20 89       	ldd	r18, Z+16	; 0x10
    2dbe:	31 89       	ldd	r19, Z+17	; 0x11
    2dc0:	40 e0       	ldi	r20, 0x00	; 0
    2dc2:	50 e0       	ldi	r21, 0x00	; 0
    2dc4:	0e 94 23 24 	call	0x4846	; 0x4846 <__mulsi3>
    2dc8:	5b 01       	movw	r10, r22
    2dca:	6c 01       	movw	r12, r24
    2dcc:	ec 81       	ldd	r30, Y+4	; 0x04
    2dce:	fd 81       	ldd	r31, Y+5	; 0x05
    2dd0:	82 89       	ldd	r24, Z+18	; 0x12
    2dd2:	93 89       	ldd	r25, Z+19	; 0x13
    2dd4:	a4 89       	ldd	r26, Z+20	; 0x14
    2dd6:	b5 89       	ldd	r27, Z+21	; 0x15
    2dd8:	a8 0e       	add	r10, r24
    2dda:	b9 1e       	adc	r11, r25
    2ddc:	ca 1e       	adc	r12, r26
    2dde:	db 1e       	adc	r13, r27
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;

                    /* clear cluster to avoid garbage directory entries */
                    fat_clear_cluster(fs, cluster_next);
    2de0:	cf 01       	movw	r24, r30
    2de2:	b8 01       	movw	r22, r16
    2de4:	a7 01       	movw	r20, r14
    2de6:	0e 94 df 12 	call	0x25be	; 0x25be <fat_clear_cluster>
    2dea:	69 c0       	rjmp	.+210    	; 0x2ebe <fat_find_offset_for_dir_entry+0x232>

                    break;
    2dec:	1b 01       	movw	r2, r22
    2dee:	2c 01       	movw	r4, r24
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    2df0:	f2 e0       	ldi	r31, 0x02	; 2
    2df2:	2f 16       	cp	r2, r31
    2df4:	31 04       	cpc	r3, r1
    2df6:	41 04       	cpc	r4, r1
    2df8:	51 04       	cpc	r5, r1
    2dfa:	20 f4       	brcc	.+8      	; 0x2e04 <fat_find_offset_for_dir_entry+0x178>
    2dfc:	ee 24       	eor	r14, r14
    2dfe:	ff 24       	eor	r15, r15
    2e00:	87 01       	movw	r16, r14
    2e02:	1c c0       	rjmp	.+56     	; 0x2e3c <fat_find_offset_for_dir_entry+0x1b0>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    2e04:	c2 01       	movw	r24, r4
    2e06:	b1 01       	movw	r22, r2
    2e08:	62 50       	subi	r22, 0x02	; 2
    2e0a:	70 40       	sbci	r23, 0x00	; 0
    2e0c:	80 40       	sbci	r24, 0x00	; 0
    2e0e:	90 40       	sbci	r25, 0x00	; 0
    2e10:	ac 81       	ldd	r26, Y+4	; 0x04
    2e12:	bd 81       	ldd	r27, Y+5	; 0x05
    2e14:	50 96       	adiw	r26, 0x10	; 16
    2e16:	2d 91       	ld	r18, X+
    2e18:	3c 91       	ld	r19, X
    2e1a:	51 97       	sbiw	r26, 0x11	; 17
    2e1c:	40 e0       	ldi	r20, 0x00	; 0
    2e1e:	50 e0       	ldi	r21, 0x00	; 0
    2e20:	0e 94 23 24 	call	0x4846	; 0x4846 <__mulsi3>
    2e24:	7b 01       	movw	r14, r22
    2e26:	8c 01       	movw	r16, r24
    2e28:	ec 81       	ldd	r30, Y+4	; 0x04
    2e2a:	fd 81       	ldd	r31, Y+5	; 0x05
    2e2c:	82 89       	ldd	r24, Z+18	; 0x12
    2e2e:	93 89       	ldd	r25, Z+19	; 0x13
    2e30:	a4 89       	ldd	r26, Z+20	; 0x14
    2e32:	b5 89       	ldd	r27, Z+21	; 0x15
    2e34:	e8 0e       	add	r14, r24
    2e36:	f9 1e       	adc	r15, r25
    2e38:	0a 1f       	adc	r16, r26
    2e3a:	1b 1f       	adc	r17, r27
                }
                cluster_num = cluster_next;
            }

            offset = fat_cluster_offset(fs, cluster_num);
            offset_to = offset + fs->header.cluster_size;
    2e3c:	ac 81       	ldd	r26, Y+4	; 0x04
    2e3e:	bd 81       	ldd	r27, Y+5	; 0x05
    2e40:	50 96       	adiw	r26, 0x10	; 16
    2e42:	8d 91       	ld	r24, X+
    2e44:	9c 91       	ld	r25, X
    2e46:	51 97       	sbiw	r26, 0x11	; 17
    2e48:	3c 01       	movw	r6, r24
    2e4a:	88 24       	eor	r8, r8
    2e4c:	99 24       	eor	r9, r9
    2e4e:	6e 0c       	add	r6, r14
    2e50:	7f 1c       	adc	r7, r15
    2e52:	80 1e       	adc	r8, r16
    2e54:	91 1e       	adc	r9, r17
    2e56:	57 01       	movw	r10, r14
    2e58:	68 01       	movw	r12, r16
    2e5a:	1a 82       	std	Y+2, r1	; 0x02
            free_dir_entries_found = 0;
        }
        
        /* read next lfn or 8.3 entry */
        uint8_t first_char;
        if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
    2e5c:	ac 81       	ldd	r26, Y+4	; 0x04
    2e5e:	bd 81       	ldd	r27, Y+5	; 0x05
    2e60:	ed 91       	ld	r30, X+
    2e62:	fc 91       	ld	r31, X
    2e64:	01 90       	ld	r0, Z+
    2e66:	f0 81       	ld	r31, Z
    2e68:	e0 2d       	mov	r30, r0
    2e6a:	c8 01       	movw	r24, r16
    2e6c:	b7 01       	movw	r22, r14
    2e6e:	ae 01       	movw	r20, r28
    2e70:	4f 5f       	subi	r20, 0xFF	; 255
    2e72:	5f 4f       	sbci	r21, 0xFF	; 255
    2e74:	21 e0       	ldi	r18, 0x01	; 1
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	09 95       	icall
    2e7a:	88 23       	and	r24, r24
    2e7c:	e9 f0       	breq	.+58     	; 0x2eb8 <fat_find_offset_for_dir_entry+0x22c>
            return 0;

        /* check if we found a free directory entry */
        if(first_char == FAT_DIRENTRY_DELETED || !first_char)
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
    2e80:	85 3e       	cpi	r24, 0xE5	; 229
    2e82:	11 f0       	breq	.+4      	; 0x2e88 <fat_find_offset_for_dir_entry+0x1fc>
    2e84:	88 23       	and	r24, r24
    2e86:	79 f4       	brne	.+30     	; 0x2ea6 <fat_find_offset_for_dir_entry+0x21a>
        {
            /* check if we have the needed number of available entries */
            ++free_dir_entries_found;
    2e88:	ba 81       	ldd	r27, Y+2	; 0x02
    2e8a:	bf 5f       	subi	r27, 0xFF	; 255
    2e8c:	ba 83       	std	Y+2, r27	; 0x02
            if(free_dir_entries_found >= free_dir_entries_needed)
    2e8e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e90:	be 17       	cp	r27, r30
    2e92:	a8 f4       	brcc	.+42     	; 0x2ebe <fat_find_offset_for_dir_entry+0x232>
                break;

            offset += 32;
    2e94:	80 e2       	ldi	r24, 0x20	; 32
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	a0 e0       	ldi	r26, 0x00	; 0
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	e8 0e       	add	r14, r24
    2e9e:	f9 1e       	adc	r15, r25
    2ea0:	0a 1f       	adc	r16, r26
    2ea2:	1b 1f       	adc	r17, r27
    2ea4:	57 cf       	rjmp	.-338    	; 0x2d54 <fat_find_offset_for_dir_entry+0xc8>
        }
        else
        {
            offset += 32;
    2ea6:	80 e2       	ldi	r24, 0x20	; 32
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	a0 e0       	ldi	r26, 0x00	; 0
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
    2eae:	e8 0e       	add	r14, r24
    2eb0:	f9 1e       	adc	r15, r25
    2eb2:	0a 1f       	adc	r16, r26
    2eb4:	1b 1f       	adc	r17, r27
    2eb6:	4b cf       	rjmp	.-362    	; 0x2d4e <fat_find_offset_for_dir_entry+0xc2>
    2eb8:	aa 24       	eor	r10, r10
    2eba:	bb 24       	eor	r11, r11
    2ebc:	65 01       	movw	r12, r10
            free_dir_entries_found = 0;
        }
    }

    return dir_entry_offset;
}
    2ebe:	b5 01       	movw	r22, r10
    2ec0:	c6 01       	movw	r24, r12
    2ec2:	0f 90       	pop	r0
    2ec4:	0f 90       	pop	r0
    2ec6:	0f 90       	pop	r0
    2ec8:	0f 90       	pop	r0
    2eca:	0f 90       	pop	r0
    2ecc:	cf 91       	pop	r28
    2ece:	df 91       	pop	r29
    2ed0:	1f 91       	pop	r17
    2ed2:	0f 91       	pop	r16
    2ed4:	ff 90       	pop	r15
    2ed6:	ef 90       	pop	r14
    2ed8:	df 90       	pop	r13
    2eda:	cf 90       	pop	r12
    2edc:	bf 90       	pop	r11
    2ede:	af 90       	pop	r10
    2ee0:	9f 90       	pop	r9
    2ee2:	8f 90       	pop	r8
    2ee4:	7f 90       	pop	r7
    2ee6:	6f 90       	pop	r6
    2ee8:	5f 90       	pop	r5
    2eea:	4f 90       	pop	r4
    2eec:	3f 90       	pop	r3
    2eee:	2f 90       	pop	r2
    2ef0:	08 95       	ret

00002ef2 <fat_write_dir_entry>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    2ef2:	3f 92       	push	r3
    2ef4:	4f 92       	push	r4
    2ef6:	5f 92       	push	r5
    2ef8:	6f 92       	push	r6
    2efa:	7f 92       	push	r7
    2efc:	8f 92       	push	r8
    2efe:	9f 92       	push	r9
    2f00:	af 92       	push	r10
    2f02:	bf 92       	push	r11
    2f04:	cf 92       	push	r12
    2f06:	df 92       	push	r13
    2f08:	ef 92       	push	r14
    2f0a:	ff 92       	push	r15
    2f0c:	0f 93       	push	r16
    2f0e:	1f 93       	push	r17
    2f10:	df 93       	push	r29
    2f12:	cf 93       	push	r28
    2f14:	cd b7       	in	r28, 0x3d	; 61
    2f16:	de b7       	in	r29, 0x3e	; 62
    2f18:	a0 97       	sbiw	r28, 0x20	; 32
    2f1a:	0f b6       	in	r0, 0x3f	; 63
    2f1c:	f8 94       	cli
    2f1e:	de bf       	out	0x3e, r29	; 62
    2f20:	0f be       	out	0x3f, r0	; 63
    2f22:	cd bf       	out	0x3d, r28	; 61
    2f24:	fc 01       	movw	r30, r24
    2f26:	8b 01       	movw	r16, r22
    if(!fs || !dir_entry)
    2f28:	00 97       	sbiw	r24, 0x00	; 0
    2f2a:	09 f4       	brne	.+2      	; 0x2f2e <fat_write_dir_entry+0x3c>
    2f2c:	25 c1       	rjmp	.+586    	; 0x3178 <fat_write_dir_entry+0x286>
    2f2e:	61 15       	cp	r22, r1
    2f30:	71 05       	cpc	r23, r1
    2f32:	09 f4       	brne	.+2      	; 0x2f36 <fat_write_dir_entry+0x44>
    2f34:	21 c1       	rjmp	.+578    	; 0x3178 <fat_write_dir_entry+0x286>
        fat_set_file_modification_date(dir_entry, year, month, day);
        fat_set_file_modification_time(dir_entry, hour, min, sec);
    }
#endif

    device_write_t device_write = fs->partition->device_write;
    2f36:	01 90       	ld	r0, Z+
    2f38:	f0 81       	ld	r31, Z
    2f3a:	e0 2d       	mov	r30, r0
    2f3c:	44 80       	ldd	r4, Z+4	; 0x04
    2f3e:	55 80       	ldd	r5, Z+5	; 0x05
    offset_t offset = dir_entry->entry_offset;
    2f40:	db 01       	movw	r26, r22
    2f42:	99 96       	adiw	r26, 0x29	; 41
    2f44:	ad 90       	ld	r10, X+
    2f46:	bd 90       	ld	r11, X+
    2f48:	cd 90       	ld	r12, X+
    2f4a:	dc 90       	ld	r13, X
    2f4c:	9c 97       	sbiw	r26, 0x2c	; 44
    const char* name = dir_entry->long_name;
    2f4e:	e6 2e       	mov	r14, r22
    2f50:	91 2e       	mov	r9, r17
    uint8_t name_len = strlen(name);
    2f52:	fb 01       	movw	r30, r22
    2f54:	01 90       	ld	r0, Z+
    2f56:	00 20       	and	r0, r0
    2f58:	e9 f7       	brne	.-6      	; 0x2f54 <fat_write_dir_entry+0x62>
    2f5a:	31 97       	sbiw	r30, 0x01	; 1
    2f5c:	fe 2e       	mov	r15, r30
    2f5e:	f6 1a       	sub	r15, r22
    uint8_t lfn_entry_count = (name_len + 12) / 13;
    2f60:	8f 2d       	mov	r24, r15
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	0c 96       	adiw	r24, 0x0c	; 12
    2f66:	6d e0       	ldi	r22, 0x0D	; 13
    2f68:	70 e0       	ldi	r23, 0x00	; 0
    2f6a:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    2f6e:	76 2e       	mov	r7, r22
    uint8_t buffer[32];

    /* write 8.3 entry */

    /* generate 8.3 file name */
    memset(&buffer[0], ' ', 11);
    2f70:	ce 01       	movw	r24, r28
    2f72:	01 96       	adiw	r24, 0x01	; 1
    2f74:	60 e2       	ldi	r22, 0x20	; 32
    2f76:	70 e0       	ldi	r23, 0x00	; 0
    2f78:	4b e0       	ldi	r20, 0x0B	; 11
    2f7a:	50 e0       	ldi	r21, 0x00	; 0
    2f7c:	0e 94 ab 24 	call	0x4956	; 0x4956 <memset>
    char* name_ext = strrchr(name, '.');
    2f80:	c8 01       	movw	r24, r16
    2f82:	6e e2       	ldi	r22, 0x2E	; 46
    2f84:	70 e0       	ldi	r23, 0x00	; 0
    2f86:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <strrchr>
    2f8a:	fc 01       	movw	r30, r24
    if(name_ext && *++name_ext)
    2f8c:	00 97       	sbiw	r24, 0x00	; 0
    2f8e:	e1 f0       	breq	.+56     	; 0x2fc8 <fat_write_dir_entry+0xd6>
    2f90:	9c 01       	movw	r18, r24
    2f92:	2f 5f       	subi	r18, 0xFF	; 255
    2f94:	3f 4f       	sbci	r19, 0xFF	; 255
    2f96:	81 81       	ldd	r24, Z+1	; 0x01
    2f98:	88 23       	and	r24, r24
    2f9a:	b1 f0       	breq	.+44     	; 0x2fc8 <fat_write_dir_entry+0xd6>
    {
        uint8_t name_ext_len = strlen(name_ext);
    2f9c:	d9 01       	movw	r26, r18
    2f9e:	0d 90       	ld	r0, X+
    2fa0:	00 20       	and	r0, r0
    2fa2:	e9 f7       	brne	.-6      	; 0x2f9e <fat_write_dir_entry+0xac>
    2fa4:	11 97       	sbiw	r26, 0x01	; 1
    2fa6:	a2 1b       	sub	r26, r18
    2fa8:	b3 0b       	sbc	r27, r19
        name_len -= name_ext_len + 1;
    2faa:	8a 2f       	mov	r24, r26
    2fac:	80 95       	com	r24
    2fae:	f8 0e       	add	r15, r24

        if(name_ext_len > 3)
            name_ext_len = 3;
        
        memcpy(&buffer[8], name_ext, name_ext_len);
    2fb0:	be 01       	movw	r22, r28
    2fb2:	67 5f       	subi	r22, 0xF7	; 247
    2fb4:	7f 4f       	sbci	r23, 0xFF	; 255
    2fb6:	4a 2f       	mov	r20, r26
    2fb8:	a4 30       	cpi	r26, 0x04	; 4
    2fba:	08 f0       	brcs	.+2      	; 0x2fbe <fat_write_dir_entry+0xcc>
    2fbc:	43 e0       	ldi	r20, 0x03	; 3
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	b9 01       	movw	r22, r18
    2fc2:	50 e0       	ldi	r21, 0x00	; 0
    2fc4:	0e 94 a2 24 	call	0x4944	; 0x4944 <memcpy>
    2fc8:	ce 01       	movw	r24, r28
    2fca:	01 96       	adiw	r24, 0x01	; 1
    }
    
    if(name_len <= 8)
    2fcc:	b8 e0       	ldi	r27, 0x08	; 8
    2fce:	bf 15       	cp	r27, r15
    2fd0:	88 f0       	brcs	.+34     	; 0x2ff4 <fat_write_dir_entry+0x102>
    {
        memcpy(buffer, name, name_len);
    2fd2:	6e 2d       	mov	r22, r14
    2fd4:	79 2d       	mov	r23, r9
    2fd6:	4f 2d       	mov	r20, r15
    2fd8:	50 e0       	ldi	r21, 0x00	; 0
    2fda:	0e 94 a2 24 	call	0x4944	; 0x4944 <memcpy>
         *
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
    2fde:	f8 01       	movw	r30, r16
    2fe0:	80 81       	ld	r24, Z
    2fe2:	8e 32       	cpi	r24, 0x2E	; 46
    2fe4:	31 f5       	brne	.+76     	; 0x3032 <fat_write_dir_entry+0x140>
    2fe6:	81 81       	ldd	r24, Z+1	; 0x01
    2fe8:	8e 32       	cpi	r24, 0x2E	; 46
    2fea:	09 f4       	brne	.+2      	; 0x2fee <fat_write_dir_entry+0xfc>
    2fec:	82 81       	ldd	r24, Z+2	; 0x02
    2fee:	88 23       	and	r24, r24
    2ff0:	f9 f0       	breq	.+62     	; 0x3030 <fat_write_dir_entry+0x13e>
    2ff2:	1f c0       	rjmp	.+62     	; 0x3032 <fat_write_dir_entry+0x140>
          )
            lfn_entry_count = 0;
    }
    else
    {
        memcpy(buffer, name, 8);
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	8e 2d       	mov	r24, r14
    2ff8:	99 2d       	mov	r25, r9
    2ffa:	9c 01       	movw	r18, r24
    2ffc:	f9 01       	movw	r30, r18
    2ffe:	88 e0       	ldi	r24, 0x08	; 8
    3000:	01 90       	ld	r0, Z+
    3002:	0d 92       	st	X+, r0
    3004:	81 50       	subi	r24, 0x01	; 1
    3006:	e1 f7       	brne	.-8      	; 0x3000 <fat_write_dir_entry+0x10e>

        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;
    3008:	d8 01       	movw	r26, r16
    300a:	91 96       	adiw	r26, 0x21	; 33
    300c:	8c 91       	ld	r24, X
    300e:	98 2f       	mov	r25, r24
    3010:	92 95       	swap	r25
    3012:	9f 70       	andi	r25, 0x0F	; 15

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    3014:	80 3a       	cpi	r24, 0xA0	; 160
    3016:	10 f4       	brcc	.+4      	; 0x301c <fat_write_dir_entry+0x12a>
    3018:	90 5d       	subi	r25, 0xD0	; 208
    301a:	01 c0       	rjmp	.+2      	; 0x301e <fat_write_dir_entry+0x12c>
    301c:	9f 59       	subi	r25, 0x9F	; 159
        num &= 0x0f;
    301e:	8f 70       	andi	r24, 0x0F	; 15
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    3020:	8a 30       	cpi	r24, 0x0A	; 10
    3022:	10 f4       	brcc	.+4      	; 0x3028 <fat_write_dir_entry+0x136>
    3024:	80 5d       	subi	r24, 0xD0	; 208
    3026:	01 c0       	rjmp	.+2      	; 0x302a <fat_write_dir_entry+0x138>
    3028:	8f 59       	subi	r24, 0x9F	; 159
        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    302a:	9f 83       	std	Y+7, r25	; 0x07
        num &= 0x0f;
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    302c:	88 87       	std	Y+8, r24	; 0x08
    302e:	01 c0       	rjmp	.+2      	; 0x3032 <fat_write_dir_entry+0x140>
    3030:	77 24       	eor	r7, r7
    }
    if(buffer[0] == FAT_DIRENTRY_DELETED)
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	85 3e       	cpi	r24, 0xE5	; 229
    3036:	11 f4       	brne	.+4      	; 0x303c <fat_write_dir_entry+0x14a>
        buffer[0] = 0x05;
    3038:	85 e0       	ldi	r24, 0x05	; 5
    303a:	89 83       	std	Y+1, r24	; 0x01

    /* fill directory entry buffer */
    memset(&buffer[11], 0, sizeof(buffer) - 11);
    303c:	ac e0       	ldi	r26, 0x0C	; 12
    303e:	8a 2e       	mov	r8, r26
    3040:	91 2c       	mov	r9, r1
    3042:	8c 0e       	add	r8, r28
    3044:	9d 1e       	adc	r9, r29
    3046:	85 e1       	ldi	r24, 0x15	; 21
    3048:	f4 01       	movw	r30, r8
    304a:	11 92       	st	Z+, r1
    304c:	8a 95       	dec	r24
    304e:	e9 f7       	brne	.-6      	; 0x304a <fat_write_dir_entry+0x158>
    buffer[0x0b] = dir_entry->attributes;
    3050:	d8 01       	movw	r26, r16
    3052:	90 96       	adiw	r26, 0x20	; 32
    3054:	8c 91       	ld	r24, X
    3056:	90 97       	sbiw	r26, 0x20	; 32
    3058:	8c 87       	std	Y+12, r24	; 0x0c
#if FAT_DATETIME_SUPPORT
    *((uint16_t*) &buffer[0x16]) = htol16(dir_entry->modification_time);
    *((uint16_t*) &buffer[0x18]) = htol16(dir_entry->modification_date);
#endif
#if FAT_FAT32_SUPPORT
    *((uint16_t*) &buffer[0x14]) = htol16((uint16_t) (dir_entry->cluster >> 16));
    305a:	91 96       	adiw	r26, 0x21	; 33
    305c:	2d 91       	ld	r18, X+
    305e:	3d 91       	ld	r19, X+
    3060:	4d 91       	ld	r20, X+
    3062:	5c 91       	ld	r21, X
    3064:	94 97       	sbiw	r26, 0x24	; 36
    3066:	ca 01       	movw	r24, r20
    3068:	aa 27       	eor	r26, r26
    306a:	bb 27       	eor	r27, r27
    306c:	9e 8b       	std	Y+22, r25	; 0x16
    306e:	8d 8b       	std	Y+21, r24	; 0x15
#endif
    *((uint16_t*) &buffer[0x1a]) = htol16(dir_entry->cluster);
    3070:	3c 8f       	std	Y+28, r19	; 0x1c
    3072:	2b 8f       	std	Y+27, r18	; 0x1b
    *((uint32_t*) &buffer[0x1c]) = htol32(dir_entry->file_size);
    3074:	f8 01       	movw	r30, r16
    3076:	85 a1       	ldd	r24, Z+37	; 0x25
    3078:	96 a1       	ldd	r25, Z+38	; 0x26
    307a:	a7 a1       	ldd	r26, Z+39	; 0x27
    307c:	b0 a5       	ldd	r27, Z+40	; 0x28
    307e:	8d 8f       	std	Y+29, r24	; 0x1d
    3080:	9e 8f       	std	Y+30, r25	; 0x1e
    3082:	af 8f       	std	Y+31, r26	; 0x1f
    3084:	b8 a3       	std	Y+32, r27	; 0x20

    /* write to disk */
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
    3086:	67 2d       	mov	r22, r7
    3088:	70 e0       	ldi	r23, 0x00	; 0
    308a:	e5 e0       	ldi	r30, 0x05	; 5
    308c:	66 0f       	add	r22, r22
    308e:	77 1f       	adc	r23, r23
    3090:	ea 95       	dec	r30
    3092:	e1 f7       	brne	.-8      	; 0x308c <fat_write_dir_entry+0x19a>
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	6a 0d       	add	r22, r10
    309a:	7b 1d       	adc	r23, r11
    309c:	8c 1d       	adc	r24, r12
    309e:	9d 1d       	adc	r25, r13
    30a0:	ae 01       	movw	r20, r28
    30a2:	4f 5f       	subi	r20, 0xFF	; 255
    30a4:	5f 4f       	sbci	r21, 0xFF	; 255
    30a6:	20 e2       	ldi	r18, 0x20	; 32
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	f2 01       	movw	r30, r4
    30ac:	09 95       	icall
    30ae:	88 23       	and	r24, r24
    30b0:	09 f4       	brne	.+2      	; 0x30b4 <fat_write_dir_entry+0x1c2>
    30b2:	62 c0       	rjmp	.+196    	; 0x3178 <fat_write_dir_entry+0x286>
        return 0;
    
    /* calculate checksum of 8.3 name */
    uint8_t checksum = buffer[0];
    30b4:	e9 80       	ldd	r14, Y+1	; 0x01
    30b6:	fe 01       	movw	r30, r28
    30b8:	32 96       	adiw	r30, 0x02	; 2
    for(uint8_t i = 1; i < 11; ++i)
    30ba:	94 01       	movw	r18, r8
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    30bc:	8e 2d       	mov	r24, r14
    30be:	86 95       	lsr	r24
    30c0:	e7 94       	ror	r14
    30c2:	ee 24       	eor	r14, r14
    30c4:	e7 94       	ror	r14
    30c6:	e8 2a       	or	r14, r24
    30c8:	81 91       	ld	r24, Z+
    30ca:	e8 0e       	add	r14, r24
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
        return 0;
    
    /* calculate checksum of 8.3 name */
    uint8_t checksum = buffer[0];
    for(uint8_t i = 1; i < 11; ++i)
    30cc:	e2 17       	cp	r30, r18
    30ce:	f3 07       	cpc	r31, r19
    30d0:	a9 f7       	brne	.-22     	; 0x30bc <fat_write_dir_entry+0x1ca>
    30d2:	f7 2c       	mov	r15, r7
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    {
        memset(buffer, 0xff, sizeof(buffer));
    30d4:	4e 01       	movw	r8, r28
    30d6:	08 94       	sec
    30d8:	81 1c       	adc	r8, r1
    30da:	91 1c       	adc	r9, r1
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
    30dc:	6d e0       	ldi	r22, 0x0D	; 13
    30de:	36 2e       	mov	r3, r22
        buffer[0x00] = lfn_entry;
        if(lfn_entry == lfn_entry_count)
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
    30e0:	5f e0       	ldi	r21, 0x0F	; 15
    30e2:	65 2e       	mov	r6, r21
    30e4:	44 c0       	rjmp	.+136    	; 0x316e <fat_write_dir_entry+0x27c>
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    {
        memset(buffer, 0xff, sizeof(buffer));
    30e6:	c4 01       	movw	r24, r8
    30e8:	6f ef       	ldi	r22, 0xFF	; 255
    30ea:	70 e0       	ldi	r23, 0x00	; 0
    30ec:	40 e2       	ldi	r20, 0x20	; 32
    30ee:	50 e0       	ldi	r21, 0x00	; 0
    30f0:	0e 94 ab 24 	call	0x4956	; 0x4956 <memset>
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
    30f4:	f3 9c       	mul	r15, r3
    30f6:	d0 01       	movw	r26, r0
    30f8:	11 24       	eor	r1, r1
    30fa:	1d 97       	sbiw	r26, 0x0d	; 13
    30fc:	a0 0f       	add	r26, r16
    30fe:	b1 1f       	adc	r27, r17
    3100:	91 e0       	ldi	r25, 0x01	; 1
        uint8_t i = 1;
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
    3102:	f4 01       	movw	r30, r8
    3104:	e9 0f       	add	r30, r25
    3106:	f1 1d       	adc	r31, r1
    3108:	8c 91       	ld	r24, X
    310a:	80 83       	st	Z, r24
    310c:	89 2f       	mov	r24, r25
    310e:	8f 5f       	subi	r24, 0xFF	; 255
            buffer[i++] = 0;
    3110:	f4 01       	movw	r30, r8
    3112:	e8 0f       	add	r30, r24
    3114:	f1 1d       	adc	r31, r1
    3116:	10 82       	st	Z, r1
    3118:	9e 5f       	subi	r25, 0xFE	; 254

            switch(i)
    311a:	9b 30       	cpi	r25, 0x0B	; 11
    311c:	19 f0       	breq	.+6      	; 0x3124 <fat_write_dir_entry+0x232>
    311e:	9a 31       	cpi	r25, 0x1A	; 26
    3120:	21 f4       	brne	.+8      	; 0x312a <fat_write_dir_entry+0x238>
    3122:	02 c0       	rjmp	.+4      	; 0x3128 <fat_write_dir_entry+0x236>
    3124:	9e e0       	ldi	r25, 0x0E	; 14
    3126:	01 c0       	rjmp	.+2      	; 0x312a <fat_write_dir_entry+0x238>
    3128:	9c e1       	ldi	r25, 0x1C	; 28
                case 0x1a:
                    i = 0x1c;
                    break;
            }

            if(!*long_name_curr++)
    312a:	8c 91       	ld	r24, X
    312c:	88 23       	and	r24, r24
    312e:	21 f0       	breq	.+8      	; 0x3138 <fat_write_dir_entry+0x246>
        memset(buffer, 0xff, sizeof(buffer));
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
    3130:	9f 31       	cpi	r25, 0x1F	; 31
    3132:	10 f4       	brcc	.+4      	; 0x3138 <fat_write_dir_entry+0x246>
                case 0x1a:
                    i = 0x1c;
                    break;
            }

            if(!*long_name_curr++)
    3134:	11 96       	adiw	r26, 0x01	; 1
    3136:	e5 cf       	rjmp	.-54     	; 0x3102 <fat_write_dir_entry+0x210>
                break;
        }
        
        /* set index of lfn entry */
        buffer[0x00] = lfn_entry;
    3138:	f9 82       	std	Y+1, r15	; 0x01
        if(lfn_entry == lfn_entry_count)
    313a:	f7 14       	cp	r15, r7
    313c:	19 f4       	brne	.+6      	; 0x3144 <fat_write_dir_entry+0x252>
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
    313e:	8f 2d       	mov	r24, r15
    3140:	80 64       	ori	r24, 0x40	; 64
    3142:	89 83       	std	Y+1, r24	; 0x01

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
    3144:	6c 86       	std	Y+12, r6	; 0x0c

        /* set 8.3 checksum */
        buffer[0x0d] = checksum;
    3146:	ee 86       	std	Y+14, r14	; 0x0e

        /* clear reserved bytes */
        buffer[0x0c] = 0;
    3148:	1d 86       	std	Y+13, r1	; 0x0d
        buffer[0x1a] = 0;
    314a:	1b 8e       	std	Y+27, r1	; 0x1b
        buffer[0x1b] = 0;
    314c:	1c 8e       	std	Y+28, r1	; 0x1c

        /* write entry */
        device_write(offset, buffer, sizeof(buffer));
    314e:	c6 01       	movw	r24, r12
    3150:	b5 01       	movw	r22, r10
    3152:	a4 01       	movw	r20, r8
    3154:	20 e2       	ldi	r18, 0x20	; 32
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	f2 01       	movw	r30, r4
    315a:	09 95       	icall
    
        offset += sizeof(buffer);
    315c:	80 e2       	ldi	r24, 0x20	; 32
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	a0 e0       	ldi	r26, 0x00	; 0
    3162:	b0 e0       	ldi	r27, 0x00	; 0
    3164:	a8 0e       	add	r10, r24
    3166:	b9 1e       	adc	r11, r25
    3168:	ca 1e       	adc	r12, r26
    316a:	db 1e       	adc	r13, r27
    uint8_t checksum = buffer[0];
    for(uint8_t i = 1; i < 11; ++i)
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    316c:	fa 94       	dec	r15
    316e:	ff 20       	and	r15, r15
    3170:	09 f0       	breq	.+2      	; 0x3174 <fat_write_dir_entry+0x282>
    3172:	b9 cf       	rjmp	.-142    	; 0x30e6 <fat_write_dir_entry+0x1f4>
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	01 c0       	rjmp	.+2      	; 0x317a <fat_write_dir_entry+0x288>
    3178:	80 e0       	ldi	r24, 0x00	; 0
    
        offset += sizeof(buffer);
    }
    
    return 1;
}
    317a:	a0 96       	adiw	r28, 0x20	; 32
    317c:	0f b6       	in	r0, 0x3f	; 63
    317e:	f8 94       	cli
    3180:	de bf       	out	0x3e, r29	; 62
    3182:	0f be       	out	0x3f, r0	; 63
    3184:	cd bf       	out	0x3d, r28	; 61
    3186:	cf 91       	pop	r28
    3188:	df 91       	pop	r29
    318a:	1f 91       	pop	r17
    318c:	0f 91       	pop	r16
    318e:	ff 90       	pop	r15
    3190:	ef 90       	pop	r14
    3192:	df 90       	pop	r13
    3194:	cf 90       	pop	r12
    3196:	bf 90       	pop	r11
    3198:	af 90       	pop	r10
    319a:	9f 90       	pop	r9
    319c:	8f 90       	pop	r8
    319e:	7f 90       	pop	r7
    31a0:	6f 90       	pop	r6
    31a2:	5f 90       	pop	r5
    31a4:	4f 90       	pop	r4
    31a6:	3f 90       	pop	r3
    31a8:	08 95       	ret

000031aa <fat_create_dir>:
 * \param[out] dir_entry The directory entry to fill for the new directory.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_dir
 */
uint8_t fat_create_dir(struct fat_dir_struct* parent, const char* dir, struct fat_dir_entry_struct* dir_entry)
{
    31aa:	5f 92       	push	r5
    31ac:	6f 92       	push	r6
    31ae:	7f 92       	push	r7
    31b0:	8f 92       	push	r8
    31b2:	9f 92       	push	r9
    31b4:	af 92       	push	r10
    31b6:	bf 92       	push	r11
    31b8:	cf 92       	push	r12
    31ba:	df 92       	push	r13
    31bc:	ef 92       	push	r14
    31be:	ff 92       	push	r15
    31c0:	0f 93       	push	r16
    31c2:	1f 93       	push	r17
    31c4:	cf 93       	push	r28
    31c6:	df 93       	push	r29
    31c8:	5c 01       	movw	r10, r24
    31ca:	4b 01       	movw	r8, r22
    31cc:	ea 01       	movw	r28, r20
    if(!parent || !dir || !dir[0] || !dir_entry)
    31ce:	00 97       	sbiw	r24, 0x00	; 0
    31d0:	09 f4       	brne	.+2      	; 0x31d4 <fat_create_dir+0x2a>
    31d2:	b2 c0       	rjmp	.+356    	; 0x3338 <fat_create_dir+0x18e>
    31d4:	61 15       	cp	r22, r1
    31d6:	71 05       	cpc	r23, r1
    31d8:	09 f4       	brne	.+2      	; 0x31dc <fat_create_dir+0x32>
    31da:	ae c0       	rjmp	.+348    	; 0x3338 <fat_create_dir+0x18e>
    31dc:	fb 01       	movw	r30, r22
    31de:	80 81       	ld	r24, Z
    31e0:	88 23       	and	r24, r24
    31e2:	09 f4       	brne	.+2      	; 0x31e6 <fat_create_dir+0x3c>
    31e4:	a9 c0       	rjmp	.+338    	; 0x3338 <fat_create_dir+0x18e>
    31e6:	41 15       	cp	r20, r1
    31e8:	51 05       	cpc	r21, r1
    31ea:	a1 f4       	brne	.+40     	; 0x3214 <fat_create_dir+0x6a>
    31ec:	a5 c0       	rjmp	.+330    	; 0x3338 <fat_create_dir+0x18e>
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    {
        if(strcmp(dir, dir_entry->long_name) == 0)
    31ee:	c4 01       	movw	r24, r8
    31f0:	66 2d       	mov	r22, r6
    31f2:	75 2d       	mov	r23, r5
    31f4:	0e 94 bd 24 	call	0x497a	; 0x497a <strcmp>
    31f8:	00 97       	sbiw	r24, 0x00	; 0
    31fa:	71 f4       	brne	.+28     	; 0x3218 <fat_create_dir+0x6e>
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    31fc:	f5 01       	movw	r30, r10
    31fe:	83 a1       	ldd	r24, Z+35	; 0x23
    3200:	94 a1       	ldd	r25, Z+36	; 0x24
    3202:	a5 a1       	ldd	r26, Z+37	; 0x25
    3204:	b6 a1       	ldd	r27, Z+38	; 0x26
    3206:	87 a7       	std	Z+47, r24	; 0x2f
    3208:	90 ab       	std	Z+48, r25	; 0x30
    320a:	a1 ab       	std	Z+49, r26	; 0x31
    320c:	b2 ab       	std	Z+50, r27	; 0x32
    dd->entry_offset = 0;
    320e:	14 aa       	std	Z+52, r1	; 0x34
    3210:	13 aa       	std	Z+51, r1	; 0x33
    3212:	92 c0       	rjmp	.+292    	; 0x3338 <fat_create_dir+0x18e>
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    {
        if(strcmp(dir, dir_entry->long_name) == 0)
    3214:	64 2e       	mov	r6, r20
    3216:	5d 2e       	mov	r5, r29
{
    if(!parent || !dir || !dir[0] || !dir_entry)
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    3218:	c5 01       	movw	r24, r10
    321a:	be 01       	movw	r22, r28
    321c:	0e 94 3e 13 	call	0x267c	; 0x267c <fat_read_dir>
    3220:	88 23       	and	r24, r24
    3222:	29 f7       	brne	.-54     	; 0x31ee <fat_create_dir+0x44>
            fat_reset_dir(parent);
            return 0;
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    3224:	f5 01       	movw	r30, r10
    3226:	c0 80       	ld	r12, Z
    3228:	d1 80       	ldd	r13, Z+1	; 0x01

    /* allocate cluster which will hold directory entries */
    cluster_t dir_cluster = fat_append_clusters(fs, 0, 1);
    322a:	c6 01       	movw	r24, r12
    322c:	40 e0       	ldi	r20, 0x00	; 0
    322e:	50 e0       	ldi	r21, 0x00	; 0
    3230:	60 e0       	ldi	r22, 0x00	; 0
    3232:	70 e0       	ldi	r23, 0x00	; 0
    3234:	01 e0       	ldi	r16, 0x01	; 1
    3236:	10 e0       	ldi	r17, 0x00	; 0
    3238:	20 e0       	ldi	r18, 0x00	; 0
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <fat_append_clusters>
    3240:	7b 01       	movw	r14, r22
    3242:	8c 01       	movw	r16, r24
    if(!dir_cluster)
    3244:	61 15       	cp	r22, r1
    3246:	71 05       	cpc	r23, r1
    3248:	81 05       	cpc	r24, r1
    324a:	91 05       	cpc	r25, r1
    324c:	09 f4       	brne	.+2      	; 0x3250 <fat_create_dir+0xa6>
    324e:	74 c0       	rjmp	.+232    	; 0x3338 <fat_create_dir+0x18e>
        return 0;

    /* clear cluster to prevent bogus directory entries */
    fat_clear_cluster(fs, dir_cluster);
    3250:	c6 01       	movw	r24, r12
    3252:	b8 01       	movw	r22, r16
    3254:	a7 01       	movw	r20, r14
    3256:	0e 94 df 12 	call	0x25be	; 0x25be <fat_clear_cluster>
    
    memset(dir_entry, 0, sizeof(*dir_entry));
    325a:	8d e2       	ldi	r24, 0x2D	; 45
    325c:	fe 01       	movw	r30, r28
    325e:	11 92       	st	Z+, r1
    3260:	8a 95       	dec	r24
    3262:	e9 f7       	brne	.-6      	; 0x325e <fat_create_dir+0xb4>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    3264:	80 e1       	ldi	r24, 0x10	; 16
    3266:	88 a3       	std	Y+32, r24	; 0x20

    /* create "." directory self reference */
    dir_entry->entry_offset = fs->header.cluster_zero_offset +
    3268:	c8 01       	movw	r24, r16
    326a:	b7 01       	movw	r22, r14
    326c:	62 50       	subi	r22, 0x02	; 2
    326e:	70 40       	sbci	r23, 0x00	; 0
    3270:	80 40       	sbci	r24, 0x00	; 0
    3272:	90 40       	sbci	r25, 0x00	; 0
    3274:	f6 01       	movw	r30, r12
    3276:	20 89       	ldd	r18, Z+16	; 0x10
    3278:	31 89       	ldd	r19, Z+17	; 0x11
    327a:	40 e0       	ldi	r20, 0x00	; 0
    327c:	50 e0       	ldi	r21, 0x00	; 0
    327e:	0e 94 23 24 	call	0x4846	; 0x4846 <__mulsi3>
    3282:	f6 01       	movw	r30, r12
    3284:	22 89       	ldd	r18, Z+18	; 0x12
    3286:	33 89       	ldd	r19, Z+19	; 0x13
    3288:	44 89       	ldd	r20, Z+20	; 0x14
    328a:	55 89       	ldd	r21, Z+21	; 0x15
    328c:	26 0f       	add	r18, r22
    328e:	37 1f       	adc	r19, r23
    3290:	48 1f       	adc	r20, r24
    3292:	59 1f       	adc	r21, r25
    3294:	29 a7       	std	Y+41, r18	; 0x29
    3296:	3a a7       	std	Y+42, r19	; 0x2a
    3298:	4b a7       	std	Y+43, r20	; 0x2b
    329a:	5c a7       	std	Y+44, r21	; 0x2c
                              (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
    dir_entry->long_name[0] = '.';
    329c:	be e2       	ldi	r27, 0x2E	; 46
    329e:	7b 2e       	mov	r7, r27
    32a0:	78 82       	st	Y, r7
    dir_entry->cluster = dir_cluster;
    32a2:	e9 a2       	std	Y+33, r14	; 0x21
    32a4:	fa a2       	std	Y+34, r15	; 0x22
    32a6:	0b a3       	std	Y+35, r16	; 0x23
    32a8:	1c a3       	std	Y+36, r17	; 0x24
    if(!fat_write_dir_entry(fs, dir_entry))
    32aa:	c6 01       	movw	r24, r12
    32ac:	be 01       	movw	r22, r28
    32ae:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <fat_write_dir_entry>
    32b2:	88 23       	and	r24, r24
    32b4:	e1 f1       	breq	.+120    	; 0x332e <fat_create_dir+0x184>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* create ".." parent directory reference */
    dir_entry->entry_offset += 32;
    32b6:	89 a5       	ldd	r24, Y+41	; 0x29
    32b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    32ba:	ab a5       	ldd	r26, Y+43	; 0x2b
    32bc:	bc a5       	ldd	r27, Y+44	; 0x2c
    32be:	80 96       	adiw	r24, 0x20	; 32
    32c0:	a1 1d       	adc	r26, r1
    32c2:	b1 1d       	adc	r27, r1
    32c4:	89 a7       	std	Y+41, r24	; 0x29
    32c6:	9a a7       	std	Y+42, r25	; 0x2a
    32c8:	ab a7       	std	Y+43, r26	; 0x2b
    32ca:	bc a7       	std	Y+44, r27	; 0x2c
    dir_entry->long_name[1] = '.';
    32cc:	79 82       	std	Y+1, r7	; 0x01
    dir_entry->cluster = parent->dir_entry.cluster;
    32ce:	f5 01       	movw	r30, r10
    32d0:	83 a1       	ldd	r24, Z+35	; 0x23
    32d2:	94 a1       	ldd	r25, Z+36	; 0x24
    32d4:	a5 a1       	ldd	r26, Z+37	; 0x25
    32d6:	b6 a1       	ldd	r27, Z+38	; 0x26
    32d8:	89 a3       	std	Y+33, r24	; 0x21
    32da:	9a a3       	std	Y+34, r25	; 0x22
    32dc:	ab a3       	std	Y+35, r26	; 0x23
    32de:	bc a3       	std	Y+36, r27	; 0x24
    if(!fat_write_dir_entry(fs, dir_entry))
    32e0:	c6 01       	movw	r24, r12
    32e2:	be 01       	movw	r22, r28
    32e4:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <fat_write_dir_entry>
    32e8:	88 23       	and	r24, r24
    32ea:	09 f1       	breq	.+66     	; 0x332e <fat_create_dir+0x184>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* fill directory entry */
    strncpy(dir_entry->long_name, dir, sizeof(dir_entry->long_name) - 1);
    32ec:	86 2d       	mov	r24, r6
    32ee:	95 2d       	mov	r25, r5
    32f0:	b4 01       	movw	r22, r8
    32f2:	4f e1       	ldi	r20, 0x1F	; 31
    32f4:	50 e0       	ldi	r21, 0x00	; 0
    32f6:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <strncpy>
    dir_entry->cluster = dir_cluster;
    32fa:	e9 a2       	std	Y+33, r14	; 0x21
    32fc:	fa a2       	std	Y+34, r15	; 0x22
    32fe:	0b a3       	std	Y+35, r16	; 0x23
    3300:	1c a3       	std	Y+36, r17	; 0x24

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    3302:	c6 01       	movw	r24, r12
    3304:	b5 01       	movw	r22, r10
    3306:	ae 01       	movw	r20, r28
    3308:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <fat_find_offset_for_dir_entry>
    330c:	69 a7       	std	Y+41, r22	; 0x29
    330e:	7a a7       	std	Y+42, r23	; 0x2a
    3310:	8b a7       	std	Y+43, r24	; 0x2b
    3312:	9c a7       	std	Y+44, r25	; 0x2c
    3314:	61 15       	cp	r22, r1
    3316:	71 05       	cpc	r23, r1
    3318:	81 05       	cpc	r24, r1
    331a:	91 05       	cpc	r25, r1
    331c:	41 f0       	breq	.+16     	; 0x332e <fat_create_dir+0x184>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* write directory to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    331e:	c6 01       	movw	r24, r12
    3320:	be 01       	movw	r22, r28
    3322:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <fat_write_dir_entry>
    3326:	88 23       	and	r24, r24
    3328:	11 f0       	breq	.+4      	; 0x332e <fat_create_dir+0x184>
    332a:	81 e0       	ldi	r24, 0x01	; 1
    332c:	06 c0       	rjmp	.+12     	; 0x333a <fat_create_dir+0x190>
    {
        fat_free_clusters(fs, dir_cluster);
    332e:	c6 01       	movw	r24, r12
    3330:	b8 01       	movw	r22, r16
    3332:	a7 01       	movw	r20, r14
    3334:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fat_free_clusters>
        return 0;
    3338:	80 e0       	ldi	r24, 0x00	; 0
    }

    return 1;
}
    333a:	df 91       	pop	r29
    333c:	cf 91       	pop	r28
    333e:	1f 91       	pop	r17
    3340:	0f 91       	pop	r16
    3342:	ff 90       	pop	r15
    3344:	ef 90       	pop	r14
    3346:	df 90       	pop	r13
    3348:	cf 90       	pop	r12
    334a:	bf 90       	pop	r11
    334c:	af 90       	pop	r10
    334e:	9f 90       	pop	r9
    3350:	8f 90       	pop	r8
    3352:	7f 90       	pop	r7
    3354:	6f 90       	pop	r6
    3356:	5f 90       	pop	r5
    3358:	08 95       	ret

0000335a <fat_create_file>:
 * \param[out] dir_entry The directory entry to fill for the new file.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    335a:	af 92       	push	r10
    335c:	bf 92       	push	r11
    335e:	cf 92       	push	r12
    3360:	df 92       	push	r13
    3362:	ef 92       	push	r14
    3364:	ff 92       	push	r15
    3366:	0f 93       	push	r16
    3368:	1f 93       	push	r17
    336a:	cf 93       	push	r28
    336c:	df 93       	push	r29
    336e:	8c 01       	movw	r16, r24
    3370:	7b 01       	movw	r14, r22
    3372:	ea 01       	movw	r28, r20
    if(!parent || !file || !file[0] || !dir_entry)
    3374:	00 97       	sbiw	r24, 0x00	; 0
    3376:	09 f4       	brne	.+2      	; 0x337a <fat_create_file+0x20>
    3378:	4d c0       	rjmp	.+154    	; 0x3414 <fat_create_file+0xba>
    337a:	61 15       	cp	r22, r1
    337c:	71 05       	cpc	r23, r1
    337e:	09 f4       	brne	.+2      	; 0x3382 <fat_create_file+0x28>
    3380:	49 c0       	rjmp	.+146    	; 0x3414 <fat_create_file+0xba>
    3382:	fb 01       	movw	r30, r22
    3384:	80 81       	ld	r24, Z
    3386:	88 23       	and	r24, r24
    3388:	09 f4       	brne	.+2      	; 0x338c <fat_create_file+0x32>
    338a:	44 c0       	rjmp	.+136    	; 0x3414 <fat_create_file+0xba>
    338c:	41 15       	cp	r20, r1
    338e:	51 05       	cpc	r21, r1
    3390:	09 f4       	brne	.+2      	; 0x3394 <fat_create_file+0x3a>
    3392:	40 c0       	rjmp	.+128    	; 0x3414 <fat_create_file+0xba>
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    3394:	b4 2e       	mov	r11, r20
    3396:	ad 2e       	mov	r10, r29
        return 0;

    /* check if the file already exists */
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
    3398:	c8 01       	movw	r24, r16
    339a:	be 01       	movw	r22, r28
    339c:	0e 94 3e 13 	call	0x267c	; 0x267c <fat_read_dir>
    33a0:	88 23       	and	r24, r24
    33a2:	99 f0       	breq	.+38     	; 0x33ca <fat_create_file+0x70>
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    33a4:	c7 01       	movw	r24, r14
    33a6:	6b 2d       	mov	r22, r11
    33a8:	7a 2d       	mov	r23, r10
    33aa:	0e 94 bd 24 	call	0x497a	; 0x497a <strcmp>
    33ae:	00 97       	sbiw	r24, 0x00	; 0
    33b0:	99 f7       	brne	.-26     	; 0x3398 <fat_create_file+0x3e>
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    33b2:	f8 01       	movw	r30, r16
    33b4:	83 a1       	ldd	r24, Z+35	; 0x23
    33b6:	94 a1       	ldd	r25, Z+36	; 0x24
    33b8:	a5 a1       	ldd	r26, Z+37	; 0x25
    33ba:	b6 a1       	ldd	r27, Z+38	; 0x26
    33bc:	87 a7       	std	Z+47, r24	; 0x2f
    33be:	90 ab       	std	Z+48, r25	; 0x30
    33c0:	a1 ab       	std	Z+49, r26	; 0x31
    33c2:	b2 ab       	std	Z+50, r27	; 0x32
    dd->entry_offset = 0;
    33c4:	14 aa       	std	Z+52, r1	; 0x34
    33c6:	13 aa       	std	Z+51, r1	; 0x33
    33c8:	25 c0       	rjmp	.+74     	; 0x3414 <fat_create_file+0xba>
            fat_reset_dir(parent);
            return 0;
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    33ca:	f8 01       	movw	r30, r16
    33cc:	c0 80       	ld	r12, Z
    33ce:	d1 80       	ldd	r13, Z+1	; 0x01

    /* prepare directory entry with values already known */
    memset(dir_entry, 0, sizeof(*dir_entry));
    33d0:	8d e2       	ldi	r24, 0x2D	; 45
    33d2:	fe 01       	movw	r30, r28
    33d4:	11 92       	st	Z+, r1
    33d6:	8a 95       	dec	r24
    33d8:	e9 f7       	brne	.-6      	; 0x33d4 <fat_create_file+0x7a>
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
    33da:	8b 2d       	mov	r24, r11
    33dc:	9a 2d       	mov	r25, r10
    33de:	b7 01       	movw	r22, r14
    33e0:	4f e1       	ldi	r20, 0x1F	; 31
    33e2:	50 e0       	ldi	r21, 0x00	; 0
    33e4:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <strncpy>

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    33e8:	c6 01       	movw	r24, r12
    33ea:	b8 01       	movw	r22, r16
    33ec:	ae 01       	movw	r20, r28
    33ee:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <fat_find_offset_for_dir_entry>
    33f2:	69 a7       	std	Y+41, r22	; 0x29
    33f4:	7a a7       	std	Y+42, r23	; 0x2a
    33f6:	8b a7       	std	Y+43, r24	; 0x2b
    33f8:	9c a7       	std	Y+44, r25	; 0x2c
    33fa:	61 15       	cp	r22, r1
    33fc:	71 05       	cpc	r23, r1
    33fe:	81 05       	cpc	r24, r1
    3400:	91 05       	cpc	r25, r1
    3402:	41 f0       	breq	.+16     	; 0x3414 <fat_create_file+0xba>
        return 0;
    
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    3404:	c6 01       	movw	r24, r12
    3406:	be 01       	movw	r22, r28
    3408:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <fat_write_dir_entry>
    340c:	88 23       	and	r24, r24
    340e:	19 f0       	breq	.+6      	; 0x3416 <fat_create_file+0xbc>
    3410:	81 e0       	ldi	r24, 0x01	; 1
    3412:	01 c0       	rjmp	.+2      	; 0x3416 <fat_create_file+0xbc>
    3414:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
    
    return 1;
}
    3416:	df 91       	pop	r29
    3418:	cf 91       	pop	r28
    341a:	1f 91       	pop	r17
    341c:	0f 91       	pop	r16
    341e:	ff 90       	pop	r15
    3420:	ef 90       	pop	r14
    3422:	df 90       	pop	r13
    3424:	cf 90       	pop	r12
    3426:	bf 90       	pop	r11
    3428:	af 90       	pop	r10
    342a:	08 95       	ret

0000342c <fat_resize_file>:
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    342c:	2f 92       	push	r2
    342e:	3f 92       	push	r3
    3430:	4f 92       	push	r4
    3432:	5f 92       	push	r5
    3434:	6f 92       	push	r6
    3436:	7f 92       	push	r7
    3438:	8f 92       	push	r8
    343a:	9f 92       	push	r9
    343c:	af 92       	push	r10
    343e:	bf 92       	push	r11
    3440:	cf 92       	push	r12
    3442:	df 92       	push	r13
    3444:	ef 92       	push	r14
    3446:	ff 92       	push	r15
    3448:	0f 93       	push	r16
    344a:	1f 93       	push	r17
    344c:	df 93       	push	r29
    344e:	cf 93       	push	r28
    3450:	cd b7       	in	r28, 0x3d	; 61
    3452:	de b7       	in	r29, 0x3e	; 62
    3454:	2e 97       	sbiw	r28, 0x0e	; 14
    3456:	0f b6       	in	r0, 0x3f	; 63
    3458:	f8 94       	cli
    345a:	de bf       	out	0x3e, r29	; 62
    345c:	0f be       	out	0x3f, r0	; 63
    345e:	cd bf       	out	0x3d, r28	; 61
    3460:	1c 01       	movw	r2, r24
    3462:	4f 83       	std	Y+7, r20	; 0x07
    3464:	58 87       	std	Y+8, r21	; 0x08
    3466:	69 87       	std	Y+9, r22	; 0x09
    3468:	7a 87       	std	Y+10, r23	; 0x0a
    if(!fd)
    346a:	00 97       	sbiw	r24, 0x00	; 0
    346c:	09 f4       	brne	.+2      	; 0x3470 <fat_resize_file+0x44>
    346e:	28 c1       	rjmp	.+592    	; 0x36c0 <fat_resize_file+0x294>
        return 0;

    cluster_t cluster_num = fd->dir_entry.cluster;
    3470:	dc 01       	movw	r26, r24
    3472:	93 96       	adiw	r26, 0x23	; 35
    3474:	cd 90       	ld	r12, X+
    3476:	dd 90       	ld	r13, X+
    3478:	ed 90       	ld	r14, X+
    347a:	fc 90       	ld	r15, X
    347c:	96 97       	sbiw	r26, 0x26	; 38
    uint16_t cluster_size = fd->fs->header.cluster_size;
    347e:	ed 91       	ld	r30, X+
    3480:	fc 91       	ld	r31, X
    3482:	20 89       	ldd	r18, Z+16	; 0x10
    3484:	31 89       	ldd	r19, Z+17	; 0x11
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
    3486:	c1 14       	cp	r12, r1
    3488:	d1 04       	cpc	r13, r1
    348a:	e1 04       	cpc	r14, r1
    348c:	f1 04       	cpc	r15, r1
    348e:	99 f0       	breq	.+38     	; 0x34b6 <fat_resize_file+0x8a>
    3490:	4f 80       	ldd	r4, Y+7	; 0x07
    3492:	58 84       	ldd	r5, Y+8	; 0x08
    3494:	69 84       	ldd	r6, Y+9	; 0x09
    3496:	7a 84       	ldd	r7, Y+10	; 0x0a
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    3498:	49 01       	movw	r8, r18
    349a:	aa 24       	eor	r10, r10
    349c:	bb 24       	eor	r11, r11
                cluster_num = cluster_num_next;
                size_new -= cluster_size;
            }
            else
            {
                break;
    349e:	22 27       	eor	r18, r18
    34a0:	33 27       	eor	r19, r19
    34a2:	a9 01       	movw	r20, r18
    34a4:	28 19       	sub	r18, r8
    34a6:	39 09       	sbc	r19, r9
    34a8:	4a 09       	sbc	r20, r10
    34aa:	5b 09       	sbc	r21, r11
    34ac:	2b 87       	std	Y+11, r18	; 0x0b
    34ae:	3c 87       	std	Y+12, r19	; 0x0c
    34b0:	4d 87       	std	Y+13, r20	; 0x0d
    34b2:	5e 87       	std	Y+14, r21	; 0x0e
    34b4:	20 c0       	rjmp	.+64     	; 0x34f6 <fat_resize_file+0xca>
    uint16_t cluster_size = fd->fs->header.cluster_size;
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
    34b6:	8f 81       	ldd	r24, Y+7	; 0x07
    34b8:	98 85       	ldd	r25, Y+8	; 0x08
    34ba:	a9 85       	ldd	r26, Y+9	; 0x09
    34bc:	ba 85       	ldd	r27, Y+10	; 0x0a
    34be:	00 97       	sbiw	r24, 0x00	; 0
    34c0:	a1 05       	cpc	r26, r1
    34c2:	b1 05       	cpc	r27, r1
    34c4:	09 f4       	brne	.+2      	; 0x34c8 <fat_resize_file+0x9c>
    34c6:	dc c0       	rjmp	.+440    	; 0x3680 <fat_resize_file+0x254>
    34c8:	e3 cf       	rjmp	.-58     	; 0x3490 <fat_resize_file+0x64>

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
        {
            /* get next cluster of file */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    34ca:	d1 01       	movw	r26, r2
    34cc:	8d 91       	ld	r24, X+
    34ce:	9c 91       	ld	r25, X
    34d0:	b7 01       	movw	r22, r14
    34d2:	a6 01       	movw	r20, r12
    34d4:	0e 94 a5 0b 	call	0x174a	; 0x174a <fat_get_next_cluster>
            if(cluster_num_next)
    34d8:	61 15       	cp	r22, r1
    34da:	71 05       	cpc	r23, r1
    34dc:	81 05       	cpc	r24, r1
    34de:	91 05       	cpc	r25, r1
    34e0:	81 f0       	breq	.+32     	; 0x3502 <fat_resize_file+0xd6>
                cluster_num = cluster_num_next;
                size_new -= cluster_size;
            }
            else
            {
                break;
    34e2:	2b 85       	ldd	r18, Y+11	; 0x0b
    34e4:	3c 85       	ldd	r19, Y+12	; 0x0c
    34e6:	4d 85       	ldd	r20, Y+13	; 0x0d
    34e8:	5e 85       	ldd	r21, Y+14	; 0x0e
    34ea:	42 0e       	add	r4, r18
    34ec:	53 1e       	adc	r5, r19
    34ee:	64 1e       	adc	r6, r20
    34f0:	75 1e       	adc	r7, r21
    34f2:	6b 01       	movw	r12, r22
    34f4:	7c 01       	movw	r14, r24
        if(cluster_num == 0 && size_new == 0)
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    34f6:	84 14       	cp	r8, r4
    34f8:	95 04       	cpc	r9, r5
    34fa:	a6 04       	cpc	r10, r6
    34fc:	b7 04       	cpc	r11, r7
    34fe:	28 f3       	brcs	.-54     	; 0x34ca <fat_resize_file+0x9e>
    3500:	f9 c0       	rjmp	.+498    	; 0x36f4 <fat_resize_file+0x2c8>
        {
            /* Allocate new cluster chain and append
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
    3502:	c3 01       	movw	r24, r6
    3504:	b2 01       	movw	r22, r4
    3506:	68 0d       	add	r22, r8
    3508:	79 1d       	adc	r23, r9
    350a:	8a 1d       	adc	r24, r10
    350c:	9b 1d       	adc	r25, r11
    350e:	61 50       	subi	r22, 0x01	; 1
    3510:	70 40       	sbci	r23, 0x00	; 0
    3512:	80 40       	sbci	r24, 0x00	; 0
    3514:	90 40       	sbci	r25, 0x00	; 0
    3516:	a5 01       	movw	r20, r10
    3518:	94 01       	movw	r18, r8
    351a:	0e 94 69 24 	call	0x48d2	; 0x48d2 <__udivmodsi4>
    351e:	89 01       	movw	r16, r18
    3520:	9a 01       	movw	r18, r20
    3522:	d1 01       	movw	r26, r2
    3524:	8d 91       	ld	r24, X+
    3526:	9c 91       	ld	r25, X
    3528:	b7 01       	movw	r22, r14
    352a:	a6 01       	movw	r20, r12
    352c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <fat_append_clusters>
            if(!cluster_new_chain)
    3530:	61 15       	cp	r22, r1
    3532:	71 05       	cpc	r23, r1
    3534:	81 05       	cpc	r24, r1
    3536:	91 05       	cpc	r25, r1
    3538:	09 f4       	brne	.+2      	; 0x353c <fat_resize_file+0x110>
    353a:	c2 c0       	rjmp	.+388    	; 0x36c0 <fat_resize_file+0x294>
                return 0;

            if(!cluster_num)
    353c:	c1 14       	cp	r12, r1
    353e:	d1 04       	cpc	r13, r1
    3540:	e1 04       	cpc	r14, r1
    3542:	f1 04       	cpc	r15, r1
    3544:	39 f4       	brne	.+14     	; 0x3554 <fat_resize_file+0x128>
            {
                cluster_num = cluster_new_chain;
                fd->dir_entry.cluster = cluster_num;
    3546:	f1 01       	movw	r30, r2
    3548:	63 a3       	std	Z+35, r22	; 0x23
    354a:	74 a3       	std	Z+36, r23	; 0x24
    354c:	85 a3       	std	Z+37, r24	; 0x25
    354e:	96 a3       	std	Z+38, r25	; 0x26
    3550:	6b 01       	movw	r12, r22
    3552:	7c 01       	movw	r14, r24
            }
        }

        /* write new directory entry */
        fd->dir_entry.file_size = size;
    3554:	2f 81       	ldd	r18, Y+7	; 0x07
    3556:	38 85       	ldd	r19, Y+8	; 0x08
    3558:	49 85       	ldd	r20, Y+9	; 0x09
    355a:	5a 85       	ldd	r21, Y+10	; 0x0a
    355c:	d1 01       	movw	r26, r2
    355e:	97 96       	adiw	r26, 0x27	; 39
    3560:	2d 93       	st	X+, r18
    3562:	3d 93       	st	X+, r19
    3564:	4d 93       	st	X+, r20
    3566:	5c 93       	st	X, r21
    3568:	9a 97       	sbiw	r26, 0x2a	; 42
        if(size == 0)
    356a:	21 15       	cp	r18, r1
    356c:	31 05       	cpc	r19, r1
    356e:	41 05       	cpc	r20, r1
    3570:	51 05       	cpc	r21, r1
    3572:	29 f4       	brne	.+10     	; 0x357e <fat_resize_file+0x152>
            fd->dir_entry.cluster = 0;
    3574:	f1 01       	movw	r30, r2
    3576:	13 a2       	std	Z+35, r1	; 0x23
    3578:	14 a2       	std	Z+36, r1	; 0x24
    357a:	15 a2       	std	Z+37, r1	; 0x25
    357c:	16 a2       	std	Z+38, r1	; 0x26
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    357e:	f1 01       	movw	r30, r2
    3580:	81 91       	ld	r24, Z+
    3582:	91 91       	ld	r25, Z+
    3584:	bf 01       	movw	r22, r30
    3586:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <fat_write_dir_entry>
    358a:	88 23       	and	r24, r24
    358c:	09 f4       	brne	.+2      	; 0x3590 <fat_resize_file+0x164>
    358e:	98 c0       	rjmp	.+304    	; 0x36c0 <fat_resize_file+0x294>
            return 0;

        if(size == 0)
    3590:	2f 81       	ldd	r18, Y+7	; 0x07
    3592:	38 85       	ldd	r19, Y+8	; 0x08
    3594:	49 85       	ldd	r20, Y+9	; 0x09
    3596:	5a 85       	ldd	r21, Y+10	; 0x0a
    3598:	21 15       	cp	r18, r1
    359a:	31 05       	cpc	r19, r1
    359c:	41 05       	cpc	r20, r1
    359e:	51 05       	cpc	r21, r1
    35a0:	31 f4       	brne	.+12     	; 0x35ae <fat_resize_file+0x182>
        {
            /* free all clusters of file */
            fat_free_clusters(fd->fs, cluster_num);
    35a2:	d1 01       	movw	r26, r2
    35a4:	8d 91       	ld	r24, X+
    35a6:	9c 91       	ld	r25, X
    35a8:	b7 01       	movw	r22, r14
    35aa:	a6 01       	movw	r20, r12
    35ac:	67 c0       	rjmp	.+206    	; 0x367c <fat_resize_file+0x250>
        }
        else if(size_new <= cluster_size)
    35ae:	84 14       	cp	r8, r4
    35b0:	95 04       	cpc	r9, r5
    35b2:	a6 04       	cpc	r10, r6
    35b4:	b7 04       	cpc	r11, r7
    35b6:	08 f4       	brcc	.+2      	; 0x35ba <fat_resize_file+0x18e>
    35b8:	63 c0       	rjmp	.+198    	; 0x3680 <fat_resize_file+0x254>
        {
            /* free all clusters no longer needed */
            fat_terminate_clusters(fd->fs, cluster_num);
    35ba:	f1 01       	movw	r30, r2
    35bc:	00 81       	ld	r16, Z
    35be:	11 81       	ldd	r17, Z+1	; 0x01
 * \returns 0 on failure, 1 on success.
 * \see fat_free_clusters
 */
uint8_t fat_terminate_clusters(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    35c0:	01 15       	cp	r16, r1
    35c2:	11 05       	cpc	r17, r1
    35c4:	09 f4       	brne	.+2      	; 0x35c8 <fat_resize_file+0x19c>
    35c6:	5c c0       	rjmp	.+184    	; 0x3680 <fat_resize_file+0x254>
    35c8:	f2 e0       	ldi	r31, 0x02	; 2
    35ca:	cf 16       	cp	r12, r31
    35cc:	d1 04       	cpc	r13, r1
    35ce:	e1 04       	cpc	r14, r1
    35d0:	f1 04       	cpc	r15, r1
    35d2:	08 f4       	brcc	.+2      	; 0x35d6 <fat_resize_file+0x1aa>
    35d4:	55 c0       	rjmp	.+170    	; 0x3680 <fat_resize_file+0x254>
        return 0;

    /* fetch next cluster before overwriting the cluster entry */
    cluster_t cluster_num_next = fat_get_next_cluster(fs, cluster_num);
    35d6:	c8 01       	movw	r24, r16
    35d8:	b7 01       	movw	r22, r14
    35da:	a6 01       	movw	r20, r12
    35dc:	0e 94 a5 0b 	call	0x174a	; 0x174a <fat_get_next_cluster>
    35e0:	4b 01       	movw	r8, r22
    35e2:	5c 01       	movw	r10, r24

    /* mark cluster as the last one */
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    35e4:	d8 01       	movw	r26, r16
    35e6:	ed 91       	ld	r30, X+
    35e8:	fc 91       	ld	r31, X
    35ea:	80 85       	ldd	r24, Z+8	; 0x08
    35ec:	04 80       	ldd	r0, Z+4	; 0x04
    35ee:	f5 81       	ldd	r31, Z+5	; 0x05
    35f0:	e0 2d       	mov	r30, r0
    35f2:	8b 30       	cpi	r24, 0x0B	; 11
    35f4:	01 f5       	brne	.+64     	; 0x3636 <fat_resize_file+0x20a>
    {
        uint32_t fat_entry = HTOL32(FAT32_CLUSTER_LAST_MAX);
    35f6:	8f ef       	ldi	r24, 0xFF	; 255
    35f8:	9f ef       	ldi	r25, 0xFF	; 255
    35fa:	af ef       	ldi	r26, 0xFF	; 255
    35fc:	bf e0       	ldi	r27, 0x0F	; 15
    35fe:	8b 83       	std	Y+3, r24	; 0x03
    3600:	9c 83       	std	Y+4, r25	; 0x04
    3602:	ad 83       	std	Y+5, r26	; 0x05
    3604:	be 83       	std	Y+6, r27	; 0x06
        if(!fs->partition->device_write(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    3606:	92 e0       	ldi	r25, 0x02	; 2
    3608:	cc 0c       	add	r12, r12
    360a:	dd 1c       	adc	r13, r13
    360c:	ee 1c       	adc	r14, r14
    360e:	ff 1c       	adc	r15, r15
    3610:	9a 95       	dec	r25
    3612:	d1 f7       	brne	.-12     	; 0x3608 <fat_resize_file+0x1dc>
    3614:	d8 01       	movw	r26, r16
    3616:	16 96       	adiw	r26, 0x06	; 6
    3618:	6d 91       	ld	r22, X+
    361a:	7d 91       	ld	r23, X+
    361c:	8d 91       	ld	r24, X+
    361e:	9c 91       	ld	r25, X
    3620:	19 97       	sbiw	r26, 0x09	; 9
    3622:	6c 0d       	add	r22, r12
    3624:	7d 1d       	adc	r23, r13
    3626:	8e 1d       	adc	r24, r14
    3628:	9f 1d       	adc	r25, r15
    362a:	ae 01       	movw	r20, r28
    362c:	4d 5f       	subi	r20, 0xFD	; 253
    362e:	5f 4f       	sbci	r21, 0xFF	; 255
    3630:	24 e0       	ldi	r18, 0x04	; 4
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	18 c0       	rjmp	.+48     	; 0x3666 <fat_resize_file+0x23a>
            return 0;
    }
    else
#endif
    {
        uint16_t fat_entry = HTOL16(FAT16_CLUSTER_LAST_MAX);
    3636:	8f ef       	ldi	r24, 0xFF	; 255
    3638:	9f ef       	ldi	r25, 0xFF	; 255
    363a:	9a 83       	std	Y+2, r25	; 0x02
    363c:	89 83       	std	Y+1, r24	; 0x01
        if(!fs->partition->device_write(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    363e:	cc 0c       	add	r12, r12
    3640:	dd 1c       	adc	r13, r13
    3642:	ee 1c       	adc	r14, r14
    3644:	ff 1c       	adc	r15, r15
    3646:	d8 01       	movw	r26, r16
    3648:	16 96       	adiw	r26, 0x06	; 6
    364a:	6d 91       	ld	r22, X+
    364c:	7d 91       	ld	r23, X+
    364e:	8d 91       	ld	r24, X+
    3650:	9c 91       	ld	r25, X
    3652:	19 97       	sbiw	r26, 0x09	; 9
    3654:	6c 0d       	add	r22, r12
    3656:	7d 1d       	adc	r23, r13
    3658:	8e 1d       	adc	r24, r14
    365a:	9f 1d       	adc	r25, r15
    365c:	ae 01       	movw	r20, r28
    365e:	4f 5f       	subi	r20, 0xFF	; 255
    3660:	5f 4f       	sbci	r21, 0xFF	; 255
    3662:	22 e0       	ldi	r18, 0x02	; 2
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	09 95       	icall
    3668:	88 23       	and	r24, r24
    366a:	51 f0       	breq	.+20     	; 0x3680 <fat_resize_file+0x254>
            return 0;
    }

    /* free remaining clusters */
    if(cluster_num_next)
    366c:	81 14       	cp	r8, r1
    366e:	91 04       	cpc	r9, r1
    3670:	a1 04       	cpc	r10, r1
    3672:	b1 04       	cpc	r11, r1
    3674:	29 f0       	breq	.+10     	; 0x3680 <fat_resize_file+0x254>
        return fat_free_clusters(fs, cluster_num_next);
    3676:	c8 01       	movw	r24, r16
    3678:	b5 01       	movw	r22, r10
    367a:	a4 01       	movw	r20, r8
    367c:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fat_free_clusters>
        }

    } while(0);

    /* correct file position */
    if(size < fd->pos)
    3680:	f1 01       	movw	r30, r2
    3682:	87 a5       	ldd	r24, Z+47	; 0x2f
    3684:	90 a9       	ldd	r25, Z+48	; 0x30
    3686:	a1 a9       	ldd	r26, Z+49	; 0x31
    3688:	b2 a9       	ldd	r27, Z+50	; 0x32
    368a:	2f 81       	ldd	r18, Y+7	; 0x07
    368c:	38 85       	ldd	r19, Y+8	; 0x08
    368e:	49 85       	ldd	r20, Y+9	; 0x09
    3690:	5a 85       	ldd	r21, Y+10	; 0x0a
    3692:	28 17       	cp	r18, r24
    3694:	39 07       	cpc	r19, r25
    3696:	4a 07       	cpc	r20, r26
    3698:	5b 07       	cpc	r21, r27
    369a:	80 f4       	brcc	.+32     	; 0x36bc <fat_resize_file+0x290>
    {
        fd->pos = size;
    369c:	8f 81       	ldd	r24, Y+7	; 0x07
    369e:	98 85       	ldd	r25, Y+8	; 0x08
    36a0:	a9 85       	ldd	r26, Y+9	; 0x09
    36a2:	ba 85       	ldd	r27, Y+10	; 0x0a
    36a4:	f1 01       	movw	r30, r2
    36a6:	87 a7       	std	Z+47, r24	; 0x2f
    36a8:	90 ab       	std	Z+48, r25	; 0x30
    36aa:	a1 ab       	std	Z+49, r26	; 0x31
    36ac:	b2 ab       	std	Z+50, r27	; 0x32
        fd->pos_cluster = 0;
    36ae:	d1 01       	movw	r26, r2
    36b0:	d3 96       	adiw	r26, 0x33	; 51
    36b2:	1d 92       	st	X+, r1
    36b4:	1d 92       	st	X+, r1
    36b6:	1d 92       	st	X+, r1
    36b8:	1c 92       	st	X, r1
    36ba:	d6 97       	sbiw	r26, 0x36	; 54
    36bc:	81 e0       	ldi	r24, 0x01	; 1
    36be:	01 c0       	rjmp	.+2      	; 0x36c2 <fat_resize_file+0x296>
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    }

    return 1;
}
    36c2:	2e 96       	adiw	r28, 0x0e	; 14
    36c4:	0f b6       	in	r0, 0x3f	; 63
    36c6:	f8 94       	cli
    36c8:	de bf       	out	0x3e, r29	; 62
    36ca:	0f be       	out	0x3f, r0	; 63
    36cc:	cd bf       	out	0x3d, r28	; 61
    36ce:	cf 91       	pop	r28
    36d0:	df 91       	pop	r29
    36d2:	1f 91       	pop	r17
    36d4:	0f 91       	pop	r16
    36d6:	ff 90       	pop	r15
    36d8:	ef 90       	pop	r14
    36da:	df 90       	pop	r13
    36dc:	cf 90       	pop	r12
    36de:	bf 90       	pop	r11
    36e0:	af 90       	pop	r10
    36e2:	9f 90       	pop	r9
    36e4:	8f 90       	pop	r8
    36e6:	7f 90       	pop	r7
    36e8:	6f 90       	pop	r6
    36ea:	5f 90       	pop	r5
    36ec:	4f 90       	pop	r4
    36ee:	3f 90       	pop	r3
    36f0:	2f 90       	pop	r2
    36f2:	08 95       	ret
            {
                break;
            }
        }

        if(size_new > cluster_size || cluster_num == 0)
    36f4:	c1 14       	cp	r12, r1
    36f6:	d1 04       	cpc	r13, r1
    36f8:	e1 04       	cpc	r14, r1
    36fa:	f1 04       	cpc	r15, r1
    36fc:	09 f4       	brne	.+2      	; 0x3700 <fat_resize_file+0x2d4>
    36fe:	01 cf       	rjmp	.-510    	; 0x3502 <fat_resize_file+0xd6>
    3700:	29 cf       	rjmp	.-430    	; 0x3554 <fat_resize_file+0x128>

00003702 <fat_seek_file>:
 *                   to this location before it returns.
 * \param[in] whence Affects the way \c offset is interpreted, see above.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    3702:	cf 92       	push	r12
    3704:	df 92       	push	r13
    3706:	ef 92       	push	r14
    3708:	ff 92       	push	r15
    370a:	0f 93       	push	r16
    370c:	1f 93       	push	r17
    370e:	cf 93       	push	r28
    3710:	df 93       	push	r29
    3712:	ec 01       	movw	r28, r24
    3714:	6b 01       	movw	r12, r22
    if(!fd || !offset)
    3716:	00 97       	sbiw	r24, 0x00	; 0
    3718:	09 f4       	brne	.+2      	; 0x371c <fat_seek_file+0x1a>
    371a:	47 c0       	rjmp	.+142    	; 0x37aa <fat_seek_file+0xa8>
    371c:	61 15       	cp	r22, r1
    371e:	71 05       	cpc	r23, r1
    3720:	09 f4       	brne	.+2      	; 0x3724 <fat_seek_file+0x22>
    3722:	43 c0       	rjmp	.+134    	; 0x37aa <fat_seek_file+0xa8>
        return 0;

    uint32_t new_pos = fd->pos;
    3724:	8f a5       	ldd	r24, Y+47	; 0x2f
    3726:	98 a9       	ldd	r25, Y+48	; 0x30
    3728:	a9 a9       	ldd	r26, Y+49	; 0x31
    372a:	ba a9       	ldd	r27, Y+50	; 0x32
    switch(whence)
    372c:	41 30       	cpi	r20, 0x01	; 1
    372e:	59 f0       	breq	.+22     	; 0x3746 <fat_seek_file+0x44>
    3730:	41 30       	cpi	r20, 0x01	; 1
    3732:	18 f0       	brcs	.+6      	; 0x373a <fat_seek_file+0x38>
    3734:	42 30       	cpi	r20, 0x02	; 2
    3736:	c9 f5       	brne	.+114    	; 0x37aa <fat_seek_file+0xa8>
    3738:	0c c0       	rjmp	.+24     	; 0x3752 <fat_seek_file+0x50>
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
    373a:	fb 01       	movw	r30, r22
    373c:	e0 80       	ld	r14, Z
    373e:	f1 80       	ldd	r15, Z+1	; 0x01
    3740:	02 81       	ldd	r16, Z+2	; 0x02
    3742:	13 81       	ldd	r17, Z+3	; 0x03
    3744:	13 c0       	rjmp	.+38     	; 0x376c <fat_seek_file+0x6a>
            break;
        case FAT_SEEK_CUR:
            new_pos += *offset;
    3746:	fb 01       	movw	r30, r22
    3748:	e0 80       	ld	r14, Z
    374a:	f1 80       	ldd	r15, Z+1	; 0x01
    374c:	02 81       	ldd	r16, Z+2	; 0x02
    374e:	13 81       	ldd	r17, Z+3	; 0x03
    3750:	09 c0       	rjmp	.+18     	; 0x3764 <fat_seek_file+0x62>
            break;
        case FAT_SEEK_END:
            new_pos = fd->dir_entry.file_size + *offset;
    3752:	fb 01       	movw	r30, r22
    3754:	e0 80       	ld	r14, Z
    3756:	f1 80       	ldd	r15, Z+1	; 0x01
    3758:	02 81       	ldd	r16, Z+2	; 0x02
    375a:	13 81       	ldd	r17, Z+3	; 0x03
    375c:	8f a1       	ldd	r24, Y+39	; 0x27
    375e:	98 a5       	ldd	r25, Y+40	; 0x28
    3760:	a9 a5       	ldd	r26, Y+41	; 0x29
    3762:	ba a5       	ldd	r27, Y+42	; 0x2a
    3764:	e8 0e       	add	r14, r24
    3766:	f9 1e       	adc	r15, r25
    3768:	0a 1f       	adc	r16, r26
    376a:	1b 1f       	adc	r17, r27
            break;
        default:
            return 0;
    }

    if(new_pos > fd->dir_entry.file_size
    376c:	8f a1       	ldd	r24, Y+39	; 0x27
    376e:	98 a5       	ldd	r25, Y+40	; 0x28
    3770:	a9 a5       	ldd	r26, Y+41	; 0x29
    3772:	ba a5       	ldd	r27, Y+42	; 0x2a
    3774:	8e 15       	cp	r24, r14
    3776:	9f 05       	cpc	r25, r15
    3778:	a0 07       	cpc	r26, r16
    377a:	b1 07       	cpc	r27, r17
    377c:	38 f4       	brcc	.+14     	; 0x378c <fat_seek_file+0x8a>
    377e:	ce 01       	movw	r24, r28
    3780:	b8 01       	movw	r22, r16
    3782:	a7 01       	movw	r20, r14
    3784:	0e 94 16 1a 	call	0x342c	; 0x342c <fat_resize_file>
    3788:	88 23       	and	r24, r24
    378a:	79 f0       	breq	.+30     	; 0x37aa <fat_seek_file+0xa8>
       && !fat_resize_file(fd, new_pos)
#endif
       )
        return 0;

    fd->pos = new_pos;
    378c:	ef a6       	std	Y+47, r14	; 0x2f
    378e:	f8 aa       	std	Y+48, r15	; 0x30
    3790:	09 ab       	std	Y+49, r16	; 0x31
    3792:	1a ab       	std	Y+50, r17	; 0x32
    fd->pos_cluster = 0;
    3794:	1b aa       	std	Y+51, r1	; 0x33
    3796:	1c aa       	std	Y+52, r1	; 0x34
    3798:	1d aa       	std	Y+53, r1	; 0x35
    379a:	1e aa       	std	Y+54, r1	; 0x36

    *offset = (int32_t) new_pos;
    379c:	f6 01       	movw	r30, r12
    379e:	e0 82       	st	Z, r14
    37a0:	f1 82       	std	Z+1, r15	; 0x01
    37a2:	02 83       	std	Z+2, r16	; 0x02
    37a4:	13 83       	std	Z+3, r17	; 0x03
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	01 c0       	rjmp	.+2      	; 0x37ac <fat_seek_file+0xaa>
    return 1;
    37aa:	80 e0       	ldi	r24, 0x00	; 0
}
    37ac:	df 91       	pop	r29
    37ae:	cf 91       	pop	r28
    37b0:	1f 91       	pop	r17
    37b2:	0f 91       	pop	r16
    37b4:	ff 90       	pop	r15
    37b6:	ef 90       	pop	r14
    37b8:	df 90       	pop	r13
    37ba:	cf 90       	pop	r12
    37bc:	08 95       	ret

000037be <fat_write_file>:
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written, 0 on disk full, or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    37be:	2f 92       	push	r2
    37c0:	3f 92       	push	r3
    37c2:	4f 92       	push	r4
    37c4:	5f 92       	push	r5
    37c6:	6f 92       	push	r6
    37c8:	7f 92       	push	r7
    37ca:	8f 92       	push	r8
    37cc:	9f 92       	push	r9
    37ce:	af 92       	push	r10
    37d0:	bf 92       	push	r11
    37d2:	cf 92       	push	r12
    37d4:	df 92       	push	r13
    37d6:	ef 92       	push	r14
    37d8:	ff 92       	push	r15
    37da:	0f 93       	push	r16
    37dc:	1f 93       	push	r17
    37de:	df 93       	push	r29
    37e0:	cf 93       	push	r28
    37e2:	cd b7       	in	r28, 0x3d	; 61
    37e4:	de b7       	in	r29, 0x3e	; 62
    37e6:	28 97       	sbiw	r28, 0x08	; 8
    37e8:	0f b6       	in	r0, 0x3f	; 63
    37ea:	f8 94       	cli
    37ec:	de bf       	out	0x3e, r29	; 62
    37ee:	0f be       	out	0x3f, r0	; 63
    37f0:	cd bf       	out	0x3d, r28	; 61
    37f2:	98 87       	std	Y+8, r25	; 0x08
    37f4:	8f 83       	std	Y+7, r24	; 0x07
    37f6:	7c 83       	std	Y+4, r23	; 0x04
    37f8:	6b 83       	std	Y+3, r22	; 0x03
    37fa:	5e 83       	std	Y+6, r21	; 0x06
    37fc:	4d 83       	std	Y+5, r20	; 0x05
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    37fe:	00 97       	sbiw	r24, 0x00	; 0
    3800:	09 f4       	brne	.+2      	; 0x3804 <fat_write_file+0x46>
    3802:	7d c1       	rjmp	.+762    	; 0x3afe <fat_write_file+0x340>
    3804:	67 2b       	or	r22, r23
    3806:	09 f4       	brne	.+2      	; 0x380a <fat_write_file+0x4c>
    3808:	7a c1       	rjmp	.+756    	; 0x3afe <fat_write_file+0x340>
    380a:	45 2b       	or	r20, r21
    380c:	09 f4       	brne	.+2      	; 0x3810 <fat_write_file+0x52>
    380e:	77 c1       	rjmp	.+750    	; 0x3afe <fat_write_file+0x340>
        return -1;
    if(fd->pos > fd->dir_entry.file_size)
    3810:	dc 01       	movw	r26, r24
    3812:	9f 96       	adiw	r26, 0x2f	; 47
    3814:	6d 90       	ld	r6, X+
    3816:	7d 90       	ld	r7, X+
    3818:	8d 90       	ld	r8, X+
    381a:	9c 90       	ld	r9, X
    381c:	d2 97       	sbiw	r26, 0x32	; 50
    381e:	fc 01       	movw	r30, r24
    3820:	87 a1       	ldd	r24, Z+39	; 0x27
    3822:	90 a5       	ldd	r25, Z+40	; 0x28
    3824:	a1 a5       	ldd	r26, Z+41	; 0x29
    3826:	b2 a5       	ldd	r27, Z+42	; 0x2a
    3828:	86 15       	cp	r24, r6
    382a:	97 05       	cpc	r25, r7
    382c:	a8 05       	cpc	r26, r8
    382e:	b9 05       	cpc	r27, r9
    3830:	08 f4       	brcc	.+2      	; 0x3834 <fat_write_file+0x76>
    3832:	65 c1       	rjmp	.+714    	; 0x3afe <fat_write_file+0x340>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    3834:	01 90       	ld	r0, Z+
    3836:	f0 81       	ld	r31, Z
    3838:	e0 2d       	mov	r30, r0
    383a:	20 89       	ldd	r18, Z+16	; 0x10
    383c:	31 89       	ldd	r19, Z+17	; 0x11
    383e:	3a 83       	std	Y+2, r19	; 0x02
    3840:	29 83       	std	Y+1, r18	; 0x01
    cluster_t cluster_num = fd->pos_cluster;
    3842:	af 81       	ldd	r26, Y+7	; 0x07
    3844:	b8 85       	ldd	r27, Y+8	; 0x08
    3846:	d3 96       	adiw	r26, 0x33	; 51
    3848:	ed 90       	ld	r14, X+
    384a:	fd 90       	ld	r15, X+
    384c:	0d 91       	ld	r16, X+
    384e:	1c 91       	ld	r17, X
    3850:	d6 97       	sbiw	r26, 0x36	; 54
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start writing */
    if(!cluster_num)
    3852:	e1 14       	cp	r14, r1
    3854:	f1 04       	cpc	r15, r1
    3856:	01 05       	cpc	r16, r1
    3858:	11 05       	cpc	r17, r1
    385a:	09 f0       	breq	.+2      	; 0x385e <fat_write_file+0xa0>
    385c:	73 c0       	rjmp	.+230    	; 0x3944 <fat_write_file+0x186>
    {
        cluster_num = fd->dir_entry.cluster;
    385e:	93 96       	adiw	r26, 0x23	; 35
    3860:	ed 90       	ld	r14, X+
    3862:	fd 90       	ld	r15, X+
    3864:	0d 91       	ld	r16, X+
    3866:	1c 91       	ld	r17, X
    3868:	96 97       	sbiw	r26, 0x26	; 38
        
        if(!cluster_num)
    386a:	e1 14       	cp	r14, r1
    386c:	f1 04       	cpc	r15, r1
    386e:	01 05       	cpc	r16, r1
    3870:	11 05       	cpc	r17, r1
    3872:	f9 f4       	brne	.+62     	; 0x38b2 <fat_write_file+0xf4>
        {
            if(!fd->pos)
    3874:	61 14       	cp	r6, r1
    3876:	71 04       	cpc	r7, r1
    3878:	81 04       	cpc	r8, r1
    387a:	91 04       	cpc	r9, r1
    387c:	09 f0       	breq	.+2      	; 0x3880 <fat_write_file+0xc2>
    387e:	3f c1       	rjmp	.+638    	; 0x3afe <fat_write_file+0x340>
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
    3880:	cf 01       	movw	r24, r30
    3882:	40 e0       	ldi	r20, 0x00	; 0
    3884:	50 e0       	ldi	r21, 0x00	; 0
    3886:	60 e0       	ldi	r22, 0x00	; 0
    3888:	70 e0       	ldi	r23, 0x00	; 0
    388a:	01 e0       	ldi	r16, 0x01	; 1
    388c:	10 e0       	ldi	r17, 0x00	; 0
    388e:	20 e0       	ldi	r18, 0x00	; 0
    3890:	30 e0       	ldi	r19, 0x00	; 0
    3892:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <fat_append_clusters>
    3896:	7b 01       	movw	r14, r22
    3898:	8c 01       	movw	r16, r24
    389a:	ef 81       	ldd	r30, Y+7	; 0x07
    389c:	f8 85       	ldd	r31, Y+8	; 0x08
    389e:	63 a3       	std	Z+35, r22	; 0x23
    38a0:	74 a3       	std	Z+36, r23	; 0x24
    38a2:	85 a3       	std	Z+37, r24	; 0x25
    38a4:	96 a3       	std	Z+38, r25	; 0x26
                if(!cluster_num)
    38a6:	61 15       	cp	r22, r1
    38a8:	71 05       	cpc	r23, r1
    38aa:	81 05       	cpc	r24, r1
    38ac:	91 05       	cpc	r25, r1
    38ae:	09 f4       	brne	.+2      	; 0x38b2 <fat_write_file+0xf4>
    38b0:	26 c1       	rjmp	.+588    	; 0x3afe <fat_write_file+0x340>
            {
                return -1;
            }
        }

        if(fd->pos)
    38b2:	af 81       	ldd	r26, Y+7	; 0x07
    38b4:	b8 85       	ldd	r27, Y+8	; 0x08
    38b6:	9f 96       	adiw	r26, 0x2f	; 47
    38b8:	ad 90       	ld	r10, X+
    38ba:	bd 90       	ld	r11, X+
    38bc:	cd 90       	ld	r12, X+
    38be:	dc 90       	ld	r13, X
    38c0:	d2 97       	sbiw	r26, 0x32	; 50
    38c2:	a1 14       	cp	r10, r1
    38c4:	b1 04       	cpc	r11, r1
    38c6:	c1 04       	cpc	r12, r1
    38c8:	d1 04       	cpc	r13, r1
    38ca:	91 f5       	brne	.+100    	; 0x3930 <fat_write_file+0x172>
    38cc:	3b c0       	rjmp	.+118    	; 0x3944 <fat_write_file+0x186>
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
    38ce:	a2 18       	sub	r10, r2
    38d0:	b3 08       	sbc	r11, r3
    38d2:	c4 08       	sbc	r12, r4
    38d4:	d5 08       	sbc	r13, r5
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    38d6:	ef 81       	ldd	r30, Y+7	; 0x07
    38d8:	f8 85       	ldd	r31, Y+8	; 0x08
    38da:	80 81       	ld	r24, Z
    38dc:	91 81       	ldd	r25, Z+1	; 0x01
    38de:	b8 01       	movw	r22, r16
    38e0:	a7 01       	movw	r20, r14
    38e2:	0e 94 a5 0b 	call	0x174a	; 0x174a <fat_get_next_cluster>
                if(!cluster_num_next && pos == 0)
    38e6:	61 15       	cp	r22, r1
    38e8:	71 05       	cpc	r23, r1
    38ea:	81 05       	cpc	r24, r1
    38ec:	91 05       	cpc	r25, r1
    38ee:	19 f0       	breq	.+6      	; 0x38f6 <fat_write_file+0x138>
    38f0:	7b 01       	movw	r14, r22
    38f2:	8c 01       	movw	r16, r24
    38f4:	22 c0       	rjmp	.+68     	; 0x393a <fat_write_file+0x17c>
    38f6:	a1 14       	cp	r10, r1
    38f8:	b1 04       	cpc	r11, r1
    38fa:	c1 04       	cpc	r12, r1
    38fc:	d1 04       	cpc	r13, r1
    38fe:	09 f0       	breq	.+2      	; 0x3902 <fat_write_file+0x144>
    3900:	fe c0       	rjmp	.+508    	; 0x3afe <fat_write_file+0x340>
                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    3902:	af 81       	ldd	r26, Y+7	; 0x07
    3904:	b8 85       	ldd	r27, Y+8	; 0x08
    3906:	8d 91       	ld	r24, X+
    3908:	9c 91       	ld	r25, X
    390a:	b8 01       	movw	r22, r16
    390c:	a7 01       	movw	r20, r14
    390e:	01 e0       	ldi	r16, 0x01	; 1
    3910:	10 e0       	ldi	r17, 0x00	; 0
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <fat_append_clusters>
    391a:	ab 01       	movw	r20, r22
    391c:	bc 01       	movw	r22, r24
                if(!cluster_num_next)
    391e:	41 15       	cp	r20, r1
    3920:	51 05       	cpc	r21, r1
    3922:	61 05       	cpc	r22, r1
    3924:	71 05       	cpc	r23, r1
    3926:	09 f4       	brne	.+2      	; 0x392a <fat_write_file+0x16c>
    3928:	ea c0       	rjmp	.+468    	; 0x3afe <fat_write_file+0x340>
    392a:	7a 01       	movw	r14, r20
    392c:	8b 01       	movw	r16, r22
    392e:	05 c0       	rjmp	.+10     	; 0x393a <fat_write_file+0x17c>

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
    3930:	e9 81       	ldd	r30, Y+1	; 0x01
    3932:	fa 81       	ldd	r31, Y+2	; 0x02
    3934:	1f 01       	movw	r2, r30
    3936:	44 24       	eor	r4, r4
    3938:	55 24       	eor	r5, r5
    393a:	a2 14       	cp	r10, r2
    393c:	b3 04       	cpc	r11, r3
    393e:	c4 04       	cpc	r12, r4
    3940:	d5 04       	cpc	r13, r5
    3942:	28 f6       	brcc	.-118    	; 0x38ce <fat_write_file+0x110>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    3944:	29 81       	ldd	r18, Y+1	; 0x01
    3946:	3a 81       	ldd	r19, Y+2	; 0x02
    3948:	21 50       	subi	r18, 0x01	; 1
    394a:	30 40       	sbci	r19, 0x00	; 0
    394c:	62 22       	and	r6, r18
    394e:	73 22       	and	r7, r19
    3950:	2f 5f       	subi	r18, 0xFF	; 255
    3952:	3f 4f       	sbci	r19, 0xFF	; 255
    3954:	3a 83       	std	Y+2, r19	; 0x02
    3956:	29 83       	std	Y+1, r18	; 0x01
    3958:	8d 80       	ldd	r8, Y+5	; 0x05
    395a:	9e 80       	ldd	r9, Y+6	; 0x06
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    395c:	af 81       	ldd	r26, Y+7	; 0x07
    395e:	b8 85       	ldd	r27, Y+8	; 0x08
    3960:	ad 90       	ld	r10, X+
    3962:	bc 90       	ld	r11, X
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    3964:	a1 14       	cp	r10, r1
    3966:	b1 04       	cpc	r11, r1
    3968:	f9 f0       	breq	.+62     	; 0x39a8 <fat_write_file+0x1ea>
    396a:	b2 e0       	ldi	r27, 0x02	; 2
    396c:	eb 16       	cp	r14, r27
    396e:	f1 04       	cpc	r15, r1
    3970:	01 05       	cpc	r16, r1
    3972:	11 05       	cpc	r17, r1
    3974:	c8 f0       	brcs	.+50     	; 0x39a8 <fat_write_file+0x1ea>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    3976:	c8 01       	movw	r24, r16
    3978:	b7 01       	movw	r22, r14
    397a:	62 50       	subi	r22, 0x02	; 2
    397c:	70 40       	sbci	r23, 0x00	; 0
    397e:	80 40       	sbci	r24, 0x00	; 0
    3980:	90 40       	sbci	r25, 0x00	; 0
    3982:	f5 01       	movw	r30, r10
    3984:	20 89       	ldd	r18, Z+16	; 0x10
    3986:	31 89       	ldd	r19, Z+17	; 0x11
    3988:	40 e0       	ldi	r20, 0x00	; 0
    398a:	50 e0       	ldi	r21, 0x00	; 0
    398c:	0e 94 23 24 	call	0x4846	; 0x4846 <__mulsi3>
    3990:	9b 01       	movw	r18, r22
    3992:	ac 01       	movw	r20, r24
    3994:	f5 01       	movw	r30, r10
    3996:	82 89       	ldd	r24, Z+18	; 0x12
    3998:	93 89       	ldd	r25, Z+19	; 0x13
    399a:	a4 89       	ldd	r26, Z+20	; 0x14
    399c:	b5 89       	ldd	r27, Z+21	; 0x15
    399e:	28 0f       	add	r18, r24
    39a0:	39 1f       	adc	r19, r25
    39a2:	4a 1f       	adc	r20, r26
    39a4:	5b 1f       	adc	r21, r27
    39a6:	04 c0       	rjmp	.+8      	; 0x39b0 <fat_write_file+0x1f2>
    39a8:	20 e0       	ldi	r18, 0x00	; 0
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	40 e0       	ldi	r20, 0x00	; 0
    39ae:	50 e0       	ldi	r21, 0x00	; 0
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
        uint16_t write_length = cluster_size - first_cluster_offset;
    39b0:	c9 80       	ldd	r12, Y+1	; 0x01
    39b2:	da 80       	ldd	r13, Y+2	; 0x02
    39b4:	c6 18       	sub	r12, r6
    39b6:	d7 08       	sbc	r13, r7
    39b8:	8c 14       	cp	r8, r12
    39ba:	9d 04       	cpc	r9, r13
    39bc:	08 f4       	brcc	.+2      	; 0x39c0 <fat_write_file+0x202>
    39be:	64 01       	movw	r12, r8
        if(write_length > buffer_left)
            write_length = buffer_left;

        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
    39c0:	d5 01       	movw	r26, r10
    39c2:	ed 91       	ld	r30, X+
    39c4:	fc 91       	ld	r31, X
    39c6:	c3 01       	movw	r24, r6
    39c8:	a0 e0       	ldi	r26, 0x00	; 0
    39ca:	b0 e0       	ldi	r27, 0x00	; 0
    39cc:	28 0f       	add	r18, r24
    39ce:	39 1f       	adc	r19, r25
    39d0:	4a 1f       	adc	r20, r26
    39d2:	5b 1f       	adc	r21, r27
    39d4:	04 80       	ldd	r0, Z+4	; 0x04
    39d6:	f5 81       	ldd	r31, Z+5	; 0x05
    39d8:	e0 2d       	mov	r30, r0
    39da:	ca 01       	movw	r24, r20
    39dc:	b9 01       	movw	r22, r18
    39de:	4b 81       	ldd	r20, Y+3	; 0x03
    39e0:	5c 81       	ldd	r21, Y+4	; 0x04
    39e2:	96 01       	movw	r18, r12
    39e4:	09 95       	icall
    39e6:	88 23       	and	r24, r24
    39e8:	09 f4       	brne	.+2      	; 0x39ec <fat_write_file+0x22e>
    39ea:	5d c0       	rjmp	.+186    	; 0x3aa6 <fat_write_file+0x2e8>
            break;

        /* calculate new file position */
        buffer += write_length;
        buffer_left -= write_length;
    39ec:	8c 18       	sub	r8, r12
    39ee:	9d 08       	sbc	r9, r13
        fd->pos += write_length;
    39f0:	c6 01       	movw	r24, r12
    39f2:	a0 e0       	ldi	r26, 0x00	; 0
    39f4:	b0 e0       	ldi	r27, 0x00	; 0
    39f6:	ef 81       	ldd	r30, Y+7	; 0x07
    39f8:	f8 85       	ldd	r31, Y+8	; 0x08
    39fa:	27 a5       	ldd	r18, Z+47	; 0x2f
    39fc:	30 a9       	ldd	r19, Z+48	; 0x30
    39fe:	41 a9       	ldd	r20, Z+49	; 0x31
    3a00:	52 a9       	ldd	r21, Z+50	; 0x32
    3a02:	28 0f       	add	r18, r24
    3a04:	39 1f       	adc	r19, r25
    3a06:	4a 1f       	adc	r20, r26
    3a08:	5b 1f       	adc	r21, r27
    3a0a:	df 01       	movw	r26, r30
    3a0c:	27 a7       	std	Z+47, r18	; 0x2f
    3a0e:	30 ab       	std	Z+48, r19	; 0x30
    3a10:	41 ab       	std	Z+49, r20	; 0x31
    3a12:	52 ab       	std	Z+50, r21	; 0x32

        if(first_cluster_offset + write_length >= cluster_size)
    3a14:	c6 01       	movw	r24, r12
    3a16:	86 0d       	add	r24, r6
    3a18:	97 1d       	adc	r25, r7
    3a1a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a1c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a1e:	8e 17       	cp	r24, r30
    3a20:	9f 07       	cpc	r25, r31
    3a22:	78 f1       	brcs	.+94     	; 0x3a82 <fat_write_file+0x2c4>
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    3a24:	8d 91       	ld	r24, X+
    3a26:	9c 91       	ld	r25, X
    3a28:	b8 01       	movw	r22, r16
    3a2a:	a7 01       	movw	r20, r14
    3a2c:	0e 94 a5 0b 	call	0x174a	; 0x174a <fat_get_next_cluster>
            if(!cluster_num_next && buffer_left > 0)
    3a30:	61 15       	cp	r22, r1
    3a32:	71 05       	cpc	r23, r1
    3a34:	81 05       	cpc	r24, r1
    3a36:	91 05       	cpc	r25, r1
    3a38:	19 f0       	breq	.+6      	; 0x3a40 <fat_write_file+0x282>
    3a3a:	7b 01       	movw	r14, r22
    3a3c:	8c 01       	movw	r16, r24
    3a3e:	1f c0       	rjmp	.+62     	; 0x3a7e <fat_write_file+0x2c0>
    3a40:	81 14       	cp	r8, r1
    3a42:	91 04       	cpc	r9, r1
    3a44:	99 f0       	breq	.+38     	; 0x3a6c <fat_write_file+0x2ae>
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    3a46:	af 81       	ldd	r26, Y+7	; 0x07
    3a48:	b8 85       	ldd	r27, Y+8	; 0x08
    3a4a:	8d 91       	ld	r24, X+
    3a4c:	9c 91       	ld	r25, X
    3a4e:	b8 01       	movw	r22, r16
    3a50:	a7 01       	movw	r20, r14
    3a52:	01 e0       	ldi	r16, 0x01	; 1
    3a54:	10 e0       	ldi	r17, 0x00	; 0
    3a56:	20 e0       	ldi	r18, 0x00	; 0
    3a58:	30 e0       	ldi	r19, 0x00	; 0
    3a5a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <fat_append_clusters>
    3a5e:	ab 01       	movw	r20, r22
    3a60:	bc 01       	movw	r22, r24
            if(!cluster_num_next)
    3a62:	41 15       	cp	r20, r1
    3a64:	51 05       	cpc	r21, r1
    3a66:	61 05       	cpc	r22, r1
    3a68:	71 05       	cpc	r23, r1
    3a6a:	39 f4       	brne	.+14     	; 0x3a7a <fat_write_file+0x2bc>
            {
                fd->pos_cluster = 0;
    3a6c:	ef 81       	ldd	r30, Y+7	; 0x07
    3a6e:	f8 85       	ldd	r31, Y+8	; 0x08
    3a70:	13 aa       	std	Z+51, r1	; 0x33
    3a72:	14 aa       	std	Z+52, r1	; 0x34
    3a74:	15 aa       	std	Z+53, r1	; 0x35
    3a76:	16 aa       	std	Z+54, r1	; 0x36
    3a78:	16 c0       	rjmp	.+44     	; 0x3aa6 <fat_write_file+0x2e8>
                break;
    3a7a:	7a 01       	movw	r14, r20
    3a7c:	8b 01       	movw	r16, r22
    3a7e:	66 24       	eor	r6, r6
    3a80:	77 24       	eor	r7, r7

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
        }

        fd->pos_cluster = cluster_num;
    3a82:	af 81       	ldd	r26, Y+7	; 0x07
    3a84:	b8 85       	ldd	r27, Y+8	; 0x08
    3a86:	d3 96       	adiw	r26, 0x33	; 51
    3a88:	ed 92       	st	X+, r14
    3a8a:	fd 92       	st	X+, r15
    3a8c:	0d 93       	st	X+, r16
    3a8e:	1c 93       	st	X, r17
    3a90:	d6 97       	sbiw	r26, 0x36	; 54

    } while(buffer_left > 0); /* check if we are done */
    3a92:	81 14       	cp	r8, r1
    3a94:	91 04       	cpc	r9, r1
    3a96:	39 f0       	breq	.+14     	; 0x3aa6 <fat_write_file+0x2e8>
        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
            break;

        /* calculate new file position */
        buffer += write_length;
    3a98:	eb 81       	ldd	r30, Y+3	; 0x03
    3a9a:	fc 81       	ldd	r31, Y+4	; 0x04
    3a9c:	ec 0d       	add	r30, r12
    3a9e:	fd 1d       	adc	r31, r13
    3aa0:	fc 83       	std	Y+4, r31	; 0x04
    3aa2:	eb 83       	std	Y+3, r30	; 0x03
    3aa4:	5b cf       	rjmp	.-330    	; 0x395c <fat_write_file+0x19e>
        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    /* update directory entry */
    if(fd->pos > fd->dir_entry.file_size)
    3aa6:	ef 81       	ldd	r30, Y+7	; 0x07
    3aa8:	f8 85       	ldd	r31, Y+8	; 0x08
    3aaa:	87 a5       	ldd	r24, Z+47	; 0x2f
    3aac:	90 a9       	ldd	r25, Z+48	; 0x30
    3aae:	a1 a9       	ldd	r26, Z+49	; 0x31
    3ab0:	b2 a9       	ldd	r27, Z+50	; 0x32
    3ab2:	e7 a0       	ldd	r14, Z+39	; 0x27
    3ab4:	f0 a4       	ldd	r15, Z+40	; 0x28
    3ab6:	01 a5       	ldd	r16, Z+41	; 0x29
    3ab8:	12 a5       	ldd	r17, Z+42	; 0x2a
    3aba:	e8 16       	cp	r14, r24
    3abc:	f9 06       	cpc	r15, r25
    3abe:	0a 07       	cpc	r16, r26
    3ac0:	1b 07       	cpc	r17, r27
    3ac2:	c0 f4       	brcc	.+48     	; 0x3af4 <fat_write_file+0x336>
    {
        uint32_t size_old = fd->dir_entry.file_size;

        /* update file size */
        fd->dir_entry.file_size = fd->pos;
    3ac4:	87 a3       	std	Z+39, r24	; 0x27
    3ac6:	90 a7       	std	Z+40, r25	; 0x28
    3ac8:	a1 a7       	std	Z+41, r26	; 0x29
    3aca:	b2 a7       	std	Z+42, r27	; 0x2a
        /* write directory entry */
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    3acc:	81 91       	ld	r24, Z+
    3ace:	91 91       	ld	r25, Z+
    3ad0:	bf 01       	movw	r22, r30
    3ad2:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <fat_write_dir_entry>
    3ad6:	88 23       	and	r24, r24
    3ad8:	69 f4       	brne	.+26     	; 0x3af4 <fat_write_file+0x336>
        {
            /* We do not return an error here since we actually wrote
             * some data to disk. So we calculate the amount of data
             * we wrote to disk and which lies within the old file size.
             */
            buffer_left = fd->pos - size_old;
    3ada:	af 81       	ldd	r26, Y+7	; 0x07
    3adc:	b8 85       	ldd	r27, Y+8	; 0x08
    3ade:	9f 96       	adiw	r26, 0x2f	; 47
    3ae0:	8d 90       	ld	r8, X+
    3ae2:	9c 90       	ld	r9, X
    3ae4:	d0 97       	sbiw	r26, 0x30	; 48
    3ae6:	8e 18       	sub	r8, r14
    3ae8:	9f 08       	sbc	r9, r15
            fd->pos = size_old;
    3aea:	fd 01       	movw	r30, r26
    3aec:	e7 a6       	std	Z+47, r14	; 0x2f
    3aee:	f0 aa       	std	Z+48, r15	; 0x30
    3af0:	01 ab       	std	Z+49, r16	; 0x31
    3af2:	12 ab       	std	Z+50, r17	; 0x32
        }
    }

    return buffer_len - buffer_left;
    3af4:	4d 81       	ldd	r20, Y+5	; 0x05
    3af6:	5e 81       	ldd	r21, Y+6	; 0x06
    3af8:	48 19       	sub	r20, r8
    3afa:	59 09       	sbc	r21, r9
    3afc:	02 c0       	rjmp	.+4      	; 0x3b02 <fat_write_file+0x344>
    3afe:	4f ef       	ldi	r20, 0xFF	; 255
    3b00:	5f ef       	ldi	r21, 0xFF	; 255
}
    3b02:	ca 01       	movw	r24, r20
    3b04:	28 96       	adiw	r28, 0x08	; 8
    3b06:	0f b6       	in	r0, 0x3f	; 63
    3b08:	f8 94       	cli
    3b0a:	de bf       	out	0x3e, r29	; 62
    3b0c:	0f be       	out	0x3f, r0	; 63
    3b0e:	cd bf       	out	0x3d, r28	; 61
    3b10:	cf 91       	pop	r28
    3b12:	df 91       	pop	r29
    3b14:	1f 91       	pop	r17
    3b16:	0f 91       	pop	r16
    3b18:	ff 90       	pop	r15
    3b1a:	ef 90       	pop	r14
    3b1c:	df 90       	pop	r13
    3b1e:	cf 90       	pop	r12
    3b20:	bf 90       	pop	r11
    3b22:	af 90       	pop	r10
    3b24:	9f 90       	pop	r9
    3b26:	8f 90       	pop	r8
    3b28:	7f 90       	pop	r7
    3b2a:	6f 90       	pop	r6
    3b2c:	5f 90       	pop	r5
    3b2e:	4f 90       	pop	r4
    3b30:	3f 90       	pop	r3
    3b32:	2f 90       	pop	r2
    3b34:	08 95       	ret

00003b36 <fat_open_dir>:
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    3b36:	cf 93       	push	r28
    3b38:	df 93       	push	r29
    3b3a:	ac 01       	movw	r20, r24
    3b3c:	db 01       	movw	r26, r22
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    3b3e:	00 97       	sbiw	r24, 0x00	; 0
    3b40:	a9 f1       	breq	.+106    	; 0x3bac <fat_open_dir+0x76>
    3b42:	61 15       	cp	r22, r1
    3b44:	71 05       	cpc	r23, r1
    3b46:	91 f1       	breq	.+100    	; 0x3bac <fat_open_dir+0x76>
    3b48:	90 96       	adiw	r26, 0x20	; 32
    3b4a:	8c 91       	ld	r24, X
    3b4c:	90 97       	sbiw	r26, 0x20	; 32
    3b4e:	84 ff       	sbrs	r24, 4
    3b50:	2d c0       	rjmp	.+90     	; 0x3bac <fat_open_dir+0x76>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    3b52:	80 91 92 01 	lds	r24, 0x0192
    3b56:	90 91 93 01 	lds	r25, 0x0193
    3b5a:	89 2b       	or	r24, r25
    3b5c:	19 f4       	brne	.+6      	; 0x3b64 <fat_open_dir+0x2e>
    3b5e:	e2 e9       	ldi	r30, 0x92	; 146
    3b60:	f1 e0       	ldi	r31, 0x01	; 1
    3b62:	08 c0       	rjmp	.+16     	; 0x3b74 <fat_open_dir+0x3e>
    3b64:	80 91 c7 01 	lds	r24, 0x01C7
    3b68:	90 91 c8 01 	lds	r25, 0x01C8
    3b6c:	89 2b       	or	r24, r25
    3b6e:	f1 f4       	brne	.+60     	; 0x3bac <fat_open_dir+0x76>
    3b70:	e7 ec       	ldi	r30, 0xC7	; 199
    3b72:	f1 e0       	ldi	r31, 0x01	; 1
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
    3b74:	9f 01       	movw	r18, r30
    3b76:	2e 5f       	subi	r18, 0xFE	; 254
    3b78:	3f 4f       	sbci	r19, 0xFF	; 255
    3b7a:	bd 01       	movw	r22, r26
    3b7c:	8d e2       	ldi	r24, 0x2D	; 45
    3b7e:	eb 01       	movw	r28, r22
    3b80:	09 90       	ld	r0, Y+
    3b82:	be 01       	movw	r22, r28
    3b84:	e9 01       	movw	r28, r18
    3b86:	09 92       	st	Y+, r0
    3b88:	9e 01       	movw	r18, r28
    3b8a:	81 50       	subi	r24, 0x01	; 1
    3b8c:	c1 f7       	brne	.-16     	; 0x3b7e <fat_open_dir+0x48>
    dd->fs = fs;
    3b8e:	51 83       	std	Z+1, r21	; 0x01
    3b90:	40 83       	st	Z, r20
    dd->entry_cluster = dir_entry->cluster;
    3b92:	91 96       	adiw	r26, 0x21	; 33
    3b94:	8d 91       	ld	r24, X+
    3b96:	9d 91       	ld	r25, X+
    3b98:	0d 90       	ld	r0, X+
    3b9a:	bc 91       	ld	r27, X
    3b9c:	a0 2d       	mov	r26, r0
    3b9e:	87 a7       	std	Z+47, r24	; 0x2f
    3ba0:	90 ab       	std	Z+48, r25	; 0x30
    3ba2:	a1 ab       	std	Z+49, r26	; 0x31
    3ba4:	b2 ab       	std	Z+50, r27	; 0x32
    dd->entry_offset = 0;
    3ba6:	14 aa       	std	Z+52, r1	; 0x34
    3ba8:	13 aa       	std	Z+51, r1	; 0x33
    3baa:	02 c0       	rjmp	.+4      	; 0x3bb0 <fat_open_dir+0x7a>

    return dd;
    3bac:	e0 e0       	ldi	r30, 0x00	; 0
    3bae:	f0 e0       	ldi	r31, 0x00	; 0
}
    3bb0:	cf 01       	movw	r24, r30
    3bb2:	df 91       	pop	r29
    3bb4:	cf 91       	pop	r28
    3bb6:	08 95       	ret

00003bb8 <fat_open_file>:
 * \param[in] dir_entry The directory entry of the file to open.
 * \returns The file handle, or 0 on failure.
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    3bb8:	cf 93       	push	r28
    3bba:	df 93       	push	r29
    3bbc:	9c 01       	movw	r18, r24
    3bbe:	fb 01       	movw	r30, r22
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
    3bc0:	00 97       	sbiw	r24, 0x00	; 0
    3bc2:	31 f0       	breq	.+12     	; 0x3bd0 <fat_open_file+0x18>
    3bc4:	61 15       	cp	r22, r1
    3bc6:	71 05       	cpc	r23, r1
    3bc8:	19 f0       	breq	.+6      	; 0x3bd0 <fat_open_file+0x18>
    3bca:	80 a1       	ldd	r24, Z+32	; 0x20
    3bcc:	84 ff       	sbrs	r24, 4
    3bce:	29 c0       	rjmp	.+82     	; 0x3c22 <fat_open_file+0x6a>
    3bd0:	20 e0       	ldi	r18, 0x00	; 0
    3bd2:	30 e0       	ldi	r19, 0x00	; 0
    fd->fs = fs;
    fd->pos = 0;
    fd->pos_cluster = dir_entry->cluster;

    return fd;
}
    3bd4:	c9 01       	movw	r24, r18
    3bd6:	df 91       	pop	r29
    3bd8:	cf 91       	pop	r28
    3bda:	08 95       	ret
    }
    if(i >= FAT_FILE_COUNT)
        return 0;
#endif
    
    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
    3bdc:	cd e5       	ldi	r28, 0x5D	; 93
    3bde:	d1 e0       	ldi	r29, 0x01	; 1
    3be0:	df 01       	movw	r26, r30
    3be2:	8d e2       	ldi	r24, 0x2D	; 45
    3be4:	0d 90       	ld	r0, X+
    3be6:	09 92       	st	Y+, r0
    3be8:	81 50       	subi	r24, 0x01	; 1
    3bea:	e1 f7       	brne	.-8      	; 0x3be4 <fat_open_file+0x2c>
    fd->fs = fs;
    3bec:	30 93 5c 01 	sts	0x015C, r19
    3bf0:	20 93 5b 01 	sts	0x015B, r18
    fd->pos = 0;
    3bf4:	10 92 8a 01 	sts	0x018A, r1
    3bf8:	10 92 8b 01 	sts	0x018B, r1
    3bfc:	10 92 8c 01 	sts	0x018C, r1
    3c00:	10 92 8d 01 	sts	0x018D, r1
    fd->pos_cluster = dir_entry->cluster;
    3c04:	81 a1       	ldd	r24, Z+33	; 0x21
    3c06:	92 a1       	ldd	r25, Z+34	; 0x22
    3c08:	a3 a1       	ldd	r26, Z+35	; 0x23
    3c0a:	b4 a1       	ldd	r27, Z+36	; 0x24
    3c0c:	80 93 8e 01 	sts	0x018E, r24
    3c10:	90 93 8f 01 	sts	0x018F, r25
    3c14:	a0 93 90 01 	sts	0x0190, r26
    3c18:	b0 93 91 01 	sts	0x0191, r27
    3c1c:	2b e5       	ldi	r18, 0x5B	; 91
    3c1e:	31 e0       	ldi	r19, 0x01	; 1
    3c20:	d9 cf       	rjmp	.-78     	; 0x3bd4 <fat_open_file+0x1c>
#else
    struct fat_file_struct* fd = fat_file_handles;
    uint8_t i;
    for(i = 0; i < FAT_FILE_COUNT; ++i)
    {
        if(!fd->fs)
    3c22:	80 91 5b 01 	lds	r24, 0x015B
    3c26:	90 91 5c 01 	lds	r25, 0x015C
    3c2a:	89 2b       	or	r24, r25
    3c2c:	89 f6       	brne	.-94     	; 0x3bd0 <fat_open_file+0x18>
    3c2e:	d6 cf       	rjmp	.-84     	; 0x3bdc <fat_open_file+0x24>

00003c30 <fat_get_dir_entry_of_path>:
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    3c30:	6f 92       	push	r6
    3c32:	7f 92       	push	r7
    3c34:	8f 92       	push	r8
    3c36:	9f 92       	push	r9
    3c38:	af 92       	push	r10
    3c3a:	bf 92       	push	r11
    3c3c:	cf 92       	push	r12
    3c3e:	df 92       	push	r13
    3c40:	ef 92       	push	r14
    3c42:	ff 92       	push	r15
    3c44:	0f 93       	push	r16
    3c46:	1f 93       	push	r17
    3c48:	cf 93       	push	r28
    3c4a:	df 93       	push	r29
    3c4c:	4c 01       	movw	r8, r24
    3c4e:	eb 01       	movw	r28, r22
    3c50:	7a 01       	movw	r14, r20
    if(!fs || !path || path[0] == '\0' || !dir_entry)
    3c52:	00 97       	sbiw	r24, 0x00	; 0
    3c54:	09 f4       	brne	.+2      	; 0x3c58 <fat_get_dir_entry_of_path+0x28>
    3c56:	67 c0       	rjmp	.+206    	; 0x3d26 <fat_get_dir_entry_of_path+0xf6>
    3c58:	61 15       	cp	r22, r1
    3c5a:	71 05       	cpc	r23, r1
    3c5c:	09 f4       	brne	.+2      	; 0x3c60 <fat_get_dir_entry_of_path+0x30>
    3c5e:	63 c0       	rjmp	.+198    	; 0x3d26 <fat_get_dir_entry_of_path+0xf6>
    3c60:	88 81       	ld	r24, Y
    3c62:	88 23       	and	r24, r24
    3c64:	09 f4       	brne	.+2      	; 0x3c68 <fat_get_dir_entry_of_path+0x38>
    3c66:	5f c0       	rjmp	.+190    	; 0x3d26 <fat_get_dir_entry_of_path+0xf6>
    3c68:	41 15       	cp	r20, r1
    3c6a:	51 05       	cpc	r21, r1
    3c6c:	09 f4       	brne	.+2      	; 0x3c70 <fat_get_dir_entry_of_path+0x40>
    3c6e:	5b c0       	rjmp	.+182    	; 0x3d26 <fat_get_dir_entry_of_path+0xf6>
        return 0;

    if(path[0] == '/')
    3c70:	8f 32       	cpi	r24, 0x2F	; 47
    3c72:	09 f4       	brne	.+2      	; 0x3c76 <fat_get_dir_entry_of_path+0x46>
        ++path;
    3c74:	21 96       	adiw	r28, 0x01	; 1

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
    3c76:	8d e2       	ldi	r24, 0x2D	; 45
    3c78:	f7 01       	movw	r30, r14
    3c7a:	11 92       	st	Z+, r1
    3c7c:	8a 95       	dec	r24
    3c7e:	e9 f7       	brne	.-6      	; 0x3c7a <fat_get_dir_entry_of_path+0x4a>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    3c80:	80 e1       	ldi	r24, 0x10	; 16
    3c82:	f7 01       	movw	r30, r14
    3c84:	80 a3       	std	Z+32, r24	; 0x20
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    3c86:	37 01       	movw	r6, r14
    3c88:	01 c0       	rjmp	.+2      	; 0x3c8c <fat_get_dir_entry_of_path+0x5c>
    3c8a:	e5 01       	movw	r28, r10
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
    3c8c:	88 81       	ld	r24, Y
    3c8e:	88 23       	and	r24, r24
    3c90:	09 f4       	brne	.+2      	; 0x3c94 <fat_get_dir_entry_of_path+0x64>
    3c92:	4b c0       	rjmp	.+150    	; 0x3d2a <fat_get_dir_entry_of_path+0xfa>
            return 1;

        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
    3c94:	c4 01       	movw	r24, r8
    3c96:	b7 01       	movw	r22, r14
    3c98:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <fat_open_dir>
    3c9c:	6c 01       	movw	r12, r24
        if(!dd)
    3c9e:	00 97       	sbiw	r24, 0x00	; 0
    3ca0:	09 f4       	brne	.+2      	; 0x3ca4 <fat_get_dir_entry_of_path+0x74>
    3ca2:	41 c0       	rjmp	.+130    	; 0x3d26 <fat_get_dir_entry_of_path+0xf6>
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
    3ca4:	ce 01       	movw	r24, r28
    3ca6:	6f e2       	ldi	r22, 0x2F	; 47
    3ca8:	70 e0       	ldi	r23, 0x00	; 0
    3caa:	0e 94 b2 24 	call	0x4964	; 0x4964 <strchr>
        uint8_t length_to_sep;
        if(sub_path)
    3cae:	00 97       	sbiw	r24, 0x00	; 0
    3cb0:	39 f0       	breq	.+14     	; 0x3cc0 <fat_get_dir_entry_of_path+0x90>
        {
            length_to_sep = sub_path - path;
    3cb2:	48 2f       	mov	r20, r24
    3cb4:	4c 1b       	sub	r20, r28
            ++sub_path;
    3cb6:	5c 01       	movw	r10, r24
    3cb8:	08 94       	sec
    3cba:	a1 1c       	adc	r10, r1
    3cbc:	b1 1c       	adc	r11, r1
    3cbe:	2a c0       	rjmp	.+84     	; 0x3d14 <fat_get_dir_entry_of_path+0xe4>
        }
        else
        {
            length_to_sep = strlen(path);
    3cc0:	fe 01       	movw	r30, r28
    3cc2:	01 90       	ld	r0, Z+
    3cc4:	00 20       	and	r0, r0
    3cc6:	e9 f7       	brne	.-6      	; 0x3cc2 <fat_get_dir_entry_of_path+0x92>
    3cc8:	31 97       	sbiw	r30, 0x01	; 1
    3cca:	4e 2f       	mov	r20, r30
    3ccc:	4c 1b       	sub	r20, r28
            sub_path = path + length_to_sep;
    3cce:	5e 01       	movw	r10, r28
    3cd0:	a4 0e       	add	r10, r20
    3cd2:	b1 1c       	adc	r11, r1
    3cd4:	1f c0       	rjmp	.+62     	; 0x3d14 <fat_get_dir_entry_of_path+0xe4>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    3cd6:	f3 01       	movw	r30, r6
    3cd8:	01 90       	ld	r0, Z+
    3cda:	00 20       	and	r0, r0
    3cdc:	e9 f7       	brne	.-6      	; 0x3cd8 <fat_get_dir_entry_of_path+0xa8>
    3cde:	31 97       	sbiw	r30, 0x01	; 1
    3ce0:	e6 19       	sub	r30, r6
    3ce2:	f7 09       	sbc	r31, r7
    3ce4:	e0 17       	cp	r30, r16
    3ce6:	f1 07       	cpc	r31, r17
    3ce8:	b9 f4       	brne	.+46     	; 0x3d18 <fat_get_dir_entry_of_path+0xe8>
    3cea:	ce 01       	movw	r24, r28
    3cec:	b3 01       	movw	r22, r6
    3cee:	a8 01       	movw	r20, r16
    3cf0:	0e 94 c6 24 	call	0x498c	; 0x498c <strncmp>
    3cf4:	00 97       	sbiw	r24, 0x00	; 0
    3cf6:	81 f4       	brne	.+32     	; 0x3d18 <fat_get_dir_entry_of_path+0xe8>
{
    if(dd)
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    3cf8:	f6 01       	movw	r30, r12
    3cfa:	11 82       	std	Z+1, r1	; 0x01
    3cfc:	10 82       	st	Z, r1
                continue;

            fat_close_dir(dd);
            dd = 0;

            if(path[length_to_sep] == '\0')
    3cfe:	0c 0f       	add	r16, r28
    3d00:	1d 1f       	adc	r17, r29
    3d02:	f8 01       	movw	r30, r16
    3d04:	80 81       	ld	r24, Z
    3d06:	88 23       	and	r24, r24
    3d08:	81 f0       	breq	.+32     	; 0x3d2a <fat_get_dir_entry_of_path+0xfa>
                /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
    3d0a:	f7 01       	movw	r30, r14
    3d0c:	80 a1       	ldd	r24, Z+32	; 0x20
    3d0e:	84 fd       	sbrc	r24, 4
    3d10:	bc cf       	rjmp	.-136    	; 0x3c8a <fat_get_dir_entry_of_path+0x5a>
    3d12:	09 c0       	rjmp	.+18     	; 0x3d26 <fat_get_dir_entry_of_path+0xf6>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    3d14:	04 2f       	mov	r16, r20
    3d16:	10 e0       	ldi	r17, 0x00	; 0
            length_to_sep = strlen(path);
            sub_path = path + length_to_sep;
        }
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
    3d18:	c6 01       	movw	r24, r12
    3d1a:	b7 01       	movw	r22, r14
    3d1c:	0e 94 3e 13 	call	0x267c	; 0x267c <fat_read_dir>
    3d20:	88 23       	and	r24, r24
    3d22:	c9 f6       	brne	.-78     	; 0x3cd6 <fat_get_dir_entry_of_path+0xa6>
    3d24:	12 c0       	rjmp	.+36     	; 0x3d4a <fat_get_dir_entry_of_path+0x11a>
    3d26:	80 e0       	ldi	r24, 0x00	; 0
    3d28:	01 c0       	rjmp	.+2      	; 0x3d2c <fat_get_dir_entry_of_path+0xfc>
    3d2a:	81 e0       	ldi	r24, 0x01	; 1

        fat_close_dir(dd);
    }
    
    return 0;
}
    3d2c:	df 91       	pop	r29
    3d2e:	cf 91       	pop	r28
    3d30:	1f 91       	pop	r17
    3d32:	0f 91       	pop	r16
    3d34:	ff 90       	pop	r15
    3d36:	ef 90       	pop	r14
    3d38:	df 90       	pop	r13
    3d3a:	cf 90       	pop	r12
    3d3c:	bf 90       	pop	r11
    3d3e:	af 90       	pop	r10
    3d40:	9f 90       	pop	r9
    3d42:	8f 90       	pop	r8
    3d44:	7f 90       	pop	r7
    3d46:	6f 90       	pop	r6
    3d48:	08 95       	ret
{
    if(dd)
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    3d4a:	f6 01       	movw	r30, r12
    3d4c:	11 82       	std	Z+1, r1	; 0x01
    3d4e:	10 82       	st	Z, r1
    3d50:	9d cf       	rjmp	.-198    	; 0x3c8c <fat_get_dir_entry_of_path+0x5c>

00003d52 <partition_close>:
 * \param[in] partition The partition descriptor to destroy.
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    3d52:	fc 01       	movw	r30, r24
    if(!partition)
    3d54:	00 97       	sbiw	r24, 0x00	; 0
    3d56:	11 f4       	brne	.+4      	; 0x3d5c <partition_close+0xa>
    3d58:	80 e0       	ldi	r24, 0x00	; 0
    3d5a:	08 95       	ret

    /* destroy partition descriptor */
#if USE_DYNAMIC_MEMORY
    free(partition);
#else
    partition->type = PARTITION_TYPE_FREE;
    3d5c:	10 86       	std	Z+8, r1	; 0x08
    3d5e:	81 e0       	ldi	r24, 0x01	; 1
#endif

    return 1;
}
    3d60:	08 95       	ret

00003d62 <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    3d62:	8f 92       	push	r8
    3d64:	9f 92       	push	r9
    3d66:	af 92       	push	r10
    3d68:	bf 92       	push	r11
    3d6a:	cf 92       	push	r12
    3d6c:	df 92       	push	r13
    3d6e:	ef 92       	push	r14
    3d70:	ff 92       	push	r15
    3d72:	0f 93       	push	r16
    3d74:	df 93       	push	r29
    3d76:	cf 93       	push	r28
    3d78:	cd b7       	in	r28, 0x3d	; 61
    3d7a:	de b7       	in	r29, 0x3e	; 62
    3d7c:	60 97       	sbiw	r28, 0x10	; 16
    3d7e:	0f b6       	in	r0, 0x3f	; 63
    3d80:	f8 94       	cli
    3d82:	de bf       	out	0x3e, r29	; 62
    3d84:	0f be       	out	0x3f, r0	; 63
    3d86:	cd bf       	out	0x3d, r28	; 61
    3d88:	7c 01       	movw	r14, r24
    3d8a:	6b 01       	movw	r12, r22
    3d8c:	5a 01       	movw	r10, r20
    3d8e:	49 01       	movw	r8, r18
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
    3d90:	00 97       	sbiw	r24, 0x00	; 0
    3d92:	09 f4       	brne	.+2      	; 0x3d96 <partition_open+0x34>
    3d94:	93 c0       	rjmp	.+294    	; 0x3ebc <partition_open+0x15a>
    3d96:	61 15       	cp	r22, r1
    3d98:	71 05       	cpc	r23, r1
    3d9a:	09 f4       	brne	.+2      	; 0x3d9e <partition_open+0x3c>
    3d9c:	8f c0       	rjmp	.+286    	; 0x3ebc <partition_open+0x15a>
    3d9e:	04 30       	cpi	r16, 0x04	; 4
    3da0:	0c f0       	brlt	.+2      	; 0x3da4 <partition_open+0x42>
    3da2:	8c c0       	rjmp	.+280    	; 0x3ebc <partition_open+0x15a>
        return 0;

    if(index >= 0)
    3da4:	07 fd       	sbrc	r16, 7
    3da6:	1d c0       	rjmp	.+58     	; 0x3de2 <partition_open+0x80>
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
    3da8:	60 2f       	mov	r22, r16
    3daa:	77 27       	eor	r23, r23
    3dac:	67 fd       	sbrc	r22, 7
    3dae:	70 95       	com	r23
    3db0:	e4 e0       	ldi	r30, 0x04	; 4
    3db2:	66 0f       	add	r22, r22
    3db4:	77 1f       	adc	r23, r23
    3db6:	ea 95       	dec	r30
    3db8:	e1 f7       	brne	.-8      	; 0x3db2 <partition_open+0x50>
    3dba:	62 54       	subi	r22, 0x42	; 66
    3dbc:	7e 4f       	sbci	r23, 0xFE	; 254
    3dbe:	88 27       	eor	r24, r24
    3dc0:	77 fd       	sbrc	r23, 7
    3dc2:	80 95       	com	r24
    3dc4:	98 2f       	mov	r25, r24
    3dc6:	ae 01       	movw	r20, r28
    3dc8:	4f 5f       	subi	r20, 0xFF	; 255
    3dca:	5f 4f       	sbci	r21, 0xFF	; 255
    3dcc:	20 e1       	ldi	r18, 0x10	; 16
    3dce:	30 e0       	ldi	r19, 0x00	; 0
    3dd0:	f7 01       	movw	r30, r14
    3dd2:	09 95       	icall
    3dd4:	88 23       	and	r24, r24
    3dd6:	09 f4       	brne	.+2      	; 0x3dda <partition_open+0x78>
    3dd8:	71 c0       	rjmp	.+226    	; 0x3ebc <partition_open+0x15a>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
    3dda:	8d 81       	ldd	r24, Y+5	; 0x05
    3ddc:	88 23       	and	r24, r24
    3dde:	09 f4       	brne	.+2      	; 0x3de2 <partition_open+0x80>
    3de0:	6d c0       	rjmp	.+218    	; 0x3ebc <partition_open+0x15a>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    3de2:	80 91 04 02 	lds	r24, 0x0204
    3de6:	88 23       	and	r24, r24
    3de8:	09 f0       	breq	.+2      	; 0x3dec <partition_open+0x8a>
    3dea:	68 c0       	rjmp	.+208    	; 0x3ebc <partition_open+0x15a>
    3dec:	7c c0       	rjmp	.+248    	; 0x3ee6 <partition_open+0x184>
    new_partition->device_write = device_write;
    new_partition->device_write_interval = device_write_interval;

    if(index >= 0)
    {
        new_partition->type = buffer[4];
    3dee:	8d 81       	ldd	r24, Y+5	; 0x05
    3df0:	80 93 04 02 	sts	0x0204, r24
        new_partition->offset = ((uint32_t) buffer[8]) |
    3df4:	2a 85       	ldd	r18, Y+10	; 0x0a
    3df6:	30 e0       	ldi	r19, 0x00	; 0
    3df8:	40 e0       	ldi	r20, 0x00	; 0
    3dfa:	50 e0       	ldi	r21, 0x00	; 0
    3dfc:	54 2f       	mov	r21, r20
    3dfe:	43 2f       	mov	r20, r19
    3e00:	32 2f       	mov	r19, r18
    3e02:	22 27       	eor	r18, r18
    3e04:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	a0 e0       	ldi	r26, 0x00	; 0
    3e0a:	b0 e0       	ldi	r27, 0x00	; 0
    3e0c:	dc 01       	movw	r26, r24
    3e0e:	99 27       	eor	r25, r25
    3e10:	88 27       	eor	r24, r24
    3e12:	28 2b       	or	r18, r24
    3e14:	39 2b       	or	r19, r25
    3e16:	4a 2b       	or	r20, r26
    3e18:	5b 2b       	or	r21, r27
    3e1a:	89 85       	ldd	r24, Y+9	; 0x09
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	a0 e0       	ldi	r26, 0x00	; 0
    3e20:	b0 e0       	ldi	r27, 0x00	; 0
    3e22:	28 2b       	or	r18, r24
    3e24:	39 2b       	or	r19, r25
    3e26:	4a 2b       	or	r20, r26
    3e28:	5b 2b       	or	r21, r27
    3e2a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	a0 e0       	ldi	r26, 0x00	; 0
    3e30:	b0 e0       	ldi	r27, 0x00	; 0
    3e32:	b8 2f       	mov	r27, r24
    3e34:	aa 27       	eor	r26, r26
    3e36:	99 27       	eor	r25, r25
    3e38:	88 27       	eor	r24, r24
    3e3a:	28 2b       	or	r18, r24
    3e3c:	39 2b       	or	r19, r25
    3e3e:	4a 2b       	or	r20, r26
    3e40:	5b 2b       	or	r21, r27
    3e42:	20 93 05 02 	sts	0x0205, r18
    3e46:	30 93 06 02 	sts	0x0206, r19
    3e4a:	40 93 07 02 	sts	0x0207, r20
    3e4e:	50 93 08 02 	sts	0x0208, r21
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
    3e52:	2e 85       	ldd	r18, Y+14	; 0x0e
    3e54:	30 e0       	ldi	r19, 0x00	; 0
    3e56:	40 e0       	ldi	r20, 0x00	; 0
    3e58:	50 e0       	ldi	r21, 0x00	; 0
    3e5a:	54 2f       	mov	r21, r20
    3e5c:	43 2f       	mov	r20, r19
    3e5e:	32 2f       	mov	r19, r18
    3e60:	22 27       	eor	r18, r18
    3e62:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	a0 e0       	ldi	r26, 0x00	; 0
    3e68:	b0 e0       	ldi	r27, 0x00	; 0
    3e6a:	dc 01       	movw	r26, r24
    3e6c:	99 27       	eor	r25, r25
    3e6e:	88 27       	eor	r24, r24
    3e70:	28 2b       	or	r18, r24
    3e72:	39 2b       	or	r19, r25
    3e74:	4a 2b       	or	r20, r26
    3e76:	5b 2b       	or	r21, r27
    3e78:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	a0 e0       	ldi	r26, 0x00	; 0
    3e7e:	b0 e0       	ldi	r27, 0x00	; 0
    3e80:	28 2b       	or	r18, r24
    3e82:	39 2b       	or	r19, r25
    3e84:	4a 2b       	or	r20, r26
    3e86:	5b 2b       	or	r21, r27
    3e88:	88 89       	ldd	r24, Y+16	; 0x10
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	a0 e0       	ldi	r26, 0x00	; 0
    3e8e:	b0 e0       	ldi	r27, 0x00	; 0
    3e90:	b8 2f       	mov	r27, r24
    3e92:	aa 27       	eor	r26, r26
    3e94:	99 27       	eor	r25, r25
    3e96:	88 27       	eor	r24, r24
    3e98:	28 2b       	or	r18, r24
    3e9a:	39 2b       	or	r19, r25
    3e9c:	4a 2b       	or	r20, r26
    3e9e:	5b 2b       	or	r21, r27
    3ea0:	20 93 09 02 	sts	0x0209, r18
    3ea4:	30 93 0a 02 	sts	0x020A, r19
    3ea8:	40 93 0b 02 	sts	0x020B, r20
    3eac:	50 93 0c 02 	sts	0x020C, r21
    3eb0:	03 c0       	rjmp	.+6      	; 0x3eb8 <partition_open+0x156>
                                ((uint32_t) buffer[14] << 16) |
                                ((uint32_t) buffer[15] << 24);
    }
    else
    {
        new_partition->type = 0xff;
    3eb2:	8f ef       	ldi	r24, 0xFF	; 255
    3eb4:	80 93 04 02 	sts	0x0204, r24
    3eb8:	9f 01       	movw	r18, r30
    3eba:	02 c0       	rjmp	.+4      	; 0x3ec0 <partition_open+0x15e>
    3ebc:	20 e0       	ldi	r18, 0x00	; 0
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
    }

    return new_partition;
}
    3ec0:	c9 01       	movw	r24, r18
    3ec2:	60 96       	adiw	r28, 0x10	; 16
    3ec4:	0f b6       	in	r0, 0x3f	; 63
    3ec6:	f8 94       	cli
    3ec8:	de bf       	out	0x3e, r29	; 62
    3eca:	0f be       	out	0x3f, r0	; 63
    3ecc:	cd bf       	out	0x3d, r28	; 61
    3ece:	cf 91       	pop	r28
    3ed0:	df 91       	pop	r29
    3ed2:	0f 91       	pop	r16
    3ed4:	ff 90       	pop	r15
    3ed6:	ef 90       	pop	r14
    3ed8:	df 90       	pop	r13
    3eda:	cf 90       	pop	r12
    3edc:	bf 90       	pop	r11
    3ede:	af 90       	pop	r10
    3ee0:	9f 90       	pop	r9
    3ee2:	8f 90       	pop	r8
    3ee4:	08 95       	ret
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    3ee6:	ec ef       	ldi	r30, 0xFC	; 252
    3ee8:	f1 e0       	ldi	r31, 0x01	; 1
    3eea:	81 e1       	ldi	r24, 0x11	; 17
    3eec:	df 01       	movw	r26, r30
    3eee:	1d 92       	st	X+, r1
    3ef0:	8a 95       	dec	r24
    3ef2:	e9 f7       	brne	.-6      	; 0x3eee <partition_open+0x18c>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    3ef4:	f0 92 fd 01 	sts	0x01FD, r15
    3ef8:	e0 92 fc 01 	sts	0x01FC, r14
    new_partition->device_read_interval = device_read_interval;
    3efc:	d0 92 ff 01 	sts	0x01FF, r13
    3f00:	c0 92 fe 01 	sts	0x01FE, r12
    new_partition->device_write = device_write;
    3f04:	b0 92 01 02 	sts	0x0201, r11
    3f08:	a0 92 00 02 	sts	0x0200, r10
    new_partition->device_write_interval = device_write_interval;
    3f0c:	90 92 03 02 	sts	0x0203, r9
    3f10:	80 92 02 02 	sts	0x0202, r8

    if(index >= 0)
    3f14:	07 ff       	sbrs	r16, 7
    3f16:	6b cf       	rjmp	.-298    	; 0x3dee <partition_open+0x8c>
    3f18:	cc cf       	rjmp	.-104    	; 0x3eb2 <partition_open+0x150>

00003f1a <sd_raw_available>:
 * \returns 1 if the card is available, 0 if it is not.
 */
uint8_t sd_raw_available()
{
    return get_pin_available() == 0x00;
}
    3f1a:	81 e0       	ldi	r24, 0x01	; 1
    3f1c:	08 95       	ret

00003f1e <sd_raw_locked>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
    3f1e:	80 e0       	ldi	r24, 0x00	; 0
    3f20:	08 95       	ret

00003f22 <sd_raw_send_command>:
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
    3f22:	28 2f       	mov	r18, r24
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3f24:	8f ef       	ldi	r24, 0xFF	; 255
    3f26:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    3f28:	0d b4       	in	r0, 0x2d	; 45
    3f2a:	07 fe       	sbrs	r0, 7
    3f2c:	fd cf       	rjmp	.-6      	; 0x3f28 <sd_raw_send_command+0x6>
    SPSR &= ~(1 << SPIF);
    3f2e:	8d b5       	in	r24, 0x2d	; 45
    3f30:	8f 77       	andi	r24, 0x7F	; 127
    3f32:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3f34:	8e b5       	in	r24, 0x2e	; 46

    /* wait some clock cycles */
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    3f36:	82 2f       	mov	r24, r18
    3f38:	80 64       	ori	r24, 0x40	; 64
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    3f3a:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    3f3c:	0d b4       	in	r0, 0x2d	; 45
    3f3e:	07 fe       	sbrs	r0, 7
    3f40:	fd cf       	rjmp	.-6      	; 0x3f3c <sd_raw_send_command+0x1a>
    SPSR &= ~(1 << SPIF);
    3f42:	8d b5       	in	r24, 0x2d	; 45
    3f44:	8f 77       	andi	r24, 0x7F	; 127
    3f46:	8d bd       	out	0x2d, r24	; 45
    /* wait some clock cycles */
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    3f48:	87 2f       	mov	r24, r23
    3f4a:	99 27       	eor	r25, r25
    3f4c:	aa 27       	eor	r26, r26
    3f4e:	bb 27       	eor	r27, r27
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    3f50:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    3f52:	0d b4       	in	r0, 0x2d	; 45
    3f54:	07 fe       	sbrs	r0, 7
    3f56:	fd cf       	rjmp	.-6      	; 0x3f52 <sd_raw_send_command+0x30>
    SPSR &= ~(1 << SPIF);
    3f58:	8d b5       	in	r24, 0x2d	; 45
    3f5a:	8f 77       	andi	r24, 0x7F	; 127
    3f5c:	8d bd       	out	0x2d, r24	; 45
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    3f5e:	cb 01       	movw	r24, r22
    3f60:	aa 27       	eor	r26, r26
    3f62:	bb 27       	eor	r27, r27
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    3f64:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    3f66:	0d b4       	in	r0, 0x2d	; 45
    3f68:	07 fe       	sbrs	r0, 7
    3f6a:	fd cf       	rjmp	.-6      	; 0x3f66 <sd_raw_send_command+0x44>
    SPSR &= ~(1 << SPIF);
    3f6c:	8d b5       	in	r24, 0x2d	; 45
    3f6e:	8f 77       	andi	r24, 0x7F	; 127
    3f70:	8d bd       	out	0x2d, r24	; 45

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
    3f72:	bb 27       	eor	r27, r27
    3f74:	a7 2f       	mov	r26, r23
    3f76:	96 2f       	mov	r25, r22
    3f78:	85 2f       	mov	r24, r21
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    3f7a:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    3f7c:	0d b4       	in	r0, 0x2d	; 45
    3f7e:	07 fe       	sbrs	r0, 7
    3f80:	fd cf       	rjmp	.-6      	; 0x3f7c <sd_raw_send_command+0x5a>
    SPSR &= ~(1 << SPIF);
    3f82:	8d b5       	in	r24, 0x2d	; 45
    3f84:	8f 77       	andi	r24, 0x7F	; 127
    3f86:	8d bd       	out	0x2d, r24	; 45
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    3f88:	4e bd       	out	0x2e, r20	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    3f8a:	0d b4       	in	r0, 0x2d	; 45
    3f8c:	07 fe       	sbrs	r0, 7
    3f8e:	fd cf       	rjmp	.-6      	; 0x3f8a <sd_raw_send_command+0x68>
    SPSR &= ~(1 << SPIF);
    3f90:	8d b5       	in	r24, 0x2d	; 45
    3f92:	8f 77       	andi	r24, 0x7F	; 127
    3f94:	8d bd       	out	0x2d, r24	; 45
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
    sd_raw_send_byte((arg >> 0) & 0xff);
    switch(command)
    3f96:	22 23       	and	r18, r18
    3f98:	19 f0       	breq	.+6      	; 0x3fa0 <sd_raw_send_command+0x7e>
    3f9a:	28 30       	cpi	r18, 0x08	; 8
    3f9c:	69 f4       	brne	.+26     	; 0x3fb8 <sd_raw_send_command+0x96>
    3f9e:	06 c0       	rjmp	.+12     	; 0x3fac <sd_raw_send_command+0x8a>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    3fa0:	85 e9       	ldi	r24, 0x95	; 149
    3fa2:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    3fa4:	0d b4       	in	r0, 0x2d	; 45
    3fa6:	07 fe       	sbrs	r0, 7
    3fa8:	fd cf       	rjmp	.-6      	; 0x3fa4 <sd_raw_send_command+0x82>
    3faa:	0b c0       	rjmp	.+22     	; 0x3fc2 <sd_raw_send_command+0xa0>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    3fac:	87 e8       	ldi	r24, 0x87	; 135
    3fae:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    3fb0:	0d b4       	in	r0, 0x2d	; 45
    3fb2:	07 fe       	sbrs	r0, 7
    3fb4:	fd cf       	rjmp	.-6      	; 0x3fb0 <sd_raw_send_command+0x8e>
    3fb6:	05 c0       	rjmp	.+10     	; 0x3fc2 <sd_raw_send_command+0xa0>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    3fb8:	8f ef       	ldi	r24, 0xFF	; 255
    3fba:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    3fbc:	0d b4       	in	r0, 0x2d	; 45
    3fbe:	07 fe       	sbrs	r0, 7
    3fc0:	fd cf       	rjmp	.-6      	; 0x3fbc <sd_raw_send_command+0x9a>
    SPSR &= ~(1 << SPIF);
    3fc2:	8d b5       	in	r24, 0x2d	; 45
    3fc4:	8f 77       	andi	r24, 0x7F	; 127
    3fc6:	8d bd       	out	0x2d, r24	; 45
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3fca:	2f ef       	ldi	r18, 0xFF	; 255
    3fcc:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR & (1 << SPIF)));
    3fce:	0d b4       	in	r0, 0x2d	; 45
    3fd0:	07 fe       	sbrs	r0, 7
    3fd2:	fd cf       	rjmp	.-6      	; 0x3fce <sd_raw_send_command+0xac>
    SPSR &= ~(1 << SPIF);
    3fd4:	8d b5       	in	r24, 0x2d	; 45
    3fd6:	8f 77       	andi	r24, 0x7F	; 127
    3fd8:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3fda:	8e b5       	in	r24, 0x2e	; 46
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    {
        response = sd_raw_rec_byte();
        if(response != 0xff)
    3fdc:	8f 3f       	cpi	r24, 0xFF	; 255
    3fde:	19 f4       	brne	.+6      	; 0x3fe6 <sd_raw_send_command+0xc4>
           sd_raw_send_byte(0xff);
           break;
    }
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    3fe0:	9f 5f       	subi	r25, 0xFF	; 255
    3fe2:	9a 30       	cpi	r25, 0x0A	; 10
    3fe4:	99 f7       	brne	.-26     	; 0x3fcc <sd_raw_send_command+0xaa>
        if(response != 0xff)
            break;
    }

    return response;
}
    3fe6:	08 95       	ret

00003fe8 <sd_raw_get_info>:
 *
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
    3fe8:	cf 92       	push	r12
    3fea:	df 92       	push	r13
    3fec:	ef 92       	push	r14
    3fee:	ff 92       	push	r15
    3ff0:	0f 93       	push	r16
    3ff2:	1f 93       	push	r17
    3ff4:	cf 93       	push	r28
    3ff6:	df 93       	push	r29
    3ff8:	ec 01       	movw	r28, r24
    if(!info || !sd_raw_available())
    3ffa:	00 97       	sbiw	r24, 0x00	; 0
    3ffc:	81 f0       	breq	.+32     	; 0x401e <sd_raw_get_info+0x36>
        return 0;

    memset(info, 0, sizeof(*info));
    3ffe:	89 e1       	ldi	r24, 0x19	; 25
    4000:	fe 01       	movw	r30, r28
    4002:	11 92       	st	Z+, r1
    4004:	8a 95       	dec	r24
    4006:	e9 f7       	brne	.-6      	; 0x4002 <sd_raw_get_info+0x1a>

    select_card();
    4008:	28 98       	cbi	0x05, 0	; 5

    /* read cid register */
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    400a:	8a e0       	ldi	r24, 0x0A	; 10
    400c:	40 e0       	ldi	r20, 0x00	; 0
    400e:	50 e0       	ldi	r21, 0x00	; 0
    4010:	60 e0       	ldi	r22, 0x00	; 0
    4012:	70 e0       	ldi	r23, 0x00	; 0
    4014:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <sd_raw_send_command>
    4018:	88 23       	and	r24, r24
    401a:	19 f0       	breq	.+6      	; 0x4022 <sd_raw_get_info+0x3a>
    {
        unselect_card();
    401c:	28 9a       	sbi	0x05, 0	; 5
    401e:	80 e0       	ldi	r24, 0x00	; 0
    4020:	f7 c0       	rjmp	.+494    	; 0x4210 <sd_raw_get_info+0x228>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    4022:	9f ef       	ldi	r25, 0xFF	; 255
    4024:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    4026:	0d b4       	in	r0, 0x2d	; 45
    4028:	07 fe       	sbrs	r0, 7
    402a:	fd cf       	rjmp	.-6      	; 0x4026 <sd_raw_get_info+0x3e>
    SPSR &= ~(1 << SPIF);
    402c:	8d b5       	in	r24, 0x2d	; 45
    402e:	8f 77       	andi	r24, 0x7F	; 127
    4030:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    4032:	8e b5       	in	r24, 0x2e	; 46
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    4034:	8e 3f       	cpi	r24, 0xFE	; 254
    4036:	b1 f7       	brne	.-20     	; 0x4024 <sd_raw_get_info+0x3c>
    4038:	1c 2f       	mov	r17, r28
    403a:	ce 01       	movw	r24, r28
    403c:	fc 01       	movw	r30, r24
    403e:	60 e6       	ldi	r22, 0x60	; 96
    4040:	70 e0       	ldi	r23, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    4042:	0f ef       	ldi	r16, 0xFF	; 255
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    4044:	9e 2f       	mov	r25, r30
    4046:	91 1b       	sub	r25, r17
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    4048:	0e bd       	out	0x2e, r16	; 46
    while(!(SPSR & (1 << SPIF)));
    404a:	0d b4       	in	r0, 0x2d	; 45
    404c:	07 fe       	sbrs	r0, 7
    404e:	fd cf       	rjmp	.-6      	; 0x404a <sd_raw_get_info+0x62>
    SPSR &= ~(1 << SPIF);
    4050:	8d b5       	in	r24, 0x2d	; 45
    4052:	8f 77       	andi	r24, 0x7F	; 127
    4054:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    4056:	2e b5       	in	r18, 0x2e	; 46
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();

        switch(i)
    4058:	98 30       	cpi	r25, 0x08	; 8
    405a:	28 f4       	brcc	.+10     	; 0x4066 <sd_raw_get_info+0x7e>
    405c:	93 30       	cpi	r25, 0x03	; 3
    405e:	88 f4       	brcc	.+34     	; 0x4082 <sd_raw_get_info+0x9a>
    4060:	99 23       	and	r25, r25
    4062:	59 f0       	breq	.+22     	; 0x407a <sd_raw_get_info+0x92>
    4064:	0c c0       	rjmp	.+24     	; 0x407e <sd_raw_get_info+0x96>
    4066:	9d 30       	cpi	r25, 0x0D	; 13
    4068:	18 f4       	brcc	.+6      	; 0x4070 <sd_raw_get_info+0x88>
    406a:	99 30       	cpi	r25, 0x09	; 9
    406c:	70 f4       	brcc	.+28     	; 0x408a <sd_raw_get_info+0xa2>
    406e:	0b c0       	rjmp	.+22     	; 0x4086 <sd_raw_get_info+0x9e>
    4070:	9d 30       	cpi	r25, 0x0D	; 13
    4072:	19 f1       	breq	.+70     	; 0x40ba <sd_raw_get_info+0xd2>
    4074:	9e 30       	cpi	r25, 0x0E	; 14
    4076:	69 f5       	brne	.+90     	; 0x40d2 <sd_raw_get_info+0xea>
    4078:	24 c0       	rjmp	.+72     	; 0x40c2 <sd_raw_get_info+0xda>
        {
            case 0:
                info->manufacturer = b;
    407a:	28 83       	st	Y, r18
    407c:	2a c0       	rjmp	.+84     	; 0x40d2 <sd_raw_get_info+0xea>
                break;
            case 1:
            case 2:
                info->oem[i - 1] = b;
    407e:	20 83       	st	Z, r18
    4080:	28 c0       	rjmp	.+80     	; 0x40d2 <sd_raw_get_info+0xea>
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                info->product[i - 3] = b;
    4082:	21 83       	std	Z+1, r18	; 0x01
    4084:	26 c0       	rjmp	.+76     	; 0x40d2 <sd_raw_get_info+0xea>
                break;
            case 8:
                info->revision = b;
    4086:	2a 87       	std	Y+10, r18	; 0x0a
    4088:	24 c0       	rjmp	.+72     	; 0x40d2 <sd_raw_get_info+0xea>
                break;
            case 9:
            case 10:
            case 11:
            case 12:
                info->serial |= (uint32_t) b << ((12 - i) * 8);
    408a:	30 e0       	ldi	r19, 0x00	; 0
    408c:	40 e0       	ldi	r20, 0x00	; 0
    408e:	50 e0       	ldi	r21, 0x00	; 0
    4090:	06 2e       	mov	r0, r22
    4092:	04 c0       	rjmp	.+8      	; 0x409c <sd_raw_get_info+0xb4>
    4094:	22 0f       	add	r18, r18
    4096:	33 1f       	adc	r19, r19
    4098:	44 1f       	adc	r20, r20
    409a:	55 1f       	adc	r21, r21
    409c:	0a 94       	dec	r0
    409e:	d2 f7       	brpl	.-12     	; 0x4094 <sd_raw_get_info+0xac>
    40a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    40a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    40a4:	ad 85       	ldd	r26, Y+13	; 0x0d
    40a6:	be 85       	ldd	r27, Y+14	; 0x0e
    40a8:	82 2b       	or	r24, r18
    40aa:	93 2b       	or	r25, r19
    40ac:	a4 2b       	or	r26, r20
    40ae:	b5 2b       	or	r27, r21
    40b0:	8b 87       	std	Y+11, r24	; 0x0b
    40b2:	9c 87       	std	Y+12, r25	; 0x0c
    40b4:	ad 87       	std	Y+13, r26	; 0x0d
    40b6:	be 87       	std	Y+14, r27	; 0x0e
    40b8:	0c c0       	rjmp	.+24     	; 0x40d2 <sd_raw_get_info+0xea>
                break;
            case 13:
                info->manufacturing_year = b << 4;
    40ba:	22 95       	swap	r18
    40bc:	20 7f       	andi	r18, 0xF0	; 240
    40be:	2f 87       	std	Y+15, r18	; 0x0f
    40c0:	08 c0       	rjmp	.+16     	; 0x40d2 <sd_raw_get_info+0xea>
                break;
            case 14:
                info->manufacturing_year |= b >> 4;
    40c2:	92 2f       	mov	r25, r18
    40c4:	92 95       	swap	r25
    40c6:	9f 70       	andi	r25, 0x0F	; 15
    40c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    40ca:	89 2b       	or	r24, r25
    40cc:	8f 87       	std	Y+15, r24	; 0x0f
                info->manufacturing_month = b & 0x0f;
    40ce:	2f 70       	andi	r18, 0x0F	; 15
    40d0:	28 8b       	std	Y+16, r18	; 0x10
    40d2:	31 96       	adiw	r30, 0x01	; 1
    40d4:	68 50       	subi	r22, 0x08	; 8
    40d6:	70 40       	sbci	r23, 0x00	; 0
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    40d8:	8f ef       	ldi	r24, 0xFF	; 255
    40da:	60 3d       	cpi	r22, 0xD0	; 208
    40dc:	78 07       	cpc	r23, r24
    40de:	09 f0       	breq	.+2      	; 0x40e2 <sd_raw_get_info+0xfa>
    40e0:	b1 cf       	rjmp	.-158    	; 0x4044 <sd_raw_get_info+0x5c>
#if SD_RAW_SDHC
    uint16_t csd_c_size = 0;
#else
    uint32_t csd_c_size = 0;
#endif
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    40e2:	89 e0       	ldi	r24, 0x09	; 9
    40e4:	40 e0       	ldi	r20, 0x00	; 0
    40e6:	50 e0       	ldi	r21, 0x00	; 0
    40e8:	60 e0       	ldi	r22, 0x00	; 0
    40ea:	70 e0       	ldi	r23, 0x00	; 0
    40ec:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <sd_raw_send_command>
    40f0:	88 23       	and	r24, r24
    40f2:	09 f0       	breq	.+2      	; 0x40f6 <sd_raw_get_info+0x10e>
    40f4:	93 cf       	rjmp	.-218    	; 0x401c <sd_raw_get_info+0x34>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    40f6:	9f ef       	ldi	r25, 0xFF	; 255
    40f8:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    40fa:	0d b4       	in	r0, 0x2d	; 45
    40fc:	07 fe       	sbrs	r0, 7
    40fe:	fd cf       	rjmp	.-6      	; 0x40fa <sd_raw_get_info+0x112>
    SPSR &= ~(1 << SPIF);
    4100:	8d b5       	in	r24, 0x2d	; 45
    4102:	8f 77       	andi	r24, 0x7F	; 127
    4104:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    4106:	8e b5       	in	r24, 0x2e	; 46
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    4108:	8e 3f       	cpi	r24, 0xFE	; 254
    410a:	b1 f7       	brne	.-20     	; 0x40f8 <sd_raw_get_info+0x110>
    410c:	f0 e0       	ldi	r31, 0x00	; 0
    410e:	70 e0       	ldi	r23, 0x00	; 0
    4110:	20 e0       	ldi	r18, 0x00	; 0
    4112:	30 e0       	ldi	r19, 0x00	; 0
    4114:	40 e0       	ldi	r20, 0x00	; 0
    4116:	50 e0       	ldi	r21, 0x00	; 0
    4118:	60 e0       	ldi	r22, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    411a:	1f ef       	ldi	r17, 0xFF	; 255
            if(b & 0x40)
                info->flag_copy = 1;
            if(b & 0x20)
                info->flag_write_protect = 1;
            if(b & 0x10)
                info->flag_write_protect_temp = 1;
    411c:	e1 e0       	ldi	r30, 0x01	; 1
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    411e:	1e bd       	out	0x2e, r17	; 46
    while(!(SPSR & (1 << SPIF)));
    4120:	0d b4       	in	r0, 0x2d	; 45
    4122:	07 fe       	sbrs	r0, 7
    4124:	fd cf       	rjmp	.-6      	; 0x4120 <sd_raw_get_info+0x138>
    SPSR &= ~(1 << SPIF);
    4126:	8d b5       	in	r24, 0x2d	; 45
    4128:	8f 77       	andi	r24, 0x7F	; 127
    412a:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    412c:	8e b5       	in	r24, 0x2e	; 46
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();

        if(i == 14)
    412e:	6e 30       	cpi	r22, 0x0E	; 14
    4130:	79 f4       	brne	.+30     	; 0x4150 <sd_raw_get_info+0x168>
        {
            if(b & 0x40)
    4132:	90 e0       	ldi	r25, 0x00	; 0
    4134:	86 fd       	sbrc	r24, 6
                info->flag_copy = 1;
    4136:	ed 8b       	std	Y+21, r30	; 0x15
            if(b & 0x20)
    4138:	85 fd       	sbrc	r24, 5
                info->flag_write_protect = 1;
    413a:	ee 8b       	std	Y+22, r30	; 0x16
            if(b & 0x10)
    413c:	84 fd       	sbrc	r24, 4
                info->flag_write_protect_temp = 1;
    413e:	ef 8b       	std	Y+23, r30	; 0x17
            info->format = (b & 0x0c) >> 2;
    4140:	8c 70       	andi	r24, 0x0C	; 12
    4142:	90 70       	andi	r25, 0x00	; 0
    4144:	95 95       	asr	r25
    4146:	87 95       	ror	r24
    4148:	95 95       	asr	r25
    414a:	87 95       	ror	r24
    414c:	88 8f       	std	Y+24, r24	; 0x18
    414e:	5a c0       	rjmp	.+180    	; 0x4204 <sd_raw_get_info+0x21c>
                }
            }
            else
#endif
            {
                switch(i)
    4150:	67 30       	cpi	r22, 0x07	; 7
    4152:	f9 f0       	breq	.+62     	; 0x4192 <sd_raw_get_info+0x1aa>
    4154:	68 30       	cpi	r22, 0x08	; 8
    4156:	30 f4       	brcc	.+12     	; 0x4164 <sd_raw_get_info+0x17c>
    4158:	65 30       	cpi	r22, 0x05	; 5
    415a:	61 f0       	breq	.+24     	; 0x4174 <sd_raw_get_info+0x18c>
    415c:	66 30       	cpi	r22, 0x06	; 6
    415e:	09 f0       	breq	.+2      	; 0x4162 <sd_raw_get_info+0x17a>
    4160:	51 c0       	rjmp	.+162    	; 0x4204 <sd_raw_get_info+0x21c>
    4162:	0b c0       	rjmp	.+22     	; 0x417a <sd_raw_get_info+0x192>
    4164:	69 30       	cpi	r22, 0x09	; 9
    4166:	a1 f1       	breq	.+104    	; 0x41d0 <sd_raw_get_info+0x1e8>
    4168:	69 30       	cpi	r22, 0x09	; 9
    416a:	10 f1       	brcs	.+68     	; 0x41b0 <sd_raw_get_info+0x1c8>
    416c:	6a 30       	cpi	r22, 0x0A	; 10
    416e:	09 f0       	breq	.+2      	; 0x4172 <sd_raw_get_info+0x18a>
    4170:	49 c0       	rjmp	.+146    	; 0x4204 <sd_raw_get_info+0x21c>
    4172:	32 c0       	rjmp	.+100    	; 0x41d8 <sd_raw_get_info+0x1f0>
                {
                    case 5:
                        csd_read_bl_len = b & 0x0f;
    4174:	f8 2f       	mov	r31, r24
    4176:	ff 70       	andi	r31, 0x0F	; 15
    4178:	45 c0       	rjmp	.+138    	; 0x4204 <sd_raw_get_info+0x21c>
                        break;
                    case 6:
                        csd_c_size = b & 0x03;
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	a0 e0       	ldi	r26, 0x00	; 0
    417e:	b0 e0       	ldi	r27, 0x00	; 0
    4180:	83 70       	andi	r24, 0x03	; 3
    4182:	90 70       	andi	r25, 0x00	; 0
    4184:	a0 70       	andi	r26, 0x00	; 0
    4186:	b0 70       	andi	r27, 0x00	; 0
                        csd_c_size <<= 8;
    4188:	22 27       	eor	r18, r18
    418a:	38 2f       	mov	r19, r24
    418c:	49 2f       	mov	r20, r25
    418e:	5a 2f       	mov	r21, r26
    4190:	39 c0       	rjmp	.+114    	; 0x4204 <sd_raw_get_info+0x21c>
                        break;
                    case 7:
                        csd_c_size |= b;
    4192:	90 e0       	ldi	r25, 0x00	; 0
    4194:	a0 e0       	ldi	r26, 0x00	; 0
    4196:	b0 e0       	ldi	r27, 0x00	; 0
    4198:	28 2b       	or	r18, r24
    419a:	39 2b       	or	r19, r25
    419c:	4a 2b       	or	r20, r26
    419e:	5b 2b       	or	r21, r27
                        csd_c_size <<= 2;
    41a0:	a2 e0       	ldi	r26, 0x02	; 2
    41a2:	22 0f       	add	r18, r18
    41a4:	33 1f       	adc	r19, r19
    41a6:	44 1f       	adc	r20, r20
    41a8:	55 1f       	adc	r21, r21
    41aa:	aa 95       	dec	r26
    41ac:	d1 f7       	brne	.-12     	; 0x41a2 <sd_raw_get_info+0x1ba>
    41ae:	2a c0       	rjmp	.+84     	; 0x4204 <sd_raw_get_info+0x21c>
                        break;
                    case 8:
                        csd_c_size |= b >> 6;
    41b0:	82 95       	swap	r24
    41b2:	86 95       	lsr	r24
    41b4:	86 95       	lsr	r24
    41b6:	83 70       	andi	r24, 0x03	; 3
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	a0 e0       	ldi	r26, 0x00	; 0
    41bc:	b0 e0       	ldi	r27, 0x00	; 0
    41be:	28 2b       	or	r18, r24
    41c0:	39 2b       	or	r19, r25
    41c2:	4a 2b       	or	r20, r26
    41c4:	5b 2b       	or	r21, r27
                        ++csd_c_size;
    41c6:	2f 5f       	subi	r18, 0xFF	; 255
    41c8:	3f 4f       	sbci	r19, 0xFF	; 255
    41ca:	4f 4f       	sbci	r20, 0xFF	; 255
    41cc:	5f 4f       	sbci	r21, 0xFF	; 255
    41ce:	1a c0       	rjmp	.+52     	; 0x4204 <sd_raw_get_info+0x21c>
                        break;
                    case 9:
                        csd_c_size_mult = b & 0x03;
    41d0:	78 2f       	mov	r23, r24
    41d2:	73 70       	andi	r23, 0x03	; 3
                        csd_c_size_mult <<= 1;
    41d4:	77 0f       	add	r23, r23
    41d6:	16 c0       	rjmp	.+44     	; 0x4204 <sd_raw_get_info+0x21c>
                        break;
                    case 10:
                        csd_c_size_mult |= b >> 7;
    41d8:	88 1f       	adc	r24, r24
    41da:	88 27       	eor	r24, r24
    41dc:	88 1f       	adc	r24, r24
    41de:	78 2b       	or	r23, r24

                        info->capacity = (uint32_t) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);
    41e0:	8f 2f       	mov	r24, r31
    41e2:	90 e0       	ldi	r25, 0x00	; 0
    41e4:	02 96       	adiw	r24, 0x02	; 2
    41e6:	87 0f       	add	r24, r23
    41e8:	91 1d       	adc	r25, r1
    41ea:	69 01       	movw	r12, r18
    41ec:	7a 01       	movw	r14, r20
    41ee:	04 c0       	rjmp	.+8      	; 0x41f8 <sd_raw_get_info+0x210>
    41f0:	cc 0c       	add	r12, r12
    41f2:	dd 1c       	adc	r13, r13
    41f4:	ee 1c       	adc	r14, r14
    41f6:	ff 1c       	adc	r15, r15
    41f8:	8a 95       	dec	r24
    41fa:	d2 f7       	brpl	.-12     	; 0x41f0 <sd_raw_get_info+0x208>
    41fc:	c9 8a       	std	Y+17, r12	; 0x11
    41fe:	da 8a       	std	Y+18, r13	; 0x12
    4200:	eb 8a       	std	Y+19, r14	; 0x13
    4202:	fc 8a       	std	Y+20, r15	; 0x14
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    4204:	6f 5f       	subi	r22, 0xFF	; 255
    4206:	62 31       	cpi	r22, 0x12	; 18
    4208:	09 f0       	breq	.+2      	; 0x420c <sd_raw_get_info+0x224>
    420a:	89 cf       	rjmp	.-238    	; 0x411e <sd_raw_get_info+0x136>
                }
            }
        }
    }

    unselect_card();
    420c:	28 9a       	sbi	0x05, 0	; 5
    420e:	81 e0       	ldi	r24, 0x01	; 1

    return 1;
}
    4210:	df 91       	pop	r29
    4212:	cf 91       	pop	r28
    4214:	1f 91       	pop	r17
    4216:	0f 91       	pop	r16
    4218:	ff 90       	pop	r15
    421a:	ef 90       	pop	r14
    421c:	df 90       	pop	r13
    421e:	cf 90       	pop	r12
    4220:	08 95       	ret

00004222 <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    4222:	2f 92       	push	r2
    4224:	3f 92       	push	r3
    4226:	4f 92       	push	r4
    4228:	5f 92       	push	r5
    422a:	6f 92       	push	r6
    422c:	7f 92       	push	r7
    422e:	8f 92       	push	r8
    4230:	9f 92       	push	r9
    4232:	af 92       	push	r10
    4234:	bf 92       	push	r11
    4236:	cf 92       	push	r12
    4238:	df 92       	push	r13
    423a:	ef 92       	push	r14
    423c:	ff 92       	push	r15
    423e:	0f 93       	push	r16
    4240:	1f 93       	push	r17
    4242:	cf 93       	push	r28
    4244:	df 93       	push	r29
    4246:	4b 01       	movw	r8, r22
    4248:	5c 01       	movw	r10, r24
    424a:	2a 01       	movw	r4, r20
    424c:	39 01       	movw	r6, r18
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    424e:	33 24       	eor	r3, r3
    4250:	3a 94       	dec	r3
        buffer += write_length;
        offset += write_length;
        length -= write_length;

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    4252:	22 24       	eor	r2, r2
    4254:	23 94       	inc	r2
    4256:	a1 c0       	rjmp	.+322    	; 0x439a <sd_raw_write+0x178>
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
    4258:	e4 01       	movw	r28, r8
    425a:	d1 70       	andi	r29, 0x01	; 1
        block_address = offset - block_offset;
    425c:	ce 01       	movw	r24, r28
    425e:	a0 e0       	ldi	r26, 0x00	; 0
    4260:	b0 e0       	ldi	r27, 0x00	; 0
    4262:	85 01       	movw	r16, r10
    4264:	74 01       	movw	r14, r8
    4266:	e8 1a       	sub	r14, r24
    4268:	f9 0a       	sbc	r15, r25
    426a:	0a 0b       	sbc	r16, r26
    426c:	1b 0b       	sbc	r17, r27
        write_length = 512 - block_offset; /* write up to block border */
    426e:	c1 2c       	mov	r12, r1
    4270:	b2 e0       	ldi	r27, 0x02	; 2
    4272:	db 2e       	mov	r13, r27
    4274:	cc 1a       	sub	r12, r28
    4276:	dd 0a       	sbc	r13, r29
    4278:	6c 14       	cp	r6, r12
    427a:	7d 04       	cpc	r7, r13
    427c:	08 f4       	brcc	.+2      	; 0x4280 <sd_raw_write+0x5e>
    427e:	63 01       	movw	r12, r6
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
    4280:	80 91 0d 04 	lds	r24, 0x040D
    4284:	90 91 0e 04 	lds	r25, 0x040E
    4288:	a0 91 0f 04 	lds	r26, 0x040F
    428c:	b0 91 10 04 	lds	r27, 0x0410
    4290:	e8 16       	cp	r14, r24
    4292:	f9 06       	cpc	r15, r25
    4294:	0a 07       	cpc	r16, r26
    4296:	1b 07       	cpc	r17, r27
    4298:	f9 f0       	breq	.+62     	; 0x42d8 <sd_raw_write+0xb6>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    429a:	0e 94 e7 21 	call	0x43ce	; 0x43ce <sd_raw_sync>
    429e:	88 23       	and	r24, r24
    42a0:	09 f4       	brne	.+2      	; 0x42a4 <sd_raw_write+0x82>
    42a2:	81 c0       	rjmp	.+258    	; 0x43a6 <sd_raw_write+0x184>
                return 0;
#endif

            if(block_offset || write_length < 512)
    42a4:	20 97       	sbiw	r28, 0x00	; 0
    42a6:	29 f4       	brne	.+10     	; 0x42b2 <sd_raw_write+0x90>
    42a8:	80 e0       	ldi	r24, 0x00	; 0
    42aa:	c8 16       	cp	r12, r24
    42ac:	82 e0       	ldi	r24, 0x02	; 2
    42ae:	d8 06       	cpc	r13, r24
    42b0:	58 f4       	brcc	.+22     	; 0x42c8 <sd_raw_write+0xa6>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    42b2:	c8 01       	movw	r24, r16
    42b4:	b7 01       	movw	r22, r14
    42b6:	4d e0       	ldi	r20, 0x0D	; 13
    42b8:	52 e0       	ldi	r21, 0x02	; 2
    42ba:	20 e0       	ldi	r18, 0x00	; 0
    42bc:	32 e0       	ldi	r19, 0x02	; 2
    42be:	0e 94 01 22 	call	0x4402	; 0x4402 <sd_raw_read>
    42c2:	88 23       	and	r24, r24
    42c4:	09 f4       	brne	.+2      	; 0x42c8 <sd_raw_write+0xa6>
    42c6:	6f c0       	rjmp	.+222    	; 0x43a6 <sd_raw_write+0x184>
                    return 0;
            }
            raw_block_address = block_address;
    42c8:	e0 92 0d 04 	sts	0x040D, r14
    42cc:	f0 92 0e 04 	sts	0x040E, r15
    42d0:	00 93 0f 04 	sts	0x040F, r16
    42d4:	10 93 10 04 	sts	0x0410, r17
        }

        if(buffer != raw_block)
    42d8:	8d e0       	ldi	r24, 0x0D	; 13
    42da:	48 16       	cp	r4, r24
    42dc:	82 e0       	ldi	r24, 0x02	; 2
    42de:	58 06       	cpc	r5, r24
    42e0:	71 f0       	breq	.+28     	; 0x42fe <sd_raw_write+0xdc>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
    42e2:	9e 01       	movw	r18, r28
    42e4:	23 5f       	subi	r18, 0xF3	; 243
    42e6:	3d 4f       	sbci	r19, 0xFD	; 253
    42e8:	c9 01       	movw	r24, r18
    42ea:	b2 01       	movw	r22, r4
    42ec:	a6 01       	movw	r20, r12
    42ee:	0e 94 a2 24 	call	0x4944	; 0x4944 <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
    42f2:	10 92 11 04 	sts	0x0411, r1

            if(length == write_length)
    42f6:	6c 14       	cp	r6, r12
    42f8:	7d 04       	cpc	r7, r13
    42fa:	09 f4       	brne	.+2      	; 0x42fe <sd_raw_write+0xdc>
    42fc:	52 c0       	rjmp	.+164    	; 0x43a2 <sd_raw_write+0x180>
                return 1;
#endif
        }

        /* address card */
        select_card();
    42fe:	28 98       	cbi	0x05, 0	; 5

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
    4300:	88 e1       	ldi	r24, 0x18	; 24
    4302:	b8 01       	movw	r22, r16
    4304:	a7 01       	movw	r20, r14
    4306:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <sd_raw_send_command>
    430a:	88 23       	and	r24, r24
    430c:	11 f0       	breq	.+4      	; 0x4312 <sd_raw_write+0xf0>
#endif
        {
            unselect_card();
    430e:	28 9a       	sbi	0x05, 0	; 5
    4310:	4a c0       	rjmp	.+148    	; 0x43a6 <sd_raw_write+0x184>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    4312:	8e ef       	ldi	r24, 0xFE	; 254
    4314:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    4316:	0d b4       	in	r0, 0x2d	; 45
    4318:	07 fe       	sbrs	r0, 7
    431a:	fd cf       	rjmp	.-6      	; 0x4316 <sd_raw_write+0xf4>
    SPSR &= ~(1 << SPIF);
    431c:	8d b5       	in	r24, 0x2d	; 45
    431e:	8f 77       	andi	r24, 0x7F	; 127
    4320:	8d bd       	out	0x2d, r24	; 45
    4322:	ed e0       	ldi	r30, 0x0D	; 13
    4324:	f2 e0       	ldi	r31, 0x02	; 2
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
    4326:	81 91       	ld	r24, Z+
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    4328:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    432a:	0d b4       	in	r0, 0x2d	; 45
    432c:	07 fe       	sbrs	r0, 7
    432e:	fd cf       	rjmp	.-6      	; 0x432a <sd_raw_write+0x108>
    SPSR &= ~(1 << SPIF);
    4330:	8d b5       	in	r24, 0x2d	; 45
    4332:	8f 77       	andi	r24, 0x7F	; 127
    4334:	8d bd       	out	0x2d, r24	; 45
        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
    4336:	84 e0       	ldi	r24, 0x04	; 4
    4338:	ed 30       	cpi	r30, 0x0D	; 13
    433a:	f8 07       	cpc	r31, r24
    433c:	a1 f7       	brne	.-24     	; 0x4326 <sd_raw_write+0x104>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    433e:	3e bc       	out	0x2e, r3	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    4340:	0d b4       	in	r0, 0x2d	; 45
    4342:	07 fe       	sbrs	r0, 7
    4344:	fd cf       	rjmp	.-6      	; 0x4340 <sd_raw_write+0x11e>
    SPSR &= ~(1 << SPIF);
    4346:	8d b5       	in	r24, 0x2d	; 45
    4348:	8f 77       	andi	r24, 0x7F	; 127
    434a:	8d bd       	out	0x2d, r24	; 45
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    434c:	3e bc       	out	0x2e, r3	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    434e:	0d b4       	in	r0, 0x2d	; 45
    4350:	07 fe       	sbrs	r0, 7
    4352:	fd cf       	rjmp	.-6      	; 0x434e <sd_raw_write+0x12c>
    SPSR &= ~(1 << SPIF);
    4354:	8d b5       	in	r24, 0x2d	; 45
    4356:	8f 77       	andi	r24, 0x7F	; 127
    4358:	8d bd       	out	0x2d, r24	; 45
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    435a:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    435c:	0d b4       	in	r0, 0x2d	; 45
    435e:	07 fe       	sbrs	r0, 7
    4360:	fd cf       	rjmp	.-6      	; 0x435c <sd_raw_write+0x13a>
    SPSR &= ~(1 << SPIF);
    4362:	8d b5       	in	r24, 0x2d	; 45
    4364:	8f 77       	andi	r24, 0x7F	; 127
    4366:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    4368:	8e b5       	in	r24, 0x2e	; 46
        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
        sd_raw_send_byte(0xff);

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
    436a:	8f 3f       	cpi	r24, 0xFF	; 255
    436c:	b1 f7       	brne	.-20     	; 0x435a <sd_raw_write+0x138>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    436e:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    4370:	0d b4       	in	r0, 0x2d	; 45
    4372:	07 fe       	sbrs	r0, 7
    4374:	fd cf       	rjmp	.-6      	; 0x4370 <sd_raw_write+0x14e>
    SPSR &= ~(1 << SPIF);
    4376:	8d b5       	in	r24, 0x2d	; 45
    4378:	8f 77       	andi	r24, 0x7F	; 127
    437a:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    437c:	8e b5       	in	r24, 0x2e	; 46
        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
        sd_raw_rec_byte();

        /* deaddress card */
        unselect_card();
    437e:	28 9a       	sbi	0x05, 0	; 5

        buffer += write_length;
    4380:	4c 0c       	add	r4, r12
    4382:	5d 1c       	adc	r5, r13
        offset += write_length;
    4384:	c6 01       	movw	r24, r12
    4386:	a0 e0       	ldi	r26, 0x00	; 0
    4388:	b0 e0       	ldi	r27, 0x00	; 0
    438a:	88 0e       	add	r8, r24
    438c:	99 1e       	adc	r9, r25
    438e:	aa 1e       	adc	r10, r26
    4390:	bb 1e       	adc	r11, r27
        length -= write_length;
    4392:	6c 18       	sub	r6, r12
    4394:	7d 08       	sbc	r7, r13

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    4396:	20 92 11 04 	sts	0x0411, r2
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    439a:	61 14       	cp	r6, r1
    439c:	71 04       	cpc	r7, r1
    439e:	09 f0       	breq	.+2      	; 0x43a2 <sd_raw_write+0x180>
    43a0:	5b cf       	rjmp	.-330    	; 0x4258 <sd_raw_write+0x36>
    43a2:	81 e0       	ldi	r24, 0x01	; 1
    43a4:	01 c0       	rjmp	.+2      	; 0x43a8 <sd_raw_write+0x186>
    43a6:	80 e0       	ldi	r24, 0x00	; 0
        raw_block_written = 1;
#endif
    }

    return 1;
}
    43a8:	df 91       	pop	r29
    43aa:	cf 91       	pop	r28
    43ac:	1f 91       	pop	r17
    43ae:	0f 91       	pop	r16
    43b0:	ff 90       	pop	r15
    43b2:	ef 90       	pop	r14
    43b4:	df 90       	pop	r13
    43b6:	cf 90       	pop	r12
    43b8:	bf 90       	pop	r11
    43ba:	af 90       	pop	r10
    43bc:	9f 90       	pop	r9
    43be:	8f 90       	pop	r8
    43c0:	7f 90       	pop	r7
    43c2:	6f 90       	pop	r6
    43c4:	5f 90       	pop	r5
    43c6:	4f 90       	pop	r4
    43c8:	3f 90       	pop	r3
    43ca:	2f 90       	pop	r2
    43cc:	08 95       	ret

000043ce <sd_raw_sync>:
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    43ce:	80 91 11 04 	lds	r24, 0x0411
    43d2:	88 23       	and	r24, r24
    43d4:	11 f0       	breq	.+4      	; 0x43da <sd_raw_sync+0xc>
    43d6:	81 e0       	ldi	r24, 0x01	; 1
    43d8:	08 95       	ret
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    43da:	60 91 0d 04 	lds	r22, 0x040D
    43de:	70 91 0e 04 	lds	r23, 0x040E
    43e2:	80 91 0f 04 	lds	r24, 0x040F
    43e6:	90 91 10 04 	lds	r25, 0x0410
    43ea:	4d e0       	ldi	r20, 0x0D	; 13
    43ec:	52 e0       	ldi	r21, 0x02	; 2
    43ee:	20 e0       	ldi	r18, 0x00	; 0
    43f0:	32 e0       	ldi	r19, 0x02	; 2
    43f2:	0e 94 11 21 	call	0x4222	; 0x4222 <sd_raw_write>
    43f6:	88 23       	and	r24, r24
    43f8:	19 f0       	breq	.+6      	; 0x4400 <sd_raw_sync+0x32>
        return 0;
    raw_block_written = 1;
    43fa:	81 e0       	ldi	r24, 0x01	; 1
    43fc:	80 93 11 04 	sts	0x0411, r24
#endif
    return 1;
}
    4400:	08 95       	ret

00004402 <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    4402:	3f 92       	push	r3
    4404:	4f 92       	push	r4
    4406:	5f 92       	push	r5
    4408:	6f 92       	push	r6
    440a:	7f 92       	push	r7
    440c:	8f 92       	push	r8
    440e:	9f 92       	push	r9
    4410:	af 92       	push	r10
    4412:	bf 92       	push	r11
    4414:	cf 92       	push	r12
    4416:	df 92       	push	r13
    4418:	ef 92       	push	r14
    441a:	ff 92       	push	r15
    441c:	0f 93       	push	r16
    441e:	1f 93       	push	r17
    4420:	cf 93       	push	r28
    4422:	df 93       	push	r29
    4424:	3b 01       	movw	r6, r22
    4426:	4c 01       	movw	r8, r24
    4428:	6a 01       	movw	r12, r20
    442a:	29 01       	movw	r4, r18
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    442c:	33 24       	eor	r3, r3
    442e:	3a 94       	dec	r3
    4430:	8f c0       	rjmp	.+286    	; 0x4550 <sd_raw_read+0x14e>
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
    4432:	1f ef       	ldi	r17, 0xFF	; 255
    4434:	a1 2e       	mov	r10, r17
    4436:	11 e0       	ldi	r17, 0x01	; 1
    4438:	b1 2e       	mov	r11, r17
    443a:	a6 20       	and	r10, r6
    443c:	b7 20       	and	r11, r7
        block_address = offset - block_offset;
    443e:	c5 01       	movw	r24, r10
    4440:	a0 e0       	ldi	r26, 0x00	; 0
    4442:	b0 e0       	ldi	r27, 0x00	; 0
    4444:	84 01       	movw	r16, r8
    4446:	73 01       	movw	r14, r6
    4448:	e8 1a       	sub	r14, r24
    444a:	f9 0a       	sbc	r15, r25
    444c:	0a 0b       	sbc	r16, r26
    444e:	1b 0b       	sbc	r17, r27
        read_length = 512 - block_offset; /* read up to block border */
    4450:	c0 e0       	ldi	r28, 0x00	; 0
    4452:	d2 e0       	ldi	r29, 0x02	; 2
    4454:	ca 19       	sub	r28, r10
    4456:	db 09       	sbc	r29, r11
    4458:	4c 16       	cp	r4, r28
    445a:	5d 06       	cpc	r5, r29
    445c:	08 f4       	brcc	.+2      	; 0x4460 <sd_raw_read+0x5e>
    445e:	e2 01       	movw	r28, r4
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    4460:	80 91 0d 04 	lds	r24, 0x040D
    4464:	90 91 0e 04 	lds	r25, 0x040E
    4468:	a0 91 0f 04 	lds	r26, 0x040F
    446c:	b0 91 10 04 	lds	r27, 0x0410
    4470:	e8 16       	cp	r14, r24
    4472:	f9 06       	cpc	r15, r25
    4474:	0a 07       	cpc	r16, r26
    4476:	1b 07       	cpc	r17, r27
    4478:	09 f4       	brne	.+2      	; 0x447c <sd_raw_read+0x7a>
    447a:	57 c0       	rjmp	.+174    	; 0x452a <sd_raw_read+0x128>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    447c:	0e 94 e7 21 	call	0x43ce	; 0x43ce <sd_raw_sync>
    4480:	88 23       	and	r24, r24
    4482:	09 f4       	brne	.+2      	; 0x4486 <sd_raw_read+0x84>
    4484:	6a c0       	rjmp	.+212    	; 0x455a <sd_raw_read+0x158>
                return 0;
#endif

            /* address card */
            select_card();
    4486:	28 98       	cbi	0x05, 0	; 5

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
    4488:	81 e1       	ldi	r24, 0x11	; 17
    448a:	b8 01       	movw	r22, r16
    448c:	a7 01       	movw	r20, r14
    448e:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <sd_raw_send_command>
    4492:	88 23       	and	r24, r24
    4494:	19 f0       	breq	.+6      	; 0x449c <sd_raw_read+0x9a>
#endif
            {
                unselect_card();
    4496:	28 9a       	sbi	0x05, 0	; 5
    4498:	80 e0       	ldi	r24, 0x00	; 0
    449a:	5f c0       	rjmp	.+190    	; 0x455a <sd_raw_read+0x158>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    449c:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    449e:	0d b4       	in	r0, 0x2d	; 45
    44a0:	07 fe       	sbrs	r0, 7
    44a2:	fd cf       	rjmp	.-6      	; 0x449e <sd_raw_read+0x9c>
    SPSR &= ~(1 << SPIF);
    44a4:	8d b5       	in	r24, 0x2d	; 45
    44a6:	8f 77       	andi	r24, 0x7F	; 127
    44a8:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    44aa:	8e b5       	in	r24, 0x2e	; 46
                unselect_card();
                return 0;
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
    44ac:	8e 3f       	cpi	r24, 0xFE	; 254
    44ae:	b1 f7       	brne	.-20     	; 0x449c <sd_raw_read+0x9a>
    44b0:	ed e0       	ldi	r30, 0x0D	; 13
    44b2:	f2 e0       	ldi	r31, 0x02	; 2
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    44b4:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    44b6:	0d b4       	in	r0, 0x2d	; 45
    44b8:	07 fe       	sbrs	r0, 7
    44ba:	fd cf       	rjmp	.-6      	; 0x44b6 <sd_raw_read+0xb4>
    SPSR &= ~(1 << SPIF);
    44bc:	8d b5       	in	r24, 0x2d	; 45
    44be:	8f 77       	andi	r24, 0x7F	; 127
    44c0:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    44c2:	8e b5       	in	r24, 0x2e	; 46
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
    44c4:	80 83       	st	Z, r24
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
    44c6:	84 e0       	ldi	r24, 0x04	; 4
    44c8:	ec 30       	cpi	r30, 0x0C	; 12
    44ca:	f8 07       	cpc	r31, r24
    44cc:	11 f0       	breq	.+4      	; 0x44d2 <sd_raw_read+0xd0>
                *cache++ = sd_raw_rec_byte();
    44ce:	31 96       	adiw	r30, 0x01	; 1
    44d0:	f1 cf       	rjmp	.-30     	; 0x44b4 <sd_raw_read+0xb2>
            raw_block_address = block_address;
    44d2:	e0 92 0d 04 	sts	0x040D, r14
    44d6:	f0 92 0e 04 	sts	0x040E, r15
    44da:	00 93 0f 04 	sts	0x040F, r16
    44de:	10 93 10 04 	sts	0x0410, r17

            memcpy(buffer, raw_block + block_offset, read_length);
    44e2:	95 01       	movw	r18, r10
    44e4:	23 5f       	subi	r18, 0xF3	; 243
    44e6:	3d 4f       	sbci	r19, 0xFD	; 253
    44e8:	c6 01       	movw	r24, r12
    44ea:	b9 01       	movw	r22, r18
    44ec:	ae 01       	movw	r20, r28
    44ee:	0e 94 a2 24 	call	0x4944	; 0x4944 <memcpy>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    44f2:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    44f4:	0d b4       	in	r0, 0x2d	; 45
    44f6:	07 fe       	sbrs	r0, 7
    44f8:	fd cf       	rjmp	.-6      	; 0x44f4 <sd_raw_read+0xf2>
    SPSR &= ~(1 << SPIF);
    44fa:	8d b5       	in	r24, 0x2d	; 45
    44fc:	8f 77       	andi	r24, 0x7F	; 127
    44fe:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    4500:	8e b5       	in	r24, 0x2e	; 46
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    4502:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    4504:	0d b4       	in	r0, 0x2d	; 45
    4506:	07 fe       	sbrs	r0, 7
    4508:	fd cf       	rjmp	.-6      	; 0x4504 <sd_raw_read+0x102>
    SPSR &= ~(1 << SPIF);
    450a:	8d b5       	in	r24, 0x2d	; 45
    450c:	8f 77       	andi	r24, 0x7F	; 127
    450e:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    4510:	8e b5       	in	r24, 0x2e	; 46
            /* read crc16 */
            sd_raw_rec_byte();
            sd_raw_rec_byte();
            
            /* deaddress card */
            unselect_card();
    4512:	28 9a       	sbi	0x05, 0	; 5
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    4514:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    4516:	0d b4       	in	r0, 0x2d	; 45
    4518:	07 fe       	sbrs	r0, 7
    451a:	fd cf       	rjmp	.-6      	; 0x4516 <sd_raw_read+0x114>
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;

            memcpy(buffer, raw_block + block_offset, read_length);
            buffer += read_length;
    451c:	cc 0e       	add	r12, r28
    451e:	dd 1e       	adc	r13, r29
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    while(!(SPSR & (1 << SPIF)));
    SPSR &= ~(1 << SPIF);
    4520:	8d b5       	in	r24, 0x2d	; 45
    4522:	8f 77       	andi	r24, 0x7F	; 127
    4524:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    4526:	8e b5       	in	r24, 0x2e	; 46
    4528:	0a c0       	rjmp	.+20     	; 0x453e <sd_raw_read+0x13c>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    452a:	95 01       	movw	r18, r10
    452c:	23 5f       	subi	r18, 0xF3	; 243
    452e:	3d 4f       	sbci	r19, 0xFD	; 253
    4530:	c6 01       	movw	r24, r12
    4532:	b9 01       	movw	r22, r18
    4534:	ae 01       	movw	r20, r28
    4536:	0e 94 a2 24 	call	0x4944	; 0x4944 <memcpy>
            buffer += read_length;
    453a:	cc 0e       	add	r12, r28
    453c:	dd 1e       	adc	r13, r29
        }
#endif

        length -= read_length;
    453e:	4c 1a       	sub	r4, r28
    4540:	5d 0a       	sbc	r5, r29
        offset += read_length;
    4542:	ce 01       	movw	r24, r28
    4544:	a0 e0       	ldi	r26, 0x00	; 0
    4546:	b0 e0       	ldi	r27, 0x00	; 0
    4548:	68 0e       	add	r6, r24
    454a:	79 1e       	adc	r7, r25
    454c:	8a 1e       	adc	r8, r26
    454e:	9b 1e       	adc	r9, r27
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    4550:	41 14       	cp	r4, r1
    4552:	51 04       	cpc	r5, r1
    4554:	09 f0       	breq	.+2      	; 0x4558 <sd_raw_read+0x156>
    4556:	6d cf       	rjmp	.-294    	; 0x4432 <sd_raw_read+0x30>
    4558:	81 e0       	ldi	r24, 0x01	; 1
        length -= read_length;
        offset += read_length;
    }

    return 1;
}
    455a:	df 91       	pop	r29
    455c:	cf 91       	pop	r28
    455e:	1f 91       	pop	r17
    4560:	0f 91       	pop	r16
    4562:	ff 90       	pop	r15
    4564:	ef 90       	pop	r14
    4566:	df 90       	pop	r13
    4568:	cf 90       	pop	r12
    456a:	bf 90       	pop	r11
    456c:	af 90       	pop	r10
    456e:	9f 90       	pop	r9
    4570:	8f 90       	pop	r8
    4572:	7f 90       	pop	r7
    4574:	6f 90       	pop	r6
    4576:	5f 90       	pop	r5
    4578:	4f 90       	pop	r4
    457a:	3f 90       	pop	r3
    457c:	08 95       	ret

0000457e <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    457e:	2f 92       	push	r2
    4580:	3f 92       	push	r3
    4582:	4f 92       	push	r4
    4584:	5f 92       	push	r5
    4586:	6f 92       	push	r6
    4588:	7f 92       	push	r7
    458a:	8f 92       	push	r8
    458c:	9f 92       	push	r9
    458e:	af 92       	push	r10
    4590:	bf 92       	push	r11
    4592:	cf 92       	push	r12
    4594:	df 92       	push	r13
    4596:	ef 92       	push	r14
    4598:	ff 92       	push	r15
    459a:	0f 93       	push	r16
    459c:	1f 93       	push	r17
    459e:	df 93       	push	r29
    45a0:	cf 93       	push	r28
    45a2:	00 d0       	rcall	.+0      	; 0x45a4 <sd_raw_read_interval+0x26>
    45a4:	00 d0       	rcall	.+0      	; 0x45a6 <sd_raw_read_interval+0x28>
    45a6:	cd b7       	in	r28, 0x3d	; 61
    45a8:	de b7       	in	r29, 0x3e	; 62
    45aa:	4b 01       	movw	r8, r22
    45ac:	5c 01       	movw	r10, r24
    45ae:	3a 01       	movw	r6, r20
    45b0:	3c 83       	std	Y+4, r19	; 0x04
    45b2:	2b 83       	std	Y+3, r18	; 0x03
    45b4:	27 01       	movw	r4, r14
    45b6:	da 82       	std	Y+2, r13	; 0x02
    45b8:	c9 82       	std	Y+1, r12	; 0x01
    if(!buffer || interval == 0 || length < interval || !callback)
    45ba:	41 15       	cp	r20, r1
    45bc:	51 05       	cpc	r21, r1
    45be:	a9 f1       	breq	.+106    	; 0x462a <sd_raw_read_interval+0xac>
    45c0:	21 15       	cp	r18, r1
    45c2:	31 05       	cpc	r19, r1
    45c4:	91 f1       	breq	.+100    	; 0x462a <sd_raw_read_interval+0xac>
    45c6:	02 17       	cp	r16, r18
    45c8:	13 07       	cpc	r17, r19
    45ca:	78 f1       	brcs	.+94     	; 0x462a <sd_raw_read_interval+0xac>
    45cc:	e1 14       	cp	r14, r1
    45ce:	f1 04       	cpc	r15, r1
    45d0:	61 f1       	breq	.+88     	; 0x462a <sd_raw_read_interval+0xac>
    45d2:	19 01       	movw	r2, r18
    45d4:	30 94       	com	r3
    45d6:	21 94       	neg	r2
    45d8:	31 08       	sbc	r3, r1
    45da:	33 94       	inc	r3
    45dc:	02 1b       	sub	r16, r18
    45de:	13 0b       	sbc	r17, r19
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    45e0:	69 01       	movw	r12, r18
    45e2:	ee 24       	eor	r14, r14
    45e4:	ff 24       	eor	r15, r15
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
    45e6:	c5 01       	movw	r24, r10
    45e8:	b4 01       	movw	r22, r8
    45ea:	a3 01       	movw	r20, r6
    45ec:	2b 81       	ldd	r18, Y+3	; 0x03
    45ee:	3c 81       	ldd	r19, Y+4	; 0x04
    45f0:	0e 94 01 22 	call	0x4402	; 0x4402 <sd_raw_read>
    45f4:	88 23       	and	r24, r24
    45f6:	c9 f0       	breq	.+50     	; 0x462a <sd_raw_read_interval+0xac>
            return 0;
        if(!callback(buffer, offset, p))
    45f8:	c3 01       	movw	r24, r6
    45fa:	b5 01       	movw	r22, r10
    45fc:	a4 01       	movw	r20, r8
    45fe:	29 81       	ldd	r18, Y+1	; 0x01
    4600:	3a 81       	ldd	r19, Y+2	; 0x02
    4602:	f2 01       	movw	r30, r4
    4604:	09 95       	icall
    4606:	88 23       	and	r24, r24
    4608:	91 f0       	breq	.+36     	; 0x462e <sd_raw_read_interval+0xb0>
            break;
    460a:	02 0d       	add	r16, r2
    460c:	13 1d       	adc	r17, r3
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    460e:	8b 81       	ldd	r24, Y+3	; 0x03
    4610:	9c 81       	ldd	r25, Y+4	; 0x04
    4612:	80 0f       	add	r24, r16
    4614:	91 1f       	adc	r25, r17
    4616:	2b 81       	ldd	r18, Y+3	; 0x03
    4618:	3c 81       	ldd	r19, Y+4	; 0x04
    461a:	82 17       	cp	r24, r18
    461c:	93 07       	cpc	r25, r19
    461e:	38 f0       	brcs	.+14     	; 0x462e <sd_raw_read_interval+0xb0>
    4620:	8c 0c       	add	r8, r12
    4622:	9d 1c       	adc	r9, r13
    4624:	ae 1c       	adc	r10, r14
    4626:	bf 1c       	adc	r11, r15
    4628:	de cf       	rjmp	.-68     	; 0x45e6 <sd_raw_read_interval+0x68>
    462a:	80 e0       	ldi	r24, 0x00	; 0
    462c:	01 c0       	rjmp	.+2      	; 0x4630 <sd_raw_read_interval+0xb2>
    462e:	81 e0       	ldi	r24, 0x01	; 1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
    4630:	0f 90       	pop	r0
    4632:	0f 90       	pop	r0
    4634:	0f 90       	pop	r0
    4636:	0f 90       	pop	r0
    4638:	cf 91       	pop	r28
    463a:	df 91       	pop	r29
    463c:	1f 91       	pop	r17
    463e:	0f 91       	pop	r16
    4640:	ff 90       	pop	r15
    4642:	ef 90       	pop	r14
    4644:	df 90       	pop	r13
    4646:	cf 90       	pop	r12
    4648:	bf 90       	pop	r11
    464a:	af 90       	pop	r10
    464c:	9f 90       	pop	r9
    464e:	8f 90       	pop	r8
    4650:	7f 90       	pop	r7
    4652:	6f 90       	pop	r6
    4654:	5f 90       	pop	r5
    4656:	4f 90       	pop	r4
    4658:	3f 90       	pop	r3
    465a:	2f 90       	pop	r2
    465c:	08 95       	ret

0000465e <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
    465e:	0f 93       	push	r16
    4660:	1f 93       	push	r17
    4662:	cf 93       	push	r28
    4664:	df 93       	push	r29
    /* enable inputs for reading card status */
    configure_pin_available();
    configure_pin_locked();

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
    4666:	22 9a       	sbi	0x04, 2	; 4
    configure_pin_sck();
    4668:	21 9a       	sbi	0x04, 1	; 4
    configure_pin_ss();
    466a:	20 9a       	sbi	0x04, 0	; 4
    configure_pin_miso();
    466c:	23 98       	cbi	0x04, 3	; 4

    unselect_card();
    466e:	28 9a       	sbi	0x05, 0	; 5

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
    SPCR = (0 << SPIE) | /* SPI Interrupt Enable */
    4670:	83 e5       	ldi	r24, 0x53	; 83
    4672:	8c bd       	out	0x2c, r24	; 44
           (1 << MSTR) | /* Master mode */
           (0 << CPOL) | /* Clock Polarity: SCK low when idle */
           (0 << CPHA) | /* Clock Phase: sample on rising SCK edge */
           (1 << SPR1) | /* Clock Frequency: f_OSC / 128 */
           (1 << SPR0);
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
    4674:	8d b5       	in	r24, 0x2d	; 45
    4676:	8e 7f       	andi	r24, 0xFE	; 254
    4678:	8d bd       	out	0x2d, r24	; 45

    /* initialization procedure */
    sd_raw_card_type = 0;
    467a:	10 92 12 04 	sts	0x0412, r1
    467e:	90 e0       	ldi	r25, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    4680:	2f ef       	ldi	r18, 0xFF	; 255
    4682:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR & (1 << SPIF)));
    4684:	0d b4       	in	r0, 0x2d	; 45
    4686:	07 fe       	sbrs	r0, 7
    4688:	fd cf       	rjmp	.-6      	; 0x4684 <sd_raw_init+0x26>
    SPSR &= ~(1 << SPIF);
    468a:	8d b5       	in	r24, 0x2d	; 45
    468c:	8f 77       	andi	r24, 0x7F	; 127
    468e:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    4690:	8e b5       	in	r24, 0x2e	; 46
    
    if(!sd_raw_available())
        return 0;

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    4692:	9f 5f       	subi	r25, 0xFF	; 255
    4694:	9a 30       	cpi	r25, 0x0A	; 10
    4696:	a9 f7       	brne	.-22     	; 0x4682 <sd_raw_init+0x24>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    4698:	28 98       	cbi	0x05, 0	; 5
    469a:	c0 e0       	ldi	r28, 0x00	; 0
    469c:	d0 e0       	ldi	r29, 0x00	; 0

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    469e:	80 e0       	ldi	r24, 0x00	; 0
    46a0:	40 e0       	ldi	r20, 0x00	; 0
    46a2:	50 e0       	ldi	r21, 0x00	; 0
    46a4:	60 e0       	ldi	r22, 0x00	; 0
    46a6:	70 e0       	ldi	r23, 0x00	; 0
    46a8:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <sd_raw_send_command>
    46ac:	18 2f       	mov	r17, r24
        if(response == (1 << R1_IDLE_STATE))
    46ae:	81 30       	cpi	r24, 0x01	; 1
    46b0:	39 f0       	breq	.+14     	; 0x46c0 <sd_raw_init+0x62>
            break;

        if(i == 0x1ff)
    46b2:	81 e0       	ldi	r24, 0x01	; 1
    46b4:	cf 3f       	cpi	r28, 0xFF	; 255
    46b6:	d8 07       	cpc	r29, r24
    46b8:	09 f4       	brne	.+2      	; 0x46bc <sd_raw_init+0x5e>
    46ba:	40 c0       	rjmp	.+128    	; 0x473c <sd_raw_init+0xde>
    /* address card */
    select_card();

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    46bc:	21 96       	adiw	r28, 0x01	; 1
    46be:	ef cf       	rjmp	.-34     	; 0x469e <sd_raw_init+0x40>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
    46c0:	87 e3       	ldi	r24, 0x37	; 55
    46c2:	40 e0       	ldi	r20, 0x00	; 0
    46c4:	50 e0       	ldi	r21, 0x00	; 0
    46c6:	60 e0       	ldi	r22, 0x00	; 0
    46c8:	70 e0       	ldi	r23, 0x00	; 0
    46ca:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    46ce:	89 e2       	ldi	r24, 0x29	; 41
    46d0:	40 e0       	ldi	r20, 0x00	; 0
    46d2:	50 e0       	ldi	r21, 0x00	; 0
    46d4:	60 e0       	ldi	r22, 0x00	; 0
    46d6:	70 e0       	ldi	r23, 0x00	; 0
    46d8:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    46dc:	82 fd       	sbrc	r24, 2
    46de:	02 c0       	rjmp	.+4      	; 0x46e4 <sd_raw_init+0x86>
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    46e0:	10 93 12 04 	sts	0x0412, r17
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    46e4:	80 91 12 04 	lds	r24, 0x0412
    46e8:	08 2f       	mov	r16, r24
    46ea:	10 e0       	ldi	r17, 0x00	; 0
    46ec:	03 70       	andi	r16, 0x03	; 3
    46ee:	10 70       	andi	r17, 0x00	; 0
    46f0:	c0 e0       	ldi	r28, 0x00	; 0
    46f2:	d0 e0       	ldi	r29, 0x00	; 0
    46f4:	01 15       	cp	r16, r1
    46f6:	11 05       	cpc	r17, r1
    46f8:	49 f0       	breq	.+18     	; 0x470c <sd_raw_init+0xae>
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
    46fa:	87 e3       	ldi	r24, 0x37	; 55
    46fc:	40 e0       	ldi	r20, 0x00	; 0
    46fe:	50 e0       	ldi	r21, 0x00	; 0
    4700:	60 e0       	ldi	r22, 0x00	; 0
    4702:	70 e0       	ldi	r23, 0x00	; 0
    4704:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    4708:	89 e2       	ldi	r24, 0x29	; 41
    470a:	01 c0       	rjmp	.+2      	; 0x470e <sd_raw_init+0xb0>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    470c:	81 e0       	ldi	r24, 0x01	; 1
    470e:	40 e0       	ldi	r20, 0x00	; 0
    4710:	50 e0       	ldi	r21, 0x00	; 0
    4712:	60 e0       	ldi	r22, 0x00	; 0
    4714:	70 e0       	ldi	r23, 0x00	; 0
    4716:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
    471a:	80 ff       	sbrs	r24, 0
    471c:	06 c0       	rjmp	.+12     	; 0x472a <sd_raw_init+0xcc>
            break;

        if(i == 0x7fff)
    471e:	8f e7       	ldi	r24, 0x7F	; 127
    4720:	cf 3f       	cpi	r28, 0xFF	; 255
    4722:	d8 07       	cpc	r29, r24
    4724:	59 f0       	breq	.+22     	; 0x473c <sd_raw_init+0xde>
            /* MMC card */
        }
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    4726:	21 96       	adiw	r28, 0x01	; 1
    4728:	e5 cf       	rjmp	.-54     	; 0x46f4 <sd_raw_init+0x96>
        sd_raw_rec_byte();
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    472a:	80 e1       	ldi	r24, 0x10	; 16
    472c:	40 e0       	ldi	r20, 0x00	; 0
    472e:	52 e0       	ldi	r21, 0x02	; 2
    4730:	60 e0       	ldi	r22, 0x00	; 0
    4732:	70 e0       	ldi	r23, 0x00	; 0
    4734:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <sd_raw_send_command>
    4738:	88 23       	and	r24, r24
    473a:	19 f0       	breq	.+6      	; 0x4742 <sd_raw_init+0xe4>
    {
        unselect_card();
    473c:	28 9a       	sbi	0x05, 0	; 5
    473e:	80 e0       	ldi	r24, 0x00	; 0
    4740:	22 c0       	rjmp	.+68     	; 0x4786 <sd_raw_init+0x128>
        return 0;
    }

    /* deaddress card */
    unselect_card();
    4742:	28 9a       	sbi	0x05, 0	; 5

    /* switch to highest SPI frequency possible */
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
    4744:	8c b5       	in	r24, 0x2c	; 44
    4746:	8c 7f       	andi	r24, 0xFC	; 252
    4748:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
    474a:	8d b5       	in	r24, 0x2d	; 45
    474c:	81 60       	ori	r24, 0x01	; 1
    474e:	8d bd       	out	0x2d, r24	; 45

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
    4750:	8f ef       	ldi	r24, 0xFF	; 255
    4752:	9f ef       	ldi	r25, 0xFF	; 255
    4754:	af ef       	ldi	r26, 0xFF	; 255
    4756:	bf ef       	ldi	r27, 0xFF	; 255
    4758:	80 93 0d 04 	sts	0x040D, r24
    475c:	90 93 0e 04 	sts	0x040E, r25
    4760:	a0 93 0f 04 	sts	0x040F, r26
    4764:	b0 93 10 04 	sts	0x0410, r27
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
    4768:	81 e0       	ldi	r24, 0x01	; 1
    476a:	80 93 11 04 	sts	0x0411, r24
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    476e:	60 e0       	ldi	r22, 0x00	; 0
    4770:	70 e0       	ldi	r23, 0x00	; 0
    4772:	80 e0       	ldi	r24, 0x00	; 0
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	4d e0       	ldi	r20, 0x0D	; 13
    4778:	52 e0       	ldi	r21, 0x02	; 2
    477a:	20 e0       	ldi	r18, 0x00	; 0
    477c:	32 e0       	ldi	r19, 0x02	; 2
    477e:	0e 94 01 22 	call	0x4402	; 0x4402 <sd_raw_read>
    4782:	81 11       	cpse	r24, r1
    4784:	81 e0       	ldi	r24, 0x01	; 1
        return 0;
#endif

    return 1;
}
    4786:	df 91       	pop	r29
    4788:	cf 91       	pop	r28
    478a:	1f 91       	pop	r17
    478c:	0f 91       	pop	r16
    478e:	08 95       	ret

00004790 <sd_raw_write_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
    4790:	4f 92       	push	r4
    4792:	5f 92       	push	r5
    4794:	6f 92       	push	r6
    4796:	7f 92       	push	r7
    4798:	8f 92       	push	r8
    479a:	9f 92       	push	r9
    479c:	af 92       	push	r10
    479e:	bf 92       	push	r11
    47a0:	cf 92       	push	r12
    47a2:	df 92       	push	r13
    47a4:	ef 92       	push	r14
    47a6:	ff 92       	push	r15
    47a8:	0f 93       	push	r16
    47aa:	1f 93       	push	r17
    47ac:	cf 93       	push	r28
    47ae:	df 93       	push	r29
    47b0:	5b 01       	movw	r10, r22
    47b2:	6c 01       	movw	r12, r24
    47b4:	4a 01       	movw	r8, r20
    47b6:	e9 01       	movw	r28, r18
    47b8:	38 01       	movw	r6, r16
    47ba:	27 01       	movw	r4, r14
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
    47bc:	41 15       	cp	r20, r1
    47be:	51 05       	cpc	r21, r1
    47c0:	71 f1       	breq	.+92     	; 0x481e <sd_raw_write_interval+0x8e>
    47c2:	01 15       	cp	r16, r1
    47c4:	11 05       	cpc	r17, r1
    47c6:	59 f1       	breq	.+86     	; 0x481e <sd_raw_write_interval+0x8e>
        return 0;

    uint8_t endless = (length == 0);
    47c8:	ff 24       	eor	r15, r15
    47ca:	21 15       	cp	r18, r1
    47cc:	31 05       	cpc	r19, r1
    47ce:	11 f5       	brne	.+68     	; 0x4814 <sd_raw_write_interval+0x84>
    47d0:	ff 24       	eor	r15, r15
    47d2:	f3 94       	inc	r15
    47d4:	1f c0       	rjmp	.+62     	; 0x4814 <sd_raw_write_interval+0x84>
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    47d6:	c4 01       	movw	r24, r8
    47d8:	b6 01       	movw	r22, r12
    47da:	a5 01       	movw	r20, r10
    47dc:	92 01       	movw	r18, r4
    47de:	f3 01       	movw	r30, r6
    47e0:	09 95       	icall
    47e2:	8c 01       	movw	r16, r24
        if(!bytes_to_write)
    47e4:	00 97       	sbiw	r24, 0x00	; 0
    47e6:	e9 f0       	breq	.+58     	; 0x4822 <sd_raw_write_interval+0x92>
            break;
        if(!endless && bytes_to_write > length)
    47e8:	ff 20       	and	r15, r15
    47ea:	19 f4       	brne	.+6      	; 0x47f2 <sd_raw_write_interval+0x62>
    47ec:	c8 17       	cp	r28, r24
    47ee:	d9 07       	cpc	r29, r25
    47f0:	b0 f0       	brcs	.+44     	; 0x481e <sd_raw_write_interval+0x8e>
            return 0;

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
    47f2:	c6 01       	movw	r24, r12
    47f4:	b5 01       	movw	r22, r10
    47f6:	a4 01       	movw	r20, r8
    47f8:	98 01       	movw	r18, r16
    47fa:	0e 94 11 21 	call	0x4222	; 0x4222 <sd_raw_write>
    47fe:	88 23       	and	r24, r24
    4800:	71 f0       	breq	.+28     	; 0x481e <sd_raw_write_interval+0x8e>
            return 0;

        offset += bytes_to_write;
    4802:	c8 01       	movw	r24, r16
    4804:	a0 e0       	ldi	r26, 0x00	; 0
    4806:	b0 e0       	ldi	r27, 0x00	; 0
    4808:	a8 0e       	add	r10, r24
    480a:	b9 1e       	adc	r11, r25
    480c:	ca 1e       	adc	r12, r26
    480e:	db 1e       	adc	r13, r27
        length -= bytes_to_write;
    4810:	c0 1b       	sub	r28, r16
    4812:	d1 0b       	sbc	r29, r17

    if(!buffer || !callback)
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    4814:	ff 20       	and	r15, r15
    4816:	f9 f6       	brne	.-66     	; 0x47d6 <sd_raw_write_interval+0x46>
    4818:	20 97       	sbiw	r28, 0x00	; 0
    481a:	e9 f6       	brne	.-70     	; 0x47d6 <sd_raw_write_interval+0x46>
    481c:	02 c0       	rjmp	.+4      	; 0x4822 <sd_raw_write_interval+0x92>
    481e:	80 e0       	ldi	r24, 0x00	; 0
    4820:	01 c0       	rjmp	.+2      	; 0x4824 <sd_raw_write_interval+0x94>
    4822:	81 e0       	ldi	r24, 0x01	; 1
        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
}
    4824:	df 91       	pop	r29
    4826:	cf 91       	pop	r28
    4828:	1f 91       	pop	r17
    482a:	0f 91       	pop	r16
    482c:	ff 90       	pop	r15
    482e:	ef 90       	pop	r14
    4830:	df 90       	pop	r13
    4832:	cf 90       	pop	r12
    4834:	bf 90       	pop	r11
    4836:	af 90       	pop	r10
    4838:	9f 90       	pop	r9
    483a:	8f 90       	pop	r8
    483c:	7f 90       	pop	r7
    483e:	6f 90       	pop	r6
    4840:	5f 90       	pop	r5
    4842:	4f 90       	pop	r4
    4844:	08 95       	ret

00004846 <__mulsi3>:
    4846:	62 9f       	mul	r22, r18
    4848:	d0 01       	movw	r26, r0
    484a:	73 9f       	mul	r23, r19
    484c:	f0 01       	movw	r30, r0
    484e:	82 9f       	mul	r24, r18
    4850:	e0 0d       	add	r30, r0
    4852:	f1 1d       	adc	r31, r1
    4854:	64 9f       	mul	r22, r20
    4856:	e0 0d       	add	r30, r0
    4858:	f1 1d       	adc	r31, r1
    485a:	92 9f       	mul	r25, r18
    485c:	f0 0d       	add	r31, r0
    485e:	83 9f       	mul	r24, r19
    4860:	f0 0d       	add	r31, r0
    4862:	74 9f       	mul	r23, r20
    4864:	f0 0d       	add	r31, r0
    4866:	65 9f       	mul	r22, r21
    4868:	f0 0d       	add	r31, r0
    486a:	99 27       	eor	r25, r25
    486c:	72 9f       	mul	r23, r18
    486e:	b0 0d       	add	r27, r0
    4870:	e1 1d       	adc	r30, r1
    4872:	f9 1f       	adc	r31, r25
    4874:	63 9f       	mul	r22, r19
    4876:	b0 0d       	add	r27, r0
    4878:	e1 1d       	adc	r30, r1
    487a:	f9 1f       	adc	r31, r25
    487c:	bd 01       	movw	r22, r26
    487e:	cf 01       	movw	r24, r30
    4880:	11 24       	eor	r1, r1
    4882:	08 95       	ret

00004884 <__udivmodhi4>:
    4884:	aa 1b       	sub	r26, r26
    4886:	bb 1b       	sub	r27, r27
    4888:	51 e1       	ldi	r21, 0x11	; 17
    488a:	07 c0       	rjmp	.+14     	; 0x489a <__udivmodhi4_ep>

0000488c <__udivmodhi4_loop>:
    488c:	aa 1f       	adc	r26, r26
    488e:	bb 1f       	adc	r27, r27
    4890:	a6 17       	cp	r26, r22
    4892:	b7 07       	cpc	r27, r23
    4894:	10 f0       	brcs	.+4      	; 0x489a <__udivmodhi4_ep>
    4896:	a6 1b       	sub	r26, r22
    4898:	b7 0b       	sbc	r27, r23

0000489a <__udivmodhi4_ep>:
    489a:	88 1f       	adc	r24, r24
    489c:	99 1f       	adc	r25, r25
    489e:	5a 95       	dec	r21
    48a0:	a9 f7       	brne	.-22     	; 0x488c <__udivmodhi4_loop>
    48a2:	80 95       	com	r24
    48a4:	90 95       	com	r25
    48a6:	bc 01       	movw	r22, r24
    48a8:	cd 01       	movw	r24, r26
    48aa:	08 95       	ret

000048ac <__divmodhi4>:
    48ac:	97 fb       	bst	r25, 7
    48ae:	09 2e       	mov	r0, r25
    48b0:	07 26       	eor	r0, r23
    48b2:	0a d0       	rcall	.+20     	; 0x48c8 <__divmodhi4_neg1>
    48b4:	77 fd       	sbrc	r23, 7
    48b6:	04 d0       	rcall	.+8      	; 0x48c0 <__divmodhi4_neg2>
    48b8:	e5 df       	rcall	.-54     	; 0x4884 <__udivmodhi4>
    48ba:	06 d0       	rcall	.+12     	; 0x48c8 <__divmodhi4_neg1>
    48bc:	00 20       	and	r0, r0
    48be:	1a f4       	brpl	.+6      	; 0x48c6 <__divmodhi4_exit>

000048c0 <__divmodhi4_neg2>:
    48c0:	70 95       	com	r23
    48c2:	61 95       	neg	r22
    48c4:	7f 4f       	sbci	r23, 0xFF	; 255

000048c6 <__divmodhi4_exit>:
    48c6:	08 95       	ret

000048c8 <__divmodhi4_neg1>:
    48c8:	f6 f7       	brtc	.-4      	; 0x48c6 <__divmodhi4_exit>
    48ca:	90 95       	com	r25
    48cc:	81 95       	neg	r24
    48ce:	9f 4f       	sbci	r25, 0xFF	; 255
    48d0:	08 95       	ret

000048d2 <__udivmodsi4>:
    48d2:	a1 e2       	ldi	r26, 0x21	; 33
    48d4:	1a 2e       	mov	r1, r26
    48d6:	aa 1b       	sub	r26, r26
    48d8:	bb 1b       	sub	r27, r27
    48da:	fd 01       	movw	r30, r26
    48dc:	0d c0       	rjmp	.+26     	; 0x48f8 <__udivmodsi4_ep>

000048de <__udivmodsi4_loop>:
    48de:	aa 1f       	adc	r26, r26
    48e0:	bb 1f       	adc	r27, r27
    48e2:	ee 1f       	adc	r30, r30
    48e4:	ff 1f       	adc	r31, r31
    48e6:	a2 17       	cp	r26, r18
    48e8:	b3 07       	cpc	r27, r19
    48ea:	e4 07       	cpc	r30, r20
    48ec:	f5 07       	cpc	r31, r21
    48ee:	20 f0       	brcs	.+8      	; 0x48f8 <__udivmodsi4_ep>
    48f0:	a2 1b       	sub	r26, r18
    48f2:	b3 0b       	sbc	r27, r19
    48f4:	e4 0b       	sbc	r30, r20
    48f6:	f5 0b       	sbc	r31, r21

000048f8 <__udivmodsi4_ep>:
    48f8:	66 1f       	adc	r22, r22
    48fa:	77 1f       	adc	r23, r23
    48fc:	88 1f       	adc	r24, r24
    48fe:	99 1f       	adc	r25, r25
    4900:	1a 94       	dec	r1
    4902:	69 f7       	brne	.-38     	; 0x48de <__udivmodsi4_loop>
    4904:	60 95       	com	r22
    4906:	70 95       	com	r23
    4908:	80 95       	com	r24
    490a:	90 95       	com	r25
    490c:	9b 01       	movw	r18, r22
    490e:	ac 01       	movw	r20, r24
    4910:	bd 01       	movw	r22, r26
    4912:	cf 01       	movw	r24, r30
    4914:	08 95       	ret

00004916 <strcmp_P>:
    4916:	fb 01       	movw	r30, r22
    4918:	dc 01       	movw	r26, r24
    491a:	8d 91       	ld	r24, X+
    491c:	05 90       	lpm	r0, Z+
    491e:	80 19       	sub	r24, r0
    4920:	01 10       	cpse	r0, r1
    4922:	d9 f3       	breq	.-10     	; 0x491a <strcmp_P+0x4>
    4924:	99 0b       	sbc	r25, r25
    4926:	08 95       	ret

00004928 <strncmp_P>:
    4928:	fb 01       	movw	r30, r22
    492a:	dc 01       	movw	r26, r24
    492c:	41 50       	subi	r20, 0x01	; 1
    492e:	50 40       	sbci	r21, 0x00	; 0
    4930:	30 f0       	brcs	.+12     	; 0x493e <strncmp_P+0x16>
    4932:	8d 91       	ld	r24, X+
    4934:	05 90       	lpm	r0, Z+
    4936:	80 19       	sub	r24, r0
    4938:	19 f4       	brne	.+6      	; 0x4940 <strncmp_P+0x18>
    493a:	00 20       	and	r0, r0
    493c:	b9 f7       	brne	.-18     	; 0x492c <strncmp_P+0x4>
    493e:	88 1b       	sub	r24, r24
    4940:	99 0b       	sbc	r25, r25
    4942:	08 95       	ret

00004944 <memcpy>:
    4944:	fb 01       	movw	r30, r22
    4946:	dc 01       	movw	r26, r24
    4948:	02 c0       	rjmp	.+4      	; 0x494e <memcpy+0xa>
    494a:	01 90       	ld	r0, Z+
    494c:	0d 92       	st	X+, r0
    494e:	41 50       	subi	r20, 0x01	; 1
    4950:	50 40       	sbci	r21, 0x00	; 0
    4952:	d8 f7       	brcc	.-10     	; 0x494a <memcpy+0x6>
    4954:	08 95       	ret

00004956 <memset>:
    4956:	dc 01       	movw	r26, r24
    4958:	01 c0       	rjmp	.+2      	; 0x495c <memset+0x6>
    495a:	6d 93       	st	X+, r22
    495c:	41 50       	subi	r20, 0x01	; 1
    495e:	50 40       	sbci	r21, 0x00	; 0
    4960:	e0 f7       	brcc	.-8      	; 0x495a <memset+0x4>
    4962:	08 95       	ret

00004964 <strchr>:
    4964:	fc 01       	movw	r30, r24
    4966:	81 91       	ld	r24, Z+
    4968:	86 17       	cp	r24, r22
    496a:	21 f0       	breq	.+8      	; 0x4974 <strchr+0x10>
    496c:	88 23       	and	r24, r24
    496e:	d9 f7       	brne	.-10     	; 0x4966 <strchr+0x2>
    4970:	99 27       	eor	r25, r25
    4972:	08 95       	ret
    4974:	31 97       	sbiw	r30, 0x01	; 1
    4976:	cf 01       	movw	r24, r30
    4978:	08 95       	ret

0000497a <strcmp>:
    497a:	fb 01       	movw	r30, r22
    497c:	dc 01       	movw	r26, r24
    497e:	8d 91       	ld	r24, X+
    4980:	01 90       	ld	r0, Z+
    4982:	80 19       	sub	r24, r0
    4984:	01 10       	cpse	r0, r1
    4986:	d9 f3       	breq	.-10     	; 0x497e <strcmp+0x4>
    4988:	99 0b       	sbc	r25, r25
    498a:	08 95       	ret

0000498c <strncmp>:
    498c:	fb 01       	movw	r30, r22
    498e:	dc 01       	movw	r26, r24
    4990:	41 50       	subi	r20, 0x01	; 1
    4992:	50 40       	sbci	r21, 0x00	; 0
    4994:	30 f0       	brcs	.+12     	; 0x49a2 <strncmp+0x16>
    4996:	8d 91       	ld	r24, X+
    4998:	01 90       	ld	r0, Z+
    499a:	80 19       	sub	r24, r0
    499c:	19 f4       	brne	.+6      	; 0x49a4 <strncmp+0x18>
    499e:	00 20       	and	r0, r0
    49a0:	b9 f7       	brne	.-18     	; 0x4990 <strncmp+0x4>
    49a2:	88 1b       	sub	r24, r24
    49a4:	99 0b       	sbc	r25, r25
    49a6:	08 95       	ret

000049a8 <strncpy>:
    49a8:	fb 01       	movw	r30, r22
    49aa:	dc 01       	movw	r26, r24
    49ac:	41 50       	subi	r20, 0x01	; 1
    49ae:	50 40       	sbci	r21, 0x00	; 0
    49b0:	48 f0       	brcs	.+18     	; 0x49c4 <strncpy+0x1c>
    49b2:	01 90       	ld	r0, Z+
    49b4:	0d 92       	st	X+, r0
    49b6:	00 20       	and	r0, r0
    49b8:	c9 f7       	brne	.-14     	; 0x49ac <strncpy+0x4>
    49ba:	01 c0       	rjmp	.+2      	; 0x49be <strncpy+0x16>
    49bc:	1d 92       	st	X+, r1
    49be:	41 50       	subi	r20, 0x01	; 1
    49c0:	50 40       	sbci	r21, 0x00	; 0
    49c2:	e0 f7       	brcc	.-8      	; 0x49bc <strncpy+0x14>
    49c4:	08 95       	ret

000049c6 <strrchr>:
    49c6:	fc 01       	movw	r30, r24
    49c8:	81 e0       	ldi	r24, 0x01	; 1
    49ca:	90 e0       	ldi	r25, 0x00	; 0
    49cc:	01 90       	ld	r0, Z+
    49ce:	06 16       	cp	r0, r22
    49d0:	09 f4       	brne	.+2      	; 0x49d4 <strrchr+0xe>
    49d2:	cf 01       	movw	r24, r30
    49d4:	00 20       	and	r0, r0
    49d6:	d1 f7       	brne	.-12     	; 0x49cc <strrchr+0x6>
    49d8:	01 97       	sbiw	r24, 0x01	; 1
    49da:	08 95       	ret

000049dc <fgetc>:
    49dc:	cf 93       	push	r28
    49de:	df 93       	push	r29
    49e0:	ec 01       	movw	r28, r24
    49e2:	4b 81       	ldd	r20, Y+3	; 0x03
    49e4:	40 ff       	sbrs	r20, 0
    49e6:	1a c0       	rjmp	.+52     	; 0x4a1c <fgetc+0x40>
    49e8:	46 ff       	sbrs	r20, 6
    49ea:	0a c0       	rjmp	.+20     	; 0x4a00 <fgetc+0x24>
    49ec:	4f 7b       	andi	r20, 0xBF	; 191
    49ee:	4b 83       	std	Y+3, r20	; 0x03
    49f0:	8e 81       	ldd	r24, Y+6	; 0x06
    49f2:	9f 81       	ldd	r25, Y+7	; 0x07
    49f4:	01 96       	adiw	r24, 0x01	; 1
    49f6:	9f 83       	std	Y+7, r25	; 0x07
    49f8:	8e 83       	std	Y+6, r24	; 0x06
    49fa:	8a 81       	ldd	r24, Y+2	; 0x02
    49fc:	28 2f       	mov	r18, r24
    49fe:	2b c0       	rjmp	.+86     	; 0x4a56 <fgetc+0x7a>
    4a00:	42 ff       	sbrs	r20, 2
    4a02:	13 c0       	rjmp	.+38     	; 0x4a2a <fgetc+0x4e>
    4a04:	e8 81       	ld	r30, Y
    4a06:	f9 81       	ldd	r31, Y+1	; 0x01
    4a08:	80 81       	ld	r24, Z
    4a0a:	28 2f       	mov	r18, r24
    4a0c:	33 27       	eor	r19, r19
    4a0e:	27 fd       	sbrc	r18, 7
    4a10:	30 95       	com	r19
    4a12:	21 15       	cp	r18, r1
    4a14:	31 05       	cpc	r19, r1
    4a16:	29 f4       	brne	.+10     	; 0x4a22 <fgetc+0x46>
    4a18:	40 62       	ori	r20, 0x20	; 32
    4a1a:	4b 83       	std	Y+3, r20	; 0x03
    4a1c:	2f ef       	ldi	r18, 0xFF	; 255
    4a1e:	3f ef       	ldi	r19, 0xFF	; 255
    4a20:	1b c0       	rjmp	.+54     	; 0x4a58 <fgetc+0x7c>
    4a22:	31 96       	adiw	r30, 0x01	; 1
    4a24:	f9 83       	std	Y+1, r31	; 0x01
    4a26:	e8 83       	st	Y, r30
    4a28:	11 c0       	rjmp	.+34     	; 0x4a4c <fgetc+0x70>
    4a2a:	ea 85       	ldd	r30, Y+10	; 0x0a
    4a2c:	fb 85       	ldd	r31, Y+11	; 0x0b
    4a2e:	ce 01       	movw	r24, r28
    4a30:	09 95       	icall
    4a32:	9c 01       	movw	r18, r24
    4a34:	97 ff       	sbrs	r25, 7
    4a36:	0a c0       	rjmp	.+20     	; 0x4a4c <fgetc+0x70>
    4a38:	9b 81       	ldd	r25, Y+3	; 0x03
    4a3a:	2f 5f       	subi	r18, 0xFF	; 255
    4a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a3e:	11 f0       	breq	.+4      	; 0x4a44 <fgetc+0x68>
    4a40:	80 e2       	ldi	r24, 0x20	; 32
    4a42:	01 c0       	rjmp	.+2      	; 0x4a46 <fgetc+0x6a>
    4a44:	80 e1       	ldi	r24, 0x10	; 16
    4a46:	89 2b       	or	r24, r25
    4a48:	8b 83       	std	Y+3, r24	; 0x03
    4a4a:	e8 cf       	rjmp	.-48     	; 0x4a1c <fgetc+0x40>
    4a4c:	8e 81       	ldd	r24, Y+6	; 0x06
    4a4e:	9f 81       	ldd	r25, Y+7	; 0x07
    4a50:	01 96       	adiw	r24, 0x01	; 1
    4a52:	9f 83       	std	Y+7, r25	; 0x07
    4a54:	8e 83       	std	Y+6, r24	; 0x06
    4a56:	30 e0       	ldi	r19, 0x00	; 0
    4a58:	c9 01       	movw	r24, r18
    4a5a:	df 91       	pop	r29
    4a5c:	cf 91       	pop	r28
    4a5e:	08 95       	ret

00004a60 <fputc>:
    4a60:	0f 93       	push	r16
    4a62:	1f 93       	push	r17
    4a64:	cf 93       	push	r28
    4a66:	df 93       	push	r29
    4a68:	8c 01       	movw	r16, r24
    4a6a:	eb 01       	movw	r28, r22
    4a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a6e:	81 ff       	sbrs	r24, 1
    4a70:	1b c0       	rjmp	.+54     	; 0x4aa8 <fputc+0x48>
    4a72:	82 ff       	sbrs	r24, 2
    4a74:	0d c0       	rjmp	.+26     	; 0x4a90 <fputc+0x30>
    4a76:	2e 81       	ldd	r18, Y+6	; 0x06
    4a78:	3f 81       	ldd	r19, Y+7	; 0x07
    4a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    4a7c:	9d 81       	ldd	r25, Y+5	; 0x05
    4a7e:	28 17       	cp	r18, r24
    4a80:	39 07       	cpc	r19, r25
    4a82:	64 f4       	brge	.+24     	; 0x4a9c <fputc+0x3c>
    4a84:	e8 81       	ld	r30, Y
    4a86:	f9 81       	ldd	r31, Y+1	; 0x01
    4a88:	01 93       	st	Z+, r16
    4a8a:	f9 83       	std	Y+1, r31	; 0x01
    4a8c:	e8 83       	st	Y, r30
    4a8e:	06 c0       	rjmp	.+12     	; 0x4a9c <fputc+0x3c>
    4a90:	e8 85       	ldd	r30, Y+8	; 0x08
    4a92:	f9 85       	ldd	r31, Y+9	; 0x09
    4a94:	80 2f       	mov	r24, r16
    4a96:	09 95       	icall
    4a98:	89 2b       	or	r24, r25
    4a9a:	31 f4       	brne	.+12     	; 0x4aa8 <fputc+0x48>
    4a9c:	8e 81       	ldd	r24, Y+6	; 0x06
    4a9e:	9f 81       	ldd	r25, Y+7	; 0x07
    4aa0:	01 96       	adiw	r24, 0x01	; 1
    4aa2:	9f 83       	std	Y+7, r25	; 0x07
    4aa4:	8e 83       	std	Y+6, r24	; 0x06
    4aa6:	02 c0       	rjmp	.+4      	; 0x4aac <fputc+0x4c>
    4aa8:	0f ef       	ldi	r16, 0xFF	; 255
    4aaa:	1f ef       	ldi	r17, 0xFF	; 255
    4aac:	c8 01       	movw	r24, r16
    4aae:	df 91       	pop	r29
    4ab0:	cf 91       	pop	r28
    4ab2:	1f 91       	pop	r17
    4ab4:	0f 91       	pop	r16
    4ab6:	08 95       	ret

00004ab8 <printf_P>:
    4ab8:	a0 e0       	ldi	r26, 0x00	; 0
    4aba:	b0 e0       	ldi	r27, 0x00	; 0
    4abc:	e2 e6       	ldi	r30, 0x62	; 98
    4abe:	f5 e2       	ldi	r31, 0x25	; 37
    4ac0:	0c 94 e3 27 	jmp	0x4fc6	; 0x4fc6 <__prologue_saves__+0x20>
    4ac4:	fe 01       	movw	r30, r28
    4ac6:	35 96       	adiw	r30, 0x05	; 5
    4ac8:	61 91       	ld	r22, Z+
    4aca:	71 91       	ld	r23, Z+
    4acc:	a0 91 64 08 	lds	r26, 0x0864
    4ad0:	b0 91 65 08 	lds	r27, 0x0865
    4ad4:	13 96       	adiw	r26, 0x03	; 3
    4ad6:	8c 91       	ld	r24, X
    4ad8:	13 97       	sbiw	r26, 0x03	; 3
    4ada:	88 60       	ori	r24, 0x08	; 8
    4adc:	13 96       	adiw	r26, 0x03	; 3
    4ade:	8c 93       	st	X, r24
    4ae0:	80 91 64 08 	lds	r24, 0x0864
    4ae4:	90 91 65 08 	lds	r25, 0x0865
    4ae8:	af 01       	movw	r20, r30
    4aea:	0e 94 82 25 	call	0x4b04	; 0x4b04 <vfprintf>
    4aee:	e0 91 64 08 	lds	r30, 0x0864
    4af2:	f0 91 65 08 	lds	r31, 0x0865
    4af6:	23 81       	ldd	r18, Z+3	; 0x03
    4af8:	27 7f       	andi	r18, 0xF7	; 247
    4afa:	23 83       	std	Z+3, r18	; 0x03
    4afc:	20 96       	adiw	r28, 0x00	; 0
    4afe:	e2 e0       	ldi	r30, 0x02	; 2
    4b00:	0c 94 ff 27 	jmp	0x4ffe	; 0x4ffe <__epilogue_restores__+0x20>

00004b04 <vfprintf>:
    4b04:	ab e0       	ldi	r26, 0x0B	; 11
    4b06:	b0 e0       	ldi	r27, 0x00	; 0
    4b08:	e8 e8       	ldi	r30, 0x88	; 136
    4b0a:	f5 e2       	ldi	r31, 0x25	; 37
    4b0c:	0c 94 d3 27 	jmp	0x4fa6	; 0x4fa6 <__prologue_saves__>
    4b10:	3c 01       	movw	r6, r24
    4b12:	2b 01       	movw	r4, r22
    4b14:	5a 01       	movw	r10, r20
    4b16:	fc 01       	movw	r30, r24
    4b18:	17 82       	std	Z+7, r1	; 0x07
    4b1a:	16 82       	std	Z+6, r1	; 0x06
    4b1c:	83 81       	ldd	r24, Z+3	; 0x03
    4b1e:	81 fd       	sbrc	r24, 1
    4b20:	03 c0       	rjmp	.+6      	; 0x4b28 <vfprintf+0x24>
    4b22:	6f ef       	ldi	r22, 0xFF	; 255
    4b24:	7f ef       	ldi	r23, 0xFF	; 255
    4b26:	c6 c1       	rjmp	.+908    	; 0x4eb4 <vfprintf+0x3b0>
    4b28:	9a e0       	ldi	r25, 0x0A	; 10
    4b2a:	89 2e       	mov	r8, r25
    4b2c:	1e 01       	movw	r2, r28
    4b2e:	08 94       	sec
    4b30:	21 1c       	adc	r2, r1
    4b32:	31 1c       	adc	r3, r1
    4b34:	f3 01       	movw	r30, r6
    4b36:	23 81       	ldd	r18, Z+3	; 0x03
    4b38:	f2 01       	movw	r30, r4
    4b3a:	23 fd       	sbrc	r18, 3
    4b3c:	85 91       	lpm	r24, Z+
    4b3e:	23 ff       	sbrs	r18, 3
    4b40:	81 91       	ld	r24, Z+
    4b42:	2f 01       	movw	r4, r30
    4b44:	88 23       	and	r24, r24
    4b46:	09 f4       	brne	.+2      	; 0x4b4a <vfprintf+0x46>
    4b48:	b2 c1       	rjmp	.+868    	; 0x4eae <vfprintf+0x3aa>
    4b4a:	85 32       	cpi	r24, 0x25	; 37
    4b4c:	39 f4       	brne	.+14     	; 0x4b5c <vfprintf+0x58>
    4b4e:	23 fd       	sbrc	r18, 3
    4b50:	85 91       	lpm	r24, Z+
    4b52:	23 ff       	sbrs	r18, 3
    4b54:	81 91       	ld	r24, Z+
    4b56:	2f 01       	movw	r4, r30
    4b58:	85 32       	cpi	r24, 0x25	; 37
    4b5a:	29 f4       	brne	.+10     	; 0x4b66 <vfprintf+0x62>
    4b5c:	90 e0       	ldi	r25, 0x00	; 0
    4b5e:	b3 01       	movw	r22, r6
    4b60:	0e 94 30 25 	call	0x4a60	; 0x4a60 <fputc>
    4b64:	e7 cf       	rjmp	.-50     	; 0x4b34 <vfprintf+0x30>
    4b66:	98 2f       	mov	r25, r24
    4b68:	ff 24       	eor	r15, r15
    4b6a:	ee 24       	eor	r14, r14
    4b6c:	99 24       	eor	r9, r9
    4b6e:	ff e1       	ldi	r31, 0x1F	; 31
    4b70:	ff 15       	cp	r31, r15
    4b72:	d0 f0       	brcs	.+52     	; 0x4ba8 <vfprintf+0xa4>
    4b74:	9b 32       	cpi	r25, 0x2B	; 43
    4b76:	69 f0       	breq	.+26     	; 0x4b92 <vfprintf+0x8e>
    4b78:	9c 32       	cpi	r25, 0x2C	; 44
    4b7a:	28 f4       	brcc	.+10     	; 0x4b86 <vfprintf+0x82>
    4b7c:	90 32       	cpi	r25, 0x20	; 32
    4b7e:	59 f0       	breq	.+22     	; 0x4b96 <vfprintf+0x92>
    4b80:	93 32       	cpi	r25, 0x23	; 35
    4b82:	91 f4       	brne	.+36     	; 0x4ba8 <vfprintf+0xa4>
    4b84:	0e c0       	rjmp	.+28     	; 0x4ba2 <vfprintf+0x9e>
    4b86:	9d 32       	cpi	r25, 0x2D	; 45
    4b88:	49 f0       	breq	.+18     	; 0x4b9c <vfprintf+0x98>
    4b8a:	90 33       	cpi	r25, 0x30	; 48
    4b8c:	69 f4       	brne	.+26     	; 0x4ba8 <vfprintf+0xa4>
    4b8e:	41 e0       	ldi	r20, 0x01	; 1
    4b90:	24 c0       	rjmp	.+72     	; 0x4bda <vfprintf+0xd6>
    4b92:	52 e0       	ldi	r21, 0x02	; 2
    4b94:	f5 2a       	or	r15, r21
    4b96:	84 e0       	ldi	r24, 0x04	; 4
    4b98:	f8 2a       	or	r15, r24
    4b9a:	28 c0       	rjmp	.+80     	; 0x4bec <vfprintf+0xe8>
    4b9c:	98 e0       	ldi	r25, 0x08	; 8
    4b9e:	f9 2a       	or	r15, r25
    4ba0:	25 c0       	rjmp	.+74     	; 0x4bec <vfprintf+0xe8>
    4ba2:	e0 e1       	ldi	r30, 0x10	; 16
    4ba4:	fe 2a       	or	r15, r30
    4ba6:	22 c0       	rjmp	.+68     	; 0x4bec <vfprintf+0xe8>
    4ba8:	f7 fc       	sbrc	r15, 7
    4baa:	29 c0       	rjmp	.+82     	; 0x4bfe <vfprintf+0xfa>
    4bac:	89 2f       	mov	r24, r25
    4bae:	80 53       	subi	r24, 0x30	; 48
    4bb0:	8a 30       	cpi	r24, 0x0A	; 10
    4bb2:	70 f4       	brcc	.+28     	; 0x4bd0 <vfprintf+0xcc>
    4bb4:	f6 fe       	sbrs	r15, 6
    4bb6:	05 c0       	rjmp	.+10     	; 0x4bc2 <vfprintf+0xbe>
    4bb8:	98 9c       	mul	r9, r8
    4bba:	90 2c       	mov	r9, r0
    4bbc:	11 24       	eor	r1, r1
    4bbe:	98 0e       	add	r9, r24
    4bc0:	15 c0       	rjmp	.+42     	; 0x4bec <vfprintf+0xe8>
    4bc2:	e8 9c       	mul	r14, r8
    4bc4:	e0 2c       	mov	r14, r0
    4bc6:	11 24       	eor	r1, r1
    4bc8:	e8 0e       	add	r14, r24
    4bca:	f0 e2       	ldi	r31, 0x20	; 32
    4bcc:	ff 2a       	or	r15, r31
    4bce:	0e c0       	rjmp	.+28     	; 0x4bec <vfprintf+0xe8>
    4bd0:	9e 32       	cpi	r25, 0x2E	; 46
    4bd2:	29 f4       	brne	.+10     	; 0x4bde <vfprintf+0xda>
    4bd4:	f6 fc       	sbrc	r15, 6
    4bd6:	6b c1       	rjmp	.+726    	; 0x4eae <vfprintf+0x3aa>
    4bd8:	40 e4       	ldi	r20, 0x40	; 64
    4bda:	f4 2a       	or	r15, r20
    4bdc:	07 c0       	rjmp	.+14     	; 0x4bec <vfprintf+0xe8>
    4bde:	9c 36       	cpi	r25, 0x6C	; 108
    4be0:	19 f4       	brne	.+6      	; 0x4be8 <vfprintf+0xe4>
    4be2:	50 e8       	ldi	r21, 0x80	; 128
    4be4:	f5 2a       	or	r15, r21
    4be6:	02 c0       	rjmp	.+4      	; 0x4bec <vfprintf+0xe8>
    4be8:	98 36       	cpi	r25, 0x68	; 104
    4bea:	49 f4       	brne	.+18     	; 0x4bfe <vfprintf+0xfa>
    4bec:	f2 01       	movw	r30, r4
    4bee:	23 fd       	sbrc	r18, 3
    4bf0:	95 91       	lpm	r25, Z+
    4bf2:	23 ff       	sbrs	r18, 3
    4bf4:	91 91       	ld	r25, Z+
    4bf6:	2f 01       	movw	r4, r30
    4bf8:	99 23       	and	r25, r25
    4bfa:	09 f0       	breq	.+2      	; 0x4bfe <vfprintf+0xfa>
    4bfc:	b8 cf       	rjmp	.-144    	; 0x4b6e <vfprintf+0x6a>
    4bfe:	89 2f       	mov	r24, r25
    4c00:	85 54       	subi	r24, 0x45	; 69
    4c02:	83 30       	cpi	r24, 0x03	; 3
    4c04:	18 f0       	brcs	.+6      	; 0x4c0c <vfprintf+0x108>
    4c06:	80 52       	subi	r24, 0x20	; 32
    4c08:	83 30       	cpi	r24, 0x03	; 3
    4c0a:	38 f4       	brcc	.+14     	; 0x4c1a <vfprintf+0x116>
    4c0c:	44 e0       	ldi	r20, 0x04	; 4
    4c0e:	50 e0       	ldi	r21, 0x00	; 0
    4c10:	a4 0e       	add	r10, r20
    4c12:	b5 1e       	adc	r11, r21
    4c14:	5f e3       	ldi	r21, 0x3F	; 63
    4c16:	59 83       	std	Y+1, r21	; 0x01
    4c18:	0f c0       	rjmp	.+30     	; 0x4c38 <vfprintf+0x134>
    4c1a:	93 36       	cpi	r25, 0x63	; 99
    4c1c:	31 f0       	breq	.+12     	; 0x4c2a <vfprintf+0x126>
    4c1e:	93 37       	cpi	r25, 0x73	; 115
    4c20:	79 f0       	breq	.+30     	; 0x4c40 <vfprintf+0x13c>
    4c22:	93 35       	cpi	r25, 0x53	; 83
    4c24:	09 f0       	breq	.+2      	; 0x4c28 <vfprintf+0x124>
    4c26:	56 c0       	rjmp	.+172    	; 0x4cd4 <vfprintf+0x1d0>
    4c28:	20 c0       	rjmp	.+64     	; 0x4c6a <vfprintf+0x166>
    4c2a:	f5 01       	movw	r30, r10
    4c2c:	80 81       	ld	r24, Z
    4c2e:	89 83       	std	Y+1, r24	; 0x01
    4c30:	42 e0       	ldi	r20, 0x02	; 2
    4c32:	50 e0       	ldi	r21, 0x00	; 0
    4c34:	a4 0e       	add	r10, r20
    4c36:	b5 1e       	adc	r11, r21
    4c38:	61 01       	movw	r12, r2
    4c3a:	01 e0       	ldi	r16, 0x01	; 1
    4c3c:	10 e0       	ldi	r17, 0x00	; 0
    4c3e:	12 c0       	rjmp	.+36     	; 0x4c64 <vfprintf+0x160>
    4c40:	f5 01       	movw	r30, r10
    4c42:	c0 80       	ld	r12, Z
    4c44:	d1 80       	ldd	r13, Z+1	; 0x01
    4c46:	f6 fc       	sbrc	r15, 6
    4c48:	03 c0       	rjmp	.+6      	; 0x4c50 <vfprintf+0x14c>
    4c4a:	6f ef       	ldi	r22, 0xFF	; 255
    4c4c:	7f ef       	ldi	r23, 0xFF	; 255
    4c4e:	02 c0       	rjmp	.+4      	; 0x4c54 <vfprintf+0x150>
    4c50:	69 2d       	mov	r22, r9
    4c52:	70 e0       	ldi	r23, 0x00	; 0
    4c54:	42 e0       	ldi	r20, 0x02	; 2
    4c56:	50 e0       	ldi	r21, 0x00	; 0
    4c58:	a4 0e       	add	r10, r20
    4c5a:	b5 1e       	adc	r11, r21
    4c5c:	c6 01       	movw	r24, r12
    4c5e:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <strnlen>
    4c62:	8c 01       	movw	r16, r24
    4c64:	5f e7       	ldi	r21, 0x7F	; 127
    4c66:	f5 22       	and	r15, r21
    4c68:	14 c0       	rjmp	.+40     	; 0x4c92 <vfprintf+0x18e>
    4c6a:	f5 01       	movw	r30, r10
    4c6c:	c0 80       	ld	r12, Z
    4c6e:	d1 80       	ldd	r13, Z+1	; 0x01
    4c70:	f6 fc       	sbrc	r15, 6
    4c72:	03 c0       	rjmp	.+6      	; 0x4c7a <vfprintf+0x176>
    4c74:	6f ef       	ldi	r22, 0xFF	; 255
    4c76:	7f ef       	ldi	r23, 0xFF	; 255
    4c78:	02 c0       	rjmp	.+4      	; 0x4c7e <vfprintf+0x17a>
    4c7a:	69 2d       	mov	r22, r9
    4c7c:	70 e0       	ldi	r23, 0x00	; 0
    4c7e:	42 e0       	ldi	r20, 0x02	; 2
    4c80:	50 e0       	ldi	r21, 0x00	; 0
    4c82:	a4 0e       	add	r10, r20
    4c84:	b5 1e       	adc	r11, r21
    4c86:	c6 01       	movw	r24, r12
    4c88:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <strnlen_P>
    4c8c:	8c 01       	movw	r16, r24
    4c8e:	50 e8       	ldi	r21, 0x80	; 128
    4c90:	f5 2a       	or	r15, r21
    4c92:	f3 fe       	sbrs	r15, 3
    4c94:	07 c0       	rjmp	.+14     	; 0x4ca4 <vfprintf+0x1a0>
    4c96:	1a c0       	rjmp	.+52     	; 0x4ccc <vfprintf+0x1c8>
    4c98:	80 e2       	ldi	r24, 0x20	; 32
    4c9a:	90 e0       	ldi	r25, 0x00	; 0
    4c9c:	b3 01       	movw	r22, r6
    4c9e:	0e 94 30 25 	call	0x4a60	; 0x4a60 <fputc>
    4ca2:	ea 94       	dec	r14
    4ca4:	8e 2d       	mov	r24, r14
    4ca6:	90 e0       	ldi	r25, 0x00	; 0
    4ca8:	08 17       	cp	r16, r24
    4caa:	19 07       	cpc	r17, r25
    4cac:	a8 f3       	brcs	.-22     	; 0x4c98 <vfprintf+0x194>
    4cae:	0e c0       	rjmp	.+28     	; 0x4ccc <vfprintf+0x1c8>
    4cb0:	f6 01       	movw	r30, r12
    4cb2:	f7 fc       	sbrc	r15, 7
    4cb4:	85 91       	lpm	r24, Z+
    4cb6:	f7 fe       	sbrs	r15, 7
    4cb8:	81 91       	ld	r24, Z+
    4cba:	6f 01       	movw	r12, r30
    4cbc:	90 e0       	ldi	r25, 0x00	; 0
    4cbe:	b3 01       	movw	r22, r6
    4cc0:	0e 94 30 25 	call	0x4a60	; 0x4a60 <fputc>
    4cc4:	e1 10       	cpse	r14, r1
    4cc6:	ea 94       	dec	r14
    4cc8:	01 50       	subi	r16, 0x01	; 1
    4cca:	10 40       	sbci	r17, 0x00	; 0
    4ccc:	01 15       	cp	r16, r1
    4cce:	11 05       	cpc	r17, r1
    4cd0:	79 f7       	brne	.-34     	; 0x4cb0 <vfprintf+0x1ac>
    4cd2:	ea c0       	rjmp	.+468    	; 0x4ea8 <vfprintf+0x3a4>
    4cd4:	94 36       	cpi	r25, 0x64	; 100
    4cd6:	11 f0       	breq	.+4      	; 0x4cdc <vfprintf+0x1d8>
    4cd8:	99 36       	cpi	r25, 0x69	; 105
    4cda:	69 f5       	brne	.+90     	; 0x4d36 <vfprintf+0x232>
    4cdc:	f7 fe       	sbrs	r15, 7
    4cde:	08 c0       	rjmp	.+16     	; 0x4cf0 <vfprintf+0x1ec>
    4ce0:	f5 01       	movw	r30, r10
    4ce2:	20 81       	ld	r18, Z
    4ce4:	31 81       	ldd	r19, Z+1	; 0x01
    4ce6:	42 81       	ldd	r20, Z+2	; 0x02
    4ce8:	53 81       	ldd	r21, Z+3	; 0x03
    4cea:	84 e0       	ldi	r24, 0x04	; 4
    4cec:	90 e0       	ldi	r25, 0x00	; 0
    4cee:	0a c0       	rjmp	.+20     	; 0x4d04 <vfprintf+0x200>
    4cf0:	f5 01       	movw	r30, r10
    4cf2:	80 81       	ld	r24, Z
    4cf4:	91 81       	ldd	r25, Z+1	; 0x01
    4cf6:	9c 01       	movw	r18, r24
    4cf8:	44 27       	eor	r20, r20
    4cfa:	37 fd       	sbrc	r19, 7
    4cfc:	40 95       	com	r20
    4cfe:	54 2f       	mov	r21, r20
    4d00:	82 e0       	ldi	r24, 0x02	; 2
    4d02:	90 e0       	ldi	r25, 0x00	; 0
    4d04:	a8 0e       	add	r10, r24
    4d06:	b9 1e       	adc	r11, r25
    4d08:	9f e6       	ldi	r25, 0x6F	; 111
    4d0a:	f9 22       	and	r15, r25
    4d0c:	57 ff       	sbrs	r21, 7
    4d0e:	09 c0       	rjmp	.+18     	; 0x4d22 <vfprintf+0x21e>
    4d10:	50 95       	com	r21
    4d12:	40 95       	com	r20
    4d14:	30 95       	com	r19
    4d16:	21 95       	neg	r18
    4d18:	3f 4f       	sbci	r19, 0xFF	; 255
    4d1a:	4f 4f       	sbci	r20, 0xFF	; 255
    4d1c:	5f 4f       	sbci	r21, 0xFF	; 255
    4d1e:	e0 e8       	ldi	r30, 0x80	; 128
    4d20:	fe 2a       	or	r15, r30
    4d22:	ca 01       	movw	r24, r20
    4d24:	b9 01       	movw	r22, r18
    4d26:	a1 01       	movw	r20, r2
    4d28:	2a e0       	ldi	r18, 0x0A	; 10
    4d2a:	30 e0       	ldi	r19, 0x00	; 0
    4d2c:	0e 94 75 27 	call	0x4eea	; 0x4eea <__ultoa_invert>
    4d30:	d8 2e       	mov	r13, r24
    4d32:	d2 18       	sub	r13, r2
    4d34:	40 c0       	rjmp	.+128    	; 0x4db6 <vfprintf+0x2b2>
    4d36:	95 37       	cpi	r25, 0x75	; 117
    4d38:	29 f4       	brne	.+10     	; 0x4d44 <vfprintf+0x240>
    4d3a:	1f 2d       	mov	r17, r15
    4d3c:	1f 7e       	andi	r17, 0xEF	; 239
    4d3e:	2a e0       	ldi	r18, 0x0A	; 10
    4d40:	30 e0       	ldi	r19, 0x00	; 0
    4d42:	1d c0       	rjmp	.+58     	; 0x4d7e <vfprintf+0x27a>
    4d44:	1f 2d       	mov	r17, r15
    4d46:	19 7f       	andi	r17, 0xF9	; 249
    4d48:	9f 36       	cpi	r25, 0x6F	; 111
    4d4a:	61 f0       	breq	.+24     	; 0x4d64 <vfprintf+0x260>
    4d4c:	90 37       	cpi	r25, 0x70	; 112
    4d4e:	20 f4       	brcc	.+8      	; 0x4d58 <vfprintf+0x254>
    4d50:	98 35       	cpi	r25, 0x58	; 88
    4d52:	09 f0       	breq	.+2      	; 0x4d56 <vfprintf+0x252>
    4d54:	ac c0       	rjmp	.+344    	; 0x4eae <vfprintf+0x3aa>
    4d56:	0f c0       	rjmp	.+30     	; 0x4d76 <vfprintf+0x272>
    4d58:	90 37       	cpi	r25, 0x70	; 112
    4d5a:	39 f0       	breq	.+14     	; 0x4d6a <vfprintf+0x266>
    4d5c:	98 37       	cpi	r25, 0x78	; 120
    4d5e:	09 f0       	breq	.+2      	; 0x4d62 <vfprintf+0x25e>
    4d60:	a6 c0       	rjmp	.+332    	; 0x4eae <vfprintf+0x3aa>
    4d62:	04 c0       	rjmp	.+8      	; 0x4d6c <vfprintf+0x268>
    4d64:	28 e0       	ldi	r18, 0x08	; 8
    4d66:	30 e0       	ldi	r19, 0x00	; 0
    4d68:	0a c0       	rjmp	.+20     	; 0x4d7e <vfprintf+0x27a>
    4d6a:	10 61       	ori	r17, 0x10	; 16
    4d6c:	14 fd       	sbrc	r17, 4
    4d6e:	14 60       	ori	r17, 0x04	; 4
    4d70:	20 e1       	ldi	r18, 0x10	; 16
    4d72:	30 e0       	ldi	r19, 0x00	; 0
    4d74:	04 c0       	rjmp	.+8      	; 0x4d7e <vfprintf+0x27a>
    4d76:	14 fd       	sbrc	r17, 4
    4d78:	16 60       	ori	r17, 0x06	; 6
    4d7a:	20 e1       	ldi	r18, 0x10	; 16
    4d7c:	32 e0       	ldi	r19, 0x02	; 2
    4d7e:	17 ff       	sbrs	r17, 7
    4d80:	08 c0       	rjmp	.+16     	; 0x4d92 <vfprintf+0x28e>
    4d82:	f5 01       	movw	r30, r10
    4d84:	60 81       	ld	r22, Z
    4d86:	71 81       	ldd	r23, Z+1	; 0x01
    4d88:	82 81       	ldd	r24, Z+2	; 0x02
    4d8a:	93 81       	ldd	r25, Z+3	; 0x03
    4d8c:	44 e0       	ldi	r20, 0x04	; 4
    4d8e:	50 e0       	ldi	r21, 0x00	; 0
    4d90:	08 c0       	rjmp	.+16     	; 0x4da2 <vfprintf+0x29e>
    4d92:	f5 01       	movw	r30, r10
    4d94:	80 81       	ld	r24, Z
    4d96:	91 81       	ldd	r25, Z+1	; 0x01
    4d98:	bc 01       	movw	r22, r24
    4d9a:	80 e0       	ldi	r24, 0x00	; 0
    4d9c:	90 e0       	ldi	r25, 0x00	; 0
    4d9e:	42 e0       	ldi	r20, 0x02	; 2
    4da0:	50 e0       	ldi	r21, 0x00	; 0
    4da2:	a4 0e       	add	r10, r20
    4da4:	b5 1e       	adc	r11, r21
    4da6:	a1 01       	movw	r20, r2
    4da8:	0e 94 75 27 	call	0x4eea	; 0x4eea <__ultoa_invert>
    4dac:	d8 2e       	mov	r13, r24
    4dae:	d2 18       	sub	r13, r2
    4db0:	8f e7       	ldi	r24, 0x7F	; 127
    4db2:	f8 2e       	mov	r15, r24
    4db4:	f1 22       	and	r15, r17
    4db6:	f6 fe       	sbrs	r15, 6
    4db8:	0b c0       	rjmp	.+22     	; 0x4dd0 <vfprintf+0x2cc>
    4dba:	5e ef       	ldi	r21, 0xFE	; 254
    4dbc:	f5 22       	and	r15, r21
    4dbe:	d9 14       	cp	r13, r9
    4dc0:	38 f4       	brcc	.+14     	; 0x4dd0 <vfprintf+0x2cc>
    4dc2:	f4 fe       	sbrs	r15, 4
    4dc4:	07 c0       	rjmp	.+14     	; 0x4dd4 <vfprintf+0x2d0>
    4dc6:	f2 fc       	sbrc	r15, 2
    4dc8:	05 c0       	rjmp	.+10     	; 0x4dd4 <vfprintf+0x2d0>
    4dca:	8f ee       	ldi	r24, 0xEF	; 239
    4dcc:	f8 22       	and	r15, r24
    4dce:	02 c0       	rjmp	.+4      	; 0x4dd4 <vfprintf+0x2d0>
    4dd0:	1d 2d       	mov	r17, r13
    4dd2:	01 c0       	rjmp	.+2      	; 0x4dd6 <vfprintf+0x2d2>
    4dd4:	19 2d       	mov	r17, r9
    4dd6:	f4 fe       	sbrs	r15, 4
    4dd8:	0d c0       	rjmp	.+26     	; 0x4df4 <vfprintf+0x2f0>
    4dda:	fe 01       	movw	r30, r28
    4ddc:	ed 0d       	add	r30, r13
    4dde:	f1 1d       	adc	r31, r1
    4de0:	80 81       	ld	r24, Z
    4de2:	80 33       	cpi	r24, 0x30	; 48
    4de4:	19 f4       	brne	.+6      	; 0x4dec <vfprintf+0x2e8>
    4de6:	99 ee       	ldi	r25, 0xE9	; 233
    4de8:	f9 22       	and	r15, r25
    4dea:	08 c0       	rjmp	.+16     	; 0x4dfc <vfprintf+0x2f8>
    4dec:	1f 5f       	subi	r17, 0xFF	; 255
    4dee:	f2 fe       	sbrs	r15, 2
    4df0:	05 c0       	rjmp	.+10     	; 0x4dfc <vfprintf+0x2f8>
    4df2:	03 c0       	rjmp	.+6      	; 0x4dfa <vfprintf+0x2f6>
    4df4:	8f 2d       	mov	r24, r15
    4df6:	86 78       	andi	r24, 0x86	; 134
    4df8:	09 f0       	breq	.+2      	; 0x4dfc <vfprintf+0x2f8>
    4dfa:	1f 5f       	subi	r17, 0xFF	; 255
    4dfc:	0f 2d       	mov	r16, r15
    4dfe:	f3 fc       	sbrc	r15, 3
    4e00:	14 c0       	rjmp	.+40     	; 0x4e2a <vfprintf+0x326>
    4e02:	f0 fe       	sbrs	r15, 0
    4e04:	0f c0       	rjmp	.+30     	; 0x4e24 <vfprintf+0x320>
    4e06:	1e 15       	cp	r17, r14
    4e08:	10 f0       	brcs	.+4      	; 0x4e0e <vfprintf+0x30a>
    4e0a:	9d 2c       	mov	r9, r13
    4e0c:	0b c0       	rjmp	.+22     	; 0x4e24 <vfprintf+0x320>
    4e0e:	9d 2c       	mov	r9, r13
    4e10:	9e 0c       	add	r9, r14
    4e12:	91 1a       	sub	r9, r17
    4e14:	1e 2d       	mov	r17, r14
    4e16:	06 c0       	rjmp	.+12     	; 0x4e24 <vfprintf+0x320>
    4e18:	80 e2       	ldi	r24, 0x20	; 32
    4e1a:	90 e0       	ldi	r25, 0x00	; 0
    4e1c:	b3 01       	movw	r22, r6
    4e1e:	0e 94 30 25 	call	0x4a60	; 0x4a60 <fputc>
    4e22:	1f 5f       	subi	r17, 0xFF	; 255
    4e24:	1e 15       	cp	r17, r14
    4e26:	c0 f3       	brcs	.-16     	; 0x4e18 <vfprintf+0x314>
    4e28:	04 c0       	rjmp	.+8      	; 0x4e32 <vfprintf+0x32e>
    4e2a:	1e 15       	cp	r17, r14
    4e2c:	10 f4       	brcc	.+4      	; 0x4e32 <vfprintf+0x32e>
    4e2e:	e1 1a       	sub	r14, r17
    4e30:	01 c0       	rjmp	.+2      	; 0x4e34 <vfprintf+0x330>
    4e32:	ee 24       	eor	r14, r14
    4e34:	04 ff       	sbrs	r16, 4
    4e36:	0f c0       	rjmp	.+30     	; 0x4e56 <vfprintf+0x352>
    4e38:	80 e3       	ldi	r24, 0x30	; 48
    4e3a:	90 e0       	ldi	r25, 0x00	; 0
    4e3c:	b3 01       	movw	r22, r6
    4e3e:	0e 94 30 25 	call	0x4a60	; 0x4a60 <fputc>
    4e42:	02 ff       	sbrs	r16, 2
    4e44:	1d c0       	rjmp	.+58     	; 0x4e80 <vfprintf+0x37c>
    4e46:	01 fd       	sbrc	r16, 1
    4e48:	03 c0       	rjmp	.+6      	; 0x4e50 <vfprintf+0x34c>
    4e4a:	88 e7       	ldi	r24, 0x78	; 120
    4e4c:	90 e0       	ldi	r25, 0x00	; 0
    4e4e:	0e c0       	rjmp	.+28     	; 0x4e6c <vfprintf+0x368>
    4e50:	88 e5       	ldi	r24, 0x58	; 88
    4e52:	90 e0       	ldi	r25, 0x00	; 0
    4e54:	0b c0       	rjmp	.+22     	; 0x4e6c <vfprintf+0x368>
    4e56:	80 2f       	mov	r24, r16
    4e58:	86 78       	andi	r24, 0x86	; 134
    4e5a:	91 f0       	breq	.+36     	; 0x4e80 <vfprintf+0x37c>
    4e5c:	01 ff       	sbrs	r16, 1
    4e5e:	02 c0       	rjmp	.+4      	; 0x4e64 <vfprintf+0x360>
    4e60:	8b e2       	ldi	r24, 0x2B	; 43
    4e62:	01 c0       	rjmp	.+2      	; 0x4e66 <vfprintf+0x362>
    4e64:	80 e2       	ldi	r24, 0x20	; 32
    4e66:	f7 fc       	sbrc	r15, 7
    4e68:	8d e2       	ldi	r24, 0x2D	; 45
    4e6a:	90 e0       	ldi	r25, 0x00	; 0
    4e6c:	b3 01       	movw	r22, r6
    4e6e:	0e 94 30 25 	call	0x4a60	; 0x4a60 <fputc>
    4e72:	06 c0       	rjmp	.+12     	; 0x4e80 <vfprintf+0x37c>
    4e74:	80 e3       	ldi	r24, 0x30	; 48
    4e76:	90 e0       	ldi	r25, 0x00	; 0
    4e78:	b3 01       	movw	r22, r6
    4e7a:	0e 94 30 25 	call	0x4a60	; 0x4a60 <fputc>
    4e7e:	9a 94       	dec	r9
    4e80:	d9 14       	cp	r13, r9
    4e82:	c0 f3       	brcs	.-16     	; 0x4e74 <vfprintf+0x370>
    4e84:	da 94       	dec	r13
    4e86:	f1 01       	movw	r30, r2
    4e88:	ed 0d       	add	r30, r13
    4e8a:	f1 1d       	adc	r31, r1
    4e8c:	80 81       	ld	r24, Z
    4e8e:	90 e0       	ldi	r25, 0x00	; 0
    4e90:	b3 01       	movw	r22, r6
    4e92:	0e 94 30 25 	call	0x4a60	; 0x4a60 <fputc>
    4e96:	dd 20       	and	r13, r13
    4e98:	a9 f7       	brne	.-22     	; 0x4e84 <vfprintf+0x380>
    4e9a:	06 c0       	rjmp	.+12     	; 0x4ea8 <vfprintf+0x3a4>
    4e9c:	80 e2       	ldi	r24, 0x20	; 32
    4e9e:	90 e0       	ldi	r25, 0x00	; 0
    4ea0:	b3 01       	movw	r22, r6
    4ea2:	0e 94 30 25 	call	0x4a60	; 0x4a60 <fputc>
    4ea6:	ea 94       	dec	r14
    4ea8:	ee 20       	and	r14, r14
    4eaa:	c1 f7       	brne	.-16     	; 0x4e9c <vfprintf+0x398>
    4eac:	43 ce       	rjmp	.-890    	; 0x4b34 <vfprintf+0x30>
    4eae:	f3 01       	movw	r30, r6
    4eb0:	66 81       	ldd	r22, Z+6	; 0x06
    4eb2:	77 81       	ldd	r23, Z+7	; 0x07
    4eb4:	cb 01       	movw	r24, r22
    4eb6:	2b 96       	adiw	r28, 0x0b	; 11
    4eb8:	e2 e1       	ldi	r30, 0x12	; 18
    4eba:	0c 94 ef 27 	jmp	0x4fde	; 0x4fde <__epilogue_restores__>

00004ebe <strnlen_P>:
    4ebe:	fc 01       	movw	r30, r24
    4ec0:	05 90       	lpm	r0, Z+
    4ec2:	61 50       	subi	r22, 0x01	; 1
    4ec4:	70 40       	sbci	r23, 0x00	; 0
    4ec6:	01 10       	cpse	r0, r1
    4ec8:	d8 f7       	brcc	.-10     	; 0x4ec0 <strnlen_P+0x2>
    4eca:	80 95       	com	r24
    4ecc:	90 95       	com	r25
    4ece:	8e 0f       	add	r24, r30
    4ed0:	9f 1f       	adc	r25, r31
    4ed2:	08 95       	ret

00004ed4 <strnlen>:
    4ed4:	fc 01       	movw	r30, r24
    4ed6:	61 50       	subi	r22, 0x01	; 1
    4ed8:	70 40       	sbci	r23, 0x00	; 0
    4eda:	01 90       	ld	r0, Z+
    4edc:	01 10       	cpse	r0, r1
    4ede:	d8 f7       	brcc	.-10     	; 0x4ed6 <strnlen+0x2>
    4ee0:	80 95       	com	r24
    4ee2:	90 95       	com	r25
    4ee4:	8e 0f       	add	r24, r30
    4ee6:	9f 1f       	adc	r25, r31
    4ee8:	08 95       	ret

00004eea <__ultoa_invert>:
    4eea:	fa 01       	movw	r30, r20
    4eec:	aa 27       	eor	r26, r26
    4eee:	28 30       	cpi	r18, 0x08	; 8
    4ef0:	51 f1       	breq	.+84     	; 0x4f46 <__ultoa_invert+0x5c>
    4ef2:	20 31       	cpi	r18, 0x10	; 16
    4ef4:	81 f1       	breq	.+96     	; 0x4f56 <__ultoa_invert+0x6c>
    4ef6:	e8 94       	clt
    4ef8:	6f 93       	push	r22
    4efa:	6e 7f       	andi	r22, 0xFE	; 254
    4efc:	6e 5f       	subi	r22, 0xFE	; 254
    4efe:	7f 4f       	sbci	r23, 0xFF	; 255
    4f00:	8f 4f       	sbci	r24, 0xFF	; 255
    4f02:	9f 4f       	sbci	r25, 0xFF	; 255
    4f04:	af 4f       	sbci	r26, 0xFF	; 255
    4f06:	b1 e0       	ldi	r27, 0x01	; 1
    4f08:	3e d0       	rcall	.+124    	; 0x4f86 <__ultoa_invert+0x9c>
    4f0a:	b4 e0       	ldi	r27, 0x04	; 4
    4f0c:	3c d0       	rcall	.+120    	; 0x4f86 <__ultoa_invert+0x9c>
    4f0e:	67 0f       	add	r22, r23
    4f10:	78 1f       	adc	r23, r24
    4f12:	89 1f       	adc	r24, r25
    4f14:	9a 1f       	adc	r25, r26
    4f16:	a1 1d       	adc	r26, r1
    4f18:	68 0f       	add	r22, r24
    4f1a:	79 1f       	adc	r23, r25
    4f1c:	8a 1f       	adc	r24, r26
    4f1e:	91 1d       	adc	r25, r1
    4f20:	a1 1d       	adc	r26, r1
    4f22:	6a 0f       	add	r22, r26
    4f24:	71 1d       	adc	r23, r1
    4f26:	81 1d       	adc	r24, r1
    4f28:	91 1d       	adc	r25, r1
    4f2a:	a1 1d       	adc	r26, r1
    4f2c:	20 d0       	rcall	.+64     	; 0x4f6e <__ultoa_invert+0x84>
    4f2e:	09 f4       	brne	.+2      	; 0x4f32 <__ultoa_invert+0x48>
    4f30:	68 94       	set
    4f32:	3f 91       	pop	r19
    4f34:	2a e0       	ldi	r18, 0x0A	; 10
    4f36:	26 9f       	mul	r18, r22
    4f38:	11 24       	eor	r1, r1
    4f3a:	30 19       	sub	r19, r0
    4f3c:	30 5d       	subi	r19, 0xD0	; 208
    4f3e:	31 93       	st	Z+, r19
    4f40:	de f6       	brtc	.-74     	; 0x4ef8 <__ultoa_invert+0xe>
    4f42:	cf 01       	movw	r24, r30
    4f44:	08 95       	ret
    4f46:	46 2f       	mov	r20, r22
    4f48:	47 70       	andi	r20, 0x07	; 7
    4f4a:	40 5d       	subi	r20, 0xD0	; 208
    4f4c:	41 93       	st	Z+, r20
    4f4e:	b3 e0       	ldi	r27, 0x03	; 3
    4f50:	0f d0       	rcall	.+30     	; 0x4f70 <__ultoa_invert+0x86>
    4f52:	c9 f7       	brne	.-14     	; 0x4f46 <__ultoa_invert+0x5c>
    4f54:	f6 cf       	rjmp	.-20     	; 0x4f42 <__ultoa_invert+0x58>
    4f56:	46 2f       	mov	r20, r22
    4f58:	4f 70       	andi	r20, 0x0F	; 15
    4f5a:	40 5d       	subi	r20, 0xD0	; 208
    4f5c:	4a 33       	cpi	r20, 0x3A	; 58
    4f5e:	18 f0       	brcs	.+6      	; 0x4f66 <__ultoa_invert+0x7c>
    4f60:	49 5d       	subi	r20, 0xD9	; 217
    4f62:	31 fd       	sbrc	r19, 1
    4f64:	40 52       	subi	r20, 0x20	; 32
    4f66:	41 93       	st	Z+, r20
    4f68:	02 d0       	rcall	.+4      	; 0x4f6e <__ultoa_invert+0x84>
    4f6a:	a9 f7       	brne	.-22     	; 0x4f56 <__ultoa_invert+0x6c>
    4f6c:	ea cf       	rjmp	.-44     	; 0x4f42 <__ultoa_invert+0x58>
    4f6e:	b4 e0       	ldi	r27, 0x04	; 4
    4f70:	a6 95       	lsr	r26
    4f72:	97 95       	ror	r25
    4f74:	87 95       	ror	r24
    4f76:	77 95       	ror	r23
    4f78:	67 95       	ror	r22
    4f7a:	ba 95       	dec	r27
    4f7c:	c9 f7       	brne	.-14     	; 0x4f70 <__ultoa_invert+0x86>
    4f7e:	00 97       	sbiw	r24, 0x00	; 0
    4f80:	61 05       	cpc	r22, r1
    4f82:	71 05       	cpc	r23, r1
    4f84:	08 95       	ret
    4f86:	9b 01       	movw	r18, r22
    4f88:	ac 01       	movw	r20, r24
    4f8a:	0a 2e       	mov	r0, r26
    4f8c:	06 94       	lsr	r0
    4f8e:	57 95       	ror	r21
    4f90:	47 95       	ror	r20
    4f92:	37 95       	ror	r19
    4f94:	27 95       	ror	r18
    4f96:	ba 95       	dec	r27
    4f98:	c9 f7       	brne	.-14     	; 0x4f8c <__ultoa_invert+0xa2>
    4f9a:	62 0f       	add	r22, r18
    4f9c:	73 1f       	adc	r23, r19
    4f9e:	84 1f       	adc	r24, r20
    4fa0:	95 1f       	adc	r25, r21
    4fa2:	a0 1d       	adc	r26, r0
    4fa4:	08 95       	ret

00004fa6 <__prologue_saves__>:
    4fa6:	2f 92       	push	r2
    4fa8:	3f 92       	push	r3
    4faa:	4f 92       	push	r4
    4fac:	5f 92       	push	r5
    4fae:	6f 92       	push	r6
    4fb0:	7f 92       	push	r7
    4fb2:	8f 92       	push	r8
    4fb4:	9f 92       	push	r9
    4fb6:	af 92       	push	r10
    4fb8:	bf 92       	push	r11
    4fba:	cf 92       	push	r12
    4fbc:	df 92       	push	r13
    4fbe:	ef 92       	push	r14
    4fc0:	ff 92       	push	r15
    4fc2:	0f 93       	push	r16
    4fc4:	1f 93       	push	r17
    4fc6:	cf 93       	push	r28
    4fc8:	df 93       	push	r29
    4fca:	cd b7       	in	r28, 0x3d	; 61
    4fcc:	de b7       	in	r29, 0x3e	; 62
    4fce:	ca 1b       	sub	r28, r26
    4fd0:	db 0b       	sbc	r29, r27
    4fd2:	0f b6       	in	r0, 0x3f	; 63
    4fd4:	f8 94       	cli
    4fd6:	de bf       	out	0x3e, r29	; 62
    4fd8:	0f be       	out	0x3f, r0	; 63
    4fda:	cd bf       	out	0x3d, r28	; 61
    4fdc:	09 94       	ijmp

00004fde <__epilogue_restores__>:
    4fde:	2a 88       	ldd	r2, Y+18	; 0x12
    4fe0:	39 88       	ldd	r3, Y+17	; 0x11
    4fe2:	48 88       	ldd	r4, Y+16	; 0x10
    4fe4:	5f 84       	ldd	r5, Y+15	; 0x0f
    4fe6:	6e 84       	ldd	r6, Y+14	; 0x0e
    4fe8:	7d 84       	ldd	r7, Y+13	; 0x0d
    4fea:	8c 84       	ldd	r8, Y+12	; 0x0c
    4fec:	9b 84       	ldd	r9, Y+11	; 0x0b
    4fee:	aa 84       	ldd	r10, Y+10	; 0x0a
    4ff0:	b9 84       	ldd	r11, Y+9	; 0x09
    4ff2:	c8 84       	ldd	r12, Y+8	; 0x08
    4ff4:	df 80       	ldd	r13, Y+7	; 0x07
    4ff6:	ee 80       	ldd	r14, Y+6	; 0x06
    4ff8:	fd 80       	ldd	r15, Y+5	; 0x05
    4ffa:	0c 81       	ldd	r16, Y+4	; 0x04
    4ffc:	1b 81       	ldd	r17, Y+3	; 0x03
    4ffe:	aa 81       	ldd	r26, Y+2	; 0x02
    5000:	b9 81       	ldd	r27, Y+1	; 0x01
    5002:	ce 0f       	add	r28, r30
    5004:	d1 1d       	adc	r29, r1
    5006:	0f b6       	in	r0, 0x3f	; 63
    5008:	f8 94       	cli
    500a:	de bf       	out	0x3e, r29	; 62
    500c:	0f be       	out	0x3f, r0	; 63
    500e:	cd bf       	out	0x3d, r28	; 61
    5010:	ed 01       	movw	r28, r26
    5012:	08 95       	ret

00005014 <_exit>:
    5014:	f8 94       	cli

00005016 <__stop_program>:
    5016:	ff cf       	rjmp	.-2      	; 0x5016 <__stop_program>
